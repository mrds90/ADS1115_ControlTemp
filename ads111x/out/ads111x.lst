
MyCIAAPrograms/ADS1115_ControlTemp/ads111x/out/ads111x.elf:     file format elf32-littlearm
MyCIAAPrograms/ADS1115_ControlTemp/ads111x/out/ads111x.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000869

Program Header:
0x70000001 off    0x000171e0 vaddr 0x1a0071e0 paddr 0x1a0071e0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000b28 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000071e8 memsz 0x000071e8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0071e8 align 2**16
         filesz 0x000009f4 memsz 0x000009f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000071dc  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009f4  10000000  1a0071e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
  6 .bss          00000130  100009f8  100009f8  000009f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a0071dc  1a0071dc  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0071e0  1a0071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 18 .noinit       00000000  10000b28  10000b28  000209f4  2**2
                  CONTENTS
 19 .debug_info   000271ab  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004ff2  00000000  00000000  00047b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008501  00000000  00000000  0004cb91  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ac8  00000000  00000000  00055092  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000b58  00000000  00000000  00055b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000ea47  00000000  00000000  000566b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00014dd9  00000000  00000000  000650f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002a7e4  00000000  00000000  00079ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a46b6  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000a471e  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000024bc  00000000  00000000  000a4750  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0071dc l    d  .init_array	00000000 .init_array
1a0071e0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b28 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ads111x_driver.c
1a000300 l     F .text	00000010 ADS111x_WriteRegister
1a000310 l     F .text	00000024 ADS111x_ReadRegister
1a000334 l     F .text	0000003c ADS111x_SetConfiguration
100009f8 l     O .bss	0000000c ads111x_i2c
1a006c50 l     O .text	00000012 ads111x_config_bit
1a006c64 l     O .text	00000012 ads111x_config_mask
00000000 l    df *ABS*	00000000 i2c_custom.c
00000000 l    df *ABS*	00000000 port.c
1a0004a6 l     F .text	00000020 PORT_i2cWriteRead
1a0004c6 l     F .text	00000020 PORT_i2cWrite
1a0004e8 l     F .text	00000010 PORT_i2cInit
00000000 l    df *ABS*	00000000 app.c
1a000514 l     F .text	0000001c ConutsToTemp
1a000530 l     F .text	00000018 TempToCounts
1a000548 l     F .text	00000034 SetNewSetTreshold
1a00057c l     F .text	00000058 ADS1115_Init
10000a04 l     O .bss	00000004 ads1115_0
10000000 l     O .data	00000002 temperature_setpoint
00000000 l    df *ABS*	00000000 button.c
1a000714 l     F .text	00000008 buttonReleased
1a00071c l     F .text	00000008 buttonPressed
1a000724 l     F .text	00000040 RisingState
1a000764 l     F .text	00000016 DownState
1a00077a l     F .text	00000040 FallingState
1a0007ba l     F .text	00000016 UpState
10000a08 l     O .bss	000000a0 teclas
00000000 l    df *ABS*	00000000 system.c
10000aa8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a000914 l     F .text	00000044 Board_LED_Init
1a000958 l     F .text	00000040 Board_TEC_Init
1a000998 l     F .text	00000040 Board_GPIO_Init
1a0009d8 l     F .text	00000030 Board_ADC_Init
1a000a08 l     F .text	00000038 Board_SPI_Init
1a000a40 l     F .text	00000024 Board_I2C_Init
1a006cb0 l     O .text	00000008 GpioButtons
1a006cb8 l     O .text	0000000c GpioLeds
1a006cc4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006cdc l     O .text	00000004 InitClkStates
1a006ce0 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000e68 l     F .text	0000002c Chip_UART_GetIndex
1a006d54 l     O .text	00000008 UART_BClock
1a006d5c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000fc4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000fd8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0010a0 l     F .text	000000a0 pll_calc_divs
1a001140 l     F .text	0000010c pll_get_frac
1a00124c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0014c0 l     F .text	00000022 Chip_Clock_GetDivRate
10000aac l     O .bss	00000008 audio_usb_pll_freq
1a006d70 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006ddc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001788 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00179c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006e24 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000ab4 l     O .bss	00000004 callBackFuncParams
10000ab8 l     O .bss	00000008 tickCounter
10000ac0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0019b8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000ac4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a00709c l     O .text	00000010 blanks.8678
1a0070ac l     O .text	00000010 zeroes.8679
00000000 l    df *ABS*	00000000 dtoa.c
1a004f5c l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a0071c0 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a0071e0 l       .init_array	00000000 __init_array_end
1a0071dc l       .bss_RAM5	00000000 __preinit_array_end
1a0071dc l       .init_array	00000000 __init_array_start
1a0071dc l       .bss_RAM5	00000000 __preinit_array_start
1a002608 g     F .text	0000002c .hidden __aeabi_dcmpun
1a0012e4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0025cc g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002508 g     F .text	0000007a .hidden __cmpdf2
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000474 g     F .text	00000010 i2c_MasterSend
1a002508 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002078 g     F .text	0000005a .hidden __floatdidf
1a00049c g     F .text	0000000a I2C0_IRQHandler
1a000ab8 g     F .text	00000008 __stdio_init
10000b04 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a000434 g     F .text	00000040 i2c_Init
1a001d1c g     F .text	0000003e delayRead
1a000394 g     F .text	0000000e ADS111x_SetThresholdLow
1a00017a  w    F .text	00000002 HardFault_Handler
1a000b90 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a00107e g     F .text	0000000c Chip_ADC_SetResolution
1a0033b4 g     F .text	0000000c __malloc_unlock
1a00198c g     F .text	0000002c SysTick_Handler
10000b08 g     O .bss	00000001 __lock___arc4random_mutex
1a000864  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a005f80 g     F .text	000000ce memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a006050 g     F .text	0000004c _Balloc
1a0071e8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0024f8 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a000dd0 g     F .text	0000002e Chip_I2C_MasterSend
53ff7026 g       *ABS*	00000000 __valid_user_code_checksum
1a000d3c g     F .text	00000094 Chip_I2C_MasterTransfer
1a0071e8 g       .ARM.exidx	00000000 _etext
1a002594 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001562 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0031d4 g     F .text	00000134 memcpy
1a002584 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003520 g     F .text	00001a3c _svfprintf_r
1a002000 g     F .text	00000022 .hidden __floatsidf
1a000e38 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a0007fc g     F .text	00000040 FSMButtonUpdate
1a002500 g     F .text	00000082 .hidden __ltdf2
1a002684 g     F .text	00000000 .hidden __aeabi_uldivmod
10000b28 g       .noinit	00000000 _noinit
1a0018d6 g     F .text	00000016 uartWriteString
10000afc g     O .bss	00000004 SystemCoreClock
1a000e94 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0070f8 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a0015e0 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000af8 g     O .bss	00000004 __malloc_top_pad
1a000af8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001fe0 g     F .text	0000001e .hidden __aeabi_ui2d
1a005ed4 g     F .text	00000008 _localeconv_r
1a0061dc g     F .text	00000012 __i2b
1a000d0c g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0003c8 g     F .text	00000040 ADS111x_Init
1a0026b4 g     F .text	000002d0 .hidden __udivmoddi4
1a001d5c g     F .text	00000000 .hidden __aeabi_drsub
1a0008f4 g     F .text	00000020 _sbrk_r
1a006cac g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000484 g     F .text	00000018 i2c_MasterReceive
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000386 g     F .text	0000000e ADS111x_Read
1a0025b8 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
10000af0 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002024 g     F .text	00000042 .hidden __extendsfdf2
1a002328 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001d68 g     F .text	00000276 .hidden __adddf3
1a0071e0 g       .ARM.exidx	00000000 __exidx_start
10000b0c g     O .bss	00000001 __lock___env_recursive_mutex
1a0020d4 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000b10 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a006664 g     F .text	0000036c _realloc_r
1a002c14 g     F .text	00000048 __libc_init_array
1a0070d0 g     O .text	00000028 __mprec_bigtens
1a001fe0 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a006474 g     F .text	00000038 __mcmp
1a000a88 g     F .text	00000030 Board_Init
1a0008f2  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000b28 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000868 g     F .text	00000088 Reset_Handler
1a001910 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00613c g     F .text	00000040 __hi0bits
1a000cd4 g     F .text	00000038 Chip_I2C_SetClockRate
1a002634 g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0004f8 g     F .text	0000001c PORT_Init
1a001298 g     F .text	0000004c Chip_Clock_EnableCrystal
10000b14 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001d68 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002500 g     F .text	00000082 .hidden __ledf2
1a006320 g     F .text	000000a0 __pow5mult
1a002068 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000cb0 g     F .text	00000024 Chip_I2C_Init
1a002c60 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001454 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0003b0 g     F .text	0000000c ADS111x_SetMultiplexer
1a006e6c g     O .text	000000e6 gpioPinsInit
1a0018bc g     F .text	0000001a uartWriteByte
1a0017b4 g     F .text	00000012 Chip_SSP_SetClockRate
1a0025f4 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a005ee0 g     F .text	00000000 memchr
1a002a28 g     F .text	000001ec _free_r
1a00153c g     F .text	00000026 Chip_Clock_GetBaseClock
1a0025e0 g     F .text	00000012 .hidden __aeabi_dcmpge
1a000370 g     F .text	00000016 ADS111x_StartConversion
1a000408 g     F .text	0000000c ADS111x_SetDataRate
100009f8 g       .bss	00000000 _bss
1a00104c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001d64 g     F .text	0000027a .hidden __aeabi_dsub
10000880 g     O .data	00000004 __malloc_sbrk_base
1a0003bc g     F .text	0000000c ADS111x_SetGain
1a001cfc g     F .text	00000020 delayInit
1a002068 g     F .text	0000006a .hidden __floatundidf
1a0063c0 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a006ab0 g     F .text	000000f6 __ssprint_r
1a0017c6 g     F .text	0000003e Chip_SSP_SetBitRate
1a0007d0 g     F .text	0000002c FSMButtonInit
1a001784 g     F .text	00000002 Chip_GPIO_Init
1a006cd8 g     O .text	00000004 OscRateIn
1a0003a2 g     F .text	0000000e ADS111x_SetThresholdHigh
1a0061f0 g     F .text	00000130 __multiply
10000b28 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a006a3c g     F .text	00000072 strncpy
10000ac8 g     O .bss	00000028 __malloc_current_mallinfo
1a0065a4 g     F .text	000000be __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002000 g     F .text	00000022 .hidden __aeabi_i2d
1a0019ec g     F .text	000001ac gpioInit
1a00083c g     F .text	00000028 CheckFallState
1a002984  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002328 g     F .text	000001d0 .hidden __divdf3
10000478 g     O .data	00000408 __malloc_av_
1a0020d4 g     F .text	00000254 .hidden __muldf3
1a001c6c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0033a8 g     F .text	0000000c __malloc_lock
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a006ba8 g     F .text	0000005e _calloc_r
1a001300 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002c5c g     F .text	00000002 __retarget_lock_acquire_recursive
1a003308 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005d4 g     F .text	00000140 main
10000af4 g     O .bss	00000004 __malloc_max_total_mem
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a005080 g     F .text	00000e54 _dtoa_r
1a002c64 g     F .text	00000570 _malloc_r
1a006c34 g     F .text	0000001a __ascii_wctomb
1a002078 g     F .text	0000005a .hidden __aeabi_l2d
1a001890 g     F .text	00000018 uartTxReady
1a000414 g     F .text	0000000c ADS111x_SetMode
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001570 g     F .text	0000003c Chip_Clock_EnableOpts
1a002988 g     F .text	000000a0 _malloc_trim_r
1a00131c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0013d4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00183c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002508 g     F .text	0000007a .hidden __nedf2
1a001b98 g     F .text	0000006a gpioWrite
1a0008f0  w    F .text	00000002 _fini
1a0033c0 g     F .text	00000044 sprintf
1a00100c g     F .text	00000040 Chip_ADC_Init
10000b00 g     O .bss	00000004 g_pUsbApi
1a000ac0 g     F .text	00000038 Board_SetupMuxing
1a000ee8 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0018ec g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0018a8 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a006c08 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000b28 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001804 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000a64 g     F .text	00000024 Board_Debug_Init
1a0025a4 g     F .text	00000012 .hidden __aeabi_dcmpeq
100009f4 g       .data	00000000 _edata
1a000b70 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000b18 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a00162c g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a00108c g     F .text	00000014 SystemCoreClockUpdate
1a0064ac g     F .text	000000f8 __mdiff
1a002634 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a006f54 g     O .text	00000101 _ctype_
1a002984  w    F .text	00000002 .hidden __aeabi_idiv0
1a002608 g     F .text	0000002c .hidden __unorddf2
1a000dfe g     F .text	00000038 Chip_I2C_MasterCmdRead
1a00017e  w    F .text	00000002 BusFault_Handler
10000b1c g     O .bss	00000001 __lock___dd_hash_mutex
10000b20 g     O .bss	00000001 __lock___tz_mutex
1a003440 g     F .text	000000dc strlen
1a0015ac g     F .text	00000034 Chip_Clock_Enable
1a002594 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a0024f8 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001c02 g     F .text	00000068 gpioRead
1a002024 g     F .text	00000042 .hidden __aeabi_f2d
1a001c88 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a001d64 g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00617c g     F .text	00000060 __lo0bits
1a0018f8 g     F .text	00000018 tickPowerSet
1a000420 g     F .text	00000014 ADS111x_SetComparatorQueue
1a0069d0 g     F .text	0000006c frexp
10000888 g     O .data	0000016c __global_locale
1a0014e4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001874 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000b24 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000b64 g     F .text	0000000c Board_SystemInit
1a0060b0 g     F .text	0000008a __multadd
1a00609c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 08 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 70 ff 53     }...........&p.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	8d 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	6d 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     m...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a 9d 04 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0071e8 	.word	0x1a0071e8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009f4 	.word	0x000009f4
1a000120:	1a0071e8 	.word	0x1a0071e8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0071e8 	.word	0x1a0071e8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0071e8 	.word	0x1a0071e8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0071e8 	.word	0x1a0071e8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009f8 	.word	0x100009f8
1a000154:	00000130 	.word	0x00000130
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ADS111x_WriteRegister>:
    }
}

/*=====[Implementations of private functions]===============================*/

static void ADS111x_WriteRegister(ads111x_addr_t i2c_address, ads111x_reg_t reg, uint16_t value) {
1a000300:	b508      	push	{r3, lr}
    ads111x_i2c.Write(i2c_address, reg, value);
1a000302:	4b02      	ldr	r3, [pc, #8]	; (1a00030c <ADS111x_WriteRegister+0xc>)
1a000304:	685b      	ldr	r3, [r3, #4]
1a000306:	4798      	blx	r3
}
1a000308:	bd08      	pop	{r3, pc}
1a00030a:	bf00      	nop
1a00030c:	100009f8 	.word	0x100009f8

1a000310 <ADS111x_ReadRegister>:

static uint16_t ADS111x_ReadRegister(uint8_t i2c_address, uint8_t reg) {
1a000310:	b500      	push	{lr}
1a000312:	b083      	sub	sp, #12
    uint16_t value = 0;
1a000314:	2300      	movs	r3, #0
1a000316:	f8ad 3006 	strh.w	r3, [sp, #6]
    ads111x_i2c.WriteRead(i2c_address, reg, &value);
1a00031a:	4b05      	ldr	r3, [pc, #20]	; (1a000330 <ADS111x_ReadRegister+0x20>)
1a00031c:	689b      	ldr	r3, [r3, #8]
1a00031e:	f10d 0206 	add.w	r2, sp, #6
1a000322:	4798      	blx	r3
    return value;
  
}
1a000324:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a000328:	b003      	add	sp, #12
1a00032a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00032e:	bf00      	nop
1a000330:	100009f8 	.word	0x100009f8

1a000334 <ADS111x_SetConfiguration>:

static void ADS111x_SetConfiguration(ads111x_obj_t *ptr_asd111x, ads111x_config_field_t field, uint8_t field_config) {
1a000334:	b510      	push	{r4, lr}
    if (field_config <= (ads111x_config_mask[field]>>ads111x_config_bit[field])) {
1a000336:	4b0c      	ldr	r3, [pc, #48]	; (1a000368 <ADS111x_SetConfiguration+0x34>)
1a000338:	f833 4011 	ldrh.w	r4, [r3, r1, lsl #1]
1a00033c:	4b0b      	ldr	r3, [pc, #44]	; (1a00036c <ADS111x_SetConfiguration+0x38>)
1a00033e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
1a000342:	fa44 f301 	asr.w	r3, r4, r1
1a000346:	429a      	cmp	r2, r3
1a000348:	dd00      	ble.n	1a00034c <ADS111x_SetConfiguration+0x18>
        ptr_asd111x->configuration &= ~(ads111x_config_mask[field]);
        ptr_asd111x->configuration |= field_config << ads111x_config_bit[field];
        ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_CONFIG_REG,ptr_asd111x->configuration);
    }
}
1a00034a:	bd10      	pop	{r4, pc}
        ptr_asd111x->configuration &= ~(ads111x_config_mask[field]);
1a00034c:	8803      	ldrh	r3, [r0, #0]
1a00034e:	ea23 0304 	bic.w	r3, r3, r4
1a000352:	b21b      	sxth	r3, r3
        ptr_asd111x->configuration |= field_config << ads111x_config_bit[field];
1a000354:	408a      	lsls	r2, r1
1a000356:	431a      	orrs	r2, r3
1a000358:	b292      	uxth	r2, r2
1a00035a:	8002      	strh	r2, [r0, #0]
        ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_CONFIG_REG,ptr_asd111x->configuration);
1a00035c:	2101      	movs	r1, #1
1a00035e:	78c0      	ldrb	r0, [r0, #3]
1a000360:	f7ff ffce 	bl	1a000300 <ADS111x_WriteRegister>
}
1a000364:	e7f1      	b.n	1a00034a <ADS111x_SetConfiguration+0x16>
1a000366:	bf00      	nop
1a000368:	1a006c64 	.word	0x1a006c64
1a00036c:	1a006c50 	.word	0x1a006c50

1a000370 <ADS111x_StartConversion>:
void ADS111x_StartConversion(ads111x_obj_t *ptr_asd111x) {
1a000370:	b510      	push	{r4, lr}
1a000372:	4604      	mov	r4, r0
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_OS, ADS111X_START_CONVERSION);
1a000374:	2201      	movs	r2, #1
1a000376:	2108      	movs	r1, #8
1a000378:	f7ff ffdc 	bl	1a000334 <ADS111x_SetConfiguration>
    ptr_asd111x->configuration &=~ADS111X_CONFIG_FIELD_OS_MASK; // Clear OS bit to avoid unnecessary conversion cmd when a configuration is performed
1a00037c:	8823      	ldrh	r3, [r4, #0]
1a00037e:	f3c3 030e 	ubfx	r3, r3, #0, #15
1a000382:	8023      	strh	r3, [r4, #0]
}
1a000384:	bd10      	pop	{r4, pc}

1a000386 <ADS111x_Read>:
int16_t ADS111x_Read(ads111x_obj_t *ptr_asd111x) {
1a000386:	b508      	push	{r3, lr}
    data = ADS111x_ReadRegister(ptr_asd111x->i2c_address,ADS111X_CONVERSION_REG);   
1a000388:	2100      	movs	r1, #0
1a00038a:	78c0      	ldrb	r0, [r0, #3]
1a00038c:	f7ff ffc0 	bl	1a000310 <ADS111x_ReadRegister>
}
1a000390:	b200      	sxth	r0, r0
1a000392:	bd08      	pop	{r3, pc}

1a000394 <ADS111x_SetThresholdLow>:
void ADS111x_SetThresholdLow(ads111x_obj_t *ptr_asd111x, uint16_t threshold) {
1a000394:	b508      	push	{r3, lr}
    ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_LO_THRESH_REG,threshold);
1a000396:	460a      	mov	r2, r1
1a000398:	2102      	movs	r1, #2
1a00039a:	78c0      	ldrb	r0, [r0, #3]
1a00039c:	f7ff ffb0 	bl	1a000300 <ADS111x_WriteRegister>
}
1a0003a0:	bd08      	pop	{r3, pc}

1a0003a2 <ADS111x_SetThresholdHigh>:
void ADS111x_SetThresholdHigh(ads111x_obj_t *ptr_asd111x, uint16_t threshold) {
1a0003a2:	b508      	push	{r3, lr}
    ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_HI_THRESH_REG,threshold);
1a0003a4:	460a      	mov	r2, r1
1a0003a6:	2103      	movs	r1, #3
1a0003a8:	78c0      	ldrb	r0, [r0, #3]
1a0003aa:	f7ff ffa9 	bl	1a000300 <ADS111x_WriteRegister>
}
1a0003ae:	bd08      	pop	{r3, pc}

1a0003b0 <ADS111x_SetMultiplexer>:
void ADS111x_SetMultiplexer(ads111x_obj_t *ptr_asd111x, ads111x_mux_t mux) {
1a0003b0:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_MUX, mux);
1a0003b2:	460a      	mov	r2, r1
1a0003b4:	2107      	movs	r1, #7
1a0003b6:	f7ff ffbd 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a0003ba:	bd08      	pop	{r3, pc}

1a0003bc <ADS111x_SetGain>:
void ADS111x_SetGain(ads111x_obj_t *ptr_asd111x, ads111x_pga_t gain) {
1a0003bc:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_PGA, gain);
1a0003be:	460a      	mov	r2, r1
1a0003c0:	2106      	movs	r1, #6
1a0003c2:	f7ff ffb7 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a0003c6:	bd08      	pop	{r3, pc}

1a0003c8 <ADS111x_Init>:
uint8_t ADS111x_Init(ads111x_obj_t *ptr_asd111x, ads111x_addr_t i2c_address, ads111x_pga_t gain, ads111x_device_t device, ads111x_i2c_t *port) {
1a0003c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0003cc:	4604      	mov	r4, r0
1a0003ce:	460f      	mov	r7, r1
1a0003d0:	4616      	mov	r6, r2
1a0003d2:	4698      	mov	r8, r3
1a0003d4:	9b06      	ldr	r3, [sp, #24]
    if (port != NULL) {
1a0003d6:	b12b      	cbz	r3, 1a0003e4 <ADS111x_Init+0x1c>
        ads111x_i2c = *port;
1a0003d8:	4d0a      	ldr	r5, [pc, #40]	; (1a000404 <ADS111x_Init+0x3c>)
1a0003da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a0003de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        port->Init();
1a0003e2:	4780      	blx	r0
    if (ptr_asd111x!=NULL) {
1a0003e4:	b164      	cbz	r4, 1a000400 <ADS111x_Init+0x38>
        ptr_asd111x->device = device;
1a0003e6:	f884 8002 	strb.w	r8, [r4, #2]
        ptr_asd111x->i2c_address = i2c_address;
1a0003ea:	70e7      	strb	r7, [r4, #3]
        ptr_asd111x->configuration = ADS_111x_RESET_CONFIG & (~ADS111X_CONFIG_FIELD_OS_MASK);
1a0003ec:	f240 5383 	movw	r3, #1411	; 0x583
1a0003f0:	8023      	strh	r3, [r4, #0]
        ADS111x_SetGain(ptr_asd111x, gain);
1a0003f2:	4631      	mov	r1, r6
1a0003f4:	4620      	mov	r0, r4
1a0003f6:	f7ff ffe1 	bl	1a0003bc <ADS111x_SetGain>
        result = ADS111x_CONFIG_SUCCESS;
1a0003fa:	2000      	movs	r0, #0
}
1a0003fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t result = ADS111x_CONFIG_ERROR;
1a000400:	20ff      	movs	r0, #255	; 0xff
1a000402:	e7fb      	b.n	1a0003fc <ADS111x_Init+0x34>
1a000404:	100009f8 	.word	0x100009f8

1a000408 <ADS111x_SetDataRate>:
void ADS111x_SetDataRate(ads111x_obj_t *ptr_asd111x, ads111x_data_rate_t dr) {
1a000408:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_DR, dr);
1a00040a:	460a      	mov	r2, r1
1a00040c:	2104      	movs	r1, #4
1a00040e:	f7ff ff91 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a000412:	bd08      	pop	{r3, pc}

1a000414 <ADS111x_SetMode>:
void ADS111x_SetMode(ads111x_obj_t *ptr_asd111x, ads111x_mode_t mode) {
1a000414:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_MODE, mode);
1a000416:	460a      	mov	r2, r1
1a000418:	2105      	movs	r1, #5
1a00041a:	f7ff ff8b 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a00041e:	bd08      	pop	{r3, pc}

1a000420 <ADS111x_SetComparatorQueue>:
void ADS111x_SetComparatorQueue(ads111x_obj_t *ptr_asd111x, ads111x_comp_que_t que) {
1a000420:	b508      	push	{r3, lr}
    if(ptr_asd111x->device != ADS1113) {
1a000422:	7883      	ldrb	r3, [r0, #2]
1a000424:	2b01      	cmp	r3, #1
1a000426:	d100      	bne.n	1a00042a <ADS111x_SetComparatorQueue+0xa>
}
1a000428:	bd08      	pop	{r3, pc}
1a00042a:	460a      	mov	r2, r1
        ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_COMP_QUE, que);
1a00042c:	2100      	movs	r1, #0
1a00042e:	f7ff ff81 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a000432:	e7f9      	b.n	1a000428 <ADS111x_SetComparatorQueue+0x8>

1a000434 <i2c_Init>:

/*=====[Definitions of private global variables]=============================*/

/*=====[Implementation of public functions]==================================*/
bool i2c_Init(I2C_ID_T i2cNumber, uint32_t clockRateHz){
    if( i2cNumber != I2C0 ) {
1a000434:	b108      	cbz	r0, 1a00043a <i2c_Init+0x6>
        return false;
1a000436:	2000      	movs	r0, #0
    Chip_I2C_Init( i2cNumber );
   // Seleccion de velocidad del bus
    Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
    Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandler);
    NVIC_EnableIRQ(I2C0_IRQn);
}
1a000438:	4770      	bx	lr
bool i2c_Init(I2C_ID_T i2cNumber, uint32_t clockRateHz){
1a00043a:	b538      	push	{r3, r4, r5, lr}
1a00043c:	4604      	mov	r4, r0
1a00043e:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000440:	4b09      	ldr	r3, [pc, #36]	; (1a000468 <i2c_Init+0x34>)
1a000442:	f640 0208 	movw	r2, #2056	; 0x808
1a000446:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_Init( i2cNumber );
1a00044a:	f000 fc31 	bl	1a000cb0 <Chip_I2C_Init>
    Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00044e:	4629      	mov	r1, r5
1a000450:	4620      	mov	r0, r4
1a000452:	f000 fc3f 	bl	1a000cd4 <Chip_I2C_SetClockRate>
    Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandler);
1a000456:	4905      	ldr	r1, [pc, #20]	; (1a00046c <i2c_Init+0x38>)
1a000458:	2000      	movs	r0, #0
1a00045a:	f000 fc57 	bl	1a000d0c <Chip_I2C_SetMasterEventHandler>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00045e:	4b04      	ldr	r3, [pc, #16]	; (1a000470 <i2c_Init+0x3c>)
1a000460:	f44f 2280 	mov.w	r2, #262144	; 0x40000
1a000464:	601a      	str	r2, [r3, #0]
}
1a000466:	bd38      	pop	{r3, r4, r5, pc}
1a000468:	40086000 	.word	0x40086000
1a00046c:	1a000b71 	.word	0x1a000b71
1a000470:	e000e100 	.word	0xe000e100

1a000474 <i2c_MasterSend>:

int i2c_MasterSend(uint8_t slaveAddr, const uint8_t *buff, uint8_t len) {
1a000474:	b508      	push	{r3, lr}
    return Chip_I2C_MasterSend( I2C0, slaveAddr, buff, len );
1a000476:	4613      	mov	r3, r2
1a000478:	460a      	mov	r2, r1
1a00047a:	4601      	mov	r1, r0
1a00047c:	2000      	movs	r0, #0
1a00047e:	f000 fca7 	bl	1a000dd0 <Chip_I2C_MasterSend>
}
1a000482:	bd08      	pop	{r3, pc}

1a000484 <i2c_MasterReceive>:

int i2c_MasterReceive(uint8_t slaveAddr, uint8_t reg, uint8_t *buff, uint8_t len) {
1a000484:	b500      	push	{lr}
1a000486:	b083      	sub	sp, #12
    return Chip_I2C_MasterCmdRead( I2C0, slaveAddr, reg, buff, len );
1a000488:	9300      	str	r3, [sp, #0]
1a00048a:	4613      	mov	r3, r2
1a00048c:	460a      	mov	r2, r1
1a00048e:	4601      	mov	r1, r0
1a000490:	2000      	movs	r0, #0
1a000492:	f000 fcb4 	bl	1a000dfe <Chip_I2C_MasterCmdRead>
}
1a000496:	b003      	add	sp, #12
1a000498:	f85d fb04 	ldr.w	pc, [sp], #4

1a00049c <I2C0_IRQHandler>:

/*=====[Implementations of private functions]================================*/

/*=====[Implementations of interrupt functions]==============================*/

void I2C0_IRQHandler(void) {
1a00049c:	b508      	push	{r3, lr}
    Chip_I2C_MasterStateHandler(I2C0);
1a00049e:	2000      	movs	r0, #0
1a0004a0:	f000 fcca 	bl	1a000e38 <Chip_I2C_MasterStateHandler>
}
1a0004a4:	bd08      	pop	{r3, pc}

1a0004a6 <PORT_i2cWriteRead>:
    data_to_send[1] = (uint8_t)((data >> 8) & 0xFF);
    data_to_send[2] = (uint8_t)(data & 0xFF);
    i2c_MasterSend(i2cSlaveAddress, data_to_send, 3);
}

static void PORT_i2cWriteRead(uint8_t i2cSlaveAddress, uint8_t i2c_register, uint16_t *readden_data) {
1a0004a6:	b510      	push	{r4, lr}
1a0004a8:	b082      	sub	sp, #8
1a0004aa:	4614      	mov	r4, r2
    uint8_t dataToRead[2];
    i2c_MasterReceive(i2cSlaveAddress, i2c_register, dataToRead, 2);
1a0004ac:	2302      	movs	r3, #2
1a0004ae:	aa01      	add	r2, sp, #4
1a0004b0:	f7ff ffe8 	bl	1a000484 <i2c_MasterReceive>
    *readden_data = (dataToRead[0] << 8) | dataToRead[1];
1a0004b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
1a0004b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a0004bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0004c0:	8023      	strh	r3, [r4, #0]
}
1a0004c2:	b002      	add	sp, #8
1a0004c4:	bd10      	pop	{r4, pc}

1a0004c6 <PORT_i2cWrite>:
static void PORT_i2cWrite(uint8_t i2cSlaveAddress, uint8_t i2c_register, uint16_t data) {
1a0004c6:	b500      	push	{lr}
1a0004c8:	b083      	sub	sp, #12
    data_to_send[0] = i2c_register;
1a0004ca:	f88d 1004 	strb.w	r1, [sp, #4]
    data_to_send[1] = (uint8_t)((data >> 8) & 0xFF);
1a0004ce:	0a13      	lsrs	r3, r2, #8
1a0004d0:	f88d 3005 	strb.w	r3, [sp, #5]
    data_to_send[2] = (uint8_t)(data & 0xFF);
1a0004d4:	f88d 2006 	strb.w	r2, [sp, #6]
    i2c_MasterSend(i2cSlaveAddress, data_to_send, 3);
1a0004d8:	2203      	movs	r2, #3
1a0004da:	a901      	add	r1, sp, #4
1a0004dc:	f7ff ffca 	bl	1a000474 <i2c_MasterSend>
}
1a0004e0:	b003      	add	sp, #12
1a0004e2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0004e6:	Address 0x000000001a0004e6 is out of bounds.


1a0004e8 <PORT_i2cInit>:
static void PORT_i2cInit(void) {
1a0004e8:	b508      	push	{r3, lr}
    i2c_Init(I2C0, 100000);
1a0004ea:	4902      	ldr	r1, [pc, #8]	; (1a0004f4 <PORT_i2cInit+0xc>)
1a0004ec:	2000      	movs	r0, #0
1a0004ee:	f7ff ffa1 	bl	1a000434 <i2c_Init>
}
1a0004f2:	bd08      	pop	{r3, pc}
1a0004f4:	000186a0 	.word	0x000186a0

1a0004f8 <PORT_Init>:
    i2c_ads111x.Init = PORT_i2cInit;
1a0004f8:	4a03      	ldr	r2, [pc, #12]	; (1a000508 <PORT_Init+0x10>)
1a0004fa:	6002      	str	r2, [r0, #0]
    i2c_ads111x.Write = PORT_i2cWrite;
1a0004fc:	4a03      	ldr	r2, [pc, #12]	; (1a00050c <PORT_Init+0x14>)
1a0004fe:	6042      	str	r2, [r0, #4]
    i2c_ads111x.WriteRead = PORT_i2cWriteRead;
1a000500:	4a03      	ldr	r2, [pc, #12]	; (1a000510 <PORT_Init+0x18>)
1a000502:	6082      	str	r2, [r0, #8]
}
1a000504:	4770      	bx	lr
1a000506:	bf00      	nop
1a000508:	1a0004e9 	.word	0x1a0004e9
1a00050c:	1a0004c7 	.word	0x1a0004c7
1a000510:	1a0004a7 	.word	0x1a0004a7

1a000514 <ConutsToTemp>:
   SetNewSetTreshold(temperature_setpoint); //!< Set the initial setpoint
   ADS111x_StartConversion(&ads1115_0); //!< First conversion
}

static uint16_t ConutsToTemp(uint16_t counts) {
   return (counts * MAX_TEMP_D_CELSIUS) / 0x7FFF; //!< Convert the raw data to a temperature in Celsius
1a000514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a000518:	fb03 f000 	mul.w	r0, r3, r0
1a00051c:	4b03      	ldr	r3, [pc, #12]	; (1a00052c <ConutsToTemp+0x18>)
1a00051e:	fb83 2300 	smull	r2, r3, r3, r0
1a000522:	4418      	add	r0, r3
}
1a000524:	f3c0 308f 	ubfx	r0, r0, #14, #16
1a000528:	4770      	bx	lr
1a00052a:	bf00      	nop
1a00052c:	80010003 	.word	0x80010003

1a000530 <TempToCounts>:

static uint16_t TempToCounts(uint16_t temp) {
   return (temp * 0x7FFF) / MAX_TEMP_D_CELSIUS; //!< Convert the temperature in Celsius to a raw data for the ADC
1a000530:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
1a000534:	4b03      	ldr	r3, [pc, #12]	; (1a000544 <TempToCounts+0x14>)
1a000536:	fb83 2300 	smull	r2, r3, r3, r0
1a00053a:	17c0      	asrs	r0, r0, #31
1a00053c:	ebc0 1063 	rsb	r0, r0, r3, asr #5
}
1a000540:	b280      	uxth	r0, r0
1a000542:	4770      	bx	lr
1a000544:	10624dd3 	.word	0x10624dd3

1a000548 <SetNewSetTreshold>:

static void SetNewSetTreshold(uint16_t new_setpoint) {
1a000548:	b570      	push	{r4, r5, r6, lr}
1a00054a:	4604      	mov	r4, r0
   uint16_t thesh_lo = TempToCounts(new_setpoint - TEMP_2_D_CELSIUS); //!< Set the low threshold to 2 degrees below the setpoint
1a00054c:	3814      	subs	r0, #20
1a00054e:	b280      	uxth	r0, r0
1a000550:	f7ff ffee 	bl	1a000530 <TempToCounts>
1a000554:	4606      	mov	r6, r0
   uint16_t thesh_hi = TempToCounts(new_setpoint + TEMP_2_D_CELSIUS)  ; //!< Set the high threshold to 2 degrees above the setpoints
1a000556:	f104 0014 	add.w	r0, r4, #20
1a00055a:	b280      	uxth	r0, r0
1a00055c:	f7ff ffe8 	bl	1a000530 <TempToCounts>
1a000560:	4605      	mov	r5, r0
   ADS111x_SetThresholdLow(&ads1115_0, thesh_lo);
1a000562:	4c05      	ldr	r4, [pc, #20]	; (1a000578 <SetNewSetTreshold+0x30>)
1a000564:	4631      	mov	r1, r6
1a000566:	4620      	mov	r0, r4
1a000568:	f7ff ff14 	bl	1a000394 <ADS111x_SetThresholdLow>
   ADS111x_SetThresholdHigh(&ads1115_0, thesh_hi);
1a00056c:	4629      	mov	r1, r5
1a00056e:	4620      	mov	r0, r4
1a000570:	f7ff ff17 	bl	1a0003a2 <ADS111x_SetThresholdHigh>
1a000574:	bd70      	pop	{r4, r5, r6, pc}
1a000576:	bf00      	nop
1a000578:	10000a04 	.word	0x10000a04

1a00057c <ADS1115_Init>:
static void ADS1115_Init(void) {
1a00057c:	b530      	push	{r4, r5, lr}
1a00057e:	b087      	sub	sp, #28
   ads111x_i2c_t ads111x_port = PORT_Init();
1a000580:	ad03      	add	r5, sp, #12
1a000582:	4628      	mov	r0, r5
1a000584:	f7ff ffb8 	bl	1a0004f8 <PORT_Init>
   ADS111x_Init(&ads1115_0, ADS111X_ADDR_0, ADS111X_PGA_4096, ADS1115, &ads111x_port); //!< Initialize the ADS1115 with address 0x48, PGA = 4096, and the ADS1115 as the device
1a000588:	4c10      	ldr	r4, [pc, #64]	; (1a0005cc <ADS1115_Init+0x50>)
1a00058a:	9500      	str	r5, [sp, #0]
1a00058c:	2303      	movs	r3, #3
1a00058e:	2201      	movs	r2, #1
1a000590:	2148      	movs	r1, #72	; 0x48
1a000592:	4620      	mov	r0, r4
1a000594:	f7ff ff18 	bl	1a0003c8 <ADS111x_Init>
   ADS111x_SetDataRate(&ads1115_0, ADS111X_DATA_RATE_16SPS); //!< Set the data rate to 16 samples per second
1a000598:	2101      	movs	r1, #1
1a00059a:	4620      	mov	r0, r4
1a00059c:	f7ff ff34 	bl	1a000408 <ADS111x_SetDataRate>
   ADS111x_SetMultiplexer(&ads1115_0, ADS111X_MUX_AN0_GND); //!< Select the Analog input to be AN0
1a0005a0:	2104      	movs	r1, #4
1a0005a2:	4620      	mov	r0, r4
1a0005a4:	f7ff ff04 	bl	1a0003b0 <ADS111x_SetMultiplexer>
   ADS111x_SetMode(&ads1115_0, ADS111X_MODE_SINGLE); //!< Set the mode to single shot
1a0005a8:	2101      	movs	r1, #1
1a0005aa:	4620      	mov	r0, r4
1a0005ac:	f7ff ff32 	bl	1a000414 <ADS111x_SetMode>
   ADS111x_SetComparatorQueue(&ads1115_0, ADS111X_COMP_QUE_2_CONV); //!< Set the comparator queue to 2 conversions
1a0005b0:	2101      	movs	r1, #1
1a0005b2:	4620      	mov	r0, r4
1a0005b4:	f7ff ff34 	bl	1a000420 <ADS111x_SetComparatorQueue>
   SetNewSetTreshold(temperature_setpoint); //!< Set the initial setpoint
1a0005b8:	4b05      	ldr	r3, [pc, #20]	; (1a0005d0 <ADS1115_Init+0x54>)
1a0005ba:	8818      	ldrh	r0, [r3, #0]
1a0005bc:	f7ff ffc4 	bl	1a000548 <SetNewSetTreshold>
   ADS111x_StartConversion(&ads1115_0); //!< First conversion
1a0005c0:	4620      	mov	r0, r4
1a0005c2:	f7ff fed5 	bl	1a000370 <ADS111x_StartConversion>
}
1a0005c6:	b007      	add	sp, #28
1a0005c8:	bd30      	pop	{r4, r5, pc}
1a0005ca:	bf00      	nop
1a0005cc:	10000a04 	.word	0x10000a04
1a0005d0:	10000000 	.word	0x10000000

1a0005d4 <main>:
{
1a0005d4:	b530      	push	{r4, r5, lr}
1a0005d6:	b091      	sub	sp, #68	; 0x44
1a0005d8:	2400      	movs	r4, #0
   boardInit();
1a0005da:	f001 fb55 	bl	1a001c88 <boardInit>
   FSMButtonInit(TEC1); //!< Initialize the button to decrease the setpoint
1a0005de:	2024      	movs	r0, #36	; 0x24
1a0005e0:	f000 f8f6 	bl	1a0007d0 <FSMButtonInit>
   FSMButtonInit(TEC2); //!< Initialize the button to increase the setpoint
1a0005e4:	2025      	movs	r0, #37	; 0x25
1a0005e6:	f000 f8f3 	bl	1a0007d0 <FSMButtonInit>
   FSMButtonInit(TEC3); //!< Initialize the button to increase the setpoint
1a0005ea:	2026      	movs	r0, #38	; 0x26
1a0005ec:	f000 f8f0 	bl	1a0007d0 <FSMButtonInit>
   FSMButtonInit(TEC4); //!< Initialize the button to increase the setpoint
1a0005f0:	2027      	movs	r0, #39	; 0x27
1a0005f2:	f000 f8ed 	bl	1a0007d0 <FSMButtonInit>
   ADS1115_Init();      //!< Initialize the ADC
1a0005f6:	f7ff ffc1 	bl	1a00057c <ADS1115_Init>
   delayConfig(&wait_time, TIME_TO_WAIT_FOR_CONV_IN_MS); //!< Configure the delay
1a0005fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0005fe:	2300      	movs	r3, #0
1a000600:	a80a      	add	r0, sp, #40	; 0x28
1a000602:	f001 fb7b 	bl	1a001cfc <delayInit>
1a000606:	e03c      	b.n	1a000682 <main+0xae>
         ADS111x_StartConversion(&ads1115_0); //!< Start the conversion
1a000608:	483e      	ldr	r0, [pc, #248]	; (1a000704 <main+0x130>)
1a00060a:	f7ff feb1 	bl	1a000370 <ADS111x_StartConversion>
1a00060e:	e03d      	b.n	1a00068c <main+0xb8>
         temperature_setpoint -= TEMP_1_D_CELSIUS;
1a000610:	4b3d      	ldr	r3, [pc, #244]	; (1a000708 <main+0x134>)
1a000612:	8818      	ldrh	r0, [r3, #0]
1a000614:	380a      	subs	r0, #10
1a000616:	b280      	uxth	r0, r0
1a000618:	8018      	strh	r0, [r3, #0]
         SetNewSetTreshold(temperature_setpoint);
1a00061a:	f7ff ff95 	bl	1a000548 <SetNewSetTreshold>
1a00061e:	e03a      	b.n	1a000696 <main+0xc2>
         SetNewSetTreshold(temperature_setpoint);
1a000620:	4b39      	ldr	r3, [pc, #228]	; (1a000708 <main+0x134>)
1a000622:	8818      	ldrh	r0, [r3, #0]
1a000624:	f7ff ff90 	bl	1a000548 <SetNewSetTreshold>
      if(CheckFallState(TEC3)) { //Send the temperature to the UART
1a000628:	2026      	movs	r0, #38	; 0x26
1a00062a:	f000 f907 	bl	1a00083c <CheckFallState>
1a00062e:	2800      	cmp	r0, #0
1a000630:	d143      	bne.n	1a0006ba <main+0xe6>
      if(CheckFallState(TEC4)) { //Send the temperature to the UART
1a000632:	2027      	movs	r0, #39	; 0x27
1a000634:	f000 f902 	bl	1a00083c <CheckFallState>
1a000638:	2800      	cmp	r0, #0
1a00063a:	d149      	bne.n	1a0006d0 <main+0xfc>
      curret_temp = ConutsToTemp(ADS111x_Read(&ads1115_0));
1a00063c:	4831      	ldr	r0, [pc, #196]	; (1a000704 <main+0x130>)
1a00063e:	f7ff fea2 	bl	1a000386 <ADS111x_Read>
1a000642:	b280      	uxth	r0, r0
1a000644:	f7ff ff66 	bl	1a000514 <ConutsToTemp>
1a000648:	4604      	mov	r4, r0
      if( curret_temp > temperature_setpoint + TEMP_2_D_CELSIUS) { //!< temperature is too high
1a00064a:	4605      	mov	r5, r0
1a00064c:	4b2e      	ldr	r3, [pc, #184]	; (1a000708 <main+0x134>)
1a00064e:	881b      	ldrh	r3, [r3, #0]
1a000650:	3314      	adds	r3, #20
1a000652:	4298      	cmp	r0, r3
1a000654:	dd46      	ble.n	1a0006e4 <main+0x110>
         gpioWrite(LED2, ON); //!< Turn on the LED tha indicates that the temperature is too high
1a000656:	2101      	movs	r1, #1
1a000658:	202c      	movs	r0, #44	; 0x2c
1a00065a:	f001 fa9d 	bl	1a001b98 <gpioWrite>
      if(curret_temp < temperature_setpoint - TEMP_2_D_CELSIUS) { //!< temperature is lower than the setpoint
1a00065e:	4b2a      	ldr	r3, [pc, #168]	; (1a000708 <main+0x134>)
1a000660:	881b      	ldrh	r3, [r3, #0]
1a000662:	3b14      	subs	r3, #20
1a000664:	429d      	cmp	r5, r3
1a000666:	da42      	bge.n	1a0006ee <main+0x11a>
         gpioWrite(LED3, ON); //!< Turn on the LED tha indicates that the temperature is ok
1a000668:	2101      	movs	r1, #1
1a00066a:	202d      	movs	r0, #45	; 0x2d
1a00066c:	f001 fa94 	bl	1a001b98 <gpioWrite>
      if(!gpioRead(GPIO1)) { //!< alarm pin is set
1a000670:	200f      	movs	r0, #15
1a000672:	f001 fac6 	bl	1a001c02 <gpioRead>
1a000676:	2800      	cmp	r0, #0
1a000678:	d13e      	bne.n	1a0006f8 <main+0x124>
         gpioWrite(LED1, ON); //!< turn on the cooling system
1a00067a:	2101      	movs	r1, #1
1a00067c:	202b      	movs	r0, #43	; 0x2b
1a00067e:	f001 fa8b 	bl	1a001b98 <gpioWrite>
      if(delayRead(&wait_time)) {
1a000682:	a80a      	add	r0, sp, #40	; 0x28
1a000684:	f001 fb4a 	bl	1a001d1c <delayRead>
1a000688:	2800      	cmp	r0, #0
1a00068a:	d1bd      	bne.n	1a000608 <main+0x34>
      if(CheckFallState(TEC1)) { //Decrease temperature setpoint
1a00068c:	2024      	movs	r0, #36	; 0x24
1a00068e:	f000 f8d5 	bl	1a00083c <CheckFallState>
1a000692:	2800      	cmp	r0, #0
1a000694:	d1bc      	bne.n	1a000610 <main+0x3c>
      if(CheckFallState(TEC2)) { //Increase temperature setpoint
1a000696:	2025      	movs	r0, #37	; 0x25
1a000698:	f000 f8d0 	bl	1a00083c <CheckFallState>
1a00069c:	2800      	cmp	r0, #0
1a00069e:	d0c3      	beq.n	1a000628 <main+0x54>
         temperature_setpoint += TEMP_1_D_CELSIUS;
1a0006a0:	4a19      	ldr	r2, [pc, #100]	; (1a000708 <main+0x134>)
1a0006a2:	8813      	ldrh	r3, [r2, #0]
1a0006a4:	330a      	adds	r3, #10
1a0006a6:	b29b      	uxth	r3, r3
1a0006a8:	8013      	strh	r3, [r2, #0]
         if(temperature_setpoint > MAX_TEMP_D_CELSIUS) {
1a0006aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a0006ae:	d9b7      	bls.n	1a000620 <main+0x4c>
            temperature_setpoint = MAX_TEMP_D_CELSIUS;
1a0006b0:	4613      	mov	r3, r2
1a0006b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a0006b6:	801a      	strh	r2, [r3, #0]
1a0006b8:	e7b2      	b.n	1a000620 <main+0x4c>
         sprintf( str, "SetPoint: %i.\r\n", temperature_setpoint );
1a0006ba:	4b13      	ldr	r3, [pc, #76]	; (1a000708 <main+0x134>)
1a0006bc:	881a      	ldrh	r2, [r3, #0]
1a0006be:	4913      	ldr	r1, [pc, #76]	; (1a00070c <main+0x138>)
1a0006c0:	4668      	mov	r0, sp
1a0006c2:	f002 fe7d 	bl	1a0033c0 <sprintf>
         uartWriteString(UART_USB, str);
1a0006c6:	4669      	mov	r1, sp
1a0006c8:	2003      	movs	r0, #3
1a0006ca:	f001 f904 	bl	1a0018d6 <uartWriteString>
1a0006ce:	e7b0      	b.n	1a000632 <main+0x5e>
         sprintf( str, "Temperature: %i.\r\n", curret_temp );
1a0006d0:	4622      	mov	r2, r4
1a0006d2:	490f      	ldr	r1, [pc, #60]	; (1a000710 <main+0x13c>)
1a0006d4:	4668      	mov	r0, sp
1a0006d6:	f002 fe73 	bl	1a0033c0 <sprintf>
         uartWriteString(UART_USB, str);
1a0006da:	4669      	mov	r1, sp
1a0006dc:	2003      	movs	r0, #3
1a0006de:	f001 f8fa 	bl	1a0018d6 <uartWriteString>
1a0006e2:	e7ab      	b.n	1a00063c <main+0x68>
         gpioWrite(LED2, OFF); //!< Turn off the LED tha indicates that the temperature is too high
1a0006e4:	2100      	movs	r1, #0
1a0006e6:	202c      	movs	r0, #44	; 0x2c
1a0006e8:	f001 fa56 	bl	1a001b98 <gpioWrite>
1a0006ec:	e7b7      	b.n	1a00065e <main+0x8a>
         gpioWrite(LED3, OFF); //!< Turn off the LED tha indicates that the temperature is ok
1a0006ee:	2100      	movs	r1, #0
1a0006f0:	202d      	movs	r0, #45	; 0x2d
1a0006f2:	f001 fa51 	bl	1a001b98 <gpioWrite>
1a0006f6:	e7bb      	b.n	1a000670 <main+0x9c>
         gpioWrite(LED1, OFF); //!< turn off the cooling system
1a0006f8:	2100      	movs	r1, #0
1a0006fa:	202b      	movs	r0, #43	; 0x2b
1a0006fc:	f001 fa4c 	bl	1a001b98 <gpioWrite>
1a000700:	e7bf      	b.n	1a000682 <main+0xae>
1a000702:	bf00      	nop
1a000704:	10000a04 	.word	0x10000a04
1a000708:	10000000 	.word	0x10000000
1a00070c:	1a006c78 	.word	0x1a006c78
1a000710:	1a006c88 	.word	0x1a006c88

1a000714 <buttonReleased>:
      }
   }
}

static void buttonReleased(dbn_t *tecla) {
   tecla->flag_rise = 0xFF;
1a000714:	23ff      	movs	r3, #255	; 0xff
1a000716:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
}
1a00071a:	4770      	bx	lr

1a00071c <buttonPressed>:

static void buttonPressed(dbn_t *tecla) {
   tecla->flag_fall = 0xFF;
1a00071c:	23ff      	movs	r3, #255	; 0xff
1a00071e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
1a000722:	4770      	bx	lr

1a000724 <RisingState>:
static void RisingState(dbn_t *dataTecla) {
1a000724:	b510      	push	{r4, lr}
1a000726:	4604      	mov	r4, r0
   if (!dataTecla->delay.running) {
1a000728:	7e03      	ldrb	r3, [r0, #24]
1a00072a:	b12b      	cbz	r3, 1a000738 <RisingState+0x14>
   if (delayRead(&dataTecla->delay)) {
1a00072c:	f104 0008 	add.w	r0, r4, #8
1a000730:	f001 faf4 	bl	1a001d1c <delayRead>
1a000734:	b930      	cbnz	r0, 1a000744 <RisingState+0x20>
}
1a000736:	bd10      	pop	{r4, pc}
      delayConfig(&dataTecla->delay,50);
1a000738:	2232      	movs	r2, #50	; 0x32
1a00073a:	2300      	movs	r3, #0
1a00073c:	3008      	adds	r0, #8
1a00073e:	f001 fadd 	bl	1a001cfc <delayInit>
1a000742:	e7f3      	b.n	1a00072c <RisingState+0x8>
      if (gpioRead(dataTecla->tecla)) {
1a000744:	f994 0000 	ldrsb.w	r0, [r4]
1a000748:	f001 fa5b 	bl	1a001c02 <gpioRead>
1a00074c:	b918      	cbnz	r0, 1a000756 <RisingState+0x32>
         dataTecla->state = DOWN;
1a00074e:	2302      	movs	r3, #2
1a000750:	f884 3020 	strb.w	r3, [r4, #32]
}
1a000754:	e7ef      	b.n	1a000736 <RisingState+0x12>
         dataTecla->state = UP;
1a000756:	2300      	movs	r3, #0
1a000758:	f884 3020 	strb.w	r3, [r4, #32]
         buttonReleased(dataTecla);
1a00075c:	4620      	mov	r0, r4
1a00075e:	f7ff ffd9 	bl	1a000714 <buttonReleased>
1a000762:	e7e8      	b.n	1a000736 <RisingState+0x12>

1a000764 <DownState>:
static void DownState(dbn_t *dataTecla) {
1a000764:	b510      	push	{r4, lr}
1a000766:	4604      	mov	r4, r0
   if (gpioRead(dataTecla->tecla)) {
1a000768:	f990 0000 	ldrsb.w	r0, [r0]
1a00076c:	f001 fa49 	bl	1a001c02 <gpioRead>
1a000770:	b110      	cbz	r0, 1a000778 <DownState+0x14>
      dataTecla->state = RISING;
1a000772:	2303      	movs	r3, #3
1a000774:	f884 3020 	strb.w	r3, [r4, #32]
}
1a000778:	bd10      	pop	{r4, pc}

1a00077a <FallingState>:
static void FallingState(dbn_t *dataTecla) {
1a00077a:	b510      	push	{r4, lr}
1a00077c:	4604      	mov	r4, r0
   if (!dataTecla->delay.running) {
1a00077e:	7e03      	ldrb	r3, [r0, #24]
1a000780:	b12b      	cbz	r3, 1a00078e <FallingState+0x14>
   if (delayRead(&dataTecla->delay)) {
1a000782:	f104 0008 	add.w	r0, r4, #8
1a000786:	f001 fac9 	bl	1a001d1c <delayRead>
1a00078a:	b930      	cbnz	r0, 1a00079a <FallingState+0x20>
}
1a00078c:	bd10      	pop	{r4, pc}
      delayConfig(&dataTecla->delay,50);
1a00078e:	2232      	movs	r2, #50	; 0x32
1a000790:	2300      	movs	r3, #0
1a000792:	3008      	adds	r0, #8
1a000794:	f001 fab2 	bl	1a001cfc <delayInit>
1a000798:	e7f3      	b.n	1a000782 <FallingState+0x8>
      if (!gpioRead(dataTecla->tecla)) {
1a00079a:	f994 0000 	ldrsb.w	r0, [r4]
1a00079e:	f001 fa30 	bl	1a001c02 <gpioRead>
1a0007a2:	b118      	cbz	r0, 1a0007ac <FallingState+0x32>
         dataTecla->state = UP;
1a0007a4:	2300      	movs	r3, #0
1a0007a6:	f884 3020 	strb.w	r3, [r4, #32]
}
1a0007aa:	e7ef      	b.n	1a00078c <FallingState+0x12>
         dataTecla->state = DOWN;
1a0007ac:	2302      	movs	r3, #2
1a0007ae:	f884 3020 	strb.w	r3, [r4, #32]
         buttonPressed(dataTecla);
1a0007b2:	4620      	mov	r0, r4
1a0007b4:	f7ff ffb2 	bl	1a00071c <buttonPressed>
1a0007b8:	e7e8      	b.n	1a00078c <FallingState+0x12>

1a0007ba <UpState>:
static void UpState(dbn_t *dataTecla) {
1a0007ba:	b510      	push	{r4, lr}
1a0007bc:	4604      	mov	r4, r0
   if (!gpioRead(dataTecla->tecla)) {
1a0007be:	f990 0000 	ldrsb.w	r0, [r0]
1a0007c2:	f001 fa1e 	bl	1a001c02 <gpioRead>
1a0007c6:	b910      	cbnz	r0, 1a0007ce <UpState+0x14>
            dataTecla->state = FALLING;
1a0007c8:	2301      	movs	r3, #1
1a0007ca:	f884 3020 	strb.w	r3, [r4, #32]
}
1a0007ce:	bd10      	pop	{r4, pc}

1a0007d0 <FSMButtonInit>:
void FSMButtonInit(gpioMap_t index_tecla) {
1a0007d0:	b430      	push	{r4, r5}
   uint8_t array_index = index_tecla - TEC1;
1a0007d2:	b2c3      	uxtb	r3, r0
1a0007d4:	3b24      	subs	r3, #36	; 0x24
1a0007d6:	b2db      	uxtb	r3, r3
   teclas[array_index].tecla = index_tecla;
1a0007d8:	4a07      	ldr	r2, [pc, #28]	; (1a0007f8 <FSMButtonInit+0x28>)
1a0007da:	0099      	lsls	r1, r3, #2
1a0007dc:	18cd      	adds	r5, r1, r3
1a0007de:	00ec      	lsls	r4, r5, #3
1a0007e0:	1915      	adds	r5, r2, r4
1a0007e2:	5510      	strb	r0, [r2, r4]
   teclas[array_index].state = UP;
1a0007e4:	2000      	movs	r0, #0
1a0007e6:	f885 0020 	strb.w	r0, [r5, #32]
   teclas[array_index].flag_rise = FALSE;
1a0007ea:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   teclas[array_index].flag_fall = FALSE;
1a0007ee:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
}
1a0007f2:	bc30      	pop	{r4, r5}
1a0007f4:	4770      	bx	lr
1a0007f6:	bf00      	nop
1a0007f8:	10000a08 	.word	0x10000a08

1a0007fc <FSMButtonUpdate>:
void FSMButtonUpdate(gpioMap_t index_tecla) {
1a0007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007fe:	b085      	sub	sp, #20
   uint8_t array_index = index_tecla - TEC1;
1a000800:	b2c4      	uxtb	r4, r0
1a000802:	3c24      	subs	r4, #36	; 0x24
1a000804:	b2e4      	uxtb	r4, r4
   teclas[array_index].tecla = index_tecla;
1a000806:	4e0b      	ldr	r6, [pc, #44]	; (1a000834 <FSMButtonUpdate+0x38>)
1a000808:	00a5      	lsls	r5, r4, #2
1a00080a:	192a      	adds	r2, r5, r4
1a00080c:	00d3      	lsls	r3, r2, #3
1a00080e:	18f7      	adds	r7, r6, r3
1a000810:	54f0      	strb	r0, [r6, r3]
   void (*AntiReboteFunc[DEBOUNCE_QTY])(dbn_t *dataTecla) = {UpState, FallingState ,DownState, RisingState};
1a000812:	4b09      	ldr	r3, [pc, #36]	; (1a000838 <FSMButtonUpdate+0x3c>)
1a000814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000816:	f10d 0c10 	add.w	ip, sp, #16
1a00081a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
   AntiReboteFunc[teclas[array_index].state](&teclas[array_index]);
1a00081e:	f897 3020 	ldrb.w	r3, [r7, #32]
1a000822:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
1a000826:	f853 3c10 	ldr.w	r3, [r3, #-16]
1a00082a:	4638      	mov	r0, r7
1a00082c:	4798      	blx	r3
}
1a00082e:	b005      	add	sp, #20
1a000830:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000832:	bf00      	nop
1a000834:	10000a08 	.word	0x10000a08
1a000838:	1a006c9c 	.word	0x1a006c9c

1a00083c <CheckFallState>:
bool_t CheckFallState(gpioMap_t index_tecla) { 
1a00083c:	b510      	push	{r4, lr}
   uint8_t array_index = index_tecla - TEC1;
1a00083e:	b2c4      	uxtb	r4, r0
1a000840:	3c24      	subs	r4, #36	; 0x24
1a000842:	b2e4      	uxtb	r4, r4
   FSMButtonUpdate(index_tecla);
1a000844:	f7ff ffda 	bl	1a0007fc <FSMButtonUpdate>
   bool_t flag = teclas[array_index].flag_fall;
1a000848:	4a05      	ldr	r2, [pc, #20]	; (1a000860 <CheckFallState+0x24>)
1a00084a:	00a3      	lsls	r3, r4, #2
1a00084c:	1918      	adds	r0, r3, r4
1a00084e:	00c1      	lsls	r1, r0, #3
1a000850:	4411      	add	r1, r2
1a000852:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
   teclas[array_index].flag_fall = 0;
1a000856:	2300      	movs	r3, #0
1a000858:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
}
1a00085c:	bd10      	pop	{r4, pc}
1a00085e:	bf00      	nop
1a000860:	10000a08 	.word	0x10000a08

1a000864 <initialise_monitor_handles>:
}
1a000864:	4770      	bx	lr
1a000866:	Address 0x000000001a000866 is out of bounds.


1a000868 <Reset_Handler>:
void Reset_Handler(void) {
1a000868:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00086a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00086c:	4b19      	ldr	r3, [pc, #100]	; (1a0008d4 <Reset_Handler+0x6c>)
1a00086e:	4a1a      	ldr	r2, [pc, #104]	; (1a0008d8 <Reset_Handler+0x70>)
1a000870:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000872:	3304      	adds	r3, #4
1a000874:	4a19      	ldr	r2, [pc, #100]	; (1a0008dc <Reset_Handler+0x74>)
1a000876:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000878:	2300      	movs	r3, #0
1a00087a:	e005      	b.n	1a000888 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00087c:	4a18      	ldr	r2, [pc, #96]	; (1a0008e0 <Reset_Handler+0x78>)
1a00087e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000882:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000886:	3301      	adds	r3, #1
1a000888:	2b07      	cmp	r3, #7
1a00088a:	d9f7      	bls.n	1a00087c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00088c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00088e:	4b15      	ldr	r3, [pc, #84]	; (1a0008e4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000890:	e007      	b.n	1a0008a2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000892:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000896:	689a      	ldr	r2, [r3, #8]
1a000898:	6859      	ldr	r1, [r3, #4]
1a00089a:	6818      	ldr	r0, [r3, #0]
1a00089c:	f7ff fc75 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0008a0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0008a2:	4a11      	ldr	r2, [pc, #68]	; (1a0008e8 <Reset_Handler+0x80>)
1a0008a4:	4293      	cmp	r3, r2
1a0008a6:	d3f4      	bcc.n	1a000892 <Reset_Handler+0x2a>
1a0008a8:	e006      	b.n	1a0008b8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0008aa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0008ac:	6859      	ldr	r1, [r3, #4]
1a0008ae:	f854 0b08 	ldr.w	r0, [r4], #8
1a0008b2:	f7ff fc79 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0008b6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0008b8:	4a0c      	ldr	r2, [pc, #48]	; (1a0008ec <Reset_Handler+0x84>)
1a0008ba:	4293      	cmp	r3, r2
1a0008bc:	d3f5      	bcc.n	1a0008aa <Reset_Handler+0x42>
    SystemInit();
1a0008be:	f000 ffbd 	bl	1a00183c <SystemInit>
    __libc_init_array();
1a0008c2:	f002 f9a7 	bl	1a002c14 <__libc_init_array>
    initialise_monitor_handles();
1a0008c6:	f7ff ffcd 	bl	1a000864 <initialise_monitor_handles>
    main();
1a0008ca:	f7ff fe83 	bl	1a0005d4 <main>
        __asm__ volatile("wfi");
1a0008ce:	bf30      	wfi
1a0008d0:	e7fd      	b.n	1a0008ce <Reset_Handler+0x66>
1a0008d2:	bf00      	nop
1a0008d4:	40053100 	.word	0x40053100
1a0008d8:	10df1000 	.word	0x10df1000
1a0008dc:	01dff7ff 	.word	0x01dff7ff
1a0008e0:	e000e280 	.word	0xe000e280
1a0008e4:	1a000114 	.word	0x1a000114
1a0008e8:	1a000150 	.word	0x1a000150
1a0008ec:	1a000178 	.word	0x1a000178

1a0008f0 <_fini>:
void _fini(void) {}
1a0008f0:	4770      	bx	lr

1a0008f2 <_init>:
void _init(void) {}
1a0008f2:	4770      	bx	lr

1a0008f4 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0008f4:	4b05      	ldr	r3, [pc, #20]	; (1a00090c <_sbrk_r+0x18>)
1a0008f6:	681b      	ldr	r3, [r3, #0]
1a0008f8:	b123      	cbz	r3, 1a000904 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0008fa:	4b04      	ldr	r3, [pc, #16]	; (1a00090c <_sbrk_r+0x18>)
1a0008fc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0008fe:	4401      	add	r1, r0
1a000900:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000902:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000904:	4b01      	ldr	r3, [pc, #4]	; (1a00090c <_sbrk_r+0x18>)
1a000906:	4a02      	ldr	r2, [pc, #8]	; (1a000910 <_sbrk_r+0x1c>)
1a000908:	601a      	str	r2, [r3, #0]
1a00090a:	e7f6      	b.n	1a0008fa <_sbrk_r+0x6>
1a00090c:	10000aa8 	.word	0x10000aa8
1a000910:	10000b28 	.word	0x10000b28

1a000914 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000914:	2200      	movs	r2, #0
1a000916:	2a05      	cmp	r2, #5
1a000918:	d819      	bhi.n	1a00094e <Board_LED_Init+0x3a>
{
1a00091a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00091c:	490c      	ldr	r1, [pc, #48]	; (1a000950 <Board_LED_Init+0x3c>)
1a00091e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000922:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000926:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000928:	4b0a      	ldr	r3, [pc, #40]	; (1a000954 <Board_LED_Init+0x40>)
1a00092a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00092e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000932:	2001      	movs	r0, #1
1a000934:	40a0      	lsls	r0, r4
1a000936:	4301      	orrs	r1, r0
1a000938:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00093c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000940:	2100      	movs	r1, #0
1a000942:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000944:	3201      	adds	r2, #1
1a000946:	2a05      	cmp	r2, #5
1a000948:	d9e8      	bls.n	1a00091c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00094a:	bc70      	pop	{r4, r5, r6}
1a00094c:	4770      	bx	lr
1a00094e:	4770      	bx	lr
1a000950:	1a006cb8 	.word	0x1a006cb8
1a000954:	400f4000 	.word	0x400f4000

1a000958 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000958:	2300      	movs	r3, #0
1a00095a:	2b03      	cmp	r3, #3
1a00095c:	d816      	bhi.n	1a00098c <Board_TEC_Init+0x34>
{
1a00095e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000960:	490b      	ldr	r1, [pc, #44]	; (1a000990 <Board_TEC_Init+0x38>)
1a000962:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000966:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00096a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00096c:	4c09      	ldr	r4, [pc, #36]	; (1a000994 <Board_TEC_Init+0x3c>)
1a00096e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000972:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000976:	2001      	movs	r0, #1
1a000978:	40a8      	lsls	r0, r5
1a00097a:	ea21 0100 	bic.w	r1, r1, r0
1a00097e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000982:	3301      	adds	r3, #1
1a000984:	2b03      	cmp	r3, #3
1a000986:	d9eb      	bls.n	1a000960 <Board_TEC_Init+0x8>
   }
}
1a000988:	bc30      	pop	{r4, r5}
1a00098a:	4770      	bx	lr
1a00098c:	4770      	bx	lr
1a00098e:	bf00      	nop
1a000990:	1a006cb0 	.word	0x1a006cb0
1a000994:	400f4000 	.word	0x400f4000

1a000998 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000998:	2300      	movs	r3, #0
1a00099a:	2b08      	cmp	r3, #8
1a00099c:	d816      	bhi.n	1a0009cc <Board_GPIO_Init+0x34>
{
1a00099e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009a0:	490b      	ldr	r1, [pc, #44]	; (1a0009d0 <Board_GPIO_Init+0x38>)
1a0009a2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009aa:	784d      	ldrb	r5, [r1, #1]
1a0009ac:	4c09      	ldr	r4, [pc, #36]	; (1a0009d4 <Board_GPIO_Init+0x3c>)
1a0009ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009b2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009b6:	2001      	movs	r0, #1
1a0009b8:	40a8      	lsls	r0, r5
1a0009ba:	ea21 0100 	bic.w	r1, r1, r0
1a0009be:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009c2:	3301      	adds	r3, #1
1a0009c4:	2b08      	cmp	r3, #8
1a0009c6:	d9eb      	bls.n	1a0009a0 <Board_GPIO_Init+0x8>
   }
}
1a0009c8:	bc30      	pop	{r4, r5}
1a0009ca:	4770      	bx	lr
1a0009cc:	4770      	bx	lr
1a0009ce:	bf00      	nop
1a0009d0:	1a006cc4 	.word	0x1a006cc4
1a0009d4:	400f4000 	.word	0x400f4000

1a0009d8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0009d8:	b510      	push	{r4, lr}
1a0009da:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0009dc:	4c08      	ldr	r4, [pc, #32]	; (1a000a00 <Board_ADC_Init+0x28>)
1a0009de:	4669      	mov	r1, sp
1a0009e0:	4620      	mov	r0, r4
1a0009e2:	f000 fb13 	bl	1a00100c <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0009e6:	4a07      	ldr	r2, [pc, #28]	; (1a000a04 <Board_ADC_Init+0x2c>)
1a0009e8:	4669      	mov	r1, sp
1a0009ea:	4620      	mov	r0, r4
1a0009ec:	f000 fb2e 	bl	1a00104c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0009f0:	2200      	movs	r2, #0
1a0009f2:	4669      	mov	r1, sp
1a0009f4:	4620      	mov	r0, r4
1a0009f6:	f000 fb42 	bl	1a00107e <Chip_ADC_SetResolution>
}
1a0009fa:	b002      	add	sp, #8
1a0009fc:	bd10      	pop	{r4, pc}
1a0009fe:	bf00      	nop
1a000a00:	400e3000 	.word	0x400e3000
1a000a04:	00061a80 	.word	0x00061a80

1a000a08 <Board_SPI_Init>:
{
1a000a08:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000a0a:	4c0b      	ldr	r4, [pc, #44]	; (1a000a38 <Board_SPI_Init+0x30>)
1a000a0c:	4620      	mov	r0, r4
1a000a0e:	f000 fef9 	bl	1a001804 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a12:	6863      	ldr	r3, [r4, #4]
1a000a14:	f023 0304 	bic.w	r3, r3, #4
1a000a18:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a1a:	6823      	ldr	r3, [r4, #0]
1a000a1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a20:	f043 0307 	orr.w	r3, r3, #7
1a000a24:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a26:	4905      	ldr	r1, [pc, #20]	; (1a000a3c <Board_SPI_Init+0x34>)
1a000a28:	4620      	mov	r0, r4
1a000a2a:	f000 fecc 	bl	1a0017c6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a2e:	6863      	ldr	r3, [r4, #4]
1a000a30:	f043 0302 	orr.w	r3, r3, #2
1a000a34:	6063      	str	r3, [r4, #4]
}
1a000a36:	bd10      	pop	{r4, pc}
1a000a38:	400c5000 	.word	0x400c5000
1a000a3c:	000186a0 	.word	0x000186a0

1a000a40 <Board_I2C_Init>:
{
1a000a40:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000a42:	2000      	movs	r0, #0
1a000a44:	f000 f934 	bl	1a000cb0 <Chip_I2C_Init>
1a000a48:	4b04      	ldr	r3, [pc, #16]	; (1a000a5c <Board_I2C_Init+0x1c>)
1a000a4a:	f640 0208 	movw	r2, #2056	; 0x808
1a000a4e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000a52:	4903      	ldr	r1, [pc, #12]	; (1a000a60 <Board_I2C_Init+0x20>)
1a000a54:	2000      	movs	r0, #0
1a000a56:	f000 f93d 	bl	1a000cd4 <Chip_I2C_SetClockRate>
}
1a000a5a:	bd08      	pop	{r3, pc}
1a000a5c:	40086000 	.word	0x40086000
1a000a60:	000f4240 	.word	0x000f4240

1a000a64 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000a64:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000a66:	4c07      	ldr	r4, [pc, #28]	; (1a000a84 <Board_Debug_Init+0x20>)
1a000a68:	4620      	mov	r0, r4
1a000a6a:	f000 fa13 	bl	1a000e94 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000a6e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000a72:	4620      	mov	r0, r4
1a000a74:	f000 fa38 	bl	1a000ee8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000a78:	2303      	movs	r3, #3
1a000a7a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000a7c:	2301      	movs	r3, #1
1a000a7e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000a80:	bd10      	pop	{r4, pc}
1a000a82:	bf00      	nop
1a000a84:	400c1000 	.word	0x400c1000

1a000a88 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000a88:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000a8a:	f7ff ffeb 	bl	1a000a64 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000a8e:	4809      	ldr	r0, [pc, #36]	; (1a000ab4 <Board_Init+0x2c>)
1a000a90:	f000 fe78 	bl	1a001784 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000a94:	f7ff ff80 	bl	1a000998 <Board_GPIO_Init>
   Board_ADC_Init();
1a000a98:	f7ff ff9e 	bl	1a0009d8 <Board_ADC_Init>
   Board_SPI_Init();
1a000a9c:	f7ff ffb4 	bl	1a000a08 <Board_SPI_Init>
   Board_I2C_Init();
1a000aa0:	f7ff ffce 	bl	1a000a40 <Board_I2C_Init>

   Board_LED_Init();
1a000aa4:	f7ff ff36 	bl	1a000914 <Board_LED_Init>
   Board_TEC_Init();
1a000aa8:	f7ff ff56 	bl	1a000958 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000aac:	f000 faee 	bl	1a00108c <SystemCoreClockUpdate>
}
1a000ab0:	bd08      	pop	{r3, pc}
1a000ab2:	bf00      	nop
1a000ab4:	400f4000 	.word	0x400f4000

1a000ab8 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000ab8:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000aba:	f7ff ffd3 	bl	1a000a64 <Board_Debug_Init>
1a000abe:	bd08      	pop	{r3, pc}

1a000ac0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000ac0:	2300      	movs	r3, #0
1a000ac2:	2b1c      	cmp	r3, #28
1a000ac4:	d812      	bhi.n	1a000aec <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000ac6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000ac8:	4a09      	ldr	r2, [pc, #36]	; (1a000af0 <Board_SetupMuxing+0x30>)
1a000aca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000ace:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ad2:	784a      	ldrb	r2, [r1, #1]
1a000ad4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000ad6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000ada:	4906      	ldr	r1, [pc, #24]	; (1a000af4 <Board_SetupMuxing+0x34>)
1a000adc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000ae0:	3301      	adds	r3, #1
1a000ae2:	2b1c      	cmp	r3, #28
1a000ae4:	d9f0      	bls.n	1a000ac8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000aea:	4770      	bx	lr
1a000aec:	4770      	bx	lr
1a000aee:	bf00      	nop
1a000af0:	1a006ce0 	.word	0x1a006ce0
1a000af4:	40086000 	.word	0x40086000

1a000af8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000af8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000afa:	4a17      	ldr	r2, [pc, #92]	; (1a000b58 <Board_SetupClocking+0x60>)
1a000afc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b04:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b08:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b0c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b14:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b18:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b1c:	2201      	movs	r2, #1
1a000b1e:	490f      	ldr	r1, [pc, #60]	; (1a000b5c <Board_SetupClocking+0x64>)
1a000b20:	2006      	movs	r0, #6
1a000b22:	f000 fd83 	bl	1a00162c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b26:	2400      	movs	r4, #0
1a000b28:	b14c      	cbz	r4, 1a000b3e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b2a:	4b0b      	ldr	r3, [pc, #44]	; (1a000b58 <Board_SetupClocking+0x60>)
1a000b2c:	685a      	ldr	r2, [r3, #4]
1a000b2e:	f022 020c 	bic.w	r2, r2, #12
1a000b32:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b34:	685a      	ldr	r2, [r3, #4]
1a000b36:	f042 0203 	orr.w	r2, r2, #3
1a000b3a:	605a      	str	r2, [r3, #4]
}
1a000b3c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b3e:	4808      	ldr	r0, [pc, #32]	; (1a000b60 <Board_SetupClocking+0x68>)
1a000b40:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b44:	2301      	movs	r3, #1
1a000b46:	788a      	ldrb	r2, [r1, #2]
1a000b48:	7849      	ldrb	r1, [r1, #1]
1a000b4a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b4e:	f000 fcc9 	bl	1a0014e4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b52:	3401      	adds	r4, #1
1a000b54:	e7e8      	b.n	1a000b28 <Board_SetupClocking+0x30>
1a000b56:	bf00      	nop
1a000b58:	40043000 	.word	0x40043000
1a000b5c:	0c28cb00 	.word	0x0c28cb00
1a000b60:	1a006cdc 	.word	0x1a006cdc

1a000b64 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000b64:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000b66:	f7ff ffab 	bl	1a000ac0 <Board_SetupMuxing>
    Board_SetupClocking();
1a000b6a:	f7ff ffc5 	bl	1a000af8 <Board_SetupClocking>
}
1a000b6e:	bd08      	pop	{r3, pc}

1a000b70 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000b70:	2901      	cmp	r1, #1
1a000b72:	d109      	bne.n	1a000b88 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000b74:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000b78:	0082      	lsls	r2, r0, #2
1a000b7a:	4b04      	ldr	r3, [pc, #16]	; (1a000b8c <Chip_I2C_EventHandler+0x1c>)
1a000b7c:	4413      	add	r3, r2
1a000b7e:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000b80:	7d13      	ldrb	r3, [r2, #20]
1a000b82:	b2db      	uxtb	r3, r3
1a000b84:	2b04      	cmp	r3, #4
1a000b86:	d0fb      	beq.n	1a000b80 <Chip_I2C_EventHandler+0x10>
}
1a000b88:	4770      	bx	lr
1a000b8a:	bf00      	nop
1a000b8c:	10000004 	.word	0x10000004

1a000b90 <handleMasterXferState>:
{
1a000b90:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a000b92:	6843      	ldr	r3, [r0, #4]
1a000b94:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a000b98:	2b58      	cmp	r3, #88	; 0x58
1a000b9a:	d87f      	bhi.n	1a000c9c <handleMasterXferState+0x10c>
1a000b9c:	e8df f003 	tbb	[pc, r3]
1a000ba0:	7e7e7e7a 	.word	0x7e7e7e7a
1a000ba4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000ba8:	7e7e7e2f 	.word	0x7e7e7e2f
1a000bac:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bb0:	7e7e7e2f 	.word	0x7e7e7e2f
1a000bb4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bb8:	7e7e7e39 	.word	0x7e7e7e39
1a000bbc:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bc0:	7e7e7e6e 	.word	0x7e7e7e6e
1a000bc4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bc8:	7e7e7e39 	.word	0x7e7e7e39
1a000bcc:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bd0:	7e7e7e72 	.word	0x7e7e7e72
1a000bd4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bd8:	7e7e7e76 	.word	0x7e7e7e76
1a000bdc:	7e7e7e7e 	.word	0x7e7e7e7e
1a000be0:	7e7e7e6c 	.word	0x7e7e7e6c
1a000be4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000be8:	7e7e7e6e 	.word	0x7e7e7e6e
1a000bec:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bf0:	7e7e7e2d 	.word	0x7e7e7e2d
1a000bf4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bf8:	4f          	.byte	0x4f
1a000bf9:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a000bfa:	233c      	movs	r3, #60	; 0x3c
1a000bfc:	e020      	b.n	1a000c40 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a000bfe:	780a      	ldrb	r2, [r1, #0]
1a000c00:	688b      	ldr	r3, [r1, #8]
1a000c02:	fab3 f383 	clz	r3, r3
1a000c06:	095b      	lsrs	r3, r3, #5
1a000c08:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a000c0c:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a000c0e:	233c      	movs	r3, #60	; 0x3c
		break;
1a000c10:	e023      	b.n	1a000c5a <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a000c12:	688b      	ldr	r3, [r1, #8]
1a000c14:	b94b      	cbnz	r3, 1a000c2a <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a000c16:	690b      	ldr	r3, [r1, #16]
1a000c18:	b123      	cbz	r3, 1a000c24 <handleMasterXferState+0x94>
1a000c1a:	f06f 0320 	mvn.w	r3, #32
1a000c1e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a000c22:	e01a      	b.n	1a000c5a <handleMasterXferState+0xca>
1a000c24:	f06f 0310 	mvn.w	r3, #16
1a000c28:	e7f9      	b.n	1a000c1e <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a000c2a:	684b      	ldr	r3, [r1, #4]
1a000c2c:	1c5a      	adds	r2, r3, #1
1a000c2e:	604a      	str	r2, [r1, #4]
1a000c30:	781b      	ldrb	r3, [r3, #0]
1a000c32:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a000c34:	688b      	ldr	r3, [r1, #8]
1a000c36:	3b01      	subs	r3, #1
1a000c38:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a000c3a:	233c      	movs	r3, #60	; 0x3c
1a000c3c:	e00d      	b.n	1a000c5a <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a000c3e:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a000c40:	6884      	ldr	r4, [r0, #8]
1a000c42:	68ca      	ldr	r2, [r1, #12]
1a000c44:	1c55      	adds	r5, r2, #1
1a000c46:	60cd      	str	r5, [r1, #12]
1a000c48:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a000c4a:	690a      	ldr	r2, [r1, #16]
1a000c4c:	3a01      	subs	r2, #1
1a000c4e:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a000c50:	690a      	ldr	r2, [r1, #16]
1a000c52:	2a01      	cmp	r2, #1
1a000c54:	dd01      	ble.n	1a000c5a <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a000c56:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000c5a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000c5e:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a000c60:	f023 0210 	bic.w	r2, r3, #16
1a000c64:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a000c66:	f013 0f10 	tst.w	r3, #16
1a000c6a:	d019      	beq.n	1a000ca0 <handleMasterXferState+0x110>
1a000c6c:	7d0b      	ldrb	r3, [r1, #20]
1a000c6e:	2b02      	cmp	r3, #2
1a000c70:	d016      	beq.n	1a000ca0 <handleMasterXferState+0x110>
	return 1;
1a000c72:	2001      	movs	r0, #1
}
1a000c74:	bc30      	pop	{r4, r5}
1a000c76:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a000c78:	233c      	movs	r3, #60	; 0x3c
1a000c7a:	e7e9      	b.n	1a000c50 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a000c7c:	2305      	movs	r3, #5
1a000c7e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000c80:	232c      	movs	r3, #44	; 0x2c
		break;
1a000c82:	e7ea      	b.n	1a000c5a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a000c84:	2301      	movs	r3, #1
1a000c86:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000c88:	232c      	movs	r3, #44	; 0x2c
		break;
1a000c8a:	e7e6      	b.n	1a000c5a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a000c8c:	2302      	movs	r3, #2
1a000c8e:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a000c90:	233c      	movs	r3, #60	; 0x3c
		break;
1a000c92:	e7e2      	b.n	1a000c5a <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a000c94:	2303      	movs	r3, #3
1a000c96:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000c98:	232c      	movs	r3, #44	; 0x2c
1a000c9a:	e7de      	b.n	1a000c5a <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a000c9c:	233c      	movs	r3, #60	; 0x3c
1a000c9e:	e7dc      	b.n	1a000c5a <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a000ca0:	7d0b      	ldrb	r3, [r1, #20]
1a000ca2:	2b04      	cmp	r3, #4
1a000ca4:	d001      	beq.n	1a000caa <handleMasterXferState+0x11a>
		return 0;
1a000ca6:	2000      	movs	r0, #0
1a000ca8:	e7e4      	b.n	1a000c74 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a000caa:	2300      	movs	r3, #0
1a000cac:	750b      	strb	r3, [r1, #20]
1a000cae:	e7fa      	b.n	1a000ca6 <handleMasterXferState+0x116>

1a000cb0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000cb0:	b570      	push	{r4, r5, r6, lr}
1a000cb2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000cb4:	4e06      	ldr	r6, [pc, #24]	; (1a000cd0 <Chip_I2C_Init+0x20>)
1a000cb6:	00c4      	lsls	r4, r0, #3
1a000cb8:	1a22      	subs	r2, r4, r0
1a000cba:	0093      	lsls	r3, r2, #2
1a000cbc:	4433      	add	r3, r6
1a000cbe:	8898      	ldrh	r0, [r3, #4]
1a000cc0:	f000 fc74 	bl	1a0015ac <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000cc4:	1b64      	subs	r4, r4, r5
1a000cc6:	00a3      	lsls	r3, r4, #2
1a000cc8:	58f3      	ldr	r3, [r6, r3]
1a000cca:	226c      	movs	r2, #108	; 0x6c
1a000ccc:	619a      	str	r2, [r3, #24]
}
1a000cce:	bd70      	pop	{r4, r5, r6, pc}
1a000cd0:	10000004 	.word	0x10000004

1a000cd4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000cd8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000cda:	4e0b      	ldr	r6, [pc, #44]	; (1a000d08 <Chip_I2C_SetClockRate+0x34>)
1a000cdc:	00c5      	lsls	r5, r0, #3
1a000cde:	1a2b      	subs	r3, r5, r0
1a000ce0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000ce4:	eb06 0308 	add.w	r3, r6, r8
1a000ce8:	8898      	ldrh	r0, [r3, #4]
1a000cea:	f000 fc79 	bl	1a0015e0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000cee:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000cf2:	f856 3008 	ldr.w	r3, [r6, r8]
1a000cf6:	0842      	lsrs	r2, r0, #1
1a000cf8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000cfa:	f856 3008 	ldr.w	r3, [r6, r8]
1a000cfe:	691a      	ldr	r2, [r3, #16]
1a000d00:	1a80      	subs	r0, r0, r2
1a000d02:	6158      	str	r0, [r3, #20]
}
1a000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d08:	10000004 	.word	0x10000004

1a000d0c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a000d0c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000d10:	009a      	lsls	r2, r3, #2
1a000d12:	4b09      	ldr	r3, [pc, #36]	; (1a000d38 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d14:	4413      	add	r3, r2
1a000d16:	691b      	ldr	r3, [r3, #16]
1a000d18:	b153      	cbz	r3, 1a000d30 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a000d1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d1e:	0082      	lsls	r2, r0, #2
1a000d20:	4b05      	ldr	r3, [pc, #20]	; (1a000d38 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d22:	4413      	add	r3, r2
1a000d24:	6898      	ldr	r0, [r3, #8]
}
1a000d26:	4288      	cmp	r0, r1
1a000d28:	bf14      	ite	ne
1a000d2a:	2000      	movne	r0, #0
1a000d2c:	2001      	moveq	r0, #1
1a000d2e:	4770      	bx	lr
		iic->mEvent = event;
1a000d30:	4b01      	ldr	r3, [pc, #4]	; (1a000d38 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d32:	4413      	add	r3, r2
1a000d34:	6099      	str	r1, [r3, #8]
1a000d36:	e7f0      	b.n	1a000d1a <Chip_I2C_SetMasterEventHandler+0xe>
1a000d38:	10000004 	.word	0x10000004

1a000d3c <Chip_I2C_MasterTransfer>:
	return i2c[id].mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
1a000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000d3e:	4605      	mov	r5, r0
1a000d40:	460e      	mov	r6, r1
	struct i2c_interface *iic = &i2c[id];
1a000d42:	4604      	mov	r4, r0

	iic->mEvent(id, I2C_EVENT_LOCK);
1a000d44:	00c3      	lsls	r3, r0, #3
1a000d46:	1a1b      	subs	r3, r3, r0
1a000d48:	009a      	lsls	r2, r3, #2
1a000d4a:	4f20      	ldr	r7, [pc, #128]	; (1a000dcc <Chip_I2C_MasterTransfer+0x90>)
1a000d4c:	4417      	add	r7, r2
1a000d4e:	68bb      	ldr	r3, [r7, #8]
1a000d50:	2103      	movs	r1, #3
1a000d52:	4798      	blx	r3
	xfer->status = I2C_STATUS_BUSY;
1a000d54:	2304      	movs	r3, #4
1a000d56:	7533      	strb	r3, [r6, #20]
	iic->mXfer = xfer;
1a000d58:	613e      	str	r6, [r7, #16]

	/* If slave xfer not in progress */
	if (!iic->sXfer) {
1a000d5a:	697b      	ldr	r3, [r7, #20]
1a000d5c:	b35b      	cbz	r3, 1a000db6 <Chip_I2C_MasterTransfer+0x7a>
		startMasterXfer(iic->ip);
	}
	iic->mEvent(id, I2C_EVENT_WAIT);
1a000d5e:	00eb      	lsls	r3, r5, #3
1a000d60:	1b5b      	subs	r3, r3, r5
1a000d62:	009a      	lsls	r2, r3, #2
1a000d64:	4f19      	ldr	r7, [pc, #100]	; (1a000dcc <Chip_I2C_MasterTransfer+0x90>)
1a000d66:	4417      	add	r7, r2
1a000d68:	68bb      	ldr	r3, [r7, #8]
1a000d6a:	2101      	movs	r1, #1
1a000d6c:	4628      	mov	r0, r5
1a000d6e:	4798      	blx	r3
	iic->mXfer = 0;
1a000d70:	2300      	movs	r3, #0
1a000d72:	613b      	str	r3, [r7, #16]

	/* Wait for stop condition to appear on bus */
	while (!isI2CBusFree(iic->ip)) {}
1a000d74:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
1a000d78:	0093      	lsls	r3, r2, #2
1a000d7a:	4a14      	ldr	r2, [pc, #80]	; (1a000dcc <Chip_I2C_MasterTransfer+0x90>)
1a000d7c:	58d3      	ldr	r3, [r2, r3]
	return !(pI2C->CONSET & I2C_CON_STO);
1a000d7e:	681a      	ldr	r2, [r3, #0]
	while (!isI2CBusFree(iic->ip)) {}
1a000d80:	f012 0f10 	tst.w	r2, #16
1a000d84:	d1f6      	bne.n	1a000d74 <Chip_I2C_MasterTransfer+0x38>

	/* Start slave if one is active */
	if (SLAVE_ACTIVE(iic)) {
1a000d86:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
1a000d8a:	0091      	lsls	r1, r2, #2
1a000d8c:	4a0f      	ldr	r2, [pc, #60]	; (1a000dcc <Chip_I2C_MasterTransfer+0x90>)
1a000d8e:	440a      	add	r2, r1
1a000d90:	6992      	ldr	r2, [r2, #24]
1a000d92:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
1a000d96:	d003      	beq.n	1a000da0 <Chip_I2C_MasterTransfer+0x64>
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA;
1a000d98:	2228      	movs	r2, #40	; 0x28
1a000d9a:	619a      	str	r2, [r3, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_AA;
1a000d9c:	2244      	movs	r2, #68	; 0x44
1a000d9e:	601a      	str	r2, [r3, #0]
		startSlaverXfer(iic->ip);
	}

	iic->mEvent(id, I2C_EVENT_UNLOCK);
1a000da0:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
1a000da4:	009a      	lsls	r2, r3, #2
1a000da6:	4b09      	ldr	r3, [pc, #36]	; (1a000dcc <Chip_I2C_MasterTransfer+0x90>)
1a000da8:	4413      	add	r3, r2
1a000daa:	689b      	ldr	r3, [r3, #8]
1a000dac:	2104      	movs	r1, #4
1a000dae:	4628      	mov	r0, r5
1a000db0:	4798      	blx	r3
	return (int) xfer->status;
}
1a000db2:	7d30      	ldrb	r0, [r6, #20]
1a000db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		startMasterXfer(iic->ip);
1a000db6:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
1a000dba:	0093      	lsls	r3, r2, #2
1a000dbc:	4a03      	ldr	r2, [pc, #12]	; (1a000dcc <Chip_I2C_MasterTransfer+0x90>)
1a000dbe:	58d3      	ldr	r3, [r2, r3]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a000dc0:	222c      	movs	r2, #44	; 0x2c
1a000dc2:	619a      	str	r2, [r3, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a000dc4:	2260      	movs	r2, #96	; 0x60
1a000dc6:	601a      	str	r2, [r3, #0]
1a000dc8:	e7c9      	b.n	1a000d5e <Chip_I2C_MasterTransfer+0x22>
1a000dca:	bf00      	nop
1a000dcc:	10000004 	.word	0x10000004

1a000dd0 <Chip_I2C_MasterSend>:

/* Master tx only */
int Chip_I2C_MasterSend(I2C_ID_T id, uint8_t slaveAddr, const uint8_t *buff, uint8_t len)
{
1a000dd0:	b530      	push	{r4, r5, lr}
1a000dd2:	b087      	sub	sp, #28
1a000dd4:	4604      	mov	r4, r0
1a000dd6:	461d      	mov	r5, r3
	I2C_XFER_T xfer = {0};
1a000dd8:	2300      	movs	r3, #0
1a000dda:	9300      	str	r3, [sp, #0]
1a000ddc:	9303      	str	r3, [sp, #12]
1a000dde:	9304      	str	r3, [sp, #16]
1a000de0:	9305      	str	r3, [sp, #20]
	xfer.slaveAddr = slaveAddr;
1a000de2:	f88d 1000 	strb.w	r1, [sp]
	xfer.txBuff = buff;
1a000de6:	9201      	str	r2, [sp, #4]
	xfer.txSz = len;
1a000de8:	9502      	str	r5, [sp, #8]
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {}
1a000dea:	4669      	mov	r1, sp
1a000dec:	4620      	mov	r0, r4
1a000dee:	f7ff ffa5 	bl	1a000d3c <Chip_I2C_MasterTransfer>
1a000df2:	2802      	cmp	r0, #2
1a000df4:	d0f9      	beq.n	1a000dea <Chip_I2C_MasterSend+0x1a>
	return len - xfer.txSz;
}
1a000df6:	9802      	ldr	r0, [sp, #8]
1a000df8:	1a28      	subs	r0, r5, r0
1a000dfa:	b007      	add	sp, #28
1a000dfc:	bd30      	pop	{r4, r5, pc}

1a000dfe <Chip_I2C_MasterCmdRead>:

/* Transmit one byte and receive an array of bytes after a repeated start condition is generated in Master mode.
 * This function is useful for communicating with the I2C slave registers
 */
int Chip_I2C_MasterCmdRead(I2C_ID_T id, uint8_t slaveAddr, uint8_t cmd, uint8_t *buff, int len)
{
1a000dfe:	b530      	push	{r4, r5, lr}
1a000e00:	b089      	sub	sp, #36	; 0x24
1a000e02:	4604      	mov	r4, r0
1a000e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1a000e06:	f88d 2007 	strb.w	r2, [sp, #7]
	I2C_XFER_T xfer = {0};
1a000e0a:	2200      	movs	r2, #0
1a000e0c:	9202      	str	r2, [sp, #8]
1a000e0e:	9207      	str	r2, [sp, #28]
	xfer.slaveAddr = slaveAddr;
1a000e10:	f88d 1008 	strb.w	r1, [sp, #8]
	xfer.txBuff = &cmd;
1a000e14:	f10d 0207 	add.w	r2, sp, #7
1a000e18:	9203      	str	r2, [sp, #12]
	xfer.txSz = 1;
1a000e1a:	2201      	movs	r2, #1
1a000e1c:	9204      	str	r2, [sp, #16]
	xfer.rxBuff = buff;
1a000e1e:	9305      	str	r3, [sp, #20]
	xfer.rxSz = len;
1a000e20:	9506      	str	r5, [sp, #24]
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {}
1a000e22:	a902      	add	r1, sp, #8
1a000e24:	4620      	mov	r0, r4
1a000e26:	f7ff ff89 	bl	1a000d3c <Chip_I2C_MasterTransfer>
1a000e2a:	2802      	cmp	r0, #2
1a000e2c:	d0f9      	beq.n	1a000e22 <Chip_I2C_MasterCmdRead+0x24>
	return len - xfer.rxSz;
}
1a000e2e:	9806      	ldr	r0, [sp, #24]
1a000e30:	1a28      	subs	r0, r5, r0
1a000e32:	b009      	add	sp, #36	; 0x24
1a000e34:	bd30      	pop	{r4, r5, pc}
1a000e36:	Address 0x000000001a000e36 is out of bounds.


1a000e38 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a000e38:	b510      	push	{r4, lr}
1a000e3a:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a000e3c:	4809      	ldr	r0, [pc, #36]	; (1a000e64 <Chip_I2C_MasterStateHandler+0x2c>)
1a000e3e:	00e3      	lsls	r3, r4, #3
1a000e40:	1b1b      	subs	r3, r3, r4
1a000e42:	009a      	lsls	r2, r3, #2
1a000e44:	1883      	adds	r3, r0, r2
1a000e46:	6919      	ldr	r1, [r3, #16]
1a000e48:	5880      	ldr	r0, [r0, r2]
1a000e4a:	f7ff fea1 	bl	1a000b90 <handleMasterXferState>
1a000e4e:	b940      	cbnz	r0, 1a000e62 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a000e50:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a000e54:	009a      	lsls	r2, r3, #2
1a000e56:	4b03      	ldr	r3, [pc, #12]	; (1a000e64 <Chip_I2C_MasterStateHandler+0x2c>)
1a000e58:	4413      	add	r3, r2
1a000e5a:	689b      	ldr	r3, [r3, #8]
1a000e5c:	2102      	movs	r1, #2
1a000e5e:	4620      	mov	r0, r4
1a000e60:	4798      	blx	r3
	}
}
1a000e62:	bd10      	pop	{r4, pc}
1a000e64:	10000004 	.word	0x10000004

1a000e68 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000e68:	4b09      	ldr	r3, [pc, #36]	; (1a000e90 <Chip_UART_GetIndex+0x28>)
1a000e6a:	4298      	cmp	r0, r3
1a000e6c:	d009      	beq.n	1a000e82 <Chip_UART_GetIndex+0x1a>
1a000e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000e72:	4298      	cmp	r0, r3
1a000e74:	d007      	beq.n	1a000e86 <Chip_UART_GetIndex+0x1e>
1a000e76:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000e7a:	4298      	cmp	r0, r3
1a000e7c:	d005      	beq.n	1a000e8a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000e7e:	2000      	movs	r0, #0
1a000e80:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000e82:	2002      	movs	r0, #2
1a000e84:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000e86:	2003      	movs	r0, #3
1a000e88:	4770      	bx	lr
			return 1;
1a000e8a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000e8c:	4770      	bx	lr
1a000e8e:	bf00      	nop
1a000e90:	400c1000 	.word	0x400c1000

1a000e94 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e94:	b530      	push	{r4, r5, lr}
1a000e96:	b083      	sub	sp, #12
1a000e98:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e9a:	f7ff ffe5 	bl	1a000e68 <Chip_UART_GetIndex>
1a000e9e:	2301      	movs	r3, #1
1a000ea0:	461a      	mov	r2, r3
1a000ea2:	4619      	mov	r1, r3
1a000ea4:	4d0e      	ldr	r5, [pc, #56]	; (1a000ee0 <Chip_UART_Init+0x4c>)
1a000ea6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000eaa:	f000 fb61 	bl	1a001570 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000eae:	2307      	movs	r3, #7
1a000eb0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000eb2:	2300      	movs	r3, #0
1a000eb4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000eb6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000eb8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000eba:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000ebc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000ebe:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000ec0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000ec2:	4b08      	ldr	r3, [pc, #32]	; (1a000ee4 <Chip_UART_Init+0x50>)
1a000ec4:	429c      	cmp	r4, r3
1a000ec6:	d006      	beq.n	1a000ed6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000ec8:	2303      	movs	r3, #3
1a000eca:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000ecc:	2310      	movs	r3, #16
1a000ece:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000ed0:	9b01      	ldr	r3, [sp, #4]
}
1a000ed2:	b003      	add	sp, #12
1a000ed4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000ed6:	2300      	movs	r3, #0
1a000ed8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000eda:	69a3      	ldr	r3, [r4, #24]
1a000edc:	9301      	str	r3, [sp, #4]
1a000ede:	e7f3      	b.n	1a000ec8 <Chip_UART_Init+0x34>
1a000ee0:	1a006d5c 	.word	0x1a006d5c
1a000ee4:	40082000 	.word	0x40082000

1a000ee8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000eec:	b083      	sub	sp, #12
1a000eee:	9001      	str	r0, [sp, #4]
1a000ef0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ef2:	f7ff ffb9 	bl	1a000e68 <Chip_UART_GetIndex>
1a000ef6:	4b32      	ldr	r3, [pc, #200]	; (1a000fc0 <Chip_UART_SetBaudFDR+0xd8>)
1a000ef8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000efc:	f000 fb70 	bl	1a0015e0 <Chip_Clock_GetRate>
1a000f00:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000f02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f06:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000f08:	f04f 0b00 	mov.w	fp, #0
1a000f0c:	46a2      	mov	sl, r4
1a000f0e:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000f10:	e02a      	b.n	1a000f68 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000f12:	4242      	negs	r2, r0
				div ++;
1a000f14:	1c4b      	adds	r3, r1, #1
1a000f16:	e017      	b.n	1a000f48 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000f18:	b30a      	cbz	r2, 1a000f5e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000f1a:	4617      	mov	r7, r2
			sd = d;
1a000f1c:	46ab      	mov	fp, r5
			sm = m;
1a000f1e:	46a2      	mov	sl, r4
			sdiv = div;
1a000f20:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000f22:	3501      	adds	r5, #1
1a000f24:	42ac      	cmp	r4, r5
1a000f26:	d91e      	bls.n	1a000f66 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f28:	0933      	lsrs	r3, r6, #4
1a000f2a:	0730      	lsls	r0, r6, #28
1a000f2c:	fba4 0100 	umull	r0, r1, r4, r0
1a000f30:	fb04 1103 	mla	r1, r4, r3, r1
1a000f34:	1962      	adds	r2, r4, r5
1a000f36:	fb08 f202 	mul.w	r2, r8, r2
1a000f3a:	2300      	movs	r3, #0
1a000f3c:	f001 fba2 	bl	1a002684 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000f40:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000f42:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000f44:	2800      	cmp	r0, #0
1a000f46:	dbe4      	blt.n	1a000f12 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f48:	4297      	cmp	r7, r2
1a000f4a:	d3ea      	bcc.n	1a000f22 <Chip_UART_SetBaudFDR+0x3a>
1a000f4c:	2b00      	cmp	r3, #0
1a000f4e:	d0e8      	beq.n	1a000f22 <Chip_UART_SetBaudFDR+0x3a>
1a000f50:	0c19      	lsrs	r1, r3, #16
1a000f52:	d1e6      	bne.n	1a000f22 <Chip_UART_SetBaudFDR+0x3a>
1a000f54:	2b02      	cmp	r3, #2
1a000f56:	d8df      	bhi.n	1a000f18 <Chip_UART_SetBaudFDR+0x30>
1a000f58:	2d00      	cmp	r5, #0
1a000f5a:	d0dd      	beq.n	1a000f18 <Chip_UART_SetBaudFDR+0x30>
1a000f5c:	e7e1      	b.n	1a000f22 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000f5e:	4617      	mov	r7, r2
			sd = d;
1a000f60:	46ab      	mov	fp, r5
			sm = m;
1a000f62:	46a2      	mov	sl, r4
			sdiv = div;
1a000f64:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000f66:	3401      	adds	r4, #1
1a000f68:	b11f      	cbz	r7, 1a000f72 <Chip_UART_SetBaudFDR+0x8a>
1a000f6a:	2c0f      	cmp	r4, #15
1a000f6c:	d801      	bhi.n	1a000f72 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000f6e:	2500      	movs	r5, #0
1a000f70:	e7d8      	b.n	1a000f24 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000f72:	f1b9 0f00 	cmp.w	r9, #0
1a000f76:	d01e      	beq.n	1a000fb6 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000f78:	9a01      	ldr	r2, [sp, #4]
1a000f7a:	4611      	mov	r1, r2
1a000f7c:	68d3      	ldr	r3, [r2, #12]
1a000f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f82:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000f84:	fa5f f389 	uxtb.w	r3, r9
1a000f88:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000f8a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000f8e:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000f90:	68d3      	ldr	r3, [r2, #12]
1a000f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f96:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000f98:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000f9c:	b2db      	uxtb	r3, r3
1a000f9e:	f00b 020f 	and.w	r2, fp, #15
1a000fa2:	4313      	orrs	r3, r2
1a000fa4:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000fa6:	0933      	lsrs	r3, r6, #4
1a000fa8:	fb0a f303 	mul.w	r3, sl, r3
1a000fac:	44da      	add	sl, fp
1a000fae:	fb09 f90a 	mul.w	r9, r9, sl
1a000fb2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000fb6:	4648      	mov	r0, r9
1a000fb8:	b003      	add	sp, #12
1a000fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000fbe:	bf00      	nop
1a000fc0:	1a006d54 	.word	0x1a006d54

1a000fc4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000fc4:	4b03      	ldr	r3, [pc, #12]	; (1a000fd4 <Chip_ADC_GetClockIndex+0x10>)
1a000fc6:	4298      	cmp	r0, r3
1a000fc8:	d001      	beq.n	1a000fce <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000fca:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000fcc:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000fce:	2004      	movs	r0, #4
1a000fd0:	4770      	bx	lr
1a000fd2:	bf00      	nop
1a000fd4:	400e4000 	.word	0x400e4000

1a000fd8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000fd8:	b570      	push	{r4, r5, r6, lr}
1a000fda:	460d      	mov	r5, r1
1a000fdc:	4614      	mov	r4, r2
1a000fde:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000fe0:	f7ff fff0 	bl	1a000fc4 <Chip_ADC_GetClockIndex>
1a000fe4:	f000 fafc 	bl	1a0015e0 <Chip_Clock_GetRate>
	if (burstMode) {
1a000fe8:	b155      	cbz	r5, 1a001000 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000fea:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000fee:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000ff2:	0064      	lsls	r4, r4, #1
1a000ff4:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ff8:	b2c0      	uxtb	r0, r0
1a000ffa:	3801      	subs	r0, #1
	return div;
}
1a000ffc:	b2c0      	uxtb	r0, r0
1a000ffe:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001000:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001004:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001008:	e7f1      	b.n	1a000fee <getClkDiv+0x16>
1a00100a:	Address 0x000000001a00100a is out of bounds.


1a00100c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00100c:	b538      	push	{r3, r4, r5, lr}
1a00100e:	4605      	mov	r5, r0
1a001010:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001012:	f7ff ffd7 	bl	1a000fc4 <Chip_ADC_GetClockIndex>
1a001016:	2301      	movs	r3, #1
1a001018:	461a      	mov	r2, r3
1a00101a:	4619      	mov	r1, r3
1a00101c:	f000 faa8 	bl	1a001570 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001020:	2100      	movs	r1, #0
1a001022:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001024:	4a08      	ldr	r2, [pc, #32]	; (1a001048 <Chip_ADC_Init+0x3c>)
1a001026:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001028:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00102a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00102c:	230b      	movs	r3, #11
1a00102e:	4628      	mov	r0, r5
1a001030:	f7ff ffd2 	bl	1a000fd8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001034:	0200      	lsls	r0, r0, #8
1a001036:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00103a:	7920      	ldrb	r0, [r4, #4]
1a00103c:	0440      	lsls	r0, r0, #17
1a00103e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001042:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001044:	6028      	str	r0, [r5, #0]
}
1a001046:	bd38      	pop	{r3, r4, r5, pc}
1a001048:	00061a80 	.word	0x00061a80

1a00104c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00104c:	b570      	push	{r4, r5, r6, lr}
1a00104e:	4605      	mov	r5, r0
1a001050:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001052:	6804      	ldr	r4, [r0, #0]
1a001054:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001058:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00105c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00105e:	790b      	ldrb	r3, [r1, #4]
1a001060:	f1c3 030b 	rsb	r3, r3, #11
1a001064:	b2db      	uxtb	r3, r3
1a001066:	7949      	ldrb	r1, [r1, #5]
1a001068:	f7ff ffb6 	bl	1a000fd8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00106c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001070:	7933      	ldrb	r3, [r6, #4]
1a001072:	045b      	lsls	r3, r3, #17
1a001074:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001078:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a00107a:	602b      	str	r3, [r5, #0]
}
1a00107c:	bd70      	pop	{r4, r5, r6, pc}

1a00107e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00107e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001080:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001082:	680a      	ldr	r2, [r1, #0]
1a001084:	f7ff ffe2 	bl	1a00104c <Chip_ADC_SetSampleRate>
}
1a001088:	bd08      	pop	{r3, pc}
1a00108a:	Address 0x000000001a00108a is out of bounds.


1a00108c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00108c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00108e:	2069      	movs	r0, #105	; 0x69
1a001090:	f000 faa6 	bl	1a0015e0 <Chip_Clock_GetRate>
1a001094:	4b01      	ldr	r3, [pc, #4]	; (1a00109c <SystemCoreClockUpdate+0x10>)
1a001096:	6018      	str	r0, [r3, #0]
}
1a001098:	bd08      	pop	{r3, pc}
1a00109a:	bf00      	nop
1a00109c:	10000afc 	.word	0x10000afc

1a0010a0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0010a0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0010a2:	680b      	ldr	r3, [r1, #0]
1a0010a4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010a8:	d002      	beq.n	1a0010b0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0010aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0010ae:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0010b0:	4607      	mov	r7, r0
1a0010b2:	2501      	movs	r5, #1
1a0010b4:	e03a      	b.n	1a00112c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0010b6:	694b      	ldr	r3, [r1, #20]
1a0010b8:	fb03 f302 	mul.w	r3, r3, r2
1a0010bc:	fbb3 f3f5 	udiv	r3, r3, r5
1a0010c0:	e01c      	b.n	1a0010fc <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0010c2:	461c      	mov	r4, r3
	if (val < 0)
1a0010c4:	ebb0 0c04 	subs.w	ip, r0, r4
1a0010c8:	d427      	bmi.n	1a00111a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0010ca:	4567      	cmp	r7, ip
1a0010cc:	d906      	bls.n	1a0010dc <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a0010ce:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0010d0:	1c77      	adds	r7, r6, #1
1a0010d2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0010d4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0010d6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0010d8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0010da:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a0010dc:	3201      	adds	r2, #1
1a0010de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0010e2:	dc1d      	bgt.n	1a001120 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a0010e4:	680c      	ldr	r4, [r1, #0]
1a0010e6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0010ea:	d0e4      	beq.n	1a0010b6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0010ec:	1c73      	adds	r3, r6, #1
1a0010ee:	fa02 fc03 	lsl.w	ip, r2, r3
1a0010f2:	694b      	ldr	r3, [r1, #20]
1a0010f4:	fb03 f30c 	mul.w	r3, r3, ip
1a0010f8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0010fc:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001138 <pll_calc_divs+0x98>
1a001100:	4563      	cmp	r3, ip
1a001102:	d9eb      	bls.n	1a0010dc <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001104:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a00113c <pll_calc_divs+0x9c>
1a001108:	4563      	cmp	r3, ip
1a00110a:	d809      	bhi.n	1a001120 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a00110c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001110:	d1d7      	bne.n	1a0010c2 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001112:	1c74      	adds	r4, r6, #1
1a001114:	fa23 f404 	lsr.w	r4, r3, r4
1a001118:	e7d4      	b.n	1a0010c4 <pll_calc_divs+0x24>
		return -val;
1a00111a:	f1cc 0c00 	rsb	ip, ip, #0
1a00111e:	e7d4      	b.n	1a0010ca <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001120:	3601      	adds	r6, #1
1a001122:	2e03      	cmp	r6, #3
1a001124:	dc01      	bgt.n	1a00112a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001126:	2201      	movs	r2, #1
1a001128:	e7d9      	b.n	1a0010de <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00112a:	3501      	adds	r5, #1
1a00112c:	2d04      	cmp	r5, #4
1a00112e:	dc01      	bgt.n	1a001134 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001130:	2600      	movs	r6, #0
1a001132:	e7f6      	b.n	1a001122 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001134:	bcf0      	pop	{r4, r5, r6, r7}
1a001136:	4770      	bx	lr
1a001138:	094c5eff 	.word	0x094c5eff
1a00113c:	1312d000 	.word	0x1312d000

1a001140 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001140:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001142:	b099      	sub	sp, #100	; 0x64
1a001144:	4605      	mov	r5, r0
1a001146:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001148:	225c      	movs	r2, #92	; 0x5c
1a00114a:	2100      	movs	r1, #0
1a00114c:	a801      	add	r0, sp, #4
1a00114e:	f002 f8db 	bl	1a003308 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001152:	2380      	movs	r3, #128	; 0x80
1a001154:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001156:	6963      	ldr	r3, [r4, #20]
1a001158:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00115a:	7923      	ldrb	r3, [r4, #4]
1a00115c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001160:	4669      	mov	r1, sp
1a001162:	4628      	mov	r0, r5
1a001164:	f7ff ff9c 	bl	1a0010a0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001168:	9b06      	ldr	r3, [sp, #24]
1a00116a:	42ab      	cmp	r3, r5
1a00116c:	d027      	beq.n	1a0011be <pll_get_frac+0x7e>
	if (val < 0)
1a00116e:	1aeb      	subs	r3, r5, r3
1a001170:	d42e      	bmi.n	1a0011d0 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001172:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001174:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00117a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00117c:	6963      	ldr	r3, [r4, #20]
1a00117e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001180:	7923      	ldrb	r3, [r4, #4]
1a001182:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001186:	a910      	add	r1, sp, #64	; 0x40
1a001188:	4628      	mov	r0, r5
1a00118a:	f7ff ff89 	bl	1a0010a0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00118e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001190:	42ab      	cmp	r3, r5
1a001192:	d01f      	beq.n	1a0011d4 <pll_get_frac+0x94>
	if (val < 0)
1a001194:	1aeb      	subs	r3, r5, r3
1a001196:	d425      	bmi.n	1a0011e4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001198:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00119a:	4b2b      	ldr	r3, [pc, #172]	; (1a001248 <pll_get_frac+0x108>)
1a00119c:	429d      	cmp	r5, r3
1a00119e:	d923      	bls.n	1a0011e8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0011a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0011a2:	1aed      	subs	r5, r5, r3
1a0011a4:	d433      	bmi.n	1a00120e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0011a6:	42ae      	cmp	r6, r5
1a0011a8:	dc3b      	bgt.n	1a001222 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0011aa:	42be      	cmp	r6, r7
1a0011ac:	dc31      	bgt.n	1a001212 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0011ae:	466d      	mov	r5, sp
1a0011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0011bc:	e006      	b.n	1a0011cc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0011be:	466d      	mov	r5, sp
1a0011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0011cc:	b019      	add	sp, #100	; 0x64
1a0011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0011d0:	425b      	negs	r3, r3
1a0011d2:	e7ce      	b.n	1a001172 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0011d4:	ad10      	add	r5, sp, #64	; 0x40
1a0011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0011de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0011e2:	e7f3      	b.n	1a0011cc <pll_get_frac+0x8c>
		return -val;
1a0011e4:	425b      	negs	r3, r3
1a0011e6:	e7d7      	b.n	1a001198 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0011e8:	2340      	movs	r3, #64	; 0x40
1a0011ea:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0011ec:	6963      	ldr	r3, [r4, #20]
1a0011ee:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0011f0:	a908      	add	r1, sp, #32
1a0011f2:	4628      	mov	r0, r5
1a0011f4:	f7ff ff54 	bl	1a0010a0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0011f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0011fa:	42ab      	cmp	r3, r5
1a0011fc:	d1d0      	bne.n	1a0011a0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0011fe:	ad08      	add	r5, sp, #32
1a001200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001204:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00120c:	e7de      	b.n	1a0011cc <pll_get_frac+0x8c>
		return -val;
1a00120e:	426d      	negs	r5, r5
1a001210:	e7c9      	b.n	1a0011a6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001212:	ad10      	add	r5, sp, #64	; 0x40
1a001214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001218:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00121c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001220:	e7d4      	b.n	1a0011cc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001222:	42af      	cmp	r7, r5
1a001224:	db07      	blt.n	1a001236 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001226:	ad08      	add	r5, sp, #32
1a001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00122c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001234:	e7ca      	b.n	1a0011cc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001236:	ad10      	add	r5, sp, #64	; 0x40
1a001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00123c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001244:	e7c2      	b.n	1a0011cc <pll_get_frac+0x8c>
1a001246:	bf00      	nop
1a001248:	068e7780 	.word	0x068e7780

1a00124c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00124c:	b430      	push	{r4, r5}
1a00124e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001250:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001252:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001254:	e000      	b.n	1a001258 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001256:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001258:	281c      	cmp	r0, #28
1a00125a:	d118      	bne.n	1a00128e <Chip_Clock_FindBaseClock+0x42>
1a00125c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001260:	0051      	lsls	r1, r2, #1
1a001262:	4a0c      	ldr	r2, [pc, #48]	; (1a001294 <Chip_Clock_FindBaseClock+0x48>)
1a001264:	440a      	add	r2, r1
1a001266:	7914      	ldrb	r4, [r2, #4]
1a001268:	4284      	cmp	r4, r0
1a00126a:	d010      	beq.n	1a00128e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00126c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001270:	004a      	lsls	r2, r1, #1
1a001272:	4908      	ldr	r1, [pc, #32]	; (1a001294 <Chip_Clock_FindBaseClock+0x48>)
1a001274:	5a8a      	ldrh	r2, [r1, r2]
1a001276:	42aa      	cmp	r2, r5
1a001278:	d8ed      	bhi.n	1a001256 <Chip_Clock_FindBaseClock+0xa>
1a00127a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00127e:	0051      	lsls	r1, r2, #1
1a001280:	4a04      	ldr	r2, [pc, #16]	; (1a001294 <Chip_Clock_FindBaseClock+0x48>)
1a001282:	440a      	add	r2, r1
1a001284:	8852      	ldrh	r2, [r2, #2]
1a001286:	42aa      	cmp	r2, r5
1a001288:	d3e5      	bcc.n	1a001256 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00128a:	4620      	mov	r0, r4
1a00128c:	e7e4      	b.n	1a001258 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00128e:	bc30      	pop	{r4, r5}
1a001290:	4770      	bx	lr
1a001292:	bf00      	nop
1a001294:	1a006d70 	.word	0x1a006d70

1a001298 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001298:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00129e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0012a0:	4a0d      	ldr	r2, [pc, #52]	; (1a0012d8 <Chip_Clock_EnableCrystal+0x40>)
1a0012a2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0012a4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0012a8:	6992      	ldr	r2, [r2, #24]
1a0012aa:	428a      	cmp	r2, r1
1a0012ac:	d001      	beq.n	1a0012b2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0012ae:	4a0a      	ldr	r2, [pc, #40]	; (1a0012d8 <Chip_Clock_EnableCrystal+0x40>)
1a0012b0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0012b2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0012b6:	4a09      	ldr	r2, [pc, #36]	; (1a0012dc <Chip_Clock_EnableCrystal+0x44>)
1a0012b8:	6811      	ldr	r1, [r2, #0]
1a0012ba:	4a09      	ldr	r2, [pc, #36]	; (1a0012e0 <Chip_Clock_EnableCrystal+0x48>)
1a0012bc:	4291      	cmp	r1, r2
1a0012be:	d901      	bls.n	1a0012c4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0012c0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0012c4:	4a04      	ldr	r2, [pc, #16]	; (1a0012d8 <Chip_Clock_EnableCrystal+0x40>)
1a0012c6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0012c8:	9b01      	ldr	r3, [sp, #4]
1a0012ca:	1e5a      	subs	r2, r3, #1
1a0012cc:	9201      	str	r2, [sp, #4]
1a0012ce:	2b00      	cmp	r3, #0
1a0012d0:	d1fa      	bne.n	1a0012c8 <Chip_Clock_EnableCrystal+0x30>
}
1a0012d2:	b002      	add	sp, #8
1a0012d4:	4770      	bx	lr
1a0012d6:	bf00      	nop
1a0012d8:	40050000 	.word	0x40050000
1a0012dc:	1a006cd8 	.word	0x1a006cd8
1a0012e0:	01312cff 	.word	0x01312cff

1a0012e4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0012e4:	3012      	adds	r0, #18
1a0012e6:	4b05      	ldr	r3, [pc, #20]	; (1a0012fc <Chip_Clock_GetDividerSource+0x18>)
1a0012e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0012ec:	f010 0f01 	tst.w	r0, #1
1a0012f0:	d102      	bne.n	1a0012f8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0012f2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0012f6:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012f8:	2011      	movs	r0, #17
}
1a0012fa:	4770      	bx	lr
1a0012fc:	40050000 	.word	0x40050000

1a001300 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001300:	f100 0212 	add.w	r2, r0, #18
1a001304:	4b03      	ldr	r3, [pc, #12]	; (1a001314 <Chip_Clock_GetDividerDivisor+0x14>)
1a001306:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00130a:	4b03      	ldr	r3, [pc, #12]	; (1a001318 <Chip_Clock_GetDividerDivisor+0x18>)
1a00130c:	5c18      	ldrb	r0, [r3, r0]
}
1a00130e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001312:	4770      	bx	lr
1a001314:	40050000 	.word	0x40050000
1a001318:	1a006d68 	.word	0x1a006d68

1a00131c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00131c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00131e:	2810      	cmp	r0, #16
1a001320:	d80a      	bhi.n	1a001338 <Chip_Clock_GetClockInputHz+0x1c>
1a001322:	e8df f000 	tbb	[pc, r0]
1a001326:	0b44      	.short	0x0b44
1a001328:	0921180d 	.word	0x0921180d
1a00132c:	2d2a2724 	.word	0x2d2a2724
1a001330:	34300909 	.word	0x34300909
1a001334:	3c38      	.short	0x3c38
1a001336:	40          	.byte	0x40
1a001337:	00          	.byte	0x00
	uint32_t rate = 0;
1a001338:	2000      	movs	r0, #0
1a00133a:	e03a      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00133c:	481e      	ldr	r0, [pc, #120]	; (1a0013b8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00133e:	e038      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001340:	4b1e      	ldr	r3, [pc, #120]	; (1a0013bc <Chip_Clock_GetClockInputHz+0xa0>)
1a001342:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001346:	f003 0307 	and.w	r3, r3, #7
1a00134a:	2b04      	cmp	r3, #4
1a00134c:	d001      	beq.n	1a001352 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00134e:	481c      	ldr	r0, [pc, #112]	; (1a0013c0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001350:	e02f      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a001352:	2000      	movs	r0, #0
1a001354:	e02d      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001356:	4b19      	ldr	r3, [pc, #100]	; (1a0013bc <Chip_Clock_GetClockInputHz+0xa0>)
1a001358:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00135c:	f003 0307 	and.w	r3, r3, #7
1a001360:	2b04      	cmp	r3, #4
1a001362:	d027      	beq.n	1a0013b4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001364:	4816      	ldr	r0, [pc, #88]	; (1a0013c0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001366:	e024      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001368:	4b16      	ldr	r3, [pc, #88]	; (1a0013c4 <Chip_Clock_GetClockInputHz+0xa8>)
1a00136a:	6818      	ldr	r0, [r3, #0]
		break;
1a00136c:	e021      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00136e:	4b16      	ldr	r3, [pc, #88]	; (1a0013c8 <Chip_Clock_GetClockInputHz+0xac>)
1a001370:	6818      	ldr	r0, [r3, #0]
		break;
1a001372:	e01e      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001374:	4b15      	ldr	r3, [pc, #84]	; (1a0013cc <Chip_Clock_GetClockInputHz+0xb0>)
1a001376:	6818      	ldr	r0, [r3, #0]
		break;
1a001378:	e01b      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00137a:	4b14      	ldr	r3, [pc, #80]	; (1a0013cc <Chip_Clock_GetClockInputHz+0xb0>)
1a00137c:	6858      	ldr	r0, [r3, #4]
		break;
1a00137e:	e018      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001380:	f000 f868 	bl	1a001454 <Chip_Clock_GetMainPLLHz>
		break;
1a001384:	e015      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001386:	2100      	movs	r1, #0
1a001388:	f000 f89a 	bl	1a0014c0 <Chip_Clock_GetDivRate>
		break;
1a00138c:	e011      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00138e:	2101      	movs	r1, #1
1a001390:	f000 f896 	bl	1a0014c0 <Chip_Clock_GetDivRate>
		break;
1a001394:	e00d      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001396:	2102      	movs	r1, #2
1a001398:	f000 f892 	bl	1a0014c0 <Chip_Clock_GetDivRate>
		break;
1a00139c:	e009      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00139e:	2103      	movs	r1, #3
1a0013a0:	f000 f88e 	bl	1a0014c0 <Chip_Clock_GetDivRate>
		break;
1a0013a4:	e005      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0013a6:	2104      	movs	r1, #4
1a0013a8:	f000 f88a 	bl	1a0014c0 <Chip_Clock_GetDivRate>
		break;
1a0013ac:	e001      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0013ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0013b2:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0013b4:	4806      	ldr	r0, [pc, #24]	; (1a0013d0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0013b6:	e7fc      	b.n	1a0013b2 <Chip_Clock_GetClockInputHz+0x96>
1a0013b8:	00b71b00 	.word	0x00b71b00
1a0013bc:	40043000 	.word	0x40043000
1a0013c0:	017d7840 	.word	0x017d7840
1a0013c4:	1a006cac 	.word	0x1a006cac
1a0013c8:	1a006cd8 	.word	0x1a006cd8
1a0013cc:	10000aac 	.word	0x10000aac
1a0013d0:	02faf080 	.word	0x02faf080

1a0013d4 <Chip_Clock_CalcMainPLLValue>:
{
1a0013d4:	b538      	push	{r3, r4, r5, lr}
1a0013d6:	4605      	mov	r5, r0
1a0013d8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0013da:	7908      	ldrb	r0, [r1, #4]
1a0013dc:	f7ff ff9e 	bl	1a00131c <Chip_Clock_GetClockInputHz>
1a0013e0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0013e2:	4b19      	ldr	r3, [pc, #100]	; (1a001448 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0013e4:	442b      	add	r3, r5
1a0013e6:	4a19      	ldr	r2, [pc, #100]	; (1a00144c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0013e8:	4293      	cmp	r3, r2
1a0013ea:	d821      	bhi.n	1a001430 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0013ec:	b318      	cbz	r0, 1a001436 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0013ee:	2380      	movs	r3, #128	; 0x80
1a0013f0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0013f2:	2300      	movs	r3, #0
1a0013f4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0013f6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0013f8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0013fc:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0013fe:	4a14      	ldr	r2, [pc, #80]	; (1a001450 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001400:	4295      	cmp	r5, r2
1a001402:	d903      	bls.n	1a00140c <Chip_Clock_CalcMainPLLValue+0x38>
1a001404:	fb03 f000 	mul.w	r0, r3, r0
1a001408:	42a8      	cmp	r0, r5
1a00140a:	d007      	beq.n	1a00141c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00140c:	4621      	mov	r1, r4
1a00140e:	4628      	mov	r0, r5
1a001410:	f7ff fe96 	bl	1a001140 <pll_get_frac>
		if (!ppll->nsel) {
1a001414:	68a3      	ldr	r3, [r4, #8]
1a001416:	b18b      	cbz	r3, 1a00143c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001418:	3b01      	subs	r3, #1
1a00141a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00141c:	6923      	ldr	r3, [r4, #16]
1a00141e:	b183      	cbz	r3, 1a001442 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001420:	68e2      	ldr	r2, [r4, #12]
1a001422:	b10a      	cbz	r2, 1a001428 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001424:	3a01      	subs	r2, #1
1a001426:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001428:	3b01      	subs	r3, #1
1a00142a:	6123      	str	r3, [r4, #16]
	return 0;
1a00142c:	2000      	movs	r0, #0
}
1a00142e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001434:	e7fb      	b.n	1a00142e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00143a:	e7f8      	b.n	1a00142e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00143c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001440:	e7f5      	b.n	1a00142e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001446:	e7f2      	b.n	1a00142e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001448:	ff6b3a10 	.word	0xff6b3a10
1a00144c:	0b940510 	.word	0x0b940510
1a001450:	094c5eff 	.word	0x094c5eff

1a001454 <Chip_Clock_GetMainPLLHz>:
{
1a001454:	b530      	push	{r4, r5, lr}
1a001456:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001458:	4d17      	ldr	r5, [pc, #92]	; (1a0014b8 <Chip_Clock_GetMainPLLHz+0x64>)
1a00145a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00145c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001460:	f7ff ff5c 	bl	1a00131c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001464:	4b15      	ldr	r3, [pc, #84]	; (1a0014bc <Chip_Clock_GetMainPLLHz+0x68>)
1a001466:	681b      	ldr	r3, [r3, #0]
1a001468:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00146a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00146c:	f013 0f01 	tst.w	r3, #1
1a001470:	d020      	beq.n	1a0014b4 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001472:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001476:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00147a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00147e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001482:	3301      	adds	r3, #1
	n = nsel + 1;
1a001484:	3201      	adds	r2, #1
	p = ptab[psel];
1a001486:	f10d 0c08 	add.w	ip, sp, #8
1a00148a:	4461      	add	r1, ip
1a00148c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001490:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001494:	d108      	bne.n	1a0014a8 <Chip_Clock_GetMainPLLHz+0x54>
1a001496:	b93d      	cbnz	r5, 1a0014a8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001498:	0049      	lsls	r1, r1, #1
1a00149a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00149e:	fbb0 f0f2 	udiv	r0, r0, r2
1a0014a2:	fb00 f003 	mul.w	r0, r0, r3
1a0014a6:	e003      	b.n	1a0014b0 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0014a8:	fbb0 f0f2 	udiv	r0, r0, r2
1a0014ac:	fb03 f000 	mul.w	r0, r3, r0
}
1a0014b0:	b003      	add	sp, #12
1a0014b2:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0014b4:	2000      	movs	r0, #0
1a0014b6:	e7fb      	b.n	1a0014b0 <Chip_Clock_GetMainPLLHz+0x5c>
1a0014b8:	40050000 	.word	0x40050000
1a0014bc:	1a006d64 	.word	0x1a006d64

1a0014c0 <Chip_Clock_GetDivRate>:
{
1a0014c0:	b538      	push	{r3, r4, r5, lr}
1a0014c2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0014c4:	4608      	mov	r0, r1
1a0014c6:	f7ff ff0d 	bl	1a0012e4 <Chip_Clock_GetDividerSource>
1a0014ca:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0014cc:	4620      	mov	r0, r4
1a0014ce:	f7ff ff17 	bl	1a001300 <Chip_Clock_GetDividerDivisor>
1a0014d2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0014d4:	4628      	mov	r0, r5
1a0014d6:	f7ff ff21 	bl	1a00131c <Chip_Clock_GetClockInputHz>
1a0014da:	3401      	adds	r4, #1
}
1a0014dc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0014e0:	bd38      	pop	{r3, r4, r5, pc}
1a0014e2:	Address 0x000000001a0014e2 is out of bounds.


1a0014e4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0014e4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0014e6:	f100 0416 	add.w	r4, r0, #22
1a0014ea:	00a4      	lsls	r4, r4, #2
1a0014ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0014f0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0014f4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0014f6:	281b      	cmp	r0, #27
1a0014f8:	d813      	bhi.n	1a001522 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0014fa:	2911      	cmp	r1, #17
1a0014fc:	d01a      	beq.n	1a001534 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0014fe:	4d0e      	ldr	r5, [pc, #56]	; (1a001538 <Chip_Clock_SetBaseClock+0x54>)
1a001500:	4025      	ands	r5, r4

			if (autoblocken) {
1a001502:	b10a      	cbz	r2, 1a001508 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001504:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001508:	b10b      	cbz	r3, 1a00150e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00150a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00150e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001512:	3016      	adds	r0, #22
1a001514:	0080      	lsls	r0, r0, #2
1a001516:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00151a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00151e:	6045      	str	r5, [r0, #4]
1a001520:	e008      	b.n	1a001534 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001522:	f044 0401 	orr.w	r4, r4, #1
1a001526:	3016      	adds	r0, #22
1a001528:	0080      	lsls	r0, r0, #2
1a00152a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00152e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001532:	6044      	str	r4, [r0, #4]
	}
}
1a001534:	bc30      	pop	{r4, r5}
1a001536:	4770      	bx	lr
1a001538:	e0fff7fe 	.word	0xe0fff7fe

1a00153c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00153c:	281b      	cmp	r0, #27
1a00153e:	d80c      	bhi.n	1a00155a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001540:	3016      	adds	r0, #22
1a001542:	0080      	lsls	r0, r0, #2
1a001544:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001548:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00154c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00154e:	f010 0f01 	tst.w	r0, #1
1a001552:	d104      	bne.n	1a00155e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001554:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001558:	4770      	bx	lr
		return CLKINPUT_PD;
1a00155a:	2011      	movs	r0, #17
1a00155c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00155e:	2011      	movs	r0, #17
}
1a001560:	4770      	bx	lr

1a001562 <Chip_Clock_GetBaseClocktHz>:
{
1a001562:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001564:	f7ff ffea 	bl	1a00153c <Chip_Clock_GetBaseClock>
1a001568:	f7ff fed8 	bl	1a00131c <Chip_Clock_GetClockInputHz>
}
1a00156c:	bd08      	pop	{r3, pc}
1a00156e:	Address 0x000000001a00156e is out of bounds.


1a001570 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001570:	b971      	cbnz	r1, 1a001590 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001572:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001574:	b10a      	cbz	r2, 1a00157a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001576:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00157a:	2b02      	cmp	r3, #2
1a00157c:	d00a      	beq.n	1a001594 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00157e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001582:	d30a      	bcc.n	1a00159a <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001584:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001588:	4b06      	ldr	r3, [pc, #24]	; (1a0015a4 <Chip_Clock_EnableOpts+0x34>)
1a00158a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00158e:	4770      	bx	lr
		reg |= (1 << 1);
1a001590:	2103      	movs	r1, #3
1a001592:	e7ef      	b.n	1a001574 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a001594:	f041 0120 	orr.w	r1, r1, #32
1a001598:	e7f1      	b.n	1a00157e <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00159a:	3020      	adds	r0, #32
1a00159c:	4b02      	ldr	r3, [pc, #8]	; (1a0015a8 <Chip_Clock_EnableOpts+0x38>)
1a00159e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0015a2:	4770      	bx	lr
1a0015a4:	40052000 	.word	0x40052000
1a0015a8:	40051000 	.word	0x40051000

1a0015ac <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0015ac:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015b0:	d309      	bcc.n	1a0015c6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0015b2:	4a09      	ldr	r2, [pc, #36]	; (1a0015d8 <Chip_Clock_Enable+0x2c>)
1a0015b4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0015b8:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0015bc:	f043 0301 	orr.w	r3, r3, #1
1a0015c0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0015c4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0015c6:	4a05      	ldr	r2, [pc, #20]	; (1a0015dc <Chip_Clock_Enable+0x30>)
1a0015c8:	3020      	adds	r0, #32
1a0015ca:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0015ce:	f043 0301 	orr.w	r3, r3, #1
1a0015d2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0015d6:	4770      	bx	lr
1a0015d8:	40052000 	.word	0x40052000
1a0015dc:	40051000 	.word	0x40051000

1a0015e0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0015e0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0015e2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015e6:	d309      	bcc.n	1a0015fc <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0015e8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0015ec:	4a0d      	ldr	r2, [pc, #52]	; (1a001624 <Chip_Clock_GetRate+0x44>)
1a0015ee:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0015f2:	f014 0f01 	tst.w	r4, #1
1a0015f6:	d107      	bne.n	1a001608 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0015f8:	2000      	movs	r0, #0
	}

	return rate;
}
1a0015fa:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0015fc:	f100 0320 	add.w	r3, r0, #32
1a001600:	4a09      	ldr	r2, [pc, #36]	; (1a001628 <Chip_Clock_GetRate+0x48>)
1a001602:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001606:	e7f4      	b.n	1a0015f2 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001608:	f7ff fe20 	bl	1a00124c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00160c:	f7ff ffa9 	bl	1a001562 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001610:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001614:	d103      	bne.n	1a00161e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001616:	2301      	movs	r3, #1
		rate = rate / div;
1a001618:	fbb0 f0f3 	udiv	r0, r0, r3
1a00161c:	e7ed      	b.n	1a0015fa <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00161e:	2302      	movs	r3, #2
1a001620:	e7fa      	b.n	1a001618 <Chip_Clock_GetRate+0x38>
1a001622:	bf00      	nop
1a001624:	40052000 	.word	0x40052000
1a001628:	40051000 	.word	0x40051000

1a00162c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00162c:	b570      	push	{r4, r5, r6, lr}
1a00162e:	b08a      	sub	sp, #40	; 0x28
1a001630:	4605      	mov	r5, r0
1a001632:	460e      	mov	r6, r1
1a001634:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001636:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00163a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00163c:	2806      	cmp	r0, #6
1a00163e:	d018      	beq.n	1a001672 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001640:	2300      	movs	r3, #0
1a001642:	2201      	movs	r2, #1
1a001644:	4629      	mov	r1, r5
1a001646:	2004      	movs	r0, #4
1a001648:	f7ff ff4c 	bl	1a0014e4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00164c:	4a4a      	ldr	r2, [pc, #296]	; (1a001778 <Chip_SetupCoreClock+0x14c>)
1a00164e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001650:	f043 0301 	orr.w	r3, r3, #1
1a001654:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001656:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00165a:	a901      	add	r1, sp, #4
1a00165c:	4630      	mov	r0, r6
1a00165e:	f7ff feb9 	bl	1a0013d4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a001662:	4b46      	ldr	r3, [pc, #280]	; (1a00177c <Chip_SetupCoreClock+0x150>)
1a001664:	429e      	cmp	r6, r3
1a001666:	d916      	bls.n	1a001696 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001668:	9b01      	ldr	r3, [sp, #4]
1a00166a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00166e:	d003      	beq.n	1a001678 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001670:	e7fe      	b.n	1a001670 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a001672:	f7ff fe11 	bl	1a001298 <Chip_Clock_EnableCrystal>
1a001676:	e7e3      	b.n	1a001640 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001678:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00167c:	d005      	beq.n	1a00168a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00167e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001682:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001684:	2500      	movs	r5, #0
			direct = 1;
1a001686:	2601      	movs	r6, #1
1a001688:	e007      	b.n	1a00169a <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00168a:	9b04      	ldr	r3, [sp, #16]
1a00168c:	3301      	adds	r3, #1
1a00168e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a001690:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a001692:	2600      	movs	r6, #0
1a001694:	e001      	b.n	1a00169a <Chip_SetupCoreClock+0x6e>
1a001696:	2500      	movs	r5, #0
1a001698:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00169a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00169e:	9b01      	ldr	r3, [sp, #4]
1a0016a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0016a4:	9a05      	ldr	r2, [sp, #20]
1a0016a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0016aa:	9a03      	ldr	r2, [sp, #12]
1a0016ac:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0016b0:	9a04      	ldr	r2, [sp, #16]
1a0016b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0016b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0016ba:	4a2f      	ldr	r2, [pc, #188]	; (1a001778 <Chip_SetupCoreClock+0x14c>)
1a0016bc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0016be:	4b2e      	ldr	r3, [pc, #184]	; (1a001778 <Chip_SetupCoreClock+0x14c>)
1a0016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0016c2:	f013 0f01 	tst.w	r3, #1
1a0016c6:	d0fa      	beq.n	1a0016be <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0016c8:	2300      	movs	r3, #0
1a0016ca:	2201      	movs	r2, #1
1a0016cc:	2109      	movs	r1, #9
1a0016ce:	2004      	movs	r0, #4
1a0016d0:	f7ff ff08 	bl	1a0014e4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0016d4:	b306      	cbz	r6, 1a001718 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0016d6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0016da:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0016dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0016de:	1e5a      	subs	r2, r3, #1
1a0016e0:	9209      	str	r2, [sp, #36]	; 0x24
1a0016e2:	2b00      	cmp	r3, #0
1a0016e4:	d1fa      	bne.n	1a0016dc <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0016e6:	9b01      	ldr	r3, [sp, #4]
1a0016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0016ec:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0016ee:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0016f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0016f6:	9a05      	ldr	r2, [sp, #20]
1a0016f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0016fc:	9a03      	ldr	r2, [sp, #12]
1a0016fe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001702:	9a04      	ldr	r2, [sp, #16]
1a001704:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00170c:	4a1a      	ldr	r2, [pc, #104]	; (1a001778 <Chip_SetupCoreClock+0x14c>)
1a00170e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001710:	2c00      	cmp	r4, #0
1a001712:	d12e      	bne.n	1a001772 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001714:	b00a      	add	sp, #40	; 0x28
1a001716:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001718:	2d00      	cmp	r5, #0
1a00171a:	d0f9      	beq.n	1a001710 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00171c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001720:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001722:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001724:	1e5a      	subs	r2, r3, #1
1a001726:	9209      	str	r2, [sp, #36]	; 0x24
1a001728:	2b00      	cmp	r3, #0
1a00172a:	d1fa      	bne.n	1a001722 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00172c:	9b04      	ldr	r3, [sp, #16]
1a00172e:	1e5a      	subs	r2, r3, #1
1a001730:	9204      	str	r2, [sp, #16]
1a001732:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001736:	9b01      	ldr	r3, [sp, #4]
1a001738:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00173c:	9905      	ldr	r1, [sp, #20]
1a00173e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001742:	9903      	ldr	r1, [sp, #12]
1a001744:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001748:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00174c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001750:	4a09      	ldr	r2, [pc, #36]	; (1a001778 <Chip_SetupCoreClock+0x14c>)
1a001752:	6453      	str	r3, [r2, #68]	; 0x44
1a001754:	e7dc      	b.n	1a001710 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001756:	480a      	ldr	r0, [pc, #40]	; (1a001780 <Chip_SetupCoreClock+0x154>)
1a001758:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00175c:	78cb      	ldrb	r3, [r1, #3]
1a00175e:	788a      	ldrb	r2, [r1, #2]
1a001760:	7849      	ldrb	r1, [r1, #1]
1a001762:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001766:	f7ff febd 	bl	1a0014e4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00176a:	3401      	adds	r4, #1
1a00176c:	2c11      	cmp	r4, #17
1a00176e:	d9f2      	bls.n	1a001756 <Chip_SetupCoreClock+0x12a>
1a001770:	e7d0      	b.n	1a001714 <Chip_SetupCoreClock+0xe8>
1a001772:	2400      	movs	r4, #0
1a001774:	e7fa      	b.n	1a00176c <Chip_SetupCoreClock+0x140>
1a001776:	bf00      	nop
1a001778:	40050000 	.word	0x40050000
1a00177c:	068e7780 	.word	0x068e7780
1a001780:	1a006ddc 	.word	0x1a006ddc

1a001784 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a001784:	4770      	bx	lr
1a001786:	Address 0x000000001a001786 is out of bounds.


1a001788 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001788:	4b03      	ldr	r3, [pc, #12]	; (1a001798 <Chip_SSP_GetClockIndex+0x10>)
1a00178a:	4298      	cmp	r0, r3
1a00178c:	d001      	beq.n	1a001792 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00178e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001790:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001792:	20a5      	movs	r0, #165	; 0xa5
1a001794:	4770      	bx	lr
1a001796:	bf00      	nop
1a001798:	400c5000 	.word	0x400c5000

1a00179c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00179c:	4b04      	ldr	r3, [pc, #16]	; (1a0017b0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00179e:	4298      	cmp	r0, r3
1a0017a0:	d002      	beq.n	1a0017a8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0017a2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0017a6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0017a8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0017ac:	4770      	bx	lr
1a0017ae:	bf00      	nop
1a0017b0:	400c5000 	.word	0x400c5000

1a0017b4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0017b4:	6803      	ldr	r3, [r0, #0]
1a0017b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0017ba:	0209      	lsls	r1, r1, #8
1a0017bc:	b289      	uxth	r1, r1
1a0017be:	4319      	orrs	r1, r3
1a0017c0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0017c2:	6102      	str	r2, [r0, #16]
}
1a0017c4:	4770      	bx	lr

1a0017c6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0017c6:	b570      	push	{r4, r5, r6, lr}
1a0017c8:	4606      	mov	r6, r0
1a0017ca:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0017cc:	f7ff ffe6 	bl	1a00179c <Chip_SSP_GetPeriphClockIndex>
1a0017d0:	f7ff ff06 	bl	1a0015e0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0017d4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0017da:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0017dc:	e000      	b.n	1a0017e0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0017de:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0017e0:	42ab      	cmp	r3, r5
1a0017e2:	d90b      	bls.n	1a0017fc <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0017e4:	1c4c      	adds	r4, r1, #1
1a0017e6:	fb02 f304 	mul.w	r3, r2, r4
1a0017ea:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0017ee:	429d      	cmp	r5, r3
1a0017f0:	d2f6      	bcs.n	1a0017e0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0017f2:	2cff      	cmp	r4, #255	; 0xff
1a0017f4:	d9f3      	bls.n	1a0017de <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0017f6:	3202      	adds	r2, #2
				cr0_div = 0;
1a0017f8:	2100      	movs	r1, #0
1a0017fa:	e7f1      	b.n	1a0017e0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0017fc:	4630      	mov	r0, r6
1a0017fe:	f7ff ffd9 	bl	1a0017b4 <Chip_SSP_SetClockRate>
}
1a001802:	bd70      	pop	{r4, r5, r6, pc}

1a001804 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001804:	b510      	push	{r4, lr}
1a001806:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001808:	f7ff ffbe 	bl	1a001788 <Chip_SSP_GetClockIndex>
1a00180c:	f7ff fece 	bl	1a0015ac <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001810:	4620      	mov	r0, r4
1a001812:	f7ff ffc3 	bl	1a00179c <Chip_SSP_GetPeriphClockIndex>
1a001816:	f7ff fec9 	bl	1a0015ac <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00181a:	6863      	ldr	r3, [r4, #4]
1a00181c:	f023 0304 	bic.w	r3, r3, #4
1a001820:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001822:	6823      	ldr	r3, [r4, #0]
1a001824:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001828:	f043 0307 	orr.w	r3, r3, #7
1a00182c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00182e:	4902      	ldr	r1, [pc, #8]	; (1a001838 <Chip_SSP_Init+0x34>)
1a001830:	4620      	mov	r0, r4
1a001832:	f7ff ffc8 	bl	1a0017c6 <Chip_SSP_SetBitRate>
}
1a001836:	bd10      	pop	{r4, pc}
1a001838:	000186a0 	.word	0x000186a0

1a00183c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00183c:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00183e:	4a0b      	ldr	r2, [pc, #44]	; (1a00186c <SystemInit+0x30>)
1a001840:	4b0b      	ldr	r3, [pc, #44]	; (1a001870 <SystemInit+0x34>)
1a001842:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001844:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001848:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00184a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00184e:	2b20      	cmp	r3, #32
1a001850:	d004      	beq.n	1a00185c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a001852:	f7ff f987 	bl	1a000b64 <Board_SystemInit>
   Board_Init();
1a001856:	f7ff f917 	bl	1a000a88 <Board_Init>
#endif
}
1a00185a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00185c:	4a04      	ldr	r2, [pc, #16]	; (1a001870 <SystemInit+0x34>)
1a00185e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001862:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001866:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00186a:	e7f2      	b.n	1a001852 <SystemInit+0x16>
1a00186c:	1a000000 	.word	0x1a000000
1a001870:	e000ed00 	.word	0xe000ed00

1a001874 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001874:	4b04      	ldr	r3, [pc, #16]	; (1a001888 <cyclesCounterInit+0x14>)
1a001876:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001878:	4a04      	ldr	r2, [pc, #16]	; (1a00188c <cyclesCounterInit+0x18>)
1a00187a:	6813      	ldr	r3, [r2, #0]
1a00187c:	f043 0301 	orr.w	r3, r3, #1
1a001880:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001882:	2001      	movs	r0, #1
1a001884:	4770      	bx	lr
1a001886:	bf00      	nop
1a001888:	1000003c 	.word	0x1000003c
1a00188c:	e0001000 	.word	0xe0001000

1a001890 <uartTxReady>:
}

// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001890:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001894:	0083      	lsls	r3, r0, #2
1a001896:	4a03      	ldr	r2, [pc, #12]	; (1a0018a4 <uartTxReady+0x14>)
1a001898:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00189a:	6958      	ldr	r0, [r3, #20]
}
1a00189c:	f000 0020 	and.w	r0, r0, #32
1a0018a0:	4770      	bx	lr
1a0018a2:	bf00      	nop
1a0018a4:	1a006e24 	.word	0x1a006e24

1a0018a8 <uartTxWrite>:
}

// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0018a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0018ac:	0083      	lsls	r3, r0, #2
1a0018ae:	4a02      	ldr	r2, [pc, #8]	; (1a0018b8 <uartTxWrite+0x10>)
1a0018b0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0018b2:	6019      	str	r1, [r3, #0]
}
1a0018b4:	4770      	bx	lr
1a0018b6:	bf00      	nop
1a0018b8:	1a006e24 	.word	0x1a006e24

1a0018bc <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0018bc:	b538      	push	{r3, r4, r5, lr}
1a0018be:	4604      	mov	r4, r0
1a0018c0:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0018c2:	4620      	mov	r0, r4
1a0018c4:	f7ff ffe4 	bl	1a001890 <uartTxReady>
1a0018c8:	2800      	cmp	r0, #0
1a0018ca:	d0fa      	beq.n	1a0018c2 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0018cc:	4629      	mov	r1, r5
1a0018ce:	4620      	mov	r0, r4
1a0018d0:	f7ff ffea 	bl	1a0018a8 <uartTxWrite>
}
1a0018d4:	bd38      	pop	{r3, r4, r5, pc}

1a0018d6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0018d6:	b538      	push	{r3, r4, r5, lr}
1a0018d8:	4605      	mov	r5, r0
1a0018da:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0018dc:	7821      	ldrb	r1, [r4, #0]
1a0018de:	b121      	cbz	r1, 1a0018ea <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a0018e0:	4628      	mov	r0, r5
1a0018e2:	f7ff ffeb 	bl	1a0018bc <uartWriteByte>
      str++;
1a0018e6:	3401      	adds	r4, #1
1a0018e8:	e7f8      	b.n	1a0018dc <uartWriteString+0x6>
   }
}
1a0018ea:	bd38      	pop	{r3, r4, r5, pc}

1a0018ec <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0018ec:	4b01      	ldr	r3, [pc, #4]	; (1a0018f4 <tickRead+0x8>)
1a0018ee:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0018f2:	4770      	bx	lr
1a0018f4:	10000ab8 	.word	0x10000ab8

1a0018f8 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0018f8:	b118      	cbz	r0, 1a001902 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0018fa:	4b04      	ldr	r3, [pc, #16]	; (1a00190c <tickPowerSet+0x14>)
1a0018fc:	2207      	movs	r2, #7
1a0018fe:	601a      	str	r2, [r3, #0]
1a001900:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001902:	4b02      	ldr	r3, [pc, #8]	; (1a00190c <tickPowerSet+0x14>)
1a001904:	2200      	movs	r2, #0
1a001906:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001908:	4770      	bx	lr
1a00190a:	bf00      	nop
1a00190c:	e000e010 	.word	0xe000e010

1a001910 <tickInit>:
{
1a001910:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001912:	ea50 0401 	orrs.w	r4, r0, r1
1a001916:	d02a      	beq.n	1a00196e <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001918:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a00191c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001920:	2b00      	cmp	r3, #0
1a001922:	bf08      	it	eq
1a001924:	2a32      	cmpeq	r2, #50	; 0x32
1a001926:	d227      	bcs.n	1a001978 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001928:	4b14      	ldr	r3, [pc, #80]	; (1a00197c <tickInit+0x6c>)
1a00192a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00192e:	4b14      	ldr	r3, [pc, #80]	; (1a001980 <tickInit+0x70>)
1a001930:	681b      	ldr	r3, [r3, #0]
1a001932:	fba3 4500 	umull	r4, r5, r3, r0
1a001936:	fb03 5501 	mla	r5, r3, r1, r5
1a00193a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00193e:	2300      	movs	r3, #0
1a001940:	4620      	mov	r0, r4
1a001942:	4629      	mov	r1, r5
1a001944:	f000 fe9e 	bl	1a002684 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001948:	3801      	subs	r0, #1
1a00194a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00194e:	d209      	bcs.n	1a001964 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001950:	4b0c      	ldr	r3, [pc, #48]	; (1a001984 <tickInit+0x74>)
1a001952:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001954:	4a0c      	ldr	r2, [pc, #48]	; (1a001988 <tickInit+0x78>)
1a001956:	21e0      	movs	r1, #224	; 0xe0
1a001958:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00195c:	2200      	movs	r2, #0
1a00195e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001960:	2207      	movs	r2, #7
1a001962:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001964:	2001      	movs	r0, #1
1a001966:	f7ff ffc7 	bl	1a0018f8 <tickPowerSet>
      bool_t ret_val = 1;
1a00196a:	2001      	movs	r0, #1
}
1a00196c:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a00196e:	2000      	movs	r0, #0
1a001970:	f7ff ffc2 	bl	1a0018f8 <tickPowerSet>
         ret_val = 0;
1a001974:	2000      	movs	r0, #0
1a001976:	e7f9      	b.n	1a00196c <tickInit+0x5c>
            ret_val = 0;
1a001978:	2000      	movs	r0, #0
1a00197a:	e7f7      	b.n	1a00196c <tickInit+0x5c>
1a00197c:	10000040 	.word	0x10000040
1a001980:	10000afc 	.word	0x10000afc
1a001984:	e000e010 	.word	0xe000e010
1a001988:	e000ed00 	.word	0xe000ed00

1a00198c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00198c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00198e:	4a07      	ldr	r2, [pc, #28]	; (1a0019ac <SysTick_Handler+0x20>)
1a001990:	6813      	ldr	r3, [r2, #0]
1a001992:	6851      	ldr	r1, [r2, #4]
1a001994:	3301      	adds	r3, #1
1a001996:	f141 0100 	adc.w	r1, r1, #0
1a00199a:	6013      	str	r3, [r2, #0]
1a00199c:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00199e:	4b04      	ldr	r3, [pc, #16]	; (1a0019b0 <SysTick_Handler+0x24>)
1a0019a0:	681b      	ldr	r3, [r3, #0]
1a0019a2:	b113      	cbz	r3, 1a0019aa <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0019a4:	4a03      	ldr	r2, [pc, #12]	; (1a0019b4 <SysTick_Handler+0x28>)
1a0019a6:	6810      	ldr	r0, [r2, #0]
1a0019a8:	4798      	blx	r3
   }
}
1a0019aa:	bd08      	pop	{r3, pc}
1a0019ac:	10000ab8 	.word	0x10000ab8
1a0019b0:	10000ac0 	.word	0x10000ac0
1a0019b4:	10000ab4 	.word	0x10000ab4

1a0019b8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0019b8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0019ba:	4d0b      	ldr	r5, [pc, #44]	; (1a0019e8 <gpioObtainPinInit+0x30>)
1a0019bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0019c0:	182c      	adds	r4, r5, r0
1a0019c2:	5628      	ldrsb	r0, [r5, r0]
1a0019c4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0019c6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0019ca:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0019cc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0019d0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0019d2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0019d6:	9b02      	ldr	r3, [sp, #8]
1a0019d8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0019da:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0019de:	9b03      	ldr	r3, [sp, #12]
1a0019e0:	701a      	strb	r2, [r3, #0]
}
1a0019e2:	bc30      	pop	{r4, r5}
1a0019e4:	4770      	bx	lr
1a0019e6:	bf00      	nop
1a0019e8:	1a006e6c 	.word	0x1a006e6c

1a0019ec <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0019ec:	f110 0f02 	cmn.w	r0, #2
1a0019f0:	f000 80c7 	beq.w	1a001b82 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0019f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0019f8:	f000 80c5 	beq.w	1a001b86 <gpioInit+0x19a>
{
1a0019fc:	b570      	push	{r4, r5, r6, lr}
1a0019fe:	b084      	sub	sp, #16
1a001a00:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001a02:	2300      	movs	r3, #0
1a001a04:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001a08:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001a0c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001a10:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001a14:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001a18:	f10d 030b 	add.w	r3, sp, #11
1a001a1c:	9301      	str	r3, [sp, #4]
1a001a1e:	ab03      	add	r3, sp, #12
1a001a20:	9300      	str	r3, [sp, #0]
1a001a22:	f10d 030d 	add.w	r3, sp, #13
1a001a26:	f10d 020e 	add.w	r2, sp, #14
1a001a2a:	f10d 010f 	add.w	r1, sp, #15
1a001a2e:	f7ff ffc3 	bl	1a0019b8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001a32:	2c05      	cmp	r4, #5
1a001a34:	f200 80a9 	bhi.w	1a001b8a <gpioInit+0x19e>
1a001a38:	e8df f004 	tbb	[pc, r4]
1a001a3c:	45278109 	.word	0x45278109
1a001a40:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001a42:	4853      	ldr	r0, [pc, #332]	; (1a001b90 <gpioInit+0x1a4>)
1a001a44:	f7ff fe9e 	bl	1a001784 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001a48:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001a4a:	b004      	add	sp, #16
1a001a4c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001a4e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a52:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a56:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001a5a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001a5e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a62:	494c      	ldr	r1, [pc, #304]	; (1a001b94 <gpioInit+0x1a8>)
1a001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a68:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a6c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a70:	2001      	movs	r0, #1
1a001a72:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001a76:	4c46      	ldr	r4, [pc, #280]	; (1a001b90 <gpioInit+0x1a4>)
1a001a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a7c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a80:	ea22 0201 	bic.w	r2, r2, r1
1a001a84:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a88:	e7df      	b.n	1a001a4a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a8a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a92:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a96:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001a9a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a9e:	493d      	ldr	r1, [pc, #244]	; (1a001b94 <gpioInit+0x1a8>)
1a001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001aa4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001aa8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001aac:	2001      	movs	r0, #1
1a001aae:	fa00 f102 	lsl.w	r1, r0, r2
1a001ab2:	4c37      	ldr	r4, [pc, #220]	; (1a001b90 <gpioInit+0x1a4>)
1a001ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001ab8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001abc:	ea22 0201 	bic.w	r2, r2, r1
1a001ac0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001ac4:	e7c1      	b.n	1a001a4a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001ac6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001aca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ace:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001ad2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001ad6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001ada:	492e      	ldr	r1, [pc, #184]	; (1a001b94 <gpioInit+0x1a8>)
1a001adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001ae0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001ae4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ae8:	2001      	movs	r0, #1
1a001aea:	fa00 f102 	lsl.w	r1, r0, r2
1a001aee:	4c28      	ldr	r4, [pc, #160]	; (1a001b90 <gpioInit+0x1a4>)
1a001af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001af4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001af8:	ea22 0201 	bic.w	r2, r2, r1
1a001afc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001b00:	e7a3      	b.n	1a001a4a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001b02:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b06:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b0e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001b12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b16:	491f      	ldr	r1, [pc, #124]	; (1a001b94 <gpioInit+0x1a8>)
1a001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001b1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b20:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001b24:	2001      	movs	r0, #1
1a001b26:	fa00 f102 	lsl.w	r1, r0, r2
1a001b2a:	4c19      	ldr	r4, [pc, #100]	; (1a001b90 <gpioInit+0x1a4>)
1a001b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001b30:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001b34:	ea22 0201 	bic.w	r2, r2, r1
1a001b38:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001b3c:	e785      	b.n	1a001a4a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001b3e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b42:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b46:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b4a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001b4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b52:	4910      	ldr	r1, [pc, #64]	; (1a001b94 <gpioInit+0x1a8>)
1a001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001b58:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001b5c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001b60:	2001      	movs	r0, #1
1a001b62:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001b66:	4b0a      	ldr	r3, [pc, #40]	; (1a001b90 <gpioInit+0x1a4>)
1a001b68:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001b6c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001b70:	4331      	orrs	r1, r6
1a001b72:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001b76:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001b78:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001b7c:	2100      	movs	r1, #0
1a001b7e:	5499      	strb	r1, [r3, r2]
1a001b80:	e763      	b.n	1a001a4a <gpioInit+0x5e>
	  return FALSE;
1a001b82:	2000      	movs	r0, #0
1a001b84:	4770      	bx	lr
	  return FALSE;
1a001b86:	2000      	movs	r0, #0
}
1a001b88:	4770      	bx	lr
      ret_val = 0;
1a001b8a:	2000      	movs	r0, #0
1a001b8c:	e75d      	b.n	1a001a4a <gpioInit+0x5e>
1a001b8e:	bf00      	nop
1a001b90:	400f4000 	.word	0x400f4000
1a001b94:	40086000 	.word	0x40086000

1a001b98 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001b98:	f110 0f02 	cmn.w	r0, #2
1a001b9c:	d02d      	beq.n	1a001bfa <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001b9e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001ba2:	d02c      	beq.n	1a001bfe <gpioWrite+0x66>
{
1a001ba4:	b510      	push	{r4, lr}
1a001ba6:	b084      	sub	sp, #16
1a001ba8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001baa:	2300      	movs	r3, #0
1a001bac:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001bb0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001bb4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001bb8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001bbc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001bc0:	f10d 030b 	add.w	r3, sp, #11
1a001bc4:	9301      	str	r3, [sp, #4]
1a001bc6:	ab03      	add	r3, sp, #12
1a001bc8:	9300      	str	r3, [sp, #0]
1a001bca:	f10d 030d 	add.w	r3, sp, #13
1a001bce:	f10d 020e 	add.w	r2, sp, #14
1a001bd2:	f10d 010f 	add.w	r1, sp, #15
1a001bd6:	f7ff feef 	bl	1a0019b8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001bda:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001bde:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001be2:	1c21      	adds	r1, r4, #0
1a001be4:	bf18      	it	ne
1a001be6:	2101      	movne	r1, #1
1a001be8:	015b      	lsls	r3, r3, #5
1a001bea:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001bee:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001bf2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001bf4:	2001      	movs	r0, #1
}
1a001bf6:	b004      	add	sp, #16
1a001bf8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001bfa:	2000      	movs	r0, #0
1a001bfc:	4770      	bx	lr
	  return FALSE;
1a001bfe:	2000      	movs	r0, #0
}
1a001c00:	4770      	bx	lr

1a001c02 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a001c02:	f110 0f02 	cmn.w	r0, #2
1a001c06:	d02c      	beq.n	1a001c62 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001c08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001c0c:	d02b      	beq.n	1a001c66 <gpioRead+0x64>
{
1a001c0e:	b500      	push	{lr}
1a001c10:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001c12:	2300      	movs	r3, #0
1a001c14:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001c18:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001c1c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001c20:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001c24:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001c28:	f10d 030b 	add.w	r3, sp, #11
1a001c2c:	9301      	str	r3, [sp, #4]
1a001c2e:	ab03      	add	r3, sp, #12
1a001c30:	9300      	str	r3, [sp, #0]
1a001c32:	f10d 030d 	add.w	r3, sp, #13
1a001c36:	f10d 020e 	add.w	r2, sp, #14
1a001c3a:	f10d 010f 	add.w	r1, sp, #15
1a001c3e:	f7ff febb 	bl	1a0019b8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001c42:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001c46:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001c4a:	015b      	lsls	r3, r3, #5
1a001c4c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001c50:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001c54:	5c98      	ldrb	r0, [r3, r2]
1a001c56:	3000      	adds	r0, #0
1a001c58:	bf18      	it	ne
1a001c5a:	2001      	movne	r0, #1

   return ret_val;
}
1a001c5c:	b005      	add	sp, #20
1a001c5e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a001c62:	2001      	movs	r0, #1
1a001c64:	4770      	bx	lr
      return FALSE;
1a001c66:	2000      	movs	r0, #0
}
1a001c68:	4770      	bx	lr
1a001c6a:	Address 0x000000001a001c6a is out of bounds.


1a001c6c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001c6c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001c6e:	4b04      	ldr	r3, [pc, #16]	; (1a001c80 <USB0_IRQHandler+0x14>)
1a001c70:	681b      	ldr	r3, [r3, #0]
1a001c72:	681b      	ldr	r3, [r3, #0]
1a001c74:	68db      	ldr	r3, [r3, #12]
1a001c76:	4a03      	ldr	r2, [pc, #12]	; (1a001c84 <USB0_IRQHandler+0x18>)
1a001c78:	6810      	ldr	r0, [r2, #0]
1a001c7a:	4798      	blx	r3
}
1a001c7c:	bd08      	pop	{r3, pc}
1a001c7e:	bf00      	nop
1a001c80:	10000b00 	.word	0x10000b00
1a001c84:	10000ac4 	.word	0x10000ac4

1a001c88 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001c88:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001c8a:	f7ff f9ff 	bl	1a00108c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001c8e:	4b1a      	ldr	r3, [pc, #104]	; (1a001cf8 <boardInit+0x70>)
1a001c90:	6818      	ldr	r0, [r3, #0]
1a001c92:	f7ff fdef 	bl	1a001874 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001c96:	2001      	movs	r0, #1
1a001c98:	2100      	movs	r1, #0
1a001c9a:	f7ff fe39 	bl	1a001910 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001c9e:	2105      	movs	r1, #5
1a001ca0:	2000      	movs	r0, #0
1a001ca2:	f7ff fea3 	bl	1a0019ec <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001ca6:	2100      	movs	r1, #0
1a001ca8:	2024      	movs	r0, #36	; 0x24
1a001caa:	f7ff fe9f 	bl	1a0019ec <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001cae:	2100      	movs	r1, #0
1a001cb0:	2025      	movs	r0, #37	; 0x25
1a001cb2:	f7ff fe9b 	bl	1a0019ec <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001cb6:	2100      	movs	r1, #0
1a001cb8:	2026      	movs	r0, #38	; 0x26
1a001cba:	f7ff fe97 	bl	1a0019ec <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001cbe:	2100      	movs	r1, #0
1a001cc0:	2027      	movs	r0, #39	; 0x27
1a001cc2:	f7ff fe93 	bl	1a0019ec <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001cc6:	2101      	movs	r1, #1
1a001cc8:	2028      	movs	r0, #40	; 0x28
1a001cca:	f7ff fe8f 	bl	1a0019ec <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001cce:	2101      	movs	r1, #1
1a001cd0:	2029      	movs	r0, #41	; 0x29
1a001cd2:	f7ff fe8b 	bl	1a0019ec <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001cd6:	2101      	movs	r1, #1
1a001cd8:	202a      	movs	r0, #42	; 0x2a
1a001cda:	f7ff fe87 	bl	1a0019ec <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001cde:	2101      	movs	r1, #1
1a001ce0:	202b      	movs	r0, #43	; 0x2b
1a001ce2:	f7ff fe83 	bl	1a0019ec <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001ce6:	2101      	movs	r1, #1
1a001ce8:	202c      	movs	r0, #44	; 0x2c
1a001cea:	f7ff fe7f 	bl	1a0019ec <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001cee:	2101      	movs	r1, #1
1a001cf0:	202d      	movs	r0, #45	; 0x2d
1a001cf2:	f7ff fe7b 	bl	1a0019ec <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001cf6:	bd08      	pop	{r3, pc}
1a001cf8:	10000afc 	.word	0x10000afc

1a001cfc <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001cfc:	b510      	push	{r4, lr}
1a001cfe:	4604      	mov	r4, r0
1a001d00:	4610      	mov	r0, r2
1a001d02:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001d04:	4b04      	ldr	r3, [pc, #16]	; (1a001d18 <delayInit+0x1c>)
1a001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001d0a:	f000 fcbb 	bl	1a002684 <__aeabi_uldivmod>
1a001d0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001d12:	2300      	movs	r3, #0
1a001d14:	7423      	strb	r3, [r4, #16]
}
1a001d16:	bd10      	pop	{r4, pc}
1a001d18:	10000040 	.word	0x10000040

1a001d1c <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d1e:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001d20:	7c05      	ldrb	r5, [r0, #16]
1a001d22:	b93d      	cbnz	r5, 1a001d34 <delayRead+0x18>
      delay->startTime = tickRead();
1a001d24:	f7ff fde2 	bl	1a0018ec <tickRead>
1a001d28:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001d2c:	2301      	movs	r3, #1
1a001d2e:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001d30:	4628      	mov	r0, r5
1a001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001d34:	f7ff fdda 	bl	1a0018ec <tickRead>
1a001d38:	6823      	ldr	r3, [r4, #0]
1a001d3a:	6862      	ldr	r2, [r4, #4]
1a001d3c:	1ac6      	subs	r6, r0, r3
1a001d3e:	eb61 0702 	sbc.w	r7, r1, r2
1a001d42:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001d46:	429f      	cmp	r7, r3
1a001d48:	bf08      	it	eq
1a001d4a:	4296      	cmpeq	r6, r2
1a001d4c:	d303      	bcc.n	1a001d56 <delayRead+0x3a>
         delay->running = 0;
1a001d4e:	2300      	movs	r3, #0
1a001d50:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001d52:	2501      	movs	r5, #1
1a001d54:	e7ec      	b.n	1a001d30 <delayRead+0x14>
   bool_t timeArrived = 0;
1a001d56:	2500      	movs	r5, #0
1a001d58:	e7ea      	b.n	1a001d30 <delayRead+0x14>
1a001d5a:	Address 0x000000001a001d5a is out of bounds.


1a001d5c <__aeabi_drsub>:
1a001d5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a001d60:	e002      	b.n	1a001d68 <__adddf3>
1a001d62:	bf00      	nop

1a001d64 <__aeabi_dsub>:
1a001d64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a001d68 <__adddf3>:
1a001d68:	b530      	push	{r4, r5, lr}
1a001d6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a001d6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a001d72:	ea94 0f05 	teq	r4, r5
1a001d76:	bf08      	it	eq
1a001d78:	ea90 0f02 	teqeq	r0, r2
1a001d7c:	bf1f      	itttt	ne
1a001d7e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a001d82:	ea55 0c02 	orrsne.w	ip, r5, r2
1a001d86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a001d8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001d8e:	f000 80e2 	beq.w	1a001f56 <__adddf3+0x1ee>
1a001d92:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a001d96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a001d9a:	bfb8      	it	lt
1a001d9c:	426d      	neglt	r5, r5
1a001d9e:	dd0c      	ble.n	1a001dba <__adddf3+0x52>
1a001da0:	442c      	add	r4, r5
1a001da2:	ea80 0202 	eor.w	r2, r0, r2
1a001da6:	ea81 0303 	eor.w	r3, r1, r3
1a001daa:	ea82 0000 	eor.w	r0, r2, r0
1a001dae:	ea83 0101 	eor.w	r1, r3, r1
1a001db2:	ea80 0202 	eor.w	r2, r0, r2
1a001db6:	ea81 0303 	eor.w	r3, r1, r3
1a001dba:	2d36      	cmp	r5, #54	; 0x36
1a001dbc:	bf88      	it	hi
1a001dbe:	bd30      	pophi	{r4, r5, pc}
1a001dc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a001dc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001dc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a001dcc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a001dd0:	d002      	beq.n	1a001dd8 <__adddf3+0x70>
1a001dd2:	4240      	negs	r0, r0
1a001dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001dd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a001ddc:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001de0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a001de4:	d002      	beq.n	1a001dec <__adddf3+0x84>
1a001de6:	4252      	negs	r2, r2
1a001de8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a001dec:	ea94 0f05 	teq	r4, r5
1a001df0:	f000 80a7 	beq.w	1a001f42 <__adddf3+0x1da>
1a001df4:	f1a4 0401 	sub.w	r4, r4, #1
1a001df8:	f1d5 0e20 	rsbs	lr, r5, #32
1a001dfc:	db0d      	blt.n	1a001e1a <__adddf3+0xb2>
1a001dfe:	fa02 fc0e 	lsl.w	ip, r2, lr
1a001e02:	fa22 f205 	lsr.w	r2, r2, r5
1a001e06:	1880      	adds	r0, r0, r2
1a001e08:	f141 0100 	adc.w	r1, r1, #0
1a001e0c:	fa03 f20e 	lsl.w	r2, r3, lr
1a001e10:	1880      	adds	r0, r0, r2
1a001e12:	fa43 f305 	asr.w	r3, r3, r5
1a001e16:	4159      	adcs	r1, r3
1a001e18:	e00e      	b.n	1a001e38 <__adddf3+0xd0>
1a001e1a:	f1a5 0520 	sub.w	r5, r5, #32
1a001e1e:	f10e 0e20 	add.w	lr, lr, #32
1a001e22:	2a01      	cmp	r2, #1
1a001e24:	fa03 fc0e 	lsl.w	ip, r3, lr
1a001e28:	bf28      	it	cs
1a001e2a:	f04c 0c02 	orrcs.w	ip, ip, #2
1a001e2e:	fa43 f305 	asr.w	r3, r3, r5
1a001e32:	18c0      	adds	r0, r0, r3
1a001e34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a001e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001e3c:	d507      	bpl.n	1a001e4e <__adddf3+0xe6>
1a001e3e:	f04f 0e00 	mov.w	lr, #0
1a001e42:	f1dc 0c00 	rsbs	ip, ip, #0
1a001e46:	eb7e 0000 	sbcs.w	r0, lr, r0
1a001e4a:	eb6e 0101 	sbc.w	r1, lr, r1
1a001e4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a001e52:	d31b      	bcc.n	1a001e8c <__adddf3+0x124>
1a001e54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a001e58:	d30c      	bcc.n	1a001e74 <__adddf3+0x10c>
1a001e5a:	0849      	lsrs	r1, r1, #1
1a001e5c:	ea5f 0030 	movs.w	r0, r0, rrx
1a001e60:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a001e64:	f104 0401 	add.w	r4, r4, #1
1a001e68:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a001e6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a001e70:	f080 809a 	bcs.w	1a001fa8 <__adddf3+0x240>
1a001e74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a001e78:	bf08      	it	eq
1a001e7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001e7e:	f150 0000 	adcs.w	r0, r0, #0
1a001e82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001e86:	ea41 0105 	orr.w	r1, r1, r5
1a001e8a:	bd30      	pop	{r4, r5, pc}
1a001e8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a001e90:	4140      	adcs	r0, r0
1a001e92:	eb41 0101 	adc.w	r1, r1, r1
1a001e96:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001e9a:	f1a4 0401 	sub.w	r4, r4, #1
1a001e9e:	d1e9      	bne.n	1a001e74 <__adddf3+0x10c>
1a001ea0:	f091 0f00 	teq	r1, #0
1a001ea4:	bf04      	itt	eq
1a001ea6:	4601      	moveq	r1, r0
1a001ea8:	2000      	moveq	r0, #0
1a001eaa:	fab1 f381 	clz	r3, r1
1a001eae:	bf08      	it	eq
1a001eb0:	3320      	addeq	r3, #32
1a001eb2:	f1a3 030b 	sub.w	r3, r3, #11
1a001eb6:	f1b3 0220 	subs.w	r2, r3, #32
1a001eba:	da0c      	bge.n	1a001ed6 <__adddf3+0x16e>
1a001ebc:	320c      	adds	r2, #12
1a001ebe:	dd08      	ble.n	1a001ed2 <__adddf3+0x16a>
1a001ec0:	f102 0c14 	add.w	ip, r2, #20
1a001ec4:	f1c2 020c 	rsb	r2, r2, #12
1a001ec8:	fa01 f00c 	lsl.w	r0, r1, ip
1a001ecc:	fa21 f102 	lsr.w	r1, r1, r2
1a001ed0:	e00c      	b.n	1a001eec <__adddf3+0x184>
1a001ed2:	f102 0214 	add.w	r2, r2, #20
1a001ed6:	bfd8      	it	le
1a001ed8:	f1c2 0c20 	rsble	ip, r2, #32
1a001edc:	fa01 f102 	lsl.w	r1, r1, r2
1a001ee0:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001ee4:	bfdc      	itt	le
1a001ee6:	ea41 010c 	orrle.w	r1, r1, ip
1a001eea:	4090      	lslle	r0, r2
1a001eec:	1ae4      	subs	r4, r4, r3
1a001eee:	bfa2      	ittt	ge
1a001ef0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a001ef4:	4329      	orrge	r1, r5
1a001ef6:	bd30      	popge	{r4, r5, pc}
1a001ef8:	ea6f 0404 	mvn.w	r4, r4
1a001efc:	3c1f      	subs	r4, #31
1a001efe:	da1c      	bge.n	1a001f3a <__adddf3+0x1d2>
1a001f00:	340c      	adds	r4, #12
1a001f02:	dc0e      	bgt.n	1a001f22 <__adddf3+0x1ba>
1a001f04:	f104 0414 	add.w	r4, r4, #20
1a001f08:	f1c4 0220 	rsb	r2, r4, #32
1a001f0c:	fa20 f004 	lsr.w	r0, r0, r4
1a001f10:	fa01 f302 	lsl.w	r3, r1, r2
1a001f14:	ea40 0003 	orr.w	r0, r0, r3
1a001f18:	fa21 f304 	lsr.w	r3, r1, r4
1a001f1c:	ea45 0103 	orr.w	r1, r5, r3
1a001f20:	bd30      	pop	{r4, r5, pc}
1a001f22:	f1c4 040c 	rsb	r4, r4, #12
1a001f26:	f1c4 0220 	rsb	r2, r4, #32
1a001f2a:	fa20 f002 	lsr.w	r0, r0, r2
1a001f2e:	fa01 f304 	lsl.w	r3, r1, r4
1a001f32:	ea40 0003 	orr.w	r0, r0, r3
1a001f36:	4629      	mov	r1, r5
1a001f38:	bd30      	pop	{r4, r5, pc}
1a001f3a:	fa21 f004 	lsr.w	r0, r1, r4
1a001f3e:	4629      	mov	r1, r5
1a001f40:	bd30      	pop	{r4, r5, pc}
1a001f42:	f094 0f00 	teq	r4, #0
1a001f46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a001f4a:	bf06      	itte	eq
1a001f4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a001f50:	3401      	addeq	r4, #1
1a001f52:	3d01      	subne	r5, #1
1a001f54:	e74e      	b.n	1a001df4 <__adddf3+0x8c>
1a001f56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001f5a:	bf18      	it	ne
1a001f5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001f60:	d029      	beq.n	1a001fb6 <__adddf3+0x24e>
1a001f62:	ea94 0f05 	teq	r4, r5
1a001f66:	bf08      	it	eq
1a001f68:	ea90 0f02 	teqeq	r0, r2
1a001f6c:	d005      	beq.n	1a001f7a <__adddf3+0x212>
1a001f6e:	ea54 0c00 	orrs.w	ip, r4, r0
1a001f72:	bf04      	itt	eq
1a001f74:	4619      	moveq	r1, r3
1a001f76:	4610      	moveq	r0, r2
1a001f78:	bd30      	pop	{r4, r5, pc}
1a001f7a:	ea91 0f03 	teq	r1, r3
1a001f7e:	bf1e      	ittt	ne
1a001f80:	2100      	movne	r1, #0
1a001f82:	2000      	movne	r0, #0
1a001f84:	bd30      	popne	{r4, r5, pc}
1a001f86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a001f8a:	d105      	bne.n	1a001f98 <__adddf3+0x230>
1a001f8c:	0040      	lsls	r0, r0, #1
1a001f8e:	4149      	adcs	r1, r1
1a001f90:	bf28      	it	cs
1a001f92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a001f96:	bd30      	pop	{r4, r5, pc}
1a001f98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a001f9c:	bf3c      	itt	cc
1a001f9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a001fa2:	bd30      	popcc	{r4, r5, pc}
1a001fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001fa8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a001fac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001fb0:	f04f 0000 	mov.w	r0, #0
1a001fb4:	bd30      	pop	{r4, r5, pc}
1a001fb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001fba:	bf1a      	itte	ne
1a001fbc:	4619      	movne	r1, r3
1a001fbe:	4610      	movne	r0, r2
1a001fc0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a001fc4:	bf1c      	itt	ne
1a001fc6:	460b      	movne	r3, r1
1a001fc8:	4602      	movne	r2, r0
1a001fca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a001fce:	bf06      	itte	eq
1a001fd0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a001fd4:	ea91 0f03 	teqeq	r1, r3
1a001fd8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a001fdc:	bd30      	pop	{r4, r5, pc}
1a001fde:	bf00      	nop

1a001fe0 <__aeabi_ui2d>:
1a001fe0:	f090 0f00 	teq	r0, #0
1a001fe4:	bf04      	itt	eq
1a001fe6:	2100      	moveq	r1, #0
1a001fe8:	4770      	bxeq	lr
1a001fea:	b530      	push	{r4, r5, lr}
1a001fec:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001ff0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001ff4:	f04f 0500 	mov.w	r5, #0
1a001ff8:	f04f 0100 	mov.w	r1, #0
1a001ffc:	e750      	b.n	1a001ea0 <__adddf3+0x138>
1a001ffe:	bf00      	nop

1a002000 <__aeabi_i2d>:
1a002000:	f090 0f00 	teq	r0, #0
1a002004:	bf04      	itt	eq
1a002006:	2100      	moveq	r1, #0
1a002008:	4770      	bxeq	lr
1a00200a:	b530      	push	{r4, r5, lr}
1a00200c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002010:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002014:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002018:	bf48      	it	mi
1a00201a:	4240      	negmi	r0, r0
1a00201c:	f04f 0100 	mov.w	r1, #0
1a002020:	e73e      	b.n	1a001ea0 <__adddf3+0x138>
1a002022:	bf00      	nop

1a002024 <__aeabi_f2d>:
1a002024:	0042      	lsls	r2, r0, #1
1a002026:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a00202a:	ea4f 0131 	mov.w	r1, r1, rrx
1a00202e:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002032:	bf1f      	itttt	ne
1a002034:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002038:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a00203c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002040:	4770      	bxne	lr
1a002042:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a002046:	bf08      	it	eq
1a002048:	4770      	bxeq	lr
1a00204a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00204e:	bf04      	itt	eq
1a002050:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a002054:	4770      	bxeq	lr
1a002056:	b530      	push	{r4, r5, lr}
1a002058:	f44f 7460 	mov.w	r4, #896	; 0x380
1a00205c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002060:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002064:	e71c      	b.n	1a001ea0 <__adddf3+0x138>
1a002066:	bf00      	nop

1a002068 <__aeabi_ul2d>:
1a002068:	ea50 0201 	orrs.w	r2, r0, r1
1a00206c:	bf08      	it	eq
1a00206e:	4770      	bxeq	lr
1a002070:	b530      	push	{r4, r5, lr}
1a002072:	f04f 0500 	mov.w	r5, #0
1a002076:	e00a      	b.n	1a00208e <__aeabi_l2d+0x16>

1a002078 <__aeabi_l2d>:
1a002078:	ea50 0201 	orrs.w	r2, r0, r1
1a00207c:	bf08      	it	eq
1a00207e:	4770      	bxeq	lr
1a002080:	b530      	push	{r4, r5, lr}
1a002082:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002086:	d502      	bpl.n	1a00208e <__aeabi_l2d+0x16>
1a002088:	4240      	negs	r0, r0
1a00208a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00208e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002092:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002096:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00209a:	f43f aed8 	beq.w	1a001e4e <__adddf3+0xe6>
1a00209e:	f04f 0203 	mov.w	r2, #3
1a0020a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0020a6:	bf18      	it	ne
1a0020a8:	3203      	addne	r2, #3
1a0020aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0020ae:	bf18      	it	ne
1a0020b0:	3203      	addne	r2, #3
1a0020b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0020b6:	f1c2 0320 	rsb	r3, r2, #32
1a0020ba:	fa00 fc03 	lsl.w	ip, r0, r3
1a0020be:	fa20 f002 	lsr.w	r0, r0, r2
1a0020c2:	fa01 fe03 	lsl.w	lr, r1, r3
1a0020c6:	ea40 000e 	orr.w	r0, r0, lr
1a0020ca:	fa21 f102 	lsr.w	r1, r1, r2
1a0020ce:	4414      	add	r4, r2
1a0020d0:	e6bd      	b.n	1a001e4e <__adddf3+0xe6>
1a0020d2:	bf00      	nop

1a0020d4 <__aeabi_dmul>:
1a0020d4:	b570      	push	{r4, r5, r6, lr}
1a0020d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0020da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0020de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0020e2:	bf1d      	ittte	ne
1a0020e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0020e8:	ea94 0f0c 	teqne	r4, ip
1a0020ec:	ea95 0f0c 	teqne	r5, ip
1a0020f0:	f000 f8de 	bleq	1a0022b0 <__aeabi_dmul+0x1dc>
1a0020f4:	442c      	add	r4, r5
1a0020f6:	ea81 0603 	eor.w	r6, r1, r3
1a0020fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a0020fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002102:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002106:	bf18      	it	ne
1a002108:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a00210c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002114:	d038      	beq.n	1a002188 <__aeabi_dmul+0xb4>
1a002116:	fba0 ce02 	umull	ip, lr, r0, r2
1a00211a:	f04f 0500 	mov.w	r5, #0
1a00211e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002122:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002126:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00212a:	f04f 0600 	mov.w	r6, #0
1a00212e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002132:	f09c 0f00 	teq	ip, #0
1a002136:	bf18      	it	ne
1a002138:	f04e 0e01 	orrne.w	lr, lr, #1
1a00213c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002140:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002144:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002148:	d204      	bcs.n	1a002154 <__aeabi_dmul+0x80>
1a00214a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00214e:	416d      	adcs	r5, r5
1a002150:	eb46 0606 	adc.w	r6, r6, r6
1a002154:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002158:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a00215c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002160:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002164:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002168:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00216c:	bf88      	it	hi
1a00216e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002172:	d81e      	bhi.n	1a0021b2 <__aeabi_dmul+0xde>
1a002174:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002178:	bf08      	it	eq
1a00217a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00217e:	f150 0000 	adcs.w	r0, r0, #0
1a002182:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002186:	bd70      	pop	{r4, r5, r6, pc}
1a002188:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a00218c:	ea46 0101 	orr.w	r1, r6, r1
1a002190:	ea40 0002 	orr.w	r0, r0, r2
1a002194:	ea81 0103 	eor.w	r1, r1, r3
1a002198:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00219c:	bfc2      	ittt	gt
1a00219e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0021a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0021a6:	bd70      	popgt	{r4, r5, r6, pc}
1a0021a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0021ac:	f04f 0e00 	mov.w	lr, #0
1a0021b0:	3c01      	subs	r4, #1
1a0021b2:	f300 80ab 	bgt.w	1a00230c <__aeabi_dmul+0x238>
1a0021b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0021ba:	bfde      	ittt	le
1a0021bc:	2000      	movle	r0, #0
1a0021be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0021c2:	bd70      	pople	{r4, r5, r6, pc}
1a0021c4:	f1c4 0400 	rsb	r4, r4, #0
1a0021c8:	3c20      	subs	r4, #32
1a0021ca:	da35      	bge.n	1a002238 <__aeabi_dmul+0x164>
1a0021cc:	340c      	adds	r4, #12
1a0021ce:	dc1b      	bgt.n	1a002208 <__aeabi_dmul+0x134>
1a0021d0:	f104 0414 	add.w	r4, r4, #20
1a0021d4:	f1c4 0520 	rsb	r5, r4, #32
1a0021d8:	fa00 f305 	lsl.w	r3, r0, r5
1a0021dc:	fa20 f004 	lsr.w	r0, r0, r4
1a0021e0:	fa01 f205 	lsl.w	r2, r1, r5
1a0021e4:	ea40 0002 	orr.w	r0, r0, r2
1a0021e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0021ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0021f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0021f4:	fa21 f604 	lsr.w	r6, r1, r4
1a0021f8:	eb42 0106 	adc.w	r1, r2, r6
1a0021fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002200:	bf08      	it	eq
1a002202:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002206:	bd70      	pop	{r4, r5, r6, pc}
1a002208:	f1c4 040c 	rsb	r4, r4, #12
1a00220c:	f1c4 0520 	rsb	r5, r4, #32
1a002210:	fa00 f304 	lsl.w	r3, r0, r4
1a002214:	fa20 f005 	lsr.w	r0, r0, r5
1a002218:	fa01 f204 	lsl.w	r2, r1, r4
1a00221c:	ea40 0002 	orr.w	r0, r0, r2
1a002220:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002224:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002228:	f141 0100 	adc.w	r1, r1, #0
1a00222c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002230:	bf08      	it	eq
1a002232:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002236:	bd70      	pop	{r4, r5, r6, pc}
1a002238:	f1c4 0520 	rsb	r5, r4, #32
1a00223c:	fa00 f205 	lsl.w	r2, r0, r5
1a002240:	ea4e 0e02 	orr.w	lr, lr, r2
1a002244:	fa20 f304 	lsr.w	r3, r0, r4
1a002248:	fa01 f205 	lsl.w	r2, r1, r5
1a00224c:	ea43 0302 	orr.w	r3, r3, r2
1a002250:	fa21 f004 	lsr.w	r0, r1, r4
1a002254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002258:	fa21 f204 	lsr.w	r2, r1, r4
1a00225c:	ea20 0002 	bic.w	r0, r0, r2
1a002260:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002264:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002268:	bf08      	it	eq
1a00226a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00226e:	bd70      	pop	{r4, r5, r6, pc}
1a002270:	f094 0f00 	teq	r4, #0
1a002274:	d10f      	bne.n	1a002296 <__aeabi_dmul+0x1c2>
1a002276:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00227a:	0040      	lsls	r0, r0, #1
1a00227c:	eb41 0101 	adc.w	r1, r1, r1
1a002280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002284:	bf08      	it	eq
1a002286:	3c01      	subeq	r4, #1
1a002288:	d0f7      	beq.n	1a00227a <__aeabi_dmul+0x1a6>
1a00228a:	ea41 0106 	orr.w	r1, r1, r6
1a00228e:	f095 0f00 	teq	r5, #0
1a002292:	bf18      	it	ne
1a002294:	4770      	bxne	lr
1a002296:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00229a:	0052      	lsls	r2, r2, #1
1a00229c:	eb43 0303 	adc.w	r3, r3, r3
1a0022a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0022a4:	bf08      	it	eq
1a0022a6:	3d01      	subeq	r5, #1
1a0022a8:	d0f7      	beq.n	1a00229a <__aeabi_dmul+0x1c6>
1a0022aa:	ea43 0306 	orr.w	r3, r3, r6
1a0022ae:	4770      	bx	lr
1a0022b0:	ea94 0f0c 	teq	r4, ip
1a0022b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0022b8:	bf18      	it	ne
1a0022ba:	ea95 0f0c 	teqne	r5, ip
1a0022be:	d00c      	beq.n	1a0022da <__aeabi_dmul+0x206>
1a0022c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0022c4:	bf18      	it	ne
1a0022c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0022ca:	d1d1      	bne.n	1a002270 <__aeabi_dmul+0x19c>
1a0022cc:	ea81 0103 	eor.w	r1, r1, r3
1a0022d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0022d4:	f04f 0000 	mov.w	r0, #0
1a0022d8:	bd70      	pop	{r4, r5, r6, pc}
1a0022da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0022de:	bf06      	itte	eq
1a0022e0:	4610      	moveq	r0, r2
1a0022e2:	4619      	moveq	r1, r3
1a0022e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0022e8:	d019      	beq.n	1a00231e <__aeabi_dmul+0x24a>
1a0022ea:	ea94 0f0c 	teq	r4, ip
1a0022ee:	d102      	bne.n	1a0022f6 <__aeabi_dmul+0x222>
1a0022f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0022f4:	d113      	bne.n	1a00231e <__aeabi_dmul+0x24a>
1a0022f6:	ea95 0f0c 	teq	r5, ip
1a0022fa:	d105      	bne.n	1a002308 <__aeabi_dmul+0x234>
1a0022fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002300:	bf1c      	itt	ne
1a002302:	4610      	movne	r0, r2
1a002304:	4619      	movne	r1, r3
1a002306:	d10a      	bne.n	1a00231e <__aeabi_dmul+0x24a>
1a002308:	ea81 0103 	eor.w	r1, r1, r3
1a00230c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002310:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002314:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002318:	f04f 0000 	mov.w	r0, #0
1a00231c:	bd70      	pop	{r4, r5, r6, pc}
1a00231e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002322:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002326:	bd70      	pop	{r4, r5, r6, pc}

1a002328 <__aeabi_ddiv>:
1a002328:	b570      	push	{r4, r5, r6, lr}
1a00232a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00232e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002332:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002336:	bf1d      	ittte	ne
1a002338:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00233c:	ea94 0f0c 	teqne	r4, ip
1a002340:	ea95 0f0c 	teqne	r5, ip
1a002344:	f000 f8a7 	bleq	1a002496 <__aeabi_ddiv+0x16e>
1a002348:	eba4 0405 	sub.w	r4, r4, r5
1a00234c:	ea81 0e03 	eor.w	lr, r1, r3
1a002350:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002354:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002358:	f000 8088 	beq.w	1a00246c <__aeabi_ddiv+0x144>
1a00235c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002360:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002364:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002368:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a00236c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002370:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002374:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002378:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a00237c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002380:	429d      	cmp	r5, r3
1a002382:	bf08      	it	eq
1a002384:	4296      	cmpeq	r6, r2
1a002386:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00238a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00238e:	d202      	bcs.n	1a002396 <__aeabi_ddiv+0x6e>
1a002390:	085b      	lsrs	r3, r3, #1
1a002392:	ea4f 0232 	mov.w	r2, r2, rrx
1a002396:	1ab6      	subs	r6, r6, r2
1a002398:	eb65 0503 	sbc.w	r5, r5, r3
1a00239c:	085b      	lsrs	r3, r3, #1
1a00239e:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0023a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0023aa:	ebb6 0e02 	subs.w	lr, r6, r2
1a0023ae:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0023b2:	bf22      	ittt	cs
1a0023b4:	1ab6      	subcs	r6, r6, r2
1a0023b6:	4675      	movcs	r5, lr
1a0023b8:	ea40 000c 	orrcs.w	r0, r0, ip
1a0023bc:	085b      	lsrs	r3, r3, #1
1a0023be:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023c2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0023c6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0023ca:	bf22      	ittt	cs
1a0023cc:	1ab6      	subcs	r6, r6, r2
1a0023ce:	4675      	movcs	r5, lr
1a0023d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0023d4:	085b      	lsrs	r3, r3, #1
1a0023d6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023da:	ebb6 0e02 	subs.w	lr, r6, r2
1a0023de:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0023e2:	bf22      	ittt	cs
1a0023e4:	1ab6      	subcs	r6, r6, r2
1a0023e6:	4675      	movcs	r5, lr
1a0023e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0023ec:	085b      	lsrs	r3, r3, #1
1a0023ee:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023f2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0023f6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0023fa:	bf22      	ittt	cs
1a0023fc:	1ab6      	subcs	r6, r6, r2
1a0023fe:	4675      	movcs	r5, lr
1a002400:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002404:	ea55 0e06 	orrs.w	lr, r5, r6
1a002408:	d018      	beq.n	1a00243c <__aeabi_ddiv+0x114>
1a00240a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00240e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002412:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002416:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00241a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00241e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002422:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002426:	d1c0      	bne.n	1a0023aa <__aeabi_ddiv+0x82>
1a002428:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00242c:	d10b      	bne.n	1a002446 <__aeabi_ddiv+0x11e>
1a00242e:	ea41 0100 	orr.w	r1, r1, r0
1a002432:	f04f 0000 	mov.w	r0, #0
1a002436:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00243a:	e7b6      	b.n	1a0023aa <__aeabi_ddiv+0x82>
1a00243c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002440:	bf04      	itt	eq
1a002442:	4301      	orreq	r1, r0
1a002444:	2000      	moveq	r0, #0
1a002446:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00244a:	bf88      	it	hi
1a00244c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002450:	f63f aeaf 	bhi.w	1a0021b2 <__aeabi_dmul+0xde>
1a002454:	ebb5 0c03 	subs.w	ip, r5, r3
1a002458:	bf04      	itt	eq
1a00245a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00245e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002462:	f150 0000 	adcs.w	r0, r0, #0
1a002466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00246a:	bd70      	pop	{r4, r5, r6, pc}
1a00246c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002470:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002474:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002478:	bfc2      	ittt	gt
1a00247a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00247e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002482:	bd70      	popgt	{r4, r5, r6, pc}
1a002484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002488:	f04f 0e00 	mov.w	lr, #0
1a00248c:	3c01      	subs	r4, #1
1a00248e:	e690      	b.n	1a0021b2 <__aeabi_dmul+0xde>
1a002490:	ea45 0e06 	orr.w	lr, r5, r6
1a002494:	e68d      	b.n	1a0021b2 <__aeabi_dmul+0xde>
1a002496:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00249a:	ea94 0f0c 	teq	r4, ip
1a00249e:	bf08      	it	eq
1a0024a0:	ea95 0f0c 	teqeq	r5, ip
1a0024a4:	f43f af3b 	beq.w	1a00231e <__aeabi_dmul+0x24a>
1a0024a8:	ea94 0f0c 	teq	r4, ip
1a0024ac:	d10a      	bne.n	1a0024c4 <__aeabi_ddiv+0x19c>
1a0024ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0024b2:	f47f af34 	bne.w	1a00231e <__aeabi_dmul+0x24a>
1a0024b6:	ea95 0f0c 	teq	r5, ip
1a0024ba:	f47f af25 	bne.w	1a002308 <__aeabi_dmul+0x234>
1a0024be:	4610      	mov	r0, r2
1a0024c0:	4619      	mov	r1, r3
1a0024c2:	e72c      	b.n	1a00231e <__aeabi_dmul+0x24a>
1a0024c4:	ea95 0f0c 	teq	r5, ip
1a0024c8:	d106      	bne.n	1a0024d8 <__aeabi_ddiv+0x1b0>
1a0024ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0024ce:	f43f aefd 	beq.w	1a0022cc <__aeabi_dmul+0x1f8>
1a0024d2:	4610      	mov	r0, r2
1a0024d4:	4619      	mov	r1, r3
1a0024d6:	e722      	b.n	1a00231e <__aeabi_dmul+0x24a>
1a0024d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0024dc:	bf18      	it	ne
1a0024de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0024e2:	f47f aec5 	bne.w	1a002270 <__aeabi_dmul+0x19c>
1a0024e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0024ea:	f47f af0d 	bne.w	1a002308 <__aeabi_dmul+0x234>
1a0024ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0024f2:	f47f aeeb 	bne.w	1a0022cc <__aeabi_dmul+0x1f8>
1a0024f6:	e712      	b.n	1a00231e <__aeabi_dmul+0x24a>

1a0024f8 <__gedf2>:
1a0024f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0024fc:	e006      	b.n	1a00250c <__cmpdf2+0x4>
1a0024fe:	bf00      	nop

1a002500 <__ledf2>:
1a002500:	f04f 0c01 	mov.w	ip, #1
1a002504:	e002      	b.n	1a00250c <__cmpdf2+0x4>
1a002506:	bf00      	nop

1a002508 <__cmpdf2>:
1a002508:	f04f 0c01 	mov.w	ip, #1
1a00250c:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002518:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00251c:	bf18      	it	ne
1a00251e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a002522:	d01b      	beq.n	1a00255c <__cmpdf2+0x54>
1a002524:	b001      	add	sp, #4
1a002526:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a00252a:	bf0c      	ite	eq
1a00252c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002530:	ea91 0f03 	teqne	r1, r3
1a002534:	bf02      	ittt	eq
1a002536:	ea90 0f02 	teqeq	r0, r2
1a00253a:	2000      	moveq	r0, #0
1a00253c:	4770      	bxeq	lr
1a00253e:	f110 0f00 	cmn.w	r0, #0
1a002542:	ea91 0f03 	teq	r1, r3
1a002546:	bf58      	it	pl
1a002548:	4299      	cmppl	r1, r3
1a00254a:	bf08      	it	eq
1a00254c:	4290      	cmpeq	r0, r2
1a00254e:	bf2c      	ite	cs
1a002550:	17d8      	asrcs	r0, r3, #31
1a002552:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a002556:	f040 0001 	orr.w	r0, r0, #1
1a00255a:	4770      	bx	lr
1a00255c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002564:	d102      	bne.n	1a00256c <__cmpdf2+0x64>
1a002566:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00256a:	d107      	bne.n	1a00257c <__cmpdf2+0x74>
1a00256c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002574:	d1d6      	bne.n	1a002524 <__cmpdf2+0x1c>
1a002576:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00257a:	d0d3      	beq.n	1a002524 <__cmpdf2+0x1c>
1a00257c:	f85d 0b04 	ldr.w	r0, [sp], #4
1a002580:	4770      	bx	lr
1a002582:	bf00      	nop

1a002584 <__aeabi_cdrcmple>:
1a002584:	4684      	mov	ip, r0
1a002586:	4610      	mov	r0, r2
1a002588:	4662      	mov	r2, ip
1a00258a:	468c      	mov	ip, r1
1a00258c:	4619      	mov	r1, r3
1a00258e:	4663      	mov	r3, ip
1a002590:	e000      	b.n	1a002594 <__aeabi_cdcmpeq>
1a002592:	bf00      	nop

1a002594 <__aeabi_cdcmpeq>:
1a002594:	b501      	push	{r0, lr}
1a002596:	f7ff ffb7 	bl	1a002508 <__cmpdf2>
1a00259a:	2800      	cmp	r0, #0
1a00259c:	bf48      	it	mi
1a00259e:	f110 0f00 	cmnmi.w	r0, #0
1a0025a2:	bd01      	pop	{r0, pc}

1a0025a4 <__aeabi_dcmpeq>:
1a0025a4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0025a8:	f7ff fff4 	bl	1a002594 <__aeabi_cdcmpeq>
1a0025ac:	bf0c      	ite	eq
1a0025ae:	2001      	moveq	r0, #1
1a0025b0:	2000      	movne	r0, #0
1a0025b2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0025b6:	bf00      	nop

1a0025b8 <__aeabi_dcmplt>:
1a0025b8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0025bc:	f7ff ffea 	bl	1a002594 <__aeabi_cdcmpeq>
1a0025c0:	bf34      	ite	cc
1a0025c2:	2001      	movcc	r0, #1
1a0025c4:	2000      	movcs	r0, #0
1a0025c6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0025ca:	bf00      	nop

1a0025cc <__aeabi_dcmple>:
1a0025cc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0025d0:	f7ff ffe0 	bl	1a002594 <__aeabi_cdcmpeq>
1a0025d4:	bf94      	ite	ls
1a0025d6:	2001      	movls	r0, #1
1a0025d8:	2000      	movhi	r0, #0
1a0025da:	f85d fb08 	ldr.w	pc, [sp], #8
1a0025de:	bf00      	nop

1a0025e0 <__aeabi_dcmpge>:
1a0025e0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0025e4:	f7ff ffce 	bl	1a002584 <__aeabi_cdrcmple>
1a0025e8:	bf94      	ite	ls
1a0025ea:	2001      	movls	r0, #1
1a0025ec:	2000      	movhi	r0, #0
1a0025ee:	f85d fb08 	ldr.w	pc, [sp], #8
1a0025f2:	bf00      	nop

1a0025f4 <__aeabi_dcmpgt>:
1a0025f4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0025f8:	f7ff ffc4 	bl	1a002584 <__aeabi_cdrcmple>
1a0025fc:	bf34      	ite	cc
1a0025fe:	2001      	movcc	r0, #1
1a002600:	2000      	movcs	r0, #0
1a002602:	f85d fb08 	ldr.w	pc, [sp], #8
1a002606:	bf00      	nop

1a002608 <__aeabi_dcmpun>:
1a002608:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00260c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002610:	d102      	bne.n	1a002618 <__aeabi_dcmpun+0x10>
1a002612:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a002616:	d10a      	bne.n	1a00262e <__aeabi_dcmpun+0x26>
1a002618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00261c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002620:	d102      	bne.n	1a002628 <__aeabi_dcmpun+0x20>
1a002622:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a002626:	d102      	bne.n	1a00262e <__aeabi_dcmpun+0x26>
1a002628:	f04f 0000 	mov.w	r0, #0
1a00262c:	4770      	bx	lr
1a00262e:	f04f 0001 	mov.w	r0, #1
1a002632:	4770      	bx	lr

1a002634 <__aeabi_d2iz>:
1a002634:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002638:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00263c:	d215      	bcs.n	1a00266a <__aeabi_d2iz+0x36>
1a00263e:	d511      	bpl.n	1a002664 <__aeabi_d2iz+0x30>
1a002640:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a002644:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a002648:	d912      	bls.n	1a002670 <__aeabi_d2iz+0x3c>
1a00264a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00264e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a002652:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a002656:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00265a:	fa23 f002 	lsr.w	r0, r3, r2
1a00265e:	bf18      	it	ne
1a002660:	4240      	negne	r0, r0
1a002662:	4770      	bx	lr
1a002664:	f04f 0000 	mov.w	r0, #0
1a002668:	4770      	bx	lr
1a00266a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00266e:	d105      	bne.n	1a00267c <__aeabi_d2iz+0x48>
1a002670:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a002674:	bf08      	it	eq
1a002676:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00267a:	4770      	bx	lr
1a00267c:	f04f 0000 	mov.w	r0, #0
1a002680:	4770      	bx	lr
1a002682:	bf00      	nop

1a002684 <__aeabi_uldivmod>:
1a002684:	b953      	cbnz	r3, 1a00269c <__aeabi_uldivmod+0x18>
1a002686:	b94a      	cbnz	r2, 1a00269c <__aeabi_uldivmod+0x18>
1a002688:	2900      	cmp	r1, #0
1a00268a:	bf08      	it	eq
1a00268c:	2800      	cmpeq	r0, #0
1a00268e:	bf1c      	itt	ne
1a002690:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002694:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002698:	f000 b974 	b.w	1a002984 <__aeabi_idiv0>
1a00269c:	f1ad 0c08 	sub.w	ip, sp, #8
1a0026a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0026a4:	f000 f806 	bl	1a0026b4 <__udivmoddi4>
1a0026a8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0026ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0026b0:	b004      	add	sp, #16
1a0026b2:	4770      	bx	lr

1a0026b4 <__udivmoddi4>:
1a0026b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0026b8:	9e08      	ldr	r6, [sp, #32]
1a0026ba:	4604      	mov	r4, r0
1a0026bc:	4688      	mov	r8, r1
1a0026be:	2b00      	cmp	r3, #0
1a0026c0:	f040 8085 	bne.w	1a0027ce <__udivmoddi4+0x11a>
1a0026c4:	428a      	cmp	r2, r1
1a0026c6:	4615      	mov	r5, r2
1a0026c8:	d948      	bls.n	1a00275c <__udivmoddi4+0xa8>
1a0026ca:	fab2 f282 	clz	r2, r2
1a0026ce:	b14a      	cbz	r2, 1a0026e4 <__udivmoddi4+0x30>
1a0026d0:	f1c2 0720 	rsb	r7, r2, #32
1a0026d4:	fa01 f302 	lsl.w	r3, r1, r2
1a0026d8:	fa20 f707 	lsr.w	r7, r0, r7
1a0026dc:	4095      	lsls	r5, r2
1a0026de:	ea47 0803 	orr.w	r8, r7, r3
1a0026e2:	4094      	lsls	r4, r2
1a0026e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0026e8:	0c23      	lsrs	r3, r4, #16
1a0026ea:	fbb8 f7fe 	udiv	r7, r8, lr
1a0026ee:	fa1f fc85 	uxth.w	ip, r5
1a0026f2:	fb0e 8817 	mls	r8, lr, r7, r8
1a0026f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0026fa:	fb07 f10c 	mul.w	r1, r7, ip
1a0026fe:	4299      	cmp	r1, r3
1a002700:	d909      	bls.n	1a002716 <__udivmoddi4+0x62>
1a002702:	18eb      	adds	r3, r5, r3
1a002704:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002708:	f080 80e3 	bcs.w	1a0028d2 <__udivmoddi4+0x21e>
1a00270c:	4299      	cmp	r1, r3
1a00270e:	f240 80e0 	bls.w	1a0028d2 <__udivmoddi4+0x21e>
1a002712:	3f02      	subs	r7, #2
1a002714:	442b      	add	r3, r5
1a002716:	1a5b      	subs	r3, r3, r1
1a002718:	b2a4      	uxth	r4, r4
1a00271a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00271e:	fb0e 3310 	mls	r3, lr, r0, r3
1a002722:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002726:	fb00 fc0c 	mul.w	ip, r0, ip
1a00272a:	45a4      	cmp	ip, r4
1a00272c:	d909      	bls.n	1a002742 <__udivmoddi4+0x8e>
1a00272e:	192c      	adds	r4, r5, r4
1a002730:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002734:	f080 80cb 	bcs.w	1a0028ce <__udivmoddi4+0x21a>
1a002738:	45a4      	cmp	ip, r4
1a00273a:	f240 80c8 	bls.w	1a0028ce <__udivmoddi4+0x21a>
1a00273e:	3802      	subs	r0, #2
1a002740:	442c      	add	r4, r5
1a002742:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002746:	eba4 040c 	sub.w	r4, r4, ip
1a00274a:	2700      	movs	r7, #0
1a00274c:	b11e      	cbz	r6, 1a002756 <__udivmoddi4+0xa2>
1a00274e:	40d4      	lsrs	r4, r2
1a002750:	2300      	movs	r3, #0
1a002752:	e9c6 4300 	strd	r4, r3, [r6]
1a002756:	4639      	mov	r1, r7
1a002758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00275c:	2a00      	cmp	r2, #0
1a00275e:	d053      	beq.n	1a002808 <__udivmoddi4+0x154>
1a002760:	fab2 f282 	clz	r2, r2
1a002764:	2a00      	cmp	r2, #0
1a002766:	f040 80b6 	bne.w	1a0028d6 <__udivmoddi4+0x222>
1a00276a:	1b49      	subs	r1, r1, r5
1a00276c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002770:	fa1f f885 	uxth.w	r8, r5
1a002774:	2701      	movs	r7, #1
1a002776:	fbb1 fcfe 	udiv	ip, r1, lr
1a00277a:	0c23      	lsrs	r3, r4, #16
1a00277c:	fb0e 111c 	mls	r1, lr, ip, r1
1a002780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002784:	fb08 f10c 	mul.w	r1, r8, ip
1a002788:	4299      	cmp	r1, r3
1a00278a:	d907      	bls.n	1a00279c <__udivmoddi4+0xe8>
1a00278c:	18eb      	adds	r3, r5, r3
1a00278e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002792:	d202      	bcs.n	1a00279a <__udivmoddi4+0xe6>
1a002794:	4299      	cmp	r1, r3
1a002796:	f200 80ec 	bhi.w	1a002972 <__udivmoddi4+0x2be>
1a00279a:	4684      	mov	ip, r0
1a00279c:	1a59      	subs	r1, r3, r1
1a00279e:	b2a3      	uxth	r3, r4
1a0027a0:	fbb1 f0fe 	udiv	r0, r1, lr
1a0027a4:	fb0e 1410 	mls	r4, lr, r0, r1
1a0027a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0027ac:	fb08 f800 	mul.w	r8, r8, r0
1a0027b0:	45a0      	cmp	r8, r4
1a0027b2:	d907      	bls.n	1a0027c4 <__udivmoddi4+0x110>
1a0027b4:	192c      	adds	r4, r5, r4
1a0027b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0027ba:	d202      	bcs.n	1a0027c2 <__udivmoddi4+0x10e>
1a0027bc:	45a0      	cmp	r8, r4
1a0027be:	f200 80dc 	bhi.w	1a00297a <__udivmoddi4+0x2c6>
1a0027c2:	4618      	mov	r0, r3
1a0027c4:	eba4 0408 	sub.w	r4, r4, r8
1a0027c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0027cc:	e7be      	b.n	1a00274c <__udivmoddi4+0x98>
1a0027ce:	428b      	cmp	r3, r1
1a0027d0:	d908      	bls.n	1a0027e4 <__udivmoddi4+0x130>
1a0027d2:	2e00      	cmp	r6, #0
1a0027d4:	d078      	beq.n	1a0028c8 <__udivmoddi4+0x214>
1a0027d6:	2700      	movs	r7, #0
1a0027d8:	e9c6 0100 	strd	r0, r1, [r6]
1a0027dc:	4638      	mov	r0, r7
1a0027de:	4639      	mov	r1, r7
1a0027e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0027e4:	fab3 f783 	clz	r7, r3
1a0027e8:	b97f      	cbnz	r7, 1a00280a <__udivmoddi4+0x156>
1a0027ea:	428b      	cmp	r3, r1
1a0027ec:	d302      	bcc.n	1a0027f4 <__udivmoddi4+0x140>
1a0027ee:	4282      	cmp	r2, r0
1a0027f0:	f200 80bd 	bhi.w	1a00296e <__udivmoddi4+0x2ba>
1a0027f4:	1a84      	subs	r4, r0, r2
1a0027f6:	eb61 0303 	sbc.w	r3, r1, r3
1a0027fa:	2001      	movs	r0, #1
1a0027fc:	4698      	mov	r8, r3
1a0027fe:	2e00      	cmp	r6, #0
1a002800:	d0a9      	beq.n	1a002756 <__udivmoddi4+0xa2>
1a002802:	e9c6 4800 	strd	r4, r8, [r6]
1a002806:	e7a6      	b.n	1a002756 <__udivmoddi4+0xa2>
1a002808:	deff      	udf	#255	; 0xff
1a00280a:	f1c7 0520 	rsb	r5, r7, #32
1a00280e:	40bb      	lsls	r3, r7
1a002810:	fa22 fc05 	lsr.w	ip, r2, r5
1a002814:	ea4c 0c03 	orr.w	ip, ip, r3
1a002818:	fa01 f407 	lsl.w	r4, r1, r7
1a00281c:	fa20 f805 	lsr.w	r8, r0, r5
1a002820:	fa21 f305 	lsr.w	r3, r1, r5
1a002824:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002828:	ea48 0404 	orr.w	r4, r8, r4
1a00282c:	fbb3 f9fe 	udiv	r9, r3, lr
1a002830:	0c21      	lsrs	r1, r4, #16
1a002832:	fb0e 3319 	mls	r3, lr, r9, r3
1a002836:	fa1f f88c 	uxth.w	r8, ip
1a00283a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00283e:	fb09 fa08 	mul.w	sl, r9, r8
1a002842:	459a      	cmp	sl, r3
1a002844:	fa02 f207 	lsl.w	r2, r2, r7
1a002848:	fa00 f107 	lsl.w	r1, r0, r7
1a00284c:	d90b      	bls.n	1a002866 <__udivmoddi4+0x1b2>
1a00284e:	eb1c 0303 	adds.w	r3, ip, r3
1a002852:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002856:	f080 8088 	bcs.w	1a00296a <__udivmoddi4+0x2b6>
1a00285a:	459a      	cmp	sl, r3
1a00285c:	f240 8085 	bls.w	1a00296a <__udivmoddi4+0x2b6>
1a002860:	f1a9 0902 	sub.w	r9, r9, #2
1a002864:	4463      	add	r3, ip
1a002866:	eba3 030a 	sub.w	r3, r3, sl
1a00286a:	b2a4      	uxth	r4, r4
1a00286c:	fbb3 f0fe 	udiv	r0, r3, lr
1a002870:	fb0e 3310 	mls	r3, lr, r0, r3
1a002874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002878:	fb00 f808 	mul.w	r8, r0, r8
1a00287c:	45a0      	cmp	r8, r4
1a00287e:	d908      	bls.n	1a002892 <__udivmoddi4+0x1de>
1a002880:	eb1c 0404 	adds.w	r4, ip, r4
1a002884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002888:	d26b      	bcs.n	1a002962 <__udivmoddi4+0x2ae>
1a00288a:	45a0      	cmp	r8, r4
1a00288c:	d969      	bls.n	1a002962 <__udivmoddi4+0x2ae>
1a00288e:	3802      	subs	r0, #2
1a002890:	4464      	add	r4, ip
1a002892:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002896:	eba4 0408 	sub.w	r4, r4, r8
1a00289a:	fba0 8902 	umull	r8, r9, r0, r2
1a00289e:	454c      	cmp	r4, r9
1a0028a0:	46c6      	mov	lr, r8
1a0028a2:	464b      	mov	r3, r9
1a0028a4:	d354      	bcc.n	1a002950 <__udivmoddi4+0x29c>
1a0028a6:	d051      	beq.n	1a00294c <__udivmoddi4+0x298>
1a0028a8:	2e00      	cmp	r6, #0
1a0028aa:	d069      	beq.n	1a002980 <__udivmoddi4+0x2cc>
1a0028ac:	ebb1 020e 	subs.w	r2, r1, lr
1a0028b0:	eb64 0403 	sbc.w	r4, r4, r3
1a0028b4:	fa04 f505 	lsl.w	r5, r4, r5
1a0028b8:	fa22 f307 	lsr.w	r3, r2, r7
1a0028bc:	40fc      	lsrs	r4, r7
1a0028be:	431d      	orrs	r5, r3
1a0028c0:	e9c6 5400 	strd	r5, r4, [r6]
1a0028c4:	2700      	movs	r7, #0
1a0028c6:	e746      	b.n	1a002756 <__udivmoddi4+0xa2>
1a0028c8:	4637      	mov	r7, r6
1a0028ca:	4630      	mov	r0, r6
1a0028cc:	e743      	b.n	1a002756 <__udivmoddi4+0xa2>
1a0028ce:	4618      	mov	r0, r3
1a0028d0:	e737      	b.n	1a002742 <__udivmoddi4+0x8e>
1a0028d2:	4607      	mov	r7, r0
1a0028d4:	e71f      	b.n	1a002716 <__udivmoddi4+0x62>
1a0028d6:	f1c2 0320 	rsb	r3, r2, #32
1a0028da:	fa20 f703 	lsr.w	r7, r0, r3
1a0028de:	4095      	lsls	r5, r2
1a0028e0:	fa01 f002 	lsl.w	r0, r1, r2
1a0028e4:	fa21 f303 	lsr.w	r3, r1, r3
1a0028e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0028ec:	4338      	orrs	r0, r7
1a0028ee:	0c01      	lsrs	r1, r0, #16
1a0028f0:	fbb3 f7fe 	udiv	r7, r3, lr
1a0028f4:	fa1f f885 	uxth.w	r8, r5
1a0028f8:	fb0e 3317 	mls	r3, lr, r7, r3
1a0028fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002900:	fb07 f308 	mul.w	r3, r7, r8
1a002904:	428b      	cmp	r3, r1
1a002906:	fa04 f402 	lsl.w	r4, r4, r2
1a00290a:	d907      	bls.n	1a00291c <__udivmoddi4+0x268>
1a00290c:	1869      	adds	r1, r5, r1
1a00290e:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002912:	d228      	bcs.n	1a002966 <__udivmoddi4+0x2b2>
1a002914:	428b      	cmp	r3, r1
1a002916:	d926      	bls.n	1a002966 <__udivmoddi4+0x2b2>
1a002918:	3f02      	subs	r7, #2
1a00291a:	4429      	add	r1, r5
1a00291c:	1acb      	subs	r3, r1, r3
1a00291e:	b281      	uxth	r1, r0
1a002920:	fbb3 f0fe 	udiv	r0, r3, lr
1a002924:	fb0e 3310 	mls	r3, lr, r0, r3
1a002928:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00292c:	fb00 f308 	mul.w	r3, r0, r8
1a002930:	428b      	cmp	r3, r1
1a002932:	d907      	bls.n	1a002944 <__udivmoddi4+0x290>
1a002934:	1869      	adds	r1, r5, r1
1a002936:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00293a:	d210      	bcs.n	1a00295e <__udivmoddi4+0x2aa>
1a00293c:	428b      	cmp	r3, r1
1a00293e:	d90e      	bls.n	1a00295e <__udivmoddi4+0x2aa>
1a002940:	3802      	subs	r0, #2
1a002942:	4429      	add	r1, r5
1a002944:	1ac9      	subs	r1, r1, r3
1a002946:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00294a:	e714      	b.n	1a002776 <__udivmoddi4+0xc2>
1a00294c:	4541      	cmp	r1, r8
1a00294e:	d2ab      	bcs.n	1a0028a8 <__udivmoddi4+0x1f4>
1a002950:	ebb8 0e02 	subs.w	lr, r8, r2
1a002954:	eb69 020c 	sbc.w	r2, r9, ip
1a002958:	3801      	subs	r0, #1
1a00295a:	4613      	mov	r3, r2
1a00295c:	e7a4      	b.n	1a0028a8 <__udivmoddi4+0x1f4>
1a00295e:	4660      	mov	r0, ip
1a002960:	e7f0      	b.n	1a002944 <__udivmoddi4+0x290>
1a002962:	4618      	mov	r0, r3
1a002964:	e795      	b.n	1a002892 <__udivmoddi4+0x1de>
1a002966:	4667      	mov	r7, ip
1a002968:	e7d8      	b.n	1a00291c <__udivmoddi4+0x268>
1a00296a:	4681      	mov	r9, r0
1a00296c:	e77b      	b.n	1a002866 <__udivmoddi4+0x1b2>
1a00296e:	4638      	mov	r0, r7
1a002970:	e745      	b.n	1a0027fe <__udivmoddi4+0x14a>
1a002972:	f1ac 0c02 	sub.w	ip, ip, #2
1a002976:	442b      	add	r3, r5
1a002978:	e710      	b.n	1a00279c <__udivmoddi4+0xe8>
1a00297a:	3802      	subs	r0, #2
1a00297c:	442c      	add	r4, r5
1a00297e:	e721      	b.n	1a0027c4 <__udivmoddi4+0x110>
1a002980:	4637      	mov	r7, r6
1a002982:	e6e8      	b.n	1a002756 <__udivmoddi4+0xa2>

1a002984 <__aeabi_idiv0>:
1a002984:	4770      	bx	lr
1a002986:	bf00      	nop

1a002988 <_malloc_trim_r>:
1a002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00298a:	4f24      	ldr	r7, [pc, #144]	; (1a002a1c <_malloc_trim_r+0x94>)
1a00298c:	460c      	mov	r4, r1
1a00298e:	4606      	mov	r6, r0
1a002990:	f000 fd0a 	bl	1a0033a8 <__malloc_lock>
1a002994:	68bb      	ldr	r3, [r7, #8]
1a002996:	685d      	ldr	r5, [r3, #4]
1a002998:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a00299c:	310f      	adds	r1, #15
1a00299e:	f025 0503 	bic.w	r5, r5, #3
1a0029a2:	4429      	add	r1, r5
1a0029a4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0029a8:	f021 010f 	bic.w	r1, r1, #15
1a0029ac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0029b0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0029b4:	db07      	blt.n	1a0029c6 <_malloc_trim_r+0x3e>
1a0029b6:	2100      	movs	r1, #0
1a0029b8:	4630      	mov	r0, r6
1a0029ba:	f7fd ff9b 	bl	1a0008f4 <_sbrk_r>
1a0029be:	68bb      	ldr	r3, [r7, #8]
1a0029c0:	442b      	add	r3, r5
1a0029c2:	4298      	cmp	r0, r3
1a0029c4:	d004      	beq.n	1a0029d0 <_malloc_trim_r+0x48>
1a0029c6:	4630      	mov	r0, r6
1a0029c8:	f000 fcf4 	bl	1a0033b4 <__malloc_unlock>
1a0029cc:	2000      	movs	r0, #0
1a0029ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0029d0:	4261      	negs	r1, r4
1a0029d2:	4630      	mov	r0, r6
1a0029d4:	f7fd ff8e 	bl	1a0008f4 <_sbrk_r>
1a0029d8:	3001      	adds	r0, #1
1a0029da:	d00d      	beq.n	1a0029f8 <_malloc_trim_r+0x70>
1a0029dc:	4b10      	ldr	r3, [pc, #64]	; (1a002a20 <_malloc_trim_r+0x98>)
1a0029de:	68ba      	ldr	r2, [r7, #8]
1a0029e0:	6819      	ldr	r1, [r3, #0]
1a0029e2:	1b2d      	subs	r5, r5, r4
1a0029e4:	f045 0501 	orr.w	r5, r5, #1
1a0029e8:	4630      	mov	r0, r6
1a0029ea:	1b09      	subs	r1, r1, r4
1a0029ec:	6055      	str	r5, [r2, #4]
1a0029ee:	6019      	str	r1, [r3, #0]
1a0029f0:	f000 fce0 	bl	1a0033b4 <__malloc_unlock>
1a0029f4:	2001      	movs	r0, #1
1a0029f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0029f8:	2100      	movs	r1, #0
1a0029fa:	4630      	mov	r0, r6
1a0029fc:	f7fd ff7a 	bl	1a0008f4 <_sbrk_r>
1a002a00:	68ba      	ldr	r2, [r7, #8]
1a002a02:	1a83      	subs	r3, r0, r2
1a002a04:	2b0f      	cmp	r3, #15
1a002a06:	ddde      	ble.n	1a0029c6 <_malloc_trim_r+0x3e>
1a002a08:	4c06      	ldr	r4, [pc, #24]	; (1a002a24 <_malloc_trim_r+0x9c>)
1a002a0a:	4905      	ldr	r1, [pc, #20]	; (1a002a20 <_malloc_trim_r+0x98>)
1a002a0c:	6824      	ldr	r4, [r4, #0]
1a002a0e:	f043 0301 	orr.w	r3, r3, #1
1a002a12:	1b00      	subs	r0, r0, r4
1a002a14:	6053      	str	r3, [r2, #4]
1a002a16:	6008      	str	r0, [r1, #0]
1a002a18:	e7d5      	b.n	1a0029c6 <_malloc_trim_r+0x3e>
1a002a1a:	bf00      	nop
1a002a1c:	10000478 	.word	0x10000478
1a002a20:	10000ac8 	.word	0x10000ac8
1a002a24:	10000880 	.word	0x10000880

1a002a28 <_free_r>:
1a002a28:	2900      	cmp	r1, #0
1a002a2a:	d05d      	beq.n	1a002ae8 <_free_r+0xc0>
1a002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002a2e:	460f      	mov	r7, r1
1a002a30:	4606      	mov	r6, r0
1a002a32:	f000 fcb9 	bl	1a0033a8 <__malloc_lock>
1a002a36:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a002a3a:	4c73      	ldr	r4, [pc, #460]	; (1a002c08 <_free_r+0x1e0>)
1a002a3c:	f02c 0301 	bic.w	r3, ip, #1
1a002a40:	f1a7 0008 	sub.w	r0, r7, #8
1a002a44:	18c2      	adds	r2, r0, r3
1a002a46:	68a1      	ldr	r1, [r4, #8]
1a002a48:	6855      	ldr	r5, [r2, #4]
1a002a4a:	4291      	cmp	r1, r2
1a002a4c:	f025 0503 	bic.w	r5, r5, #3
1a002a50:	d07f      	beq.n	1a002b52 <_free_r+0x12a>
1a002a52:	f01c 0f01 	tst.w	ip, #1
1a002a56:	6055      	str	r5, [r2, #4]
1a002a58:	eb02 0105 	add.w	r1, r2, r5
1a002a5c:	d133      	bne.n	1a002ac6 <_free_r+0x9e>
1a002a5e:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a002a62:	6849      	ldr	r1, [r1, #4]
1a002a64:	eba0 000e 	sub.w	r0, r0, lr
1a002a68:	f104 0c08 	add.w	ip, r4, #8
1a002a6c:	6887      	ldr	r7, [r0, #8]
1a002a6e:	4567      	cmp	r7, ip
1a002a70:	4473      	add	r3, lr
1a002a72:	f001 0101 	and.w	r1, r1, #1
1a002a76:	d060      	beq.n	1a002b3a <_free_r+0x112>
1a002a78:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a002a7c:	f8c7 e00c 	str.w	lr, [r7, #12]
1a002a80:	f8ce 7008 	str.w	r7, [lr, #8]
1a002a84:	2900      	cmp	r1, #0
1a002a86:	f000 8089 	beq.w	1a002b9c <_free_r+0x174>
1a002a8a:	f043 0101 	orr.w	r1, r3, #1
1a002a8e:	6041      	str	r1, [r0, #4]
1a002a90:	6013      	str	r3, [r2, #0]
1a002a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002a96:	d230      	bcs.n	1a002afa <_free_r+0xd2>
1a002a98:	08db      	lsrs	r3, r3, #3
1a002a9a:	1c59      	adds	r1, r3, #1
1a002a9c:	6865      	ldr	r5, [r4, #4]
1a002a9e:	109a      	asrs	r2, r3, #2
1a002aa0:	2301      	movs	r3, #1
1a002aa2:	4093      	lsls	r3, r2
1a002aa4:	432b      	orrs	r3, r5
1a002aa6:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a002aaa:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a002aae:	6063      	str	r3, [r4, #4]
1a002ab0:	3a08      	subs	r2, #8
1a002ab2:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a002ab6:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a002aba:	60e8      	str	r0, [r5, #12]
1a002abc:	4630      	mov	r0, r6
1a002abe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002ac2:	f000 bc77 	b.w	1a0033b4 <__malloc_unlock>
1a002ac6:	6849      	ldr	r1, [r1, #4]
1a002ac8:	07c9      	lsls	r1, r1, #31
1a002aca:	d40e      	bmi.n	1a002aea <_free_r+0xc2>
1a002acc:	442b      	add	r3, r5
1a002ace:	f104 0c08 	add.w	ip, r4, #8
1a002ad2:	6891      	ldr	r1, [r2, #8]
1a002ad4:	4561      	cmp	r1, ip
1a002ad6:	f043 0501 	orr.w	r5, r3, #1
1a002ada:	d067      	beq.n	1a002bac <_free_r+0x184>
1a002adc:	68d2      	ldr	r2, [r2, #12]
1a002ade:	60ca      	str	r2, [r1, #12]
1a002ae0:	6091      	str	r1, [r2, #8]
1a002ae2:	6045      	str	r5, [r0, #4]
1a002ae4:	50c3      	str	r3, [r0, r3]
1a002ae6:	e7d4      	b.n	1a002a92 <_free_r+0x6a>
1a002ae8:	4770      	bx	lr
1a002aea:	f043 0101 	orr.w	r1, r3, #1
1a002aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002af2:	f847 1c04 	str.w	r1, [r7, #-4]
1a002af6:	6013      	str	r3, [r2, #0]
1a002af8:	d3ce      	bcc.n	1a002a98 <_free_r+0x70>
1a002afa:	0a5a      	lsrs	r2, r3, #9
1a002afc:	2a04      	cmp	r2, #4
1a002afe:	d842      	bhi.n	1a002b86 <_free_r+0x15e>
1a002b00:	099a      	lsrs	r2, r3, #6
1a002b02:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a002b06:	00ff      	lsls	r7, r7, #3
1a002b08:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a002b0c:	19e5      	adds	r5, r4, r7
1a002b0e:	59e2      	ldr	r2, [r4, r7]
1a002b10:	3d08      	subs	r5, #8
1a002b12:	4295      	cmp	r5, r2
1a002b14:	d051      	beq.n	1a002bba <_free_r+0x192>
1a002b16:	6851      	ldr	r1, [r2, #4]
1a002b18:	f021 0103 	bic.w	r1, r1, #3
1a002b1c:	4299      	cmp	r1, r3
1a002b1e:	d902      	bls.n	1a002b26 <_free_r+0xfe>
1a002b20:	6892      	ldr	r2, [r2, #8]
1a002b22:	4295      	cmp	r5, r2
1a002b24:	d1f7      	bne.n	1a002b16 <_free_r+0xee>
1a002b26:	68d5      	ldr	r5, [r2, #12]
1a002b28:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a002b2c:	60a8      	str	r0, [r5, #8]
1a002b2e:	60d0      	str	r0, [r2, #12]
1a002b30:	4630      	mov	r0, r6
1a002b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002b36:	f000 bc3d 	b.w	1a0033b4 <__malloc_unlock>
1a002b3a:	2900      	cmp	r1, #0
1a002b3c:	d15e      	bne.n	1a002bfc <_free_r+0x1d4>
1a002b3e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a002b42:	442b      	add	r3, r5
1a002b44:	f043 0401 	orr.w	r4, r3, #1
1a002b48:	60ca      	str	r2, [r1, #12]
1a002b4a:	6091      	str	r1, [r2, #8]
1a002b4c:	6044      	str	r4, [r0, #4]
1a002b4e:	50c3      	str	r3, [r0, r3]
1a002b50:	e7b4      	b.n	1a002abc <_free_r+0x94>
1a002b52:	f01c 0f01 	tst.w	ip, #1
1a002b56:	442b      	add	r3, r5
1a002b58:	d107      	bne.n	1a002b6a <_free_r+0x142>
1a002b5a:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a002b5e:	1a80      	subs	r0, r0, r2
1a002b60:	4413      	add	r3, r2
1a002b62:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a002b66:	60ca      	str	r2, [r1, #12]
1a002b68:	6091      	str	r1, [r2, #8]
1a002b6a:	4a28      	ldr	r2, [pc, #160]	; (1a002c0c <_free_r+0x1e4>)
1a002b6c:	6812      	ldr	r2, [r2, #0]
1a002b6e:	f043 0101 	orr.w	r1, r3, #1
1a002b72:	429a      	cmp	r2, r3
1a002b74:	6041      	str	r1, [r0, #4]
1a002b76:	60a0      	str	r0, [r4, #8]
1a002b78:	d8a0      	bhi.n	1a002abc <_free_r+0x94>
1a002b7a:	4b25      	ldr	r3, [pc, #148]	; (1a002c10 <_free_r+0x1e8>)
1a002b7c:	4630      	mov	r0, r6
1a002b7e:	6819      	ldr	r1, [r3, #0]
1a002b80:	f7ff ff02 	bl	1a002988 <_malloc_trim_r>
1a002b84:	e79a      	b.n	1a002abc <_free_r+0x94>
1a002b86:	2a14      	cmp	r2, #20
1a002b88:	d90a      	bls.n	1a002ba0 <_free_r+0x178>
1a002b8a:	2a54      	cmp	r2, #84	; 0x54
1a002b8c:	d81d      	bhi.n	1a002bca <_free_r+0x1a2>
1a002b8e:	0b1a      	lsrs	r2, r3, #12
1a002b90:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a002b94:	00ff      	lsls	r7, r7, #3
1a002b96:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a002b9a:	e7b7      	b.n	1a002b0c <_free_r+0xe4>
1a002b9c:	442b      	add	r3, r5
1a002b9e:	e798      	b.n	1a002ad2 <_free_r+0xaa>
1a002ba0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a002ba4:	00ff      	lsls	r7, r7, #3
1a002ba6:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a002baa:	e7af      	b.n	1a002b0c <_free_r+0xe4>
1a002bac:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a002bb0:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a002bb4:	6045      	str	r5, [r0, #4]
1a002bb6:	50c3      	str	r3, [r0, r3]
1a002bb8:	e780      	b.n	1a002abc <_free_r+0x94>
1a002bba:	6863      	ldr	r3, [r4, #4]
1a002bbc:	1089      	asrs	r1, r1, #2
1a002bbe:	2701      	movs	r7, #1
1a002bc0:	fa07 f101 	lsl.w	r1, r7, r1
1a002bc4:	4319      	orrs	r1, r3
1a002bc6:	6061      	str	r1, [r4, #4]
1a002bc8:	e7ae      	b.n	1a002b28 <_free_r+0x100>
1a002bca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a002bce:	d806      	bhi.n	1a002bde <_free_r+0x1b6>
1a002bd0:	0bda      	lsrs	r2, r3, #15
1a002bd2:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a002bd6:	00ff      	lsls	r7, r7, #3
1a002bd8:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a002bdc:	e796      	b.n	1a002b0c <_free_r+0xe4>
1a002bde:	f240 5154 	movw	r1, #1364	; 0x554
1a002be2:	428a      	cmp	r2, r1
1a002be4:	d806      	bhi.n	1a002bf4 <_free_r+0x1cc>
1a002be6:	0c9a      	lsrs	r2, r3, #18
1a002be8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a002bec:	00ff      	lsls	r7, r7, #3
1a002bee:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a002bf2:	e78b      	b.n	1a002b0c <_free_r+0xe4>
1a002bf4:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a002bf8:	217e      	movs	r1, #126	; 0x7e
1a002bfa:	e787      	b.n	1a002b0c <_free_r+0xe4>
1a002bfc:	f043 0101 	orr.w	r1, r3, #1
1a002c00:	6041      	str	r1, [r0, #4]
1a002c02:	6013      	str	r3, [r2, #0]
1a002c04:	e75a      	b.n	1a002abc <_free_r+0x94>
1a002c06:	bf00      	nop
1a002c08:	10000478 	.word	0x10000478
1a002c0c:	10000884 	.word	0x10000884
1a002c10:	10000af8 	.word	0x10000af8

1a002c14 <__libc_init_array>:
1a002c14:	b570      	push	{r4, r5, r6, lr}
1a002c16:	4e0d      	ldr	r6, [pc, #52]	; (1a002c4c <__libc_init_array+0x38>)
1a002c18:	4d0d      	ldr	r5, [pc, #52]	; (1a002c50 <__libc_init_array+0x3c>)
1a002c1a:	1b76      	subs	r6, r6, r5
1a002c1c:	10b6      	asrs	r6, r6, #2
1a002c1e:	d006      	beq.n	1a002c2e <__libc_init_array+0x1a>
1a002c20:	2400      	movs	r4, #0
1a002c22:	3401      	adds	r4, #1
1a002c24:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c28:	4798      	blx	r3
1a002c2a:	42a6      	cmp	r6, r4
1a002c2c:	d1f9      	bne.n	1a002c22 <__libc_init_array+0xe>
1a002c2e:	4e09      	ldr	r6, [pc, #36]	; (1a002c54 <__libc_init_array+0x40>)
1a002c30:	4d09      	ldr	r5, [pc, #36]	; (1a002c58 <__libc_init_array+0x44>)
1a002c32:	1b76      	subs	r6, r6, r5
1a002c34:	f7fd fe5d 	bl	1a0008f2 <_init>
1a002c38:	10b6      	asrs	r6, r6, #2
1a002c3a:	d006      	beq.n	1a002c4a <__libc_init_array+0x36>
1a002c3c:	2400      	movs	r4, #0
1a002c3e:	3401      	adds	r4, #1
1a002c40:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c44:	4798      	blx	r3
1a002c46:	42a6      	cmp	r6, r4
1a002c48:	d1f9      	bne.n	1a002c3e <__libc_init_array+0x2a>
1a002c4a:	bd70      	pop	{r4, r5, r6, pc}
1a002c4c:	1a0071dc 	.word	0x1a0071dc
1a002c50:	1a0071dc 	.word	0x1a0071dc
1a002c54:	1a0071e0 	.word	0x1a0071e0
1a002c58:	1a0071dc 	.word	0x1a0071dc

1a002c5c <__retarget_lock_acquire_recursive>:
1a002c5c:	4770      	bx	lr
1a002c5e:	bf00      	nop

1a002c60 <__retarget_lock_release_recursive>:
1a002c60:	4770      	bx	lr
1a002c62:	bf00      	nop

1a002c64 <_malloc_r>:
1a002c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c68:	f101 050b 	add.w	r5, r1, #11
1a002c6c:	2d16      	cmp	r5, #22
1a002c6e:	b083      	sub	sp, #12
1a002c70:	4606      	mov	r6, r0
1a002c72:	d823      	bhi.n	1a002cbc <_malloc_r+0x58>
1a002c74:	2910      	cmp	r1, #16
1a002c76:	f200 80b9 	bhi.w	1a002dec <_malloc_r+0x188>
1a002c7a:	f000 fb95 	bl	1a0033a8 <__malloc_lock>
1a002c7e:	2510      	movs	r5, #16
1a002c80:	2318      	movs	r3, #24
1a002c82:	2002      	movs	r0, #2
1a002c84:	4fba      	ldr	r7, [pc, #744]	; (1a002f70 <_malloc_r+0x30c>)
1a002c86:	443b      	add	r3, r7
1a002c88:	f1a3 0208 	sub.w	r2, r3, #8
1a002c8c:	685c      	ldr	r4, [r3, #4]
1a002c8e:	4294      	cmp	r4, r2
1a002c90:	f000 80b9 	beq.w	1a002e06 <_malloc_r+0x1a2>
1a002c94:	6863      	ldr	r3, [r4, #4]
1a002c96:	f023 0303 	bic.w	r3, r3, #3
1a002c9a:	4423      	add	r3, r4
1a002c9c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a002ca0:	685a      	ldr	r2, [r3, #4]
1a002ca2:	60e9      	str	r1, [r5, #12]
1a002ca4:	f042 0201 	orr.w	r2, r2, #1
1a002ca8:	4630      	mov	r0, r6
1a002caa:	608d      	str	r5, [r1, #8]
1a002cac:	605a      	str	r2, [r3, #4]
1a002cae:	f000 fb81 	bl	1a0033b4 <__malloc_unlock>
1a002cb2:	3408      	adds	r4, #8
1a002cb4:	4620      	mov	r0, r4
1a002cb6:	b003      	add	sp, #12
1a002cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002cbc:	f035 0507 	bics.w	r5, r5, #7
1a002cc0:	f100 8094 	bmi.w	1a002dec <_malloc_r+0x188>
1a002cc4:	42a9      	cmp	r1, r5
1a002cc6:	f200 8091 	bhi.w	1a002dec <_malloc_r+0x188>
1a002cca:	f000 fb6d 	bl	1a0033a8 <__malloc_lock>
1a002cce:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a002cd2:	f0c0 81a2 	bcc.w	1a00301a <_malloc_r+0x3b6>
1a002cd6:	0a6b      	lsrs	r3, r5, #9
1a002cd8:	f000 808f 	beq.w	1a002dfa <_malloc_r+0x196>
1a002cdc:	2b04      	cmp	r3, #4
1a002cde:	f200 8178 	bhi.w	1a002fd2 <_malloc_r+0x36e>
1a002ce2:	09ab      	lsrs	r3, r5, #6
1a002ce4:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a002ce8:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a002cec:	00c3      	lsls	r3, r0, #3
1a002cee:	4fa0      	ldr	r7, [pc, #640]	; (1a002f70 <_malloc_r+0x30c>)
1a002cf0:	443b      	add	r3, r7
1a002cf2:	f1a3 0108 	sub.w	r1, r3, #8
1a002cf6:	685c      	ldr	r4, [r3, #4]
1a002cf8:	42a1      	cmp	r1, r4
1a002cfa:	d106      	bne.n	1a002d0a <_malloc_r+0xa6>
1a002cfc:	e00c      	b.n	1a002d18 <_malloc_r+0xb4>
1a002cfe:	2a00      	cmp	r2, #0
1a002d00:	f280 8127 	bge.w	1a002f52 <_malloc_r+0x2ee>
1a002d04:	68e4      	ldr	r4, [r4, #12]
1a002d06:	42a1      	cmp	r1, r4
1a002d08:	d006      	beq.n	1a002d18 <_malloc_r+0xb4>
1a002d0a:	6863      	ldr	r3, [r4, #4]
1a002d0c:	f023 0303 	bic.w	r3, r3, #3
1a002d10:	1b5a      	subs	r2, r3, r5
1a002d12:	2a0f      	cmp	r2, #15
1a002d14:	ddf3      	ble.n	1a002cfe <_malloc_r+0x9a>
1a002d16:	4660      	mov	r0, ip
1a002d18:	693c      	ldr	r4, [r7, #16]
1a002d1a:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a002f84 <_malloc_r+0x320>
1a002d1e:	4564      	cmp	r4, ip
1a002d20:	d07c      	beq.n	1a002e1c <_malloc_r+0x1b8>
1a002d22:	6863      	ldr	r3, [r4, #4]
1a002d24:	f023 0303 	bic.w	r3, r3, #3
1a002d28:	1b5a      	subs	r2, r3, r5
1a002d2a:	2a0f      	cmp	r2, #15
1a002d2c:	f300 8183 	bgt.w	1a003036 <_malloc_r+0x3d2>
1a002d30:	2a00      	cmp	r2, #0
1a002d32:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a002d36:	f280 8174 	bge.w	1a003022 <_malloc_r+0x3be>
1a002d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002d3e:	f080 8125 	bcs.w	1a002f8c <_malloc_r+0x328>
1a002d42:	08db      	lsrs	r3, r3, #3
1a002d44:	1c59      	adds	r1, r3, #1
1a002d46:	687a      	ldr	r2, [r7, #4]
1a002d48:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a002d4c:	f8c4 8008 	str.w	r8, [r4, #8]
1a002d50:	f04f 0e01 	mov.w	lr, #1
1a002d54:	109b      	asrs	r3, r3, #2
1a002d56:	fa0e f303 	lsl.w	r3, lr, r3
1a002d5a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a002d5e:	4313      	orrs	r3, r2
1a002d60:	f1ae 0208 	sub.w	r2, lr, #8
1a002d64:	60e2      	str	r2, [r4, #12]
1a002d66:	607b      	str	r3, [r7, #4]
1a002d68:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a002d6c:	f8c8 400c 	str.w	r4, [r8, #12]
1a002d70:	1082      	asrs	r2, r0, #2
1a002d72:	2401      	movs	r4, #1
1a002d74:	4094      	lsls	r4, r2
1a002d76:	429c      	cmp	r4, r3
1a002d78:	d856      	bhi.n	1a002e28 <_malloc_r+0x1c4>
1a002d7a:	421c      	tst	r4, r3
1a002d7c:	d106      	bne.n	1a002d8c <_malloc_r+0x128>
1a002d7e:	f020 0003 	bic.w	r0, r0, #3
1a002d82:	0064      	lsls	r4, r4, #1
1a002d84:	421c      	tst	r4, r3
1a002d86:	f100 0004 	add.w	r0, r0, #4
1a002d8a:	d0fa      	beq.n	1a002d82 <_malloc_r+0x11e>
1a002d8c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a002d90:	46ce      	mov	lr, r9
1a002d92:	4680      	mov	r8, r0
1a002d94:	f8de 300c 	ldr.w	r3, [lr, #12]
1a002d98:	459e      	cmp	lr, r3
1a002d9a:	d107      	bne.n	1a002dac <_malloc_r+0x148>
1a002d9c:	e125      	b.n	1a002fea <_malloc_r+0x386>
1a002d9e:	2a00      	cmp	r2, #0
1a002da0:	f280 812c 	bge.w	1a002ffc <_malloc_r+0x398>
1a002da4:	68db      	ldr	r3, [r3, #12]
1a002da6:	459e      	cmp	lr, r3
1a002da8:	f000 811f 	beq.w	1a002fea <_malloc_r+0x386>
1a002dac:	6859      	ldr	r1, [r3, #4]
1a002dae:	f021 0103 	bic.w	r1, r1, #3
1a002db2:	1b4a      	subs	r2, r1, r5
1a002db4:	2a0f      	cmp	r2, #15
1a002db6:	ddf2      	ble.n	1a002d9e <_malloc_r+0x13a>
1a002db8:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a002dbc:	195c      	adds	r4, r3, r5
1a002dbe:	f045 0501 	orr.w	r5, r5, #1
1a002dc2:	605d      	str	r5, [r3, #4]
1a002dc4:	f042 0501 	orr.w	r5, r2, #1
1a002dc8:	f8c8 e00c 	str.w	lr, [r8, #12]
1a002dcc:	4630      	mov	r0, r6
1a002dce:	f8ce 8008 	str.w	r8, [lr, #8]
1a002dd2:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a002dd6:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a002dda:	6065      	str	r5, [r4, #4]
1a002ddc:	505a      	str	r2, [r3, r1]
1a002dde:	9300      	str	r3, [sp, #0]
1a002de0:	f000 fae8 	bl	1a0033b4 <__malloc_unlock>
1a002de4:	9b00      	ldr	r3, [sp, #0]
1a002de6:	f103 0408 	add.w	r4, r3, #8
1a002dea:	e002      	b.n	1a002df2 <_malloc_r+0x18e>
1a002dec:	230c      	movs	r3, #12
1a002dee:	6033      	str	r3, [r6, #0]
1a002df0:	2400      	movs	r4, #0
1a002df2:	4620      	mov	r0, r4
1a002df4:	b003      	add	sp, #12
1a002df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
1a002dfe:	2040      	movs	r0, #64	; 0x40
1a002e00:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a002e04:	e773      	b.n	1a002cee <_malloc_r+0x8a>
1a002e06:	68dc      	ldr	r4, [r3, #12]
1a002e08:	42a3      	cmp	r3, r4
1a002e0a:	bf08      	it	eq
1a002e0c:	3002      	addeq	r0, #2
1a002e0e:	f47f af41 	bne.w	1a002c94 <_malloc_r+0x30>
1a002e12:	693c      	ldr	r4, [r7, #16]
1a002e14:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a002f84 <_malloc_r+0x320>
1a002e18:	4564      	cmp	r4, ip
1a002e1a:	d182      	bne.n	1a002d22 <_malloc_r+0xbe>
1a002e1c:	687b      	ldr	r3, [r7, #4]
1a002e1e:	1082      	asrs	r2, r0, #2
1a002e20:	2401      	movs	r4, #1
1a002e22:	4094      	lsls	r4, r2
1a002e24:	429c      	cmp	r4, r3
1a002e26:	d9a8      	bls.n	1a002d7a <_malloc_r+0x116>
1a002e28:	68bc      	ldr	r4, [r7, #8]
1a002e2a:	6863      	ldr	r3, [r4, #4]
1a002e2c:	f023 0803 	bic.w	r8, r3, #3
1a002e30:	45a8      	cmp	r8, r5
1a002e32:	d303      	bcc.n	1a002e3c <_malloc_r+0x1d8>
1a002e34:	eba8 0305 	sub.w	r3, r8, r5
1a002e38:	2b0f      	cmp	r3, #15
1a002e3a:	dc7a      	bgt.n	1a002f32 <_malloc_r+0x2ce>
1a002e3c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a002f88 <_malloc_r+0x324>
1a002e40:	4b4c      	ldr	r3, [pc, #304]	; (1a002f74 <_malloc_r+0x310>)
1a002e42:	f8d9 2000 	ldr.w	r2, [r9]
1a002e46:	681b      	ldr	r3, [r3, #0]
1a002e48:	3201      	adds	r2, #1
1a002e4a:	442b      	add	r3, r5
1a002e4c:	eb04 0a08 	add.w	sl, r4, r8
1a002e50:	f000 813c 	beq.w	1a0030cc <_malloc_r+0x468>
1a002e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002e58:	330f      	adds	r3, #15
1a002e5a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a002e5e:	f02b 0b0f 	bic.w	fp, fp, #15
1a002e62:	4659      	mov	r1, fp
1a002e64:	4630      	mov	r0, r6
1a002e66:	f7fd fd45 	bl	1a0008f4 <_sbrk_r>
1a002e6a:	1c41      	adds	r1, r0, #1
1a002e6c:	4602      	mov	r2, r0
1a002e6e:	f000 80fc 	beq.w	1a00306a <_malloc_r+0x406>
1a002e72:	4582      	cmp	sl, r0
1a002e74:	f200 80f7 	bhi.w	1a003066 <_malloc_r+0x402>
1a002e78:	4b3f      	ldr	r3, [pc, #252]	; (1a002f78 <_malloc_r+0x314>)
1a002e7a:	6818      	ldr	r0, [r3, #0]
1a002e7c:	4458      	add	r0, fp
1a002e7e:	6018      	str	r0, [r3, #0]
1a002e80:	4601      	mov	r1, r0
1a002e82:	f000 8157 	beq.w	1a003134 <_malloc_r+0x4d0>
1a002e86:	f8d9 0000 	ldr.w	r0, [r9]
1a002e8a:	9301      	str	r3, [sp, #4]
1a002e8c:	3001      	adds	r0, #1
1a002e8e:	bf1b      	ittet	ne
1a002e90:	eba2 0a0a 	subne.w	sl, r2, sl
1a002e94:	4451      	addne	r1, sl
1a002e96:	f8c9 2000 	streq.w	r2, [r9]
1a002e9a:	6019      	strne	r1, [r3, #0]
1a002e9c:	f012 0a07 	ands.w	sl, r2, #7
1a002ea0:	f000 8120 	beq.w	1a0030e4 <_malloc_r+0x480>
1a002ea4:	f1ca 0108 	rsb	r1, sl, #8
1a002ea8:	440a      	add	r2, r1
1a002eaa:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a002eae:	4493      	add	fp, r2
1a002eb0:	3108      	adds	r1, #8
1a002eb2:	eba1 010b 	sub.w	r1, r1, fp
1a002eb6:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a002eba:	4649      	mov	r1, r9
1a002ebc:	4630      	mov	r0, r6
1a002ebe:	9200      	str	r2, [sp, #0]
1a002ec0:	f7fd fd18 	bl	1a0008f4 <_sbrk_r>
1a002ec4:	1c42      	adds	r2, r0, #1
1a002ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002eca:	f000 8158 	beq.w	1a00317e <_malloc_r+0x51a>
1a002ece:	1a80      	subs	r0, r0, r2
1a002ed0:	eb00 0b09 	add.w	fp, r0, r9
1a002ed4:	6818      	ldr	r0, [r3, #0]
1a002ed6:	60ba      	str	r2, [r7, #8]
1a002ed8:	f04b 0101 	orr.w	r1, fp, #1
1a002edc:	4448      	add	r0, r9
1a002ede:	42bc      	cmp	r4, r7
1a002ee0:	6051      	str	r1, [r2, #4]
1a002ee2:	6018      	str	r0, [r3, #0]
1a002ee4:	f000 8132 	beq.w	1a00314c <_malloc_r+0x4e8>
1a002ee8:	f1b8 0f0f 	cmp.w	r8, #15
1a002eec:	f240 8130 	bls.w	1a003150 <_malloc_r+0x4ec>
1a002ef0:	6861      	ldr	r1, [r4, #4]
1a002ef2:	f1a8 0c0c 	sub.w	ip, r8, #12
1a002ef6:	f02c 0c07 	bic.w	ip, ip, #7
1a002efa:	f001 0101 	and.w	r1, r1, #1
1a002efe:	eb04 0e0c 	add.w	lr, r4, ip
1a002f02:	ea41 010c 	orr.w	r1, r1, ip
1a002f06:	f04f 0805 	mov.w	r8, #5
1a002f0a:	f1bc 0f0f 	cmp.w	ip, #15
1a002f0e:	6061      	str	r1, [r4, #4]
1a002f10:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a002f14:	f200 813b 	bhi.w	1a00318e <_malloc_r+0x52a>
1a002f18:	6851      	ldr	r1, [r2, #4]
1a002f1a:	4614      	mov	r4, r2
1a002f1c:	4b17      	ldr	r3, [pc, #92]	; (1a002f7c <_malloc_r+0x318>)
1a002f1e:	681a      	ldr	r2, [r3, #0]
1a002f20:	4282      	cmp	r2, r0
1a002f22:	bf38      	it	cc
1a002f24:	6018      	strcc	r0, [r3, #0]
1a002f26:	4b16      	ldr	r3, [pc, #88]	; (1a002f80 <_malloc_r+0x31c>)
1a002f28:	681a      	ldr	r2, [r3, #0]
1a002f2a:	4282      	cmp	r2, r0
1a002f2c:	bf38      	it	cc
1a002f2e:	6018      	strcc	r0, [r3, #0]
1a002f30:	e09d      	b.n	1a00306e <_malloc_r+0x40a>
1a002f32:	1962      	adds	r2, r4, r5
1a002f34:	f043 0301 	orr.w	r3, r3, #1
1a002f38:	f045 0501 	orr.w	r5, r5, #1
1a002f3c:	6065      	str	r5, [r4, #4]
1a002f3e:	4630      	mov	r0, r6
1a002f40:	60ba      	str	r2, [r7, #8]
1a002f42:	6053      	str	r3, [r2, #4]
1a002f44:	f000 fa36 	bl	1a0033b4 <__malloc_unlock>
1a002f48:	3408      	adds	r4, #8
1a002f4a:	4620      	mov	r0, r4
1a002f4c:	b003      	add	sp, #12
1a002f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f52:	4423      	add	r3, r4
1a002f54:	68e1      	ldr	r1, [r4, #12]
1a002f56:	685a      	ldr	r2, [r3, #4]
1a002f58:	68a5      	ldr	r5, [r4, #8]
1a002f5a:	f042 0201 	orr.w	r2, r2, #1
1a002f5e:	60e9      	str	r1, [r5, #12]
1a002f60:	4630      	mov	r0, r6
1a002f62:	608d      	str	r5, [r1, #8]
1a002f64:	605a      	str	r2, [r3, #4]
1a002f66:	f000 fa25 	bl	1a0033b4 <__malloc_unlock>
1a002f6a:	3408      	adds	r4, #8
1a002f6c:	e741      	b.n	1a002df2 <_malloc_r+0x18e>
1a002f6e:	bf00      	nop
1a002f70:	10000478 	.word	0x10000478
1a002f74:	10000af8 	.word	0x10000af8
1a002f78:	10000ac8 	.word	0x10000ac8
1a002f7c:	10000af0 	.word	0x10000af0
1a002f80:	10000af4 	.word	0x10000af4
1a002f84:	10000480 	.word	0x10000480
1a002f88:	10000880 	.word	0x10000880
1a002f8c:	0a5a      	lsrs	r2, r3, #9
1a002f8e:	2a04      	cmp	r2, #4
1a002f90:	d963      	bls.n	1a00305a <_malloc_r+0x3f6>
1a002f92:	2a14      	cmp	r2, #20
1a002f94:	f200 80b7 	bhi.w	1a003106 <_malloc_r+0x4a2>
1a002f98:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a002f9c:	00c9      	lsls	r1, r1, #3
1a002f9e:	325b      	adds	r2, #91	; 0x5b
1a002fa0:	eb07 0e01 	add.w	lr, r7, r1
1a002fa4:	5879      	ldr	r1, [r7, r1]
1a002fa6:	f1ae 0e08 	sub.w	lr, lr, #8
1a002faa:	458e      	cmp	lr, r1
1a002fac:	f000 8091 	beq.w	1a0030d2 <_malloc_r+0x46e>
1a002fb0:	684a      	ldr	r2, [r1, #4]
1a002fb2:	f022 0203 	bic.w	r2, r2, #3
1a002fb6:	429a      	cmp	r2, r3
1a002fb8:	d902      	bls.n	1a002fc0 <_malloc_r+0x35c>
1a002fba:	6889      	ldr	r1, [r1, #8]
1a002fbc:	458e      	cmp	lr, r1
1a002fbe:	d1f7      	bne.n	1a002fb0 <_malloc_r+0x34c>
1a002fc0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a002fc4:	687b      	ldr	r3, [r7, #4]
1a002fc6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a002fca:	f8ce 4008 	str.w	r4, [lr, #8]
1a002fce:	60cc      	str	r4, [r1, #12]
1a002fd0:	e6ce      	b.n	1a002d70 <_malloc_r+0x10c>
1a002fd2:	2b14      	cmp	r3, #20
1a002fd4:	d959      	bls.n	1a00308a <_malloc_r+0x426>
1a002fd6:	2b54      	cmp	r3, #84	; 0x54
1a002fd8:	f200 809d 	bhi.w	1a003116 <_malloc_r+0x4b2>
1a002fdc:	0b2b      	lsrs	r3, r5, #12
1a002fde:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a002fe2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a002fe6:	00c3      	lsls	r3, r0, #3
1a002fe8:	e681      	b.n	1a002cee <_malloc_r+0x8a>
1a002fea:	f108 0801 	add.w	r8, r8, #1
1a002fee:	f018 0f03 	tst.w	r8, #3
1a002ff2:	f10e 0e08 	add.w	lr, lr, #8
1a002ff6:	f47f aecd 	bne.w	1a002d94 <_malloc_r+0x130>
1a002ffa:	e051      	b.n	1a0030a0 <_malloc_r+0x43c>
1a002ffc:	4419      	add	r1, r3
1a002ffe:	461c      	mov	r4, r3
1a003000:	684a      	ldr	r2, [r1, #4]
1a003002:	68db      	ldr	r3, [r3, #12]
1a003004:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a003008:	f042 0201 	orr.w	r2, r2, #1
1a00300c:	604a      	str	r2, [r1, #4]
1a00300e:	4630      	mov	r0, r6
1a003010:	60eb      	str	r3, [r5, #12]
1a003012:	609d      	str	r5, [r3, #8]
1a003014:	f000 f9ce 	bl	1a0033b4 <__malloc_unlock>
1a003018:	e6eb      	b.n	1a002df2 <_malloc_r+0x18e>
1a00301a:	08e8      	lsrs	r0, r5, #3
1a00301c:	f105 0308 	add.w	r3, r5, #8
1a003020:	e630      	b.n	1a002c84 <_malloc_r+0x20>
1a003022:	4423      	add	r3, r4
1a003024:	4630      	mov	r0, r6
1a003026:	685a      	ldr	r2, [r3, #4]
1a003028:	f042 0201 	orr.w	r2, r2, #1
1a00302c:	605a      	str	r2, [r3, #4]
1a00302e:	3408      	adds	r4, #8
1a003030:	f000 f9c0 	bl	1a0033b4 <__malloc_unlock>
1a003034:	e6dd      	b.n	1a002df2 <_malloc_r+0x18e>
1a003036:	1961      	adds	r1, r4, r5
1a003038:	f045 0e01 	orr.w	lr, r5, #1
1a00303c:	f042 0501 	orr.w	r5, r2, #1
1a003040:	f8c4 e004 	str.w	lr, [r4, #4]
1a003044:	4630      	mov	r0, r6
1a003046:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a00304a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a00304e:	604d      	str	r5, [r1, #4]
1a003050:	50e2      	str	r2, [r4, r3]
1a003052:	f000 f9af 	bl	1a0033b4 <__malloc_unlock>
1a003056:	3408      	adds	r4, #8
1a003058:	e6cb      	b.n	1a002df2 <_malloc_r+0x18e>
1a00305a:	099a      	lsrs	r2, r3, #6
1a00305c:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a003060:	00c9      	lsls	r1, r1, #3
1a003062:	3238      	adds	r2, #56	; 0x38
1a003064:	e79c      	b.n	1a002fa0 <_malloc_r+0x33c>
1a003066:	42bc      	cmp	r4, r7
1a003068:	d05f      	beq.n	1a00312a <_malloc_r+0x4c6>
1a00306a:	68bc      	ldr	r4, [r7, #8]
1a00306c:	6861      	ldr	r1, [r4, #4]
1a00306e:	f021 0b03 	bic.w	fp, r1, #3
1a003072:	45ab      	cmp	fp, r5
1a003074:	ebab 0305 	sub.w	r3, fp, r5
1a003078:	d302      	bcc.n	1a003080 <_malloc_r+0x41c>
1a00307a:	2b0f      	cmp	r3, #15
1a00307c:	f73f af59 	bgt.w	1a002f32 <_malloc_r+0x2ce>
1a003080:	4630      	mov	r0, r6
1a003082:	f000 f997 	bl	1a0033b4 <__malloc_unlock>
1a003086:	2400      	movs	r4, #0
1a003088:	e6b3      	b.n	1a002df2 <_malloc_r+0x18e>
1a00308a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a00308e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a003092:	00c3      	lsls	r3, r0, #3
1a003094:	e62b      	b.n	1a002cee <_malloc_r+0x8a>
1a003096:	f859 3908 	ldr.w	r3, [r9], #-8
1a00309a:	454b      	cmp	r3, r9
1a00309c:	f040 8096 	bne.w	1a0031cc <_malloc_r+0x568>
1a0030a0:	f010 0f03 	tst.w	r0, #3
1a0030a4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0030a8:	d1f5      	bne.n	1a003096 <_malloc_r+0x432>
1a0030aa:	687b      	ldr	r3, [r7, #4]
1a0030ac:	ea23 0304 	bic.w	r3, r3, r4
1a0030b0:	607b      	str	r3, [r7, #4]
1a0030b2:	0064      	lsls	r4, r4, #1
1a0030b4:	429c      	cmp	r4, r3
1a0030b6:	f63f aeb7 	bhi.w	1a002e28 <_malloc_r+0x1c4>
1a0030ba:	b91c      	cbnz	r4, 1a0030c4 <_malloc_r+0x460>
1a0030bc:	e6b4      	b.n	1a002e28 <_malloc_r+0x1c4>
1a0030be:	0064      	lsls	r4, r4, #1
1a0030c0:	f108 0804 	add.w	r8, r8, #4
1a0030c4:	421c      	tst	r4, r3
1a0030c6:	d0fa      	beq.n	1a0030be <_malloc_r+0x45a>
1a0030c8:	4640      	mov	r0, r8
1a0030ca:	e65f      	b.n	1a002d8c <_malloc_r+0x128>
1a0030cc:	f103 0b10 	add.w	fp, r3, #16
1a0030d0:	e6c7      	b.n	1a002e62 <_malloc_r+0x1fe>
1a0030d2:	687b      	ldr	r3, [r7, #4]
1a0030d4:	1092      	asrs	r2, r2, #2
1a0030d6:	f04f 0801 	mov.w	r8, #1
1a0030da:	fa08 f202 	lsl.w	r2, r8, r2
1a0030de:	4313      	orrs	r3, r2
1a0030e0:	607b      	str	r3, [r7, #4]
1a0030e2:	e770      	b.n	1a002fc6 <_malloc_r+0x362>
1a0030e4:	eb02 000b 	add.w	r0, r2, fp
1a0030e8:	4240      	negs	r0, r0
1a0030ea:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a0030ee:	4649      	mov	r1, r9
1a0030f0:	4630      	mov	r0, r6
1a0030f2:	9200      	str	r2, [sp, #0]
1a0030f4:	f7fd fbfe 	bl	1a0008f4 <_sbrk_r>
1a0030f8:	1c43      	adds	r3, r0, #1
1a0030fa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0030fe:	f47f aee6 	bne.w	1a002ece <_malloc_r+0x26a>
1a003102:	46d1      	mov	r9, sl
1a003104:	e6e6      	b.n	1a002ed4 <_malloc_r+0x270>
1a003106:	2a54      	cmp	r2, #84	; 0x54
1a003108:	d825      	bhi.n	1a003156 <_malloc_r+0x4f2>
1a00310a:	0b1a      	lsrs	r2, r3, #12
1a00310c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a003110:	00c9      	lsls	r1, r1, #3
1a003112:	326e      	adds	r2, #110	; 0x6e
1a003114:	e744      	b.n	1a002fa0 <_malloc_r+0x33c>
1a003116:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a00311a:	d825      	bhi.n	1a003168 <_malloc_r+0x504>
1a00311c:	0beb      	lsrs	r3, r5, #15
1a00311e:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a003122:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a003126:	00c3      	lsls	r3, r0, #3
1a003128:	e5e1      	b.n	1a002cee <_malloc_r+0x8a>
1a00312a:	4b29      	ldr	r3, [pc, #164]	; (1a0031d0 <_malloc_r+0x56c>)
1a00312c:	6819      	ldr	r1, [r3, #0]
1a00312e:	4459      	add	r1, fp
1a003130:	6019      	str	r1, [r3, #0]
1a003132:	e6a8      	b.n	1a002e86 <_malloc_r+0x222>
1a003134:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a003138:	f1bc 0f00 	cmp.w	ip, #0
1a00313c:	f47f aea3 	bne.w	1a002e86 <_malloc_r+0x222>
1a003140:	44c3      	add	fp, r8
1a003142:	68bc      	ldr	r4, [r7, #8]
1a003144:	f04b 0101 	orr.w	r1, fp, #1
1a003148:	6061      	str	r1, [r4, #4]
1a00314a:	e6e7      	b.n	1a002f1c <_malloc_r+0x2b8>
1a00314c:	4614      	mov	r4, r2
1a00314e:	e6e5      	b.n	1a002f1c <_malloc_r+0x2b8>
1a003150:	2301      	movs	r3, #1
1a003152:	6053      	str	r3, [r2, #4]
1a003154:	e794      	b.n	1a003080 <_malloc_r+0x41c>
1a003156:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00315a:	d823      	bhi.n	1a0031a4 <_malloc_r+0x540>
1a00315c:	0bda      	lsrs	r2, r3, #15
1a00315e:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a003162:	00c9      	lsls	r1, r1, #3
1a003164:	3277      	adds	r2, #119	; 0x77
1a003166:	e71b      	b.n	1a002fa0 <_malloc_r+0x33c>
1a003168:	f240 5254 	movw	r2, #1364	; 0x554
1a00316c:	4293      	cmp	r3, r2
1a00316e:	d823      	bhi.n	1a0031b8 <_malloc_r+0x554>
1a003170:	0cab      	lsrs	r3, r5, #18
1a003172:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a003176:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a00317a:	00c3      	lsls	r3, r0, #3
1a00317c:	e5b7      	b.n	1a002cee <_malloc_r+0x8a>
1a00317e:	f1aa 0a08 	sub.w	sl, sl, #8
1a003182:	44d3      	add	fp, sl
1a003184:	ebab 0b02 	sub.w	fp, fp, r2
1a003188:	f04f 0900 	mov.w	r9, #0
1a00318c:	e6a2      	b.n	1a002ed4 <_malloc_r+0x270>
1a00318e:	f104 0108 	add.w	r1, r4, #8
1a003192:	4630      	mov	r0, r6
1a003194:	9300      	str	r3, [sp, #0]
1a003196:	f7ff fc47 	bl	1a002a28 <_free_r>
1a00319a:	68bc      	ldr	r4, [r7, #8]
1a00319c:	9b00      	ldr	r3, [sp, #0]
1a00319e:	6861      	ldr	r1, [r4, #4]
1a0031a0:	6818      	ldr	r0, [r3, #0]
1a0031a2:	e6bb      	b.n	1a002f1c <_malloc_r+0x2b8>
1a0031a4:	f240 5154 	movw	r1, #1364	; 0x554
1a0031a8:	428a      	cmp	r2, r1
1a0031aa:	d80b      	bhi.n	1a0031c4 <_malloc_r+0x560>
1a0031ac:	0c9a      	lsrs	r2, r3, #18
1a0031ae:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0031b2:	00c9      	lsls	r1, r1, #3
1a0031b4:	327c      	adds	r2, #124	; 0x7c
1a0031b6:	e6f3      	b.n	1a002fa0 <_malloc_r+0x33c>
1a0031b8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a0031bc:	207f      	movs	r0, #127	; 0x7f
1a0031be:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a0031c2:	e594      	b.n	1a002cee <_malloc_r+0x8a>
1a0031c4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a0031c8:	227e      	movs	r2, #126	; 0x7e
1a0031ca:	e6e9      	b.n	1a002fa0 <_malloc_r+0x33c>
1a0031cc:	687b      	ldr	r3, [r7, #4]
1a0031ce:	e770      	b.n	1a0030b2 <_malloc_r+0x44e>
1a0031d0:	10000ac8 	.word	0x10000ac8

1a0031d4 <memcpy>:
1a0031d4:	4684      	mov	ip, r0
1a0031d6:	ea41 0300 	orr.w	r3, r1, r0
1a0031da:	f013 0303 	ands.w	r3, r3, #3
1a0031de:	d16d      	bne.n	1a0032bc <memcpy+0xe8>
1a0031e0:	3a40      	subs	r2, #64	; 0x40
1a0031e2:	d341      	bcc.n	1a003268 <memcpy+0x94>
1a0031e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0031e8:	f840 3b04 	str.w	r3, [r0], #4
1a0031ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0031f0:	f840 3b04 	str.w	r3, [r0], #4
1a0031f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0031f8:	f840 3b04 	str.w	r3, [r0], #4
1a0031fc:	f851 3b04 	ldr.w	r3, [r1], #4
1a003200:	f840 3b04 	str.w	r3, [r0], #4
1a003204:	f851 3b04 	ldr.w	r3, [r1], #4
1a003208:	f840 3b04 	str.w	r3, [r0], #4
1a00320c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003210:	f840 3b04 	str.w	r3, [r0], #4
1a003214:	f851 3b04 	ldr.w	r3, [r1], #4
1a003218:	f840 3b04 	str.w	r3, [r0], #4
1a00321c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003220:	f840 3b04 	str.w	r3, [r0], #4
1a003224:	f851 3b04 	ldr.w	r3, [r1], #4
1a003228:	f840 3b04 	str.w	r3, [r0], #4
1a00322c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003230:	f840 3b04 	str.w	r3, [r0], #4
1a003234:	f851 3b04 	ldr.w	r3, [r1], #4
1a003238:	f840 3b04 	str.w	r3, [r0], #4
1a00323c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003240:	f840 3b04 	str.w	r3, [r0], #4
1a003244:	f851 3b04 	ldr.w	r3, [r1], #4
1a003248:	f840 3b04 	str.w	r3, [r0], #4
1a00324c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003250:	f840 3b04 	str.w	r3, [r0], #4
1a003254:	f851 3b04 	ldr.w	r3, [r1], #4
1a003258:	f840 3b04 	str.w	r3, [r0], #4
1a00325c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003260:	f840 3b04 	str.w	r3, [r0], #4
1a003264:	3a40      	subs	r2, #64	; 0x40
1a003266:	d2bd      	bcs.n	1a0031e4 <memcpy+0x10>
1a003268:	3230      	adds	r2, #48	; 0x30
1a00326a:	d311      	bcc.n	1a003290 <memcpy+0xbc>
1a00326c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003270:	f840 3b04 	str.w	r3, [r0], #4
1a003274:	f851 3b04 	ldr.w	r3, [r1], #4
1a003278:	f840 3b04 	str.w	r3, [r0], #4
1a00327c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003280:	f840 3b04 	str.w	r3, [r0], #4
1a003284:	f851 3b04 	ldr.w	r3, [r1], #4
1a003288:	f840 3b04 	str.w	r3, [r0], #4
1a00328c:	3a10      	subs	r2, #16
1a00328e:	d2ed      	bcs.n	1a00326c <memcpy+0x98>
1a003290:	320c      	adds	r2, #12
1a003292:	d305      	bcc.n	1a0032a0 <memcpy+0xcc>
1a003294:	f851 3b04 	ldr.w	r3, [r1], #4
1a003298:	f840 3b04 	str.w	r3, [r0], #4
1a00329c:	3a04      	subs	r2, #4
1a00329e:	d2f9      	bcs.n	1a003294 <memcpy+0xc0>
1a0032a0:	3204      	adds	r2, #4
1a0032a2:	d008      	beq.n	1a0032b6 <memcpy+0xe2>
1a0032a4:	07d2      	lsls	r2, r2, #31
1a0032a6:	bf1c      	itt	ne
1a0032a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0032ac:	f800 3b01 	strbne.w	r3, [r0], #1
1a0032b0:	d301      	bcc.n	1a0032b6 <memcpy+0xe2>
1a0032b2:	880b      	ldrh	r3, [r1, #0]
1a0032b4:	8003      	strh	r3, [r0, #0]
1a0032b6:	4660      	mov	r0, ip
1a0032b8:	4770      	bx	lr
1a0032ba:	bf00      	nop
1a0032bc:	2a08      	cmp	r2, #8
1a0032be:	d313      	bcc.n	1a0032e8 <memcpy+0x114>
1a0032c0:	078b      	lsls	r3, r1, #30
1a0032c2:	d08d      	beq.n	1a0031e0 <memcpy+0xc>
1a0032c4:	f010 0303 	ands.w	r3, r0, #3
1a0032c8:	d08a      	beq.n	1a0031e0 <memcpy+0xc>
1a0032ca:	f1c3 0304 	rsb	r3, r3, #4
1a0032ce:	1ad2      	subs	r2, r2, r3
1a0032d0:	07db      	lsls	r3, r3, #31
1a0032d2:	bf1c      	itt	ne
1a0032d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0032d8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0032dc:	d380      	bcc.n	1a0031e0 <memcpy+0xc>
1a0032de:	f831 3b02 	ldrh.w	r3, [r1], #2
1a0032e2:	f820 3b02 	strh.w	r3, [r0], #2
1a0032e6:	e77b      	b.n	1a0031e0 <memcpy+0xc>
1a0032e8:	3a04      	subs	r2, #4
1a0032ea:	d3d9      	bcc.n	1a0032a0 <memcpy+0xcc>
1a0032ec:	3a01      	subs	r2, #1
1a0032ee:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0032f2:	f800 3b01 	strb.w	r3, [r0], #1
1a0032f6:	d2f9      	bcs.n	1a0032ec <memcpy+0x118>
1a0032f8:	780b      	ldrb	r3, [r1, #0]
1a0032fa:	7003      	strb	r3, [r0, #0]
1a0032fc:	784b      	ldrb	r3, [r1, #1]
1a0032fe:	7043      	strb	r3, [r0, #1]
1a003300:	788b      	ldrb	r3, [r1, #2]
1a003302:	7083      	strb	r3, [r0, #2]
1a003304:	4660      	mov	r0, ip
1a003306:	4770      	bx	lr

1a003308 <memset>:
1a003308:	b4f0      	push	{r4, r5, r6, r7}
1a00330a:	0786      	lsls	r6, r0, #30
1a00330c:	d046      	beq.n	1a00339c <memset+0x94>
1a00330e:	1e54      	subs	r4, r2, #1
1a003310:	2a00      	cmp	r2, #0
1a003312:	d03c      	beq.n	1a00338e <memset+0x86>
1a003314:	b2ca      	uxtb	r2, r1
1a003316:	4603      	mov	r3, r0
1a003318:	e002      	b.n	1a003320 <memset+0x18>
1a00331a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a00331e:	d336      	bcc.n	1a00338e <memset+0x86>
1a003320:	f803 2b01 	strb.w	r2, [r3], #1
1a003324:	079d      	lsls	r5, r3, #30
1a003326:	d1f8      	bne.n	1a00331a <memset+0x12>
1a003328:	2c03      	cmp	r4, #3
1a00332a:	d929      	bls.n	1a003380 <memset+0x78>
1a00332c:	b2cd      	uxtb	r5, r1
1a00332e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003332:	2c0f      	cmp	r4, #15
1a003334:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003338:	d933      	bls.n	1a0033a2 <memset+0x9a>
1a00333a:	f1a4 0610 	sub.w	r6, r4, #16
1a00333e:	0936      	lsrs	r6, r6, #4
1a003340:	f103 0720 	add.w	r7, r3, #32
1a003344:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003348:	f103 0210 	add.w	r2, r3, #16
1a00334c:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003350:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003354:	3210      	adds	r2, #16
1a003356:	42ba      	cmp	r2, r7
1a003358:	d1f8      	bne.n	1a00334c <memset+0x44>
1a00335a:	1c72      	adds	r2, r6, #1
1a00335c:	f014 0f0c 	tst.w	r4, #12
1a003360:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a003364:	f004 060f 	and.w	r6, r4, #15
1a003368:	d013      	beq.n	1a003392 <memset+0x8a>
1a00336a:	1f33      	subs	r3, r6, #4
1a00336c:	f023 0303 	bic.w	r3, r3, #3
1a003370:	3304      	adds	r3, #4
1a003372:	4413      	add	r3, r2
1a003374:	f842 5b04 	str.w	r5, [r2], #4
1a003378:	4293      	cmp	r3, r2
1a00337a:	d1fb      	bne.n	1a003374 <memset+0x6c>
1a00337c:	f006 0403 	and.w	r4, r6, #3
1a003380:	b12c      	cbz	r4, 1a00338e <memset+0x86>
1a003382:	b2c9      	uxtb	r1, r1
1a003384:	441c      	add	r4, r3
1a003386:	f803 1b01 	strb.w	r1, [r3], #1
1a00338a:	429c      	cmp	r4, r3
1a00338c:	d1fb      	bne.n	1a003386 <memset+0x7e>
1a00338e:	bcf0      	pop	{r4, r5, r6, r7}
1a003390:	4770      	bx	lr
1a003392:	4634      	mov	r4, r6
1a003394:	4613      	mov	r3, r2
1a003396:	2c00      	cmp	r4, #0
1a003398:	d1f3      	bne.n	1a003382 <memset+0x7a>
1a00339a:	e7f8      	b.n	1a00338e <memset+0x86>
1a00339c:	4614      	mov	r4, r2
1a00339e:	4603      	mov	r3, r0
1a0033a0:	e7c2      	b.n	1a003328 <memset+0x20>
1a0033a2:	461a      	mov	r2, r3
1a0033a4:	4626      	mov	r6, r4
1a0033a6:	e7e0      	b.n	1a00336a <memset+0x62>

1a0033a8 <__malloc_lock>:
1a0033a8:	4801      	ldr	r0, [pc, #4]	; (1a0033b0 <__malloc_lock+0x8>)
1a0033aa:	f7ff bc57 	b.w	1a002c5c <__retarget_lock_acquire_recursive>
1a0033ae:	bf00      	nop
1a0033b0:	10000b14 	.word	0x10000b14

1a0033b4 <__malloc_unlock>:
1a0033b4:	4801      	ldr	r0, [pc, #4]	; (1a0033bc <__malloc_unlock+0x8>)
1a0033b6:	f7ff bc53 	b.w	1a002c60 <__retarget_lock_release_recursive>
1a0033ba:	bf00      	nop
1a0033bc:	10000b14 	.word	0x10000b14

1a0033c0 <sprintf>:
1a0033c0:	b40e      	push	{r1, r2, r3}
1a0033c2:	b530      	push	{r4, r5, lr}
1a0033c4:	b09c      	sub	sp, #112	; 0x70
1a0033c6:	ab1f      	add	r3, sp, #124	; 0x7c
1a0033c8:	4c0c      	ldr	r4, [pc, #48]	; (1a0033fc <sprintf+0x3c>)
1a0033ca:	4d0d      	ldr	r5, [pc, #52]	; (1a003400 <sprintf+0x40>)
1a0033cc:	f853 2b04 	ldr.w	r2, [r3], #4
1a0033d0:	9301      	str	r3, [sp, #4]
1a0033d2:	4601      	mov	r1, r0
1a0033d4:	9102      	str	r1, [sp, #8]
1a0033d6:	9106      	str	r1, [sp, #24]
1a0033d8:	6820      	ldr	r0, [r4, #0]
1a0033da:	a902      	add	r1, sp, #8
1a0033dc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
1a0033e0:	9407      	str	r4, [sp, #28]
1a0033e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a0033e6:	f000 f89b 	bl	1a003520 <_svfprintf_r>
1a0033ea:	9b02      	ldr	r3, [sp, #8]
1a0033ec:	2200      	movs	r2, #0
1a0033ee:	701a      	strb	r2, [r3, #0]
1a0033f0:	b01c      	add	sp, #112	; 0x70
1a0033f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a0033f6:	b003      	add	sp, #12
1a0033f8:	4770      	bx	lr
1a0033fa:	bf00      	nop
1a0033fc:	10000048 	.word	0x10000048
1a003400:	ffff0208 	.word	0xffff0208
1a003404:	ffffffff 	.word	0xffffffff
1a003408:	ffffffff 	.word	0xffffffff
1a00340c:	ffffffff 	.word	0xffffffff
1a003410:	ffffffff 	.word	0xffffffff
1a003414:	ffffffff 	.word	0xffffffff
1a003418:	ffffffff 	.word	0xffffffff
1a00341c:	ffffffff 	.word	0xffffffff
1a003420:	ffffffff 	.word	0xffffffff
1a003424:	ffffffff 	.word	0xffffffff
1a003428:	ffffffff 	.word	0xffffffff
1a00342c:	ffffffff 	.word	0xffffffff
1a003430:	ffffffff 	.word	0xffffffff
1a003434:	ffffffff 	.word	0xffffffff
1a003438:	ffffffff 	.word	0xffffffff
1a00343c:	ffffffff 	.word	0xffffffff

1a003440 <strlen>:
1a003440:	f890 f000 	pld	[r0]
1a003444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003448:	f020 0107 	bic.w	r1, r0, #7
1a00344c:	f06f 0c00 	mvn.w	ip, #0
1a003450:	f010 0407 	ands.w	r4, r0, #7
1a003454:	f891 f020 	pld	[r1, #32]
1a003458:	f040 8049 	bne.w	1a0034ee <strlen+0xae>
1a00345c:	f04f 0400 	mov.w	r4, #0
1a003460:	f06f 0007 	mvn.w	r0, #7
1a003464:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003468:	f891 f040 	pld	[r1, #64]	; 0x40
1a00346c:	f100 0008 	add.w	r0, r0, #8
1a003470:	fa82 f24c 	uadd8	r2, r2, ip
1a003474:	faa4 f28c 	sel	r2, r4, ip
1a003478:	fa83 f34c 	uadd8	r3, r3, ip
1a00347c:	faa2 f38c 	sel	r3, r2, ip
1a003480:	bb4b      	cbnz	r3, 1a0034d6 <strlen+0x96>
1a003482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a003486:	fa82 f24c 	uadd8	r2, r2, ip
1a00348a:	f100 0008 	add.w	r0, r0, #8
1a00348e:	faa4 f28c 	sel	r2, r4, ip
1a003492:	fa83 f34c 	uadd8	r3, r3, ip
1a003496:	faa2 f38c 	sel	r3, r2, ip
1a00349a:	b9e3      	cbnz	r3, 1a0034d6 <strlen+0x96>
1a00349c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0034a0:	fa82 f24c 	uadd8	r2, r2, ip
1a0034a4:	f100 0008 	add.w	r0, r0, #8
1a0034a8:	faa4 f28c 	sel	r2, r4, ip
1a0034ac:	fa83 f34c 	uadd8	r3, r3, ip
1a0034b0:	faa2 f38c 	sel	r3, r2, ip
1a0034b4:	b97b      	cbnz	r3, 1a0034d6 <strlen+0x96>
1a0034b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0034ba:	f101 0120 	add.w	r1, r1, #32
1a0034be:	fa82 f24c 	uadd8	r2, r2, ip
1a0034c2:	f100 0008 	add.w	r0, r0, #8
1a0034c6:	faa4 f28c 	sel	r2, r4, ip
1a0034ca:	fa83 f34c 	uadd8	r3, r3, ip
1a0034ce:	faa2 f38c 	sel	r3, r2, ip
1a0034d2:	2b00      	cmp	r3, #0
1a0034d4:	d0c6      	beq.n	1a003464 <strlen+0x24>
1a0034d6:	2a00      	cmp	r2, #0
1a0034d8:	bf04      	itt	eq
1a0034da:	3004      	addeq	r0, #4
1a0034dc:	461a      	moveq	r2, r3
1a0034de:	ba12      	rev	r2, r2
1a0034e0:	fab2 f282 	clz	r2, r2
1a0034e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a0034e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a0034ec:	4770      	bx	lr
1a0034ee:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0034f2:	f004 0503 	and.w	r5, r4, #3
1a0034f6:	f1c4 0000 	rsb	r0, r4, #0
1a0034fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a0034fe:	f014 0f04 	tst.w	r4, #4
1a003502:	f891 f040 	pld	[r1, #64]	; 0x40
1a003506:	fa0c f505 	lsl.w	r5, ip, r5
1a00350a:	ea62 0205 	orn	r2, r2, r5
1a00350e:	bf1c      	itt	ne
1a003510:	ea63 0305 	ornne	r3, r3, r5
1a003514:	4662      	movne	r2, ip
1a003516:	f04f 0400 	mov.w	r4, #0
1a00351a:	e7a9      	b.n	1a003470 <strlen+0x30>
1a00351c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003520 <_svfprintf_r>:
1a003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003524:	b0d5      	sub	sp, #340	; 0x154
1a003526:	460c      	mov	r4, r1
1a003528:	9107      	str	r1, [sp, #28]
1a00352a:	4693      	mov	fp, r2
1a00352c:	9309      	str	r3, [sp, #36]	; 0x24
1a00352e:	9006      	str	r0, [sp, #24]
1a003530:	f002 fcd0 	bl	1a005ed4 <_localeconv_r>
1a003534:	6803      	ldr	r3, [r0, #0]
1a003536:	9315      	str	r3, [sp, #84]	; 0x54
1a003538:	4618      	mov	r0, r3
1a00353a:	f7ff ff81 	bl	1a003440 <strlen>
1a00353e:	89a3      	ldrh	r3, [r4, #12]
1a003540:	9013      	str	r0, [sp, #76]	; 0x4c
1a003542:	061d      	lsls	r5, r3, #24
1a003544:	d503      	bpl.n	1a00354e <_svfprintf_r+0x2e>
1a003546:	6923      	ldr	r3, [r4, #16]
1a003548:	2b00      	cmp	r3, #0
1a00354a:	f001 8018 	beq.w	1a00457e <_svfprintf_r+0x105e>
1a00354e:	2300      	movs	r3, #0
1a003550:	465e      	mov	r6, fp
1a003552:	ed9f 7b91 	vldr	d7, [pc, #580]	; 1a003798 <_svfprintf_r+0x278>
1a003556:	9312      	str	r3, [sp, #72]	; 0x48
1a003558:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a00355c:	9314      	str	r3, [sp, #80]	; 0x50
1a00355e:	9316      	str	r3, [sp, #88]	; 0x58
1a003560:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a003564:	9317      	str	r3, [sp, #92]	; 0x5c
1a003566:	9304      	str	r3, [sp, #16]
1a003568:	ab2b      	add	r3, sp, #172	; 0xac
1a00356a:	9328      	str	r3, [sp, #160]	; 0xa0
1a00356c:	4699      	mov	r9, r3
1a00356e:	7833      	ldrb	r3, [r6, #0]
1a003570:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003574:	2b00      	cmp	r3, #0
1a003576:	f000 8177 	beq.w	1a003868 <_svfprintf_r+0x348>
1a00357a:	2b25      	cmp	r3, #37	; 0x25
1a00357c:	f000 86c4 	beq.w	1a004308 <_svfprintf_r+0xde8>
1a003580:	4635      	mov	r5, r6
1a003582:	e003      	b.n	1a00358c <_svfprintf_r+0x6c>
1a003584:	2b25      	cmp	r3, #37	; 0x25
1a003586:	f000 8096 	beq.w	1a0036b6 <_svfprintf_r+0x196>
1a00358a:	4625      	mov	r5, r4
1a00358c:	786b      	ldrb	r3, [r5, #1]
1a00358e:	1c6c      	adds	r4, r5, #1
1a003590:	2b00      	cmp	r3, #0
1a003592:	d1f7      	bne.n	1a003584 <_svfprintf_r+0x64>
1a003594:	1ba7      	subs	r7, r4, r6
1a003596:	f000 8167 	beq.w	1a003868 <_svfprintf_r+0x348>
1a00359a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a00359e:	3301      	adds	r3, #1
1a0035a0:	443a      	add	r2, r7
1a0035a2:	2b07      	cmp	r3, #7
1a0035a4:	f8c9 6000 	str.w	r6, [r9]
1a0035a8:	f8c9 7004 	str.w	r7, [r9, #4]
1a0035ac:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a0035b0:	f300 8084 	bgt.w	1a0036bc <_svfprintf_r+0x19c>
1a0035b4:	f109 0908 	add.w	r9, r9, #8
1a0035b8:	9a04      	ldr	r2, [sp, #16]
1a0035ba:	786b      	ldrb	r3, [r5, #1]
1a0035bc:	443a      	add	r2, r7
1a0035be:	9204      	str	r2, [sp, #16]
1a0035c0:	2b00      	cmp	r3, #0
1a0035c2:	f000 8151 	beq.w	1a003868 <_svfprintf_r+0x348>
1a0035c6:	2300      	movs	r3, #0
1a0035c8:	f894 8001 	ldrb.w	r8, [r4, #1]
1a0035cc:	9305      	str	r3, [sp, #20]
1a0035ce:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0035d2:	9302      	str	r3, [sp, #8]
1a0035d4:	f104 0b01 	add.w	fp, r4, #1
1a0035d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a0035dc:	272b      	movs	r7, #43	; 0x2b
1a0035de:	2120      	movs	r1, #32
1a0035e0:	f10b 0b01 	add.w	fp, fp, #1
1a0035e4:	f1a8 0320 	sub.w	r3, r8, #32
1a0035e8:	2b5a      	cmp	r3, #90	; 0x5a
1a0035ea:	f200 836c 	bhi.w	1a003cc6 <_svfprintf_r+0x7a6>
1a0035ee:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0035f2:	034b      	.short	0x034b
1a0035f4:	036a036a 	.word	0x036a036a
1a0035f8:	036a0344 	.word	0x036a0344
1a0035fc:	036a036a 	.word	0x036a036a
1a003600:	036a0321 	.word	0x036a0321
1a003604:	0215036a 	.word	0x0215036a
1a003608:	036a0210 	.word	0x036a0210
1a00360c:	01f600cb 	.word	0x01f600cb
1a003610:	01ef036a 	.word	0x01ef036a
1a003614:	00a800a8 	.word	0x00a800a8
1a003618:	00a800a8 	.word	0x00a800a8
1a00361c:	00a800a8 	.word	0x00a800a8
1a003620:	00a800a8 	.word	0x00a800a8
1a003624:	036a00a8 	.word	0x036a00a8
1a003628:	036a036a 	.word	0x036a036a
1a00362c:	036a036a 	.word	0x036a036a
1a003630:	036a036a 	.word	0x036a036a
1a003634:	036a02df 	.word	0x036a02df
1a003638:	01960223 	.word	0x01960223
1a00363c:	02df02df 	.word	0x02df02df
1a003640:	036a02df 	.word	0x036a02df
1a003644:	036a036a 	.word	0x036a036a
1a003648:	018f036a 	.word	0x018f036a
1a00364c:	036a036a 	.word	0x036a036a
1a003650:	036a017e 	.word	0x036a017e
1a003654:	036a036a 	.word	0x036a036a
1a003658:	036a0152 	.word	0x036a0152
1a00365c:	036a01ca 	.word	0x036a01ca
1a003660:	00b7036a 	.word	0x00b7036a
1a003664:	036a036a 	.word	0x036a036a
1a003668:	036a036a 	.word	0x036a036a
1a00366c:	036a036a 	.word	0x036a036a
1a003670:	036a036a 	.word	0x036a036a
1a003674:	036a02df 	.word	0x036a02df
1a003678:	01d90223 	.word	0x01d90223
1a00367c:	02df02df 	.word	0x02df02df
1a003680:	01bf02df 	.word	0x01bf02df
1a003684:	005b01d9 	.word	0x005b01d9
1a003688:	0147036a 	.word	0x0147036a
1a00368c:	011e036a 	.word	0x011e036a
1a003690:	00db010c 	.word	0x00db010c
1a003694:	036a005b 	.word	0x036a005b
1a003698:	005f0152 	.word	0x005f0152
1a00369c:	036a0355 	.word	0x036a0355
1a0036a0:	0089036a 	.word	0x0089036a
1a0036a4:	005f036a 	.word	0x005f036a
1a0036a8:	9b02      	ldr	r3, [sp, #8]
1a0036aa:	f043 0320 	orr.w	r3, r3, #32
1a0036ae:	9302      	str	r3, [sp, #8]
1a0036b0:	f89b 8000 	ldrb.w	r8, [fp]
1a0036b4:	e794      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a0036b6:	1ba7      	subs	r7, r4, r6
1a0036b8:	d085      	beq.n	1a0035c6 <_svfprintf_r+0xa6>
1a0036ba:	e76e      	b.n	1a00359a <_svfprintf_r+0x7a>
1a0036bc:	aa28      	add	r2, sp, #160	; 0xa0
1a0036be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0036c2:	f003 f9f5 	bl	1a006ab0 <__ssprint_r>
1a0036c6:	b980      	cbnz	r0, 1a0036ea <_svfprintf_r+0x1ca>
1a0036c8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0036cc:	e774      	b.n	1a0035b8 <_svfprintf_r+0x98>
1a0036ce:	aa28      	add	r2, sp, #160	; 0xa0
1a0036d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0036d4:	f003 f9ec 	bl	1a006ab0 <__ssprint_r>
1a0036d8:	2800      	cmp	r0, #0
1a0036da:	f000 8221 	beq.w	1a003b20 <_svfprintf_r+0x600>
1a0036de:	9b08      	ldr	r3, [sp, #32]
1a0036e0:	b11b      	cbz	r3, 1a0036ea <_svfprintf_r+0x1ca>
1a0036e2:	9908      	ldr	r1, [sp, #32]
1a0036e4:	9806      	ldr	r0, [sp, #24]
1a0036e6:	f7ff f99f 	bl	1a002a28 <_free_r>
1a0036ea:	9b07      	ldr	r3, [sp, #28]
1a0036ec:	899b      	ldrh	r3, [r3, #12]
1a0036ee:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0036f2:	9b04      	ldr	r3, [sp, #16]
1a0036f4:	bf18      	it	ne
1a0036f6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
1a0036fa:	9304      	str	r3, [sp, #16]
1a0036fc:	9804      	ldr	r0, [sp, #16]
1a0036fe:	b055      	add	sp, #340	; 0x154
1a003700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003704:	4b26      	ldr	r3, [pc, #152]	; (1a0037a0 <_svfprintf_r+0x280>)
1a003706:	9314      	str	r3, [sp, #80]	; 0x50
1a003708:	9b02      	ldr	r3, [sp, #8]
1a00370a:	0699      	lsls	r1, r3, #26
1a00370c:	d52d      	bpl.n	1a00376a <_svfprintf_r+0x24a>
1a00370e:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003710:	3407      	adds	r4, #7
1a003712:	f024 0307 	bic.w	r3, r4, #7
1a003716:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00371a:	9309      	str	r3, [sp, #36]	; 0x24
1a00371c:	9a02      	ldr	r2, [sp, #8]
1a00371e:	07d6      	lsls	r6, r2, #31
1a003720:	d50a      	bpl.n	1a003738 <_svfprintf_r+0x218>
1a003722:	ea54 0305 	orrs.w	r3, r4, r5
1a003726:	d007      	beq.n	1a003738 <_svfprintf_r+0x218>
1a003728:	2330      	movs	r3, #48	; 0x30
1a00372a:	f042 0202 	orr.w	r2, r2, #2
1a00372e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a003732:	9202      	str	r2, [sp, #8]
1a003734:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a003738:	9b02      	ldr	r3, [sp, #8]
1a00373a:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
1a00373e:	2302      	movs	r3, #2
1a003740:	e044      	b.n	1a0037cc <_svfprintf_r+0x2ac>
1a003742:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003746:	2200      	movs	r2, #0
1a003748:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a00374c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a003750:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a003754:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003758:	2b09      	cmp	r3, #9
1a00375a:	d9f5      	bls.n	1a003748 <_svfprintf_r+0x228>
1a00375c:	9205      	str	r2, [sp, #20]
1a00375e:	e741      	b.n	1a0035e4 <_svfprintf_r+0xc4>
1a003760:	4b10      	ldr	r3, [pc, #64]	; (1a0037a4 <_svfprintf_r+0x284>)
1a003762:	9314      	str	r3, [sp, #80]	; 0x50
1a003764:	9b02      	ldr	r3, [sp, #8]
1a003766:	0699      	lsls	r1, r3, #26
1a003768:	d4d1      	bmi.n	1a00370e <_svfprintf_r+0x1ee>
1a00376a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00376c:	f853 4b04 	ldr.w	r4, [r3], #4
1a003770:	9309      	str	r3, [sp, #36]	; 0x24
1a003772:	9b02      	ldr	r3, [sp, #8]
1a003774:	06da      	lsls	r2, r3, #27
1a003776:	f100 85ef 	bmi.w	1a004358 <_svfprintf_r+0xe38>
1a00377a:	9b02      	ldr	r3, [sp, #8]
1a00377c:	065b      	lsls	r3, r3, #25
1a00377e:	f140 85e7 	bpl.w	1a004350 <_svfprintf_r+0xe30>
1a003782:	b2a4      	uxth	r4, r4
1a003784:	2500      	movs	r5, #0
1a003786:	e7c9      	b.n	1a00371c <_svfprintf_r+0x1fc>
1a003788:	f89b 8000 	ldrb.w	r8, [fp]
1a00378c:	9b02      	ldr	r3, [sp, #8]
1a00378e:	f043 0304 	orr.w	r3, r3, #4
1a003792:	9302      	str	r3, [sp, #8]
1a003794:	e724      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003796:	bf00      	nop
	...
1a0037a0:	1a007068 	.word	0x1a007068
1a0037a4:	1a00707c 	.word	0x1a00707c
1a0037a8:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0037aa:	f647 0230 	movw	r2, #30768	; 0x7830
1a0037ae:	f854 3b04 	ldr.w	r3, [r4], #4
1a0037b2:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0037b6:	9a02      	ldr	r2, [sp, #8]
1a0037b8:	9409      	str	r4, [sp, #36]	; 0x24
1a0037ba:	461c      	mov	r4, r3
1a0037bc:	4b9d      	ldr	r3, [pc, #628]	; (1a003a34 <_svfprintf_r+0x514>)
1a0037be:	9314      	str	r3, [sp, #80]	; 0x50
1a0037c0:	f042 0702 	orr.w	r7, r2, #2
1a0037c4:	2500      	movs	r5, #0
1a0037c6:	2302      	movs	r3, #2
1a0037c8:	f04f 0878 	mov.w	r8, #120	; 0x78
1a0037cc:	2200      	movs	r2, #0
1a0037ce:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a0037d2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0037d6:	f000 829b 	beq.w	1a003d10 <_svfprintf_r+0x7f0>
1a0037da:	f027 0280 	bic.w	r2, r7, #128	; 0x80
1a0037de:	9202      	str	r2, [sp, #8]
1a0037e0:	ea54 0205 	orrs.w	r2, r4, r5
1a0037e4:	f040 8293 	bne.w	1a003d0e <_svfprintf_r+0x7ee>
1a0037e8:	f1ba 0f00 	cmp.w	sl, #0
1a0037ec:	f040 8490 	bne.w	1a004110 <_svfprintf_r+0xbf0>
1a0037f0:	2b00      	cmp	r3, #0
1a0037f2:	f040 80b8 	bne.w	1a003966 <_svfprintf_r+0x446>
1a0037f6:	f017 0701 	ands.w	r7, r7, #1
1a0037fa:	f000 85a7 	beq.w	1a00434c <_svfprintf_r+0xe2c>
1a0037fe:	2330      	movs	r3, #48	; 0x30
1a003800:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a003804:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a003808:	e274      	b.n	1a003cf4 <_svfprintf_r+0x7d4>
1a00380a:	9f02      	ldr	r7, [sp, #8]
1a00380c:	06be      	lsls	r6, r7, #26
1a00380e:	d474      	bmi.n	1a0038fa <_svfprintf_r+0x3da>
1a003810:	9b02      	ldr	r3, [sp, #8]
1a003812:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003814:	06dd      	lsls	r5, r3, #27
1a003816:	f852 4b04 	ldr.w	r4, [r2], #4
1a00381a:	f101 8399 	bmi.w	1a004f50 <_svfprintf_r+0x1a30>
1a00381e:	9f02      	ldr	r7, [sp, #8]
1a003820:	0678      	lsls	r0, r7, #25
1a003822:	f141 8070 	bpl.w	1a004906 <_svfprintf_r+0x13e6>
1a003826:	9209      	str	r2, [sp, #36]	; 0x24
1a003828:	b2a4      	uxth	r4, r4
1a00382a:	2500      	movs	r5, #0
1a00382c:	e06c      	b.n	1a003908 <_svfprintf_r+0x3e8>
1a00382e:	9902      	ldr	r1, [sp, #8]
1a003830:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003832:	068c      	lsls	r4, r1, #26
1a003834:	f102 0304 	add.w	r3, r2, #4
1a003838:	f100 8591 	bmi.w	1a00435e <_svfprintf_r+0xe3e>
1a00383c:	9a02      	ldr	r2, [sp, #8]
1a00383e:	06d0      	lsls	r0, r2, #27
1a003840:	f100 87ee 	bmi.w	1a004820 <_svfprintf_r+0x1300>
1a003844:	9a02      	ldr	r2, [sp, #8]
1a003846:	0651      	lsls	r1, r2, #25
1a003848:	f101 80a6 	bmi.w	1a004998 <_svfprintf_r+0x1478>
1a00384c:	9a02      	ldr	r2, [sp, #8]
1a00384e:	0592      	lsls	r2, r2, #22
1a003850:	f140 87e6 	bpl.w	1a004820 <_svfprintf_r+0x1300>
1a003854:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003856:	9309      	str	r3, [sp, #36]	; 0x24
1a003858:	6812      	ldr	r2, [r2, #0]
1a00385a:	9b04      	ldr	r3, [sp, #16]
1a00385c:	7013      	strb	r3, [r2, #0]
1a00385e:	465e      	mov	r6, fp
1a003860:	7833      	ldrb	r3, [r6, #0]
1a003862:	2b00      	cmp	r3, #0
1a003864:	f47f ae89 	bne.w	1a00357a <_svfprintf_r+0x5a>
1a003868:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a00386a:	2b00      	cmp	r3, #0
1a00386c:	f43f af3d 	beq.w	1a0036ea <_svfprintf_r+0x1ca>
1a003870:	9c07      	ldr	r4, [sp, #28]
1a003872:	9806      	ldr	r0, [sp, #24]
1a003874:	aa28      	add	r2, sp, #160	; 0xa0
1a003876:	4621      	mov	r1, r4
1a003878:	f003 f91a 	bl	1a006ab0 <__ssprint_r>
1a00387c:	89a3      	ldrh	r3, [r4, #12]
1a00387e:	e736      	b.n	1a0036ee <_svfprintf_r+0x1ce>
1a003880:	f89b 8000 	ldrb.w	r8, [fp]
1a003884:	9b02      	ldr	r3, [sp, #8]
1a003886:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a00388a:	f000 8663 	beq.w	1a004554 <_svfprintf_r+0x1034>
1a00388e:	f043 0310 	orr.w	r3, r3, #16
1a003892:	9302      	str	r3, [sp, #8]
1a003894:	e6a4      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003896:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003898:	f854 6b04 	ldr.w	r6, [r4], #4
1a00389c:	2500      	movs	r5, #0
1a00389e:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0038a2:	2e00      	cmp	r6, #0
1a0038a4:	f000 867a 	beq.w	1a00459c <_svfprintf_r+0x107c>
1a0038a8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0038ac:	f000 87f9 	beq.w	1a0048a2 <_svfprintf_r+0x1382>
1a0038b0:	4652      	mov	r2, sl
1a0038b2:	4629      	mov	r1, r5
1a0038b4:	4630      	mov	r0, r6
1a0038b6:	f002 fb13 	bl	1a005ee0 <memchr>
1a0038ba:	9008      	str	r0, [sp, #32]
1a0038bc:	2800      	cmp	r0, #0
1a0038be:	f001 8150 	beq.w	1a004b62 <_svfprintf_r+0x1642>
1a0038c2:	9b08      	ldr	r3, [sp, #32]
1a0038c4:	46aa      	mov	sl, r5
1a0038c6:	1b9f      	subs	r7, r3, r6
1a0038c8:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
1a0038cc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a0038d0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a0038d4:	9409      	str	r4, [sp, #36]	; 0x24
1a0038d6:	9303      	str	r3, [sp, #12]
1a0038d8:	f8cd a020 	str.w	sl, [sp, #32]
1a0038dc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
1a0038e0:	2a00      	cmp	r2, #0
1a0038e2:	f000 80bb 	beq.w	1a003a5c <_svfprintf_r+0x53c>
1a0038e6:	9b03      	ldr	r3, [sp, #12]
1a0038e8:	3301      	adds	r3, #1
1a0038ea:	9303      	str	r3, [sp, #12]
1a0038ec:	e0b6      	b.n	1a003a5c <_svfprintf_r+0x53c>
1a0038ee:	9b02      	ldr	r3, [sp, #8]
1a0038f0:	f043 0710 	orr.w	r7, r3, #16
1a0038f4:	069b      	lsls	r3, r3, #26
1a0038f6:	f140 8617 	bpl.w	1a004528 <_svfprintf_r+0x1008>
1a0038fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0038fc:	3407      	adds	r4, #7
1a0038fe:	f024 0307 	bic.w	r3, r4, #7
1a003902:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a003906:	9309      	str	r3, [sp, #36]	; 0x24
1a003908:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
1a00390c:	2300      	movs	r3, #0
1a00390e:	e75d      	b.n	1a0037cc <_svfprintf_r+0x2ac>
1a003910:	9b02      	ldr	r3, [sp, #8]
1a003912:	f89b 8000 	ldrb.w	r8, [fp]
1a003916:	f043 0308 	orr.w	r3, r3, #8
1a00391a:	9302      	str	r3, [sp, #8]
1a00391c:	e660      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a00391e:	9b02      	ldr	r3, [sp, #8]
1a003920:	069c      	lsls	r4, r3, #26
1a003922:	f043 0710 	orr.w	r7, r3, #16
1a003926:	f140 85f1 	bpl.w	1a00450c <_svfprintf_r+0xfec>
1a00392a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00392c:	3407      	adds	r4, #7
1a00392e:	f024 0307 	bic.w	r3, r4, #7
1a003932:	4619      	mov	r1, r3
1a003934:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a003938:	9109      	str	r1, [sp, #36]	; 0x24
1a00393a:	4614      	mov	r4, r2
1a00393c:	461d      	mov	r5, r3
1a00393e:	2a00      	cmp	r2, #0
1a003940:	f173 0300 	sbcs.w	r3, r3, #0
1a003944:	f2c0 84d7 	blt.w	1a0042f6 <_svfprintf_r+0xdd6>
1a003948:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a00394c:	f000 81c7 	beq.w	1a003cde <_svfprintf_r+0x7be>
1a003950:	f027 0380 	bic.w	r3, r7, #128	; 0x80
1a003954:	9302      	str	r3, [sp, #8]
1a003956:	ea54 0305 	orrs.w	r3, r4, r5
1a00395a:	f040 81bf 	bne.w	1a003cdc <_svfprintf_r+0x7bc>
1a00395e:	f1ba 0f00 	cmp.w	sl, #0
1a003962:	f041 803f 	bne.w	1a0049e4 <_svfprintf_r+0x14c4>
1a003966:	f04f 0a00 	mov.w	sl, #0
1a00396a:	4657      	mov	r7, sl
1a00396c:	ae54      	add	r6, sp, #336	; 0x150
1a00396e:	e1c1      	b.n	1a003cf4 <_svfprintf_r+0x7d4>
1a003970:	f89b 8000 	ldrb.w	r8, [fp]
1a003974:	9b02      	ldr	r3, [sp, #8]
1a003976:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a00397a:	f000 85e2 	beq.w	1a004542 <_svfprintf_r+0x1022>
1a00397e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003982:	9302      	str	r3, [sp, #8]
1a003984:	e62c      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003986:	9b02      	ldr	r3, [sp, #8]
1a003988:	069a      	lsls	r2, r3, #26
1a00398a:	f043 0710 	orr.w	r7, r3, #16
1a00398e:	f140 84f1 	bpl.w	1a004374 <_svfprintf_r+0xe54>
1a003992:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003994:	3407      	adds	r4, #7
1a003996:	f024 0307 	bic.w	r3, r4, #7
1a00399a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00399e:	9309      	str	r3, [sp, #36]	; 0x24
1a0039a0:	2301      	movs	r3, #1
1a0039a2:	e713      	b.n	1a0037cc <_svfprintf_r+0x2ac>
1a0039a4:	9f02      	ldr	r7, [sp, #8]
1a0039a6:	06b8      	lsls	r0, r7, #26
1a0039a8:	d4bf      	bmi.n	1a00392a <_svfprintf_r+0x40a>
1a0039aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0039ac:	1d1a      	adds	r2, r3, #4
1a0039ae:	9b02      	ldr	r3, [sp, #8]
1a0039b0:	06d9      	lsls	r1, r3, #27
1a0039b2:	f101 82d0 	bmi.w	1a004f56 <_svfprintf_r+0x1a36>
1a0039b6:	9f02      	ldr	r7, [sp, #8]
1a0039b8:	463b      	mov	r3, r7
1a0039ba:	065b      	lsls	r3, r3, #25
1a0039bc:	f140 8796 	bpl.w	1a0048ec <_svfprintf_r+0x13cc>
1a0039c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0039c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0039c4:	f9b3 4000 	ldrsh.w	r4, [r3]
1a0039c8:	17e5      	asrs	r5, r4, #31
1a0039ca:	4622      	mov	r2, r4
1a0039cc:	462b      	mov	r3, r5
1a0039ce:	e7b6      	b.n	1a00393e <_svfprintf_r+0x41e>
1a0039d0:	9b02      	ldr	r3, [sp, #8]
1a0039d2:	f89b 8000 	ldrb.w	r8, [fp]
1a0039d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0039da:	9302      	str	r3, [sp, #8]
1a0039dc:	e600      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a0039de:	465a      	mov	r2, fp
1a0039e0:	f812 8b01 	ldrb.w	r8, [r2], #1
1a0039e4:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a0039e8:	f001 828e 	beq.w	1a004f08 <_svfprintf_r+0x19e8>
1a0039ec:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a0039f0:	2b09      	cmp	r3, #9
1a0039f2:	4693      	mov	fp, r2
1a0039f4:	f04f 0a00 	mov.w	sl, #0
1a0039f8:	f63f adf4 	bhi.w	1a0035e4 <_svfprintf_r+0xc4>
1a0039fc:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a003a00:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a003a04:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
1a003a08:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003a0c:	2b09      	cmp	r3, #9
1a003a0e:	d9f5      	bls.n	1a0039fc <_svfprintf_r+0x4dc>
1a003a10:	e5e8      	b.n	1a0035e4 <_svfprintf_r+0xc4>
1a003a12:	f88d 7083 	strb.w	r7, [sp, #131]	; 0x83
1a003a16:	f89b 8000 	ldrb.w	r8, [fp]
1a003a1a:	e5e1      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a1e:	f89b 8000 	ldrb.w	r8, [fp]
1a003a22:	f853 2b04 	ldr.w	r2, [r3], #4
1a003a26:	9205      	str	r2, [sp, #20]
1a003a28:	2a00      	cmp	r2, #0
1a003a2a:	f2c0 8585 	blt.w	1a004538 <_svfprintf_r+0x1018>
1a003a2e:	9309      	str	r3, [sp, #36]	; 0x24
1a003a30:	e5d6      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003a32:	bf00      	nop
1a003a34:	1a007068 	.word	0x1a007068
1a003a38:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003a3a:	2300      	movs	r3, #0
1a003a3c:	f854 2b04 	ldr.w	r2, [r4], #4
1a003a40:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a003a44:	2701      	movs	r7, #1
1a003a46:	461a      	mov	r2, r3
1a003a48:	9703      	str	r7, [sp, #12]
1a003a4a:	9409      	str	r4, [sp, #36]	; 0x24
1a003a4c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a003a50:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003a54:	9208      	str	r2, [sp, #32]
1a003a56:	4692      	mov	sl, r2
1a003a58:	920c      	str	r2, [sp, #48]	; 0x30
1a003a5a:	ae3b      	add	r6, sp, #236	; 0xec
1a003a5c:	9b02      	ldr	r3, [sp, #8]
1a003a5e:	f013 0302 	ands.w	r3, r3, #2
1a003a62:	930a      	str	r3, [sp, #40]	; 0x28
1a003a64:	d002      	beq.n	1a003a6c <_svfprintf_r+0x54c>
1a003a66:	9b03      	ldr	r3, [sp, #12]
1a003a68:	3302      	adds	r3, #2
1a003a6a:	9303      	str	r3, [sp, #12]
1a003a6c:	9b02      	ldr	r3, [sp, #8]
1a003a6e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a003a70:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a003a74:	930b      	str	r3, [sp, #44]	; 0x2c
1a003a76:	d104      	bne.n	1a003a82 <_svfprintf_r+0x562>
1a003a78:	9b05      	ldr	r3, [sp, #20]
1a003a7a:	9903      	ldr	r1, [sp, #12]
1a003a7c:	1a5d      	subs	r5, r3, r1
1a003a7e:	2d00      	cmp	r5, #0
1a003a80:	dc5a      	bgt.n	1a003b38 <_svfprintf_r+0x618>
1a003a82:	b172      	cbz	r2, 1a003aa2 <_svfprintf_r+0x582>
1a003a84:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003a86:	3201      	adds	r2, #1
1a003a88:	3401      	adds	r4, #1
1a003a8a:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a003a8e:	2101      	movs	r1, #1
1a003a90:	2a07      	cmp	r2, #7
1a003a92:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003a96:	e9c9 0100 	strd	r0, r1, [r9]
1a003a9a:	f300 82e9 	bgt.w	1a004070 <_svfprintf_r+0xb50>
1a003a9e:	f109 0908 	add.w	r9, r9, #8
1a003aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003aa4:	b16b      	cbz	r3, 1a003ac2 <_svfprintf_r+0x5a2>
1a003aa6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003aa8:	3301      	adds	r3, #1
1a003aaa:	3402      	adds	r4, #2
1a003aac:	a921      	add	r1, sp, #132	; 0x84
1a003aae:	2202      	movs	r2, #2
1a003ab0:	2b07      	cmp	r3, #7
1a003ab2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003ab6:	e9c9 1200 	strd	r1, r2, [r9]
1a003aba:	f300 82e5 	bgt.w	1a004088 <_svfprintf_r+0xb68>
1a003abe:	f109 0908 	add.w	r9, r9, #8
1a003ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003ac4:	2b80      	cmp	r3, #128	; 0x80
1a003ac6:	f000 81f8 	beq.w	1a003eba <_svfprintf_r+0x99a>
1a003aca:	ebaa 0507 	sub.w	r5, sl, r7
1a003ace:	2d00      	cmp	r5, #0
1a003ad0:	f300 8236 	bgt.w	1a003f40 <_svfprintf_r+0xa20>
1a003ad4:	9b02      	ldr	r3, [sp, #8]
1a003ad6:	05da      	lsls	r2, r3, #23
1a003ad8:	f100 8185 	bmi.w	1a003de6 <_svfprintf_r+0x8c6>
1a003adc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003ade:	f8c9 6000 	str.w	r6, [r9]
1a003ae2:	3301      	adds	r3, #1
1a003ae4:	443c      	add	r4, r7
1a003ae6:	2b07      	cmp	r3, #7
1a003ae8:	942a      	str	r4, [sp, #168]	; 0xa8
1a003aea:	f8c9 7004 	str.w	r7, [r9, #4]
1a003aee:	9329      	str	r3, [sp, #164]	; 0xa4
1a003af0:	f300 82b2 	bgt.w	1a004058 <_svfprintf_r+0xb38>
1a003af4:	f109 0908 	add.w	r9, r9, #8
1a003af8:	9b02      	ldr	r3, [sp, #8]
1a003afa:	0759      	lsls	r1, r3, #29
1a003afc:	d505      	bpl.n	1a003b0a <_svfprintf_r+0x5ea>
1a003afe:	9b05      	ldr	r3, [sp, #20]
1a003b00:	9a03      	ldr	r2, [sp, #12]
1a003b02:	1a9d      	subs	r5, r3, r2
1a003b04:	2d00      	cmp	r5, #0
1a003b06:	f300 82cb 	bgt.w	1a0040a0 <_svfprintf_r+0xb80>
1a003b0a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
1a003b0e:	9903      	ldr	r1, [sp, #12]
1a003b10:	428a      	cmp	r2, r1
1a003b12:	bfac      	ite	ge
1a003b14:	189b      	addge	r3, r3, r2
1a003b16:	185b      	addlt	r3, r3, r1
1a003b18:	9304      	str	r3, [sp, #16]
1a003b1a:	2c00      	cmp	r4, #0
1a003b1c:	f47f add7 	bne.w	1a0036ce <_svfprintf_r+0x1ae>
1a003b20:	2300      	movs	r3, #0
1a003b22:	9329      	str	r3, [sp, #164]	; 0xa4
1a003b24:	9b08      	ldr	r3, [sp, #32]
1a003b26:	b11b      	cbz	r3, 1a003b30 <_svfprintf_r+0x610>
1a003b28:	9908      	ldr	r1, [sp, #32]
1a003b2a:	9806      	ldr	r0, [sp, #24]
1a003b2c:	f7fe ff7c 	bl	1a002a28 <_free_r>
1a003b30:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a003b34:	465e      	mov	r6, fp
1a003b36:	e693      	b.n	1a003860 <_svfprintf_r+0x340>
1a003b38:	2d10      	cmp	r5, #16
1a003b3a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003b3c:	dd29      	ble.n	1a003b92 <_svfprintf_r+0x672>
1a003b3e:	4620      	mov	r0, r4
1a003b40:	4649      	mov	r1, r9
1a003b42:	2310      	movs	r3, #16
1a003b44:	46b1      	mov	r9, r6
1a003b46:	971e      	str	r7, [sp, #120]	; 0x78
1a003b48:	9c06      	ldr	r4, [sp, #24]
1a003b4a:	9e07      	ldr	r6, [sp, #28]
1a003b4c:	e004      	b.n	1a003b58 <_svfprintf_r+0x638>
1a003b4e:	3d10      	subs	r5, #16
1a003b50:	2d10      	cmp	r5, #16
1a003b52:	f101 0108 	add.w	r1, r1, #8
1a003b56:	dd18      	ble.n	1a003b8a <_svfprintf_r+0x66a>
1a003b58:	3201      	adds	r2, #1
1a003b5a:	4fc4      	ldr	r7, [pc, #784]	; (1a003e6c <_svfprintf_r+0x94c>)
1a003b5c:	3010      	adds	r0, #16
1a003b5e:	2a07      	cmp	r2, #7
1a003b60:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a003b64:	e9c1 7300 	strd	r7, r3, [r1]
1a003b68:	ddf1      	ble.n	1a003b4e <_svfprintf_r+0x62e>
1a003b6a:	aa28      	add	r2, sp, #160	; 0xa0
1a003b6c:	4631      	mov	r1, r6
1a003b6e:	4620      	mov	r0, r4
1a003b70:	f002 ff9e 	bl	1a006ab0 <__ssprint_r>
1a003b74:	2800      	cmp	r0, #0
1a003b76:	f47f adb2 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a003b7a:	3d10      	subs	r5, #16
1a003b7c:	2d10      	cmp	r5, #16
1a003b7e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a003b82:	a92b      	add	r1, sp, #172	; 0xac
1a003b84:	f04f 0310 	mov.w	r3, #16
1a003b88:	dce6      	bgt.n	1a003b58 <_svfprintf_r+0x638>
1a003b8a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
1a003b8c:	464e      	mov	r6, r9
1a003b8e:	4604      	mov	r4, r0
1a003b90:	4689      	mov	r9, r1
1a003b92:	3201      	adds	r2, #1
1a003b94:	4bb5      	ldr	r3, [pc, #724]	; (1a003e6c <_svfprintf_r+0x94c>)
1a003b96:	442c      	add	r4, r5
1a003b98:	2a07      	cmp	r2, #7
1a003b9a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003b9e:	e9c9 3500 	strd	r3, r5, [r9]
1a003ba2:	f300 85c9 	bgt.w	1a004738 <_svfprintf_r+0x1218>
1a003ba6:	f109 0908 	add.w	r9, r9, #8
1a003baa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003bae:	e768      	b.n	1a003a82 <_svfprintf_r+0x562>
1a003bb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003bb2:	3407      	adds	r4, #7
1a003bb4:	f024 0307 	bic.w	r3, r4, #7
1a003bb8:	ecb3 7b02 	vldmia	r3!, {d7}
1a003bbc:	ec55 4b17 	vmov	r4, r5, d7
1a003bc0:	9309      	str	r3, [sp, #36]	; 0x24
1a003bc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a003bc6:	931b      	str	r3, [sp, #108]	; 0x6c
1a003bc8:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a003bcc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a003bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003bd4:	4ba6      	ldr	r3, [pc, #664]	; (1a003e70 <_svfprintf_r+0x950>)
1a003bd6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003bda:	f7fe fd15 	bl	1a002608 <__aeabi_dcmpun>
1a003bde:	2800      	cmp	r0, #0
1a003be0:	f040 83d1 	bne.w	1a004386 <_svfprintf_r+0xe66>
1a003be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003be8:	4ba1      	ldr	r3, [pc, #644]	; (1a003e70 <_svfprintf_r+0x950>)
1a003bea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a003bee:	f7fe fced 	bl	1a0025cc <__aeabi_dcmple>
1a003bf2:	2800      	cmp	r0, #0
1a003bf4:	f040 83c7 	bne.w	1a004386 <_svfprintf_r+0xe66>
1a003bf8:	2200      	movs	r2, #0
1a003bfa:	2300      	movs	r3, #0
1a003bfc:	4620      	mov	r0, r4
1a003bfe:	4629      	mov	r1, r5
1a003c00:	f7fe fcda 	bl	1a0025b8 <__aeabi_dcmplt>
1a003c04:	2800      	cmp	r0, #0
1a003c06:	f040 86a0 	bne.w	1a00494a <_svfprintf_r+0x142a>
1a003c0a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003c0e:	4e99      	ldr	r6, [pc, #612]	; (1a003e74 <_svfprintf_r+0x954>)
1a003c10:	4b99      	ldr	r3, [pc, #612]	; (1a003e78 <_svfprintf_r+0x958>)
1a003c12:	9802      	ldr	r0, [sp, #8]
1a003c14:	2100      	movs	r1, #0
1a003c16:	2703      	movs	r7, #3
1a003c18:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a003c1c:	9703      	str	r7, [sp, #12]
1a003c1e:	9108      	str	r1, [sp, #32]
1a003c20:	9002      	str	r0, [sp, #8]
1a003c22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a003c26:	bfc8      	it	gt
1a003c28:	461e      	movgt	r6, r3
1a003c2a:	468a      	mov	sl, r1
1a003c2c:	910c      	str	r1, [sp, #48]	; 0x30
1a003c2e:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a003c32:	e655      	b.n	1a0038e0 <_svfprintf_r+0x3c0>
1a003c34:	9d06      	ldr	r5, [sp, #24]
1a003c36:	4628      	mov	r0, r5
1a003c38:	f002 f94c 	bl	1a005ed4 <_localeconv_r>
1a003c3c:	6843      	ldr	r3, [r0, #4]
1a003c3e:	9317      	str	r3, [sp, #92]	; 0x5c
1a003c40:	4618      	mov	r0, r3
1a003c42:	f7ff fbfd 	bl	1a003440 <strlen>
1a003c46:	9019      	str	r0, [sp, #100]	; 0x64
1a003c48:	4604      	mov	r4, r0
1a003c4a:	4628      	mov	r0, r5
1a003c4c:	f002 f942 	bl	1a005ed4 <_localeconv_r>
1a003c50:	6883      	ldr	r3, [r0, #8]
1a003c52:	9318      	str	r3, [sp, #96]	; 0x60
1a003c54:	2120      	movs	r1, #32
1a003c56:	2c00      	cmp	r4, #0
1a003c58:	f43f ad2a 	beq.w	1a0036b0 <_svfprintf_r+0x190>
1a003c5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a003c5e:	f89b 8000 	ldrb.w	r8, [fp]
1a003c62:	2b00      	cmp	r3, #0
1a003c64:	f43f acbc 	beq.w	1a0035e0 <_svfprintf_r+0xc0>
1a003c68:	781b      	ldrb	r3, [r3, #0]
1a003c6a:	2b00      	cmp	r3, #0
1a003c6c:	f43f acb8 	beq.w	1a0035e0 <_svfprintf_r+0xc0>
1a003c70:	9b02      	ldr	r3, [sp, #8]
1a003c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a003c76:	9302      	str	r3, [sp, #8]
1a003c78:	e4b2      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003c7a:	9b02      	ldr	r3, [sp, #8]
1a003c7c:	f89b 8000 	ldrb.w	r8, [fp]
1a003c80:	f043 0301 	orr.w	r3, r3, #1
1a003c84:	9302      	str	r3, [sp, #8]
1a003c86:	e4ab      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003c88:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a003c8c:	f89b 8000 	ldrb.w	r8, [fp]
1a003c90:	2b00      	cmp	r3, #0
1a003c92:	f47f aca5 	bne.w	1a0035e0 <_svfprintf_r+0xc0>
1a003c96:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a003c9a:	e4a1      	b.n	1a0035e0 <_svfprintf_r+0xc0>
1a003c9c:	9f02      	ldr	r7, [sp, #8]
1a003c9e:	463b      	mov	r3, r7
1a003ca0:	069b      	lsls	r3, r3, #26
1a003ca2:	f53f ae76 	bmi.w	1a003992 <_svfprintf_r+0x472>
1a003ca6:	9b02      	ldr	r3, [sp, #8]
1a003ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003caa:	06de      	lsls	r6, r3, #27
1a003cac:	f852 4b04 	ldr.w	r4, [r2], #4
1a003cb0:	f101 814b 	bmi.w	1a004f4a <_svfprintf_r+0x1a2a>
1a003cb4:	9f02      	ldr	r7, [sp, #8]
1a003cb6:	067d      	lsls	r5, r7, #25
1a003cb8:	f140 862f 	bpl.w	1a00491a <_svfprintf_r+0x13fa>
1a003cbc:	9209      	str	r2, [sp, #36]	; 0x24
1a003cbe:	b2a4      	uxth	r4, r4
1a003cc0:	2500      	movs	r5, #0
1a003cc2:	2301      	movs	r3, #1
1a003cc4:	e582      	b.n	1a0037cc <_svfprintf_r+0x2ac>
1a003cc6:	f1b8 0f00 	cmp.w	r8, #0
1a003cca:	f43f adcd 	beq.w	1a003868 <_svfprintf_r+0x348>
1a003cce:	2300      	movs	r3, #0
1a003cd0:	2701      	movs	r7, #1
1a003cd2:	461a      	mov	r2, r3
1a003cd4:	9703      	str	r7, [sp, #12]
1a003cd6:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a003cda:	e6b7      	b.n	1a003a4c <_svfprintf_r+0x52c>
1a003cdc:	9f02      	ldr	r7, [sp, #8]
1a003cde:	2d00      	cmp	r5, #0
1a003ce0:	bf08      	it	eq
1a003ce2:	2c0a      	cmpeq	r4, #10
1a003ce4:	d239      	bcs.n	1a003d5a <_svfprintf_r+0x83a>
1a003ce6:	3430      	adds	r4, #48	; 0x30
1a003ce8:	9702      	str	r7, [sp, #8]
1a003cea:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a003cee:	2701      	movs	r7, #1
1a003cf0:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a003cf4:	2300      	movs	r3, #0
1a003cf6:	4557      	cmp	r7, sl
1a003cf8:	9308      	str	r3, [sp, #32]
1a003cfa:	930c      	str	r3, [sp, #48]	; 0x30
1a003cfc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a003d00:	463b      	mov	r3, r7
1a003d02:	bfb8      	it	lt
1a003d04:	4653      	movlt	r3, sl
1a003d06:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003d0a:	9303      	str	r3, [sp, #12]
1a003d0c:	e5e8      	b.n	1a0038e0 <_svfprintf_r+0x3c0>
1a003d0e:	9f02      	ldr	r7, [sp, #8]
1a003d10:	2b01      	cmp	r3, #1
1a003d12:	d0e4      	beq.n	1a003cde <_svfprintf_r+0x7be>
1a003d14:	2b02      	cmp	r3, #2
1a003d16:	f000 8202 	beq.w	1a00411e <_svfprintf_r+0xbfe>
1a003d1a:	a954      	add	r1, sp, #336	; 0x150
1a003d1c:	e000      	b.n	1a003d20 <_svfprintf_r+0x800>
1a003d1e:	4631      	mov	r1, r6
1a003d20:	08e2      	lsrs	r2, r4, #3
1a003d22:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a003d26:	08e8      	lsrs	r0, r5, #3
1a003d28:	f004 0307 	and.w	r3, r4, #7
1a003d2c:	4605      	mov	r5, r0
1a003d2e:	4614      	mov	r4, r2
1a003d30:	3330      	adds	r3, #48	; 0x30
1a003d32:	ea54 0205 	orrs.w	r2, r4, r5
1a003d36:	f801 3c01 	strb.w	r3, [r1, #-1]
1a003d3a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a003d3e:	d1ee      	bne.n	1a003d1e <_svfprintf_r+0x7fe>
1a003d40:	07f8      	lsls	r0, r7, #31
1a003d42:	d54c      	bpl.n	1a003dde <_svfprintf_r+0x8be>
1a003d44:	2b30      	cmp	r3, #48	; 0x30
1a003d46:	d04a      	beq.n	1a003dde <_svfprintf_r+0x8be>
1a003d48:	2330      	movs	r3, #48	; 0x30
1a003d4a:	3902      	subs	r1, #2
1a003d4c:	f806 3c01 	strb.w	r3, [r6, #-1]
1a003d50:	ab54      	add	r3, sp, #336	; 0x150
1a003d52:	9702      	str	r7, [sp, #8]
1a003d54:	460e      	mov	r6, r1
1a003d56:	1a5f      	subs	r7, r3, r1
1a003d58:	e7cc      	b.n	1a003cf4 <_svfprintf_r+0x7d4>
1a003d5a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
1a003d5e:	2200      	movs	r2, #0
1a003d60:	f8cd b008 	str.w	fp, [sp, #8]
1a003d64:	f8cd 800c 	str.w	r8, [sp, #12]
1a003d68:	f8cd 9020 	str.w	r9, [sp, #32]
1a003d6c:	ae54      	add	r6, sp, #336	; 0x150
1a003d6e:	46b9      	mov	r9, r7
1a003d70:	4693      	mov	fp, r2
1a003d72:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a003d76:	461f      	mov	r7, r3
1a003d78:	e007      	b.n	1a003d8a <_svfprintf_r+0x86a>
1a003d7a:	f7fe fc83 	bl	1a002684 <__aeabi_uldivmod>
1a003d7e:	2d00      	cmp	r5, #0
1a003d80:	bf08      	it	eq
1a003d82:	2c0a      	cmpeq	r4, #10
1a003d84:	d320      	bcc.n	1a003dc8 <_svfprintf_r+0x8a8>
1a003d86:	4604      	mov	r4, r0
1a003d88:	460d      	mov	r5, r1
1a003d8a:	220a      	movs	r2, #10
1a003d8c:	2300      	movs	r3, #0
1a003d8e:	4620      	mov	r0, r4
1a003d90:	4629      	mov	r1, r5
1a003d92:	f7fe fc77 	bl	1a002684 <__aeabi_uldivmod>
1a003d96:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a003d9a:	f806 cc01 	strb.w	ip, [r6, #-1]
1a003d9e:	4620      	mov	r0, r4
1a003da0:	4629      	mov	r1, r5
1a003da2:	220a      	movs	r2, #10
1a003da4:	2300      	movs	r3, #0
1a003da6:	f10b 0b01 	add.w	fp, fp, #1
1a003daa:	3e01      	subs	r6, #1
1a003dac:	2f00      	cmp	r7, #0
1a003dae:	d0e4      	beq.n	1a003d7a <_svfprintf_r+0x85a>
1a003db0:	f898 c000 	ldrb.w	ip, [r8]
1a003db4:	45e3      	cmp	fp, ip
1a003db6:	d1e0      	bne.n	1a003d7a <_svfprintf_r+0x85a>
1a003db8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
1a003dbc:	d0dd      	beq.n	1a003d7a <_svfprintf_r+0x85a>
1a003dbe:	429d      	cmp	r5, r3
1a003dc0:	bf08      	it	eq
1a003dc2:	4294      	cmpeq	r4, r2
1a003dc4:	f080 8669 	bcs.w	1a004a9a <_svfprintf_r+0x157a>
1a003dc8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
1a003dcc:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a003dd0:	464f      	mov	r7, r9
1a003dd2:	f8dd b008 	ldr.w	fp, [sp, #8]
1a003dd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a003dda:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a003dde:	9702      	str	r7, [sp, #8]
1a003de0:	ab54      	add	r3, sp, #336	; 0x150
1a003de2:	1b9f      	subs	r7, r3, r6
1a003de4:	e786      	b.n	1a003cf4 <_svfprintf_r+0x7d4>
1a003de6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a003dea:	f340 80e3 	ble.w	1a003fb4 <_svfprintf_r+0xa94>
1a003dee:	2200      	movs	r2, #0
1a003df0:	2300      	movs	r3, #0
1a003df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a003df6:	f7fe fbd5 	bl	1a0025a4 <__aeabi_dcmpeq>
1a003dfa:	2800      	cmp	r0, #0
1a003dfc:	f000 81a8 	beq.w	1a004150 <_svfprintf_r+0xc30>
1a003e00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003e02:	4a1e      	ldr	r2, [pc, #120]	; (1a003e7c <_svfprintf_r+0x95c>)
1a003e04:	f8c9 2000 	str.w	r2, [r9]
1a003e08:	3301      	adds	r3, #1
1a003e0a:	3401      	adds	r4, #1
1a003e0c:	2201      	movs	r2, #1
1a003e0e:	2b07      	cmp	r3, #7
1a003e10:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003e14:	f8c9 2004 	str.w	r2, [r9, #4]
1a003e18:	f300 84d1 	bgt.w	1a0047be <_svfprintf_r+0x129e>
1a003e1c:	f109 0908 	add.w	r9, r9, #8
1a003e20:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a003e24:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a003e26:	4293      	cmp	r3, r2
1a003e28:	f280 828a 	bge.w	1a004340 <_svfprintf_r+0xe20>
1a003e2c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003e2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a003e30:	f8c9 2000 	str.w	r2, [r9]
1a003e34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a003e36:	f8c9 2004 	str.w	r2, [r9, #4]
1a003e3a:	3301      	adds	r3, #1
1a003e3c:	4414      	add	r4, r2
1a003e3e:	2b07      	cmp	r3, #7
1a003e40:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003e44:	f300 838f 	bgt.w	1a004566 <_svfprintf_r+0x1046>
1a003e48:	f109 0908 	add.w	r9, r9, #8
1a003e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a003e4e:	1e5d      	subs	r5, r3, #1
1a003e50:	2d00      	cmp	r5, #0
1a003e52:	f77f ae51 	ble.w	1a003af8 <_svfprintf_r+0x5d8>
1a003e56:	2d10      	cmp	r5, #16
1a003e58:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003e5a:	4b09      	ldr	r3, [pc, #36]	; (1a003e80 <_svfprintf_r+0x960>)
1a003e5c:	f340 84bc 	ble.w	1a0047d8 <_svfprintf_r+0x12b8>
1a003e60:	2610      	movs	r6, #16
1a003e62:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a003e66:	469a      	mov	sl, r3
1a003e68:	e012      	b.n	1a003e90 <_svfprintf_r+0x970>
1a003e6a:	bf00      	nop
1a003e6c:	1a00709c 	.word	0x1a00709c
1a003e70:	7fefffff 	.word	0x7fefffff
1a003e74:	1a007058 	.word	0x1a007058
1a003e78:	1a00705c 	.word	0x1a00705c
1a003e7c:	1a007098 	.word	0x1a007098
1a003e80:	1a0070ac 	.word	0x1a0070ac
1a003e84:	f109 0908 	add.w	r9, r9, #8
1a003e88:	3d10      	subs	r5, #16
1a003e8a:	2d10      	cmp	r5, #16
1a003e8c:	f340 84a3 	ble.w	1a0047d6 <_svfprintf_r+0x12b6>
1a003e90:	3201      	adds	r2, #1
1a003e92:	3410      	adds	r4, #16
1a003e94:	2a07      	cmp	r2, #7
1a003e96:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003e9a:	e9c9 a600 	strd	sl, r6, [r9]
1a003e9e:	ddf1      	ble.n	1a003e84 <_svfprintf_r+0x964>
1a003ea0:	aa28      	add	r2, sp, #160	; 0xa0
1a003ea2:	4641      	mov	r1, r8
1a003ea4:	4638      	mov	r0, r7
1a003ea6:	f002 fe03 	bl	1a006ab0 <__ssprint_r>
1a003eaa:	2800      	cmp	r0, #0
1a003eac:	f47f ac17 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a003eb0:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a003eb4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a003eb8:	e7e6      	b.n	1a003e88 <_svfprintf_r+0x968>
1a003eba:	9b05      	ldr	r3, [sp, #20]
1a003ebc:	9a03      	ldr	r2, [sp, #12]
1a003ebe:	1a9d      	subs	r5, r3, r2
1a003ec0:	2d00      	cmp	r5, #0
1a003ec2:	f77f ae02 	ble.w	1a003aca <_svfprintf_r+0x5aa>
1a003ec6:	2d10      	cmp	r5, #16
1a003ec8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003eca:	4b9f      	ldr	r3, [pc, #636]	; (1a004148 <_svfprintf_r+0xc28>)
1a003ecc:	dd28      	ble.n	1a003f20 <_svfprintf_r+0xa00>
1a003ece:	4620      	mov	r0, r4
1a003ed0:	970a      	str	r7, [sp, #40]	; 0x28
1a003ed2:	4649      	mov	r1, r9
1a003ed4:	9c06      	ldr	r4, [sp, #24]
1a003ed6:	46b1      	mov	r9, r6
1a003ed8:	461f      	mov	r7, r3
1a003eda:	9e07      	ldr	r6, [sp, #28]
1a003edc:	e004      	b.n	1a003ee8 <_svfprintf_r+0x9c8>
1a003ede:	3d10      	subs	r5, #16
1a003ee0:	2d10      	cmp	r5, #16
1a003ee2:	f101 0108 	add.w	r1, r1, #8
1a003ee6:	dd16      	ble.n	1a003f16 <_svfprintf_r+0x9f6>
1a003ee8:	3201      	adds	r2, #1
1a003eea:	3010      	adds	r0, #16
1a003eec:	2310      	movs	r3, #16
1a003eee:	2a07      	cmp	r2, #7
1a003ef0:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a003ef4:	600f      	str	r7, [r1, #0]
1a003ef6:	604b      	str	r3, [r1, #4]
1a003ef8:	ddf1      	ble.n	1a003ede <_svfprintf_r+0x9be>
1a003efa:	aa28      	add	r2, sp, #160	; 0xa0
1a003efc:	4631      	mov	r1, r6
1a003efe:	4620      	mov	r0, r4
1a003f00:	f002 fdd6 	bl	1a006ab0 <__ssprint_r>
1a003f04:	2800      	cmp	r0, #0
1a003f06:	f47f abea 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a003f0a:	3d10      	subs	r5, #16
1a003f0c:	2d10      	cmp	r5, #16
1a003f0e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a003f12:	a92b      	add	r1, sp, #172	; 0xac
1a003f14:	dce8      	bgt.n	1a003ee8 <_svfprintf_r+0x9c8>
1a003f16:	463b      	mov	r3, r7
1a003f18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a003f1a:	464e      	mov	r6, r9
1a003f1c:	4604      	mov	r4, r0
1a003f1e:	4689      	mov	r9, r1
1a003f20:	3201      	adds	r2, #1
1a003f22:	442c      	add	r4, r5
1a003f24:	2a07      	cmp	r2, #7
1a003f26:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003f2a:	e9c9 3500 	strd	r3, r5, [r9]
1a003f2e:	f300 846a 	bgt.w	1a004806 <_svfprintf_r+0x12e6>
1a003f32:	ebaa 0507 	sub.w	r5, sl, r7
1a003f36:	2d00      	cmp	r5, #0
1a003f38:	f109 0908 	add.w	r9, r9, #8
1a003f3c:	f77f adca 	ble.w	1a003ad4 <_svfprintf_r+0x5b4>
1a003f40:	2d10      	cmp	r5, #16
1a003f42:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003f44:	4b80      	ldr	r3, [pc, #512]	; (1a004148 <_svfprintf_r+0xc28>)
1a003f46:	dd29      	ble.n	1a003f9c <_svfprintf_r+0xa7c>
1a003f48:	4620      	mov	r0, r4
1a003f4a:	970a      	str	r7, [sp, #40]	; 0x28
1a003f4c:	4649      	mov	r1, r9
1a003f4e:	f04f 0a10 	mov.w	sl, #16
1a003f52:	46b1      	mov	r9, r6
1a003f54:	9c06      	ldr	r4, [sp, #24]
1a003f56:	9e07      	ldr	r6, [sp, #28]
1a003f58:	461f      	mov	r7, r3
1a003f5a:	e004      	b.n	1a003f66 <_svfprintf_r+0xa46>
1a003f5c:	3d10      	subs	r5, #16
1a003f5e:	2d10      	cmp	r5, #16
1a003f60:	f101 0108 	add.w	r1, r1, #8
1a003f64:	dd15      	ble.n	1a003f92 <_svfprintf_r+0xa72>
1a003f66:	3201      	adds	r2, #1
1a003f68:	3010      	adds	r0, #16
1a003f6a:	2a07      	cmp	r2, #7
1a003f6c:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a003f70:	e9c1 7a00 	strd	r7, sl, [r1]
1a003f74:	ddf2      	ble.n	1a003f5c <_svfprintf_r+0xa3c>
1a003f76:	aa28      	add	r2, sp, #160	; 0xa0
1a003f78:	4631      	mov	r1, r6
1a003f7a:	4620      	mov	r0, r4
1a003f7c:	f002 fd98 	bl	1a006ab0 <__ssprint_r>
1a003f80:	2800      	cmp	r0, #0
1a003f82:	f47f abac 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a003f86:	3d10      	subs	r5, #16
1a003f88:	2d10      	cmp	r5, #16
1a003f8a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a003f8e:	a92b      	add	r1, sp, #172	; 0xac
1a003f90:	dce9      	bgt.n	1a003f66 <_svfprintf_r+0xa46>
1a003f92:	463b      	mov	r3, r7
1a003f94:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a003f96:	464e      	mov	r6, r9
1a003f98:	4604      	mov	r4, r0
1a003f9a:	4689      	mov	r9, r1
1a003f9c:	3201      	adds	r2, #1
1a003f9e:	442c      	add	r4, r5
1a003fa0:	2a07      	cmp	r2, #7
1a003fa2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003fa6:	e9c9 3500 	strd	r3, r5, [r9]
1a003faa:	f300 8197 	bgt.w	1a0042dc <_svfprintf_r+0xdbc>
1a003fae:	f109 0908 	add.w	r9, r9, #8
1a003fb2:	e58f      	b.n	1a003ad4 <_svfprintf_r+0x5b4>
1a003fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a003fb6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003fb8:	2a01      	cmp	r2, #1
1a003fba:	f104 0401 	add.w	r4, r4, #1
1a003fbe:	f103 0501 	add.w	r5, r3, #1
1a003fc2:	f109 0708 	add.w	r7, r9, #8
1a003fc6:	f340 8148 	ble.w	1a00425a <_svfprintf_r+0xd3a>
1a003fca:	2301      	movs	r3, #1
1a003fcc:	2d07      	cmp	r5, #7
1a003fce:	f8c9 6000 	str.w	r6, [r9]
1a003fd2:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a003fd6:	f8c9 3004 	str.w	r3, [r9, #4]
1a003fda:	f300 8198 	bgt.w	1a00430e <_svfprintf_r+0xdee>
1a003fde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a003fe0:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a003fe2:	1c69      	adds	r1, r5, #1
1a003fe4:	441c      	add	r4, r3
1a003fe6:	2907      	cmp	r1, #7
1a003fe8:	910b      	str	r1, [sp, #44]	; 0x2c
1a003fea:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a003fee:	e9c7 2300 	strd	r2, r3, [r7]
1a003ff2:	f300 8198 	bgt.w	1a004326 <_svfprintf_r+0xe06>
1a003ff6:	3708      	adds	r7, #8
1a003ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003ffa:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a003ffc:	f102 0a01 	add.w	sl, r2, #1
1a004000:	2300      	movs	r3, #0
1a004002:	2200      	movs	r2, #0
1a004004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004008:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
1a00400c:	f107 0908 	add.w	r9, r7, #8
1a004010:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a004014:	f7fe fac6 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004018:	2800      	cmp	r0, #0
1a00401a:	f040 8131 	bne.w	1a004280 <_svfprintf_r+0xd60>
1a00401e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004020:	f8c7 8004 	str.w	r8, [r7, #4]
1a004024:	3601      	adds	r6, #1
1a004026:	4444      	add	r4, r8
1a004028:	2b07      	cmp	r3, #7
1a00402a:	603e      	str	r6, [r7, #0]
1a00402c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00402e:	9329      	str	r3, [sp, #164]	; 0xa4
1a004030:	f300 8367 	bgt.w	1a004702 <_svfprintf_r+0x11e2>
1a004034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004036:	f107 0310 	add.w	r3, r7, #16
1a00403a:	3202      	adds	r2, #2
1a00403c:	464f      	mov	r7, r9
1a00403e:	920a      	str	r2, [sp, #40]	; 0x28
1a004040:	4699      	mov	r9, r3
1a004042:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004044:	607a      	str	r2, [r7, #4]
1a004046:	4414      	add	r4, r2
1a004048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00404a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00404c:	ab24      	add	r3, sp, #144	; 0x90
1a00404e:	2a07      	cmp	r2, #7
1a004050:	9229      	str	r2, [sp, #164]	; 0xa4
1a004052:	603b      	str	r3, [r7, #0]
1a004054:	f77f ad50 	ble.w	1a003af8 <_svfprintf_r+0x5d8>
1a004058:	aa28      	add	r2, sp, #160	; 0xa0
1a00405a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00405e:	f002 fd27 	bl	1a006ab0 <__ssprint_r>
1a004062:	2800      	cmp	r0, #0
1a004064:	f47f ab3b 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004068:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00406a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00406e:	e543      	b.n	1a003af8 <_svfprintf_r+0x5d8>
1a004070:	aa28      	add	r2, sp, #160	; 0xa0
1a004072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004076:	f002 fd1b 	bl	1a006ab0 <__ssprint_r>
1a00407a:	2800      	cmp	r0, #0
1a00407c:	f47f ab2f 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004080:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004082:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004086:	e50c      	b.n	1a003aa2 <_svfprintf_r+0x582>
1a004088:	aa28      	add	r2, sp, #160	; 0xa0
1a00408a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00408e:	f002 fd0f 	bl	1a006ab0 <__ssprint_r>
1a004092:	2800      	cmp	r0, #0
1a004094:	f47f ab23 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004098:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00409a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00409e:	e510      	b.n	1a003ac2 <_svfprintf_r+0x5a2>
1a0040a0:	2d10      	cmp	r5, #16
1a0040a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0040a4:	dd20      	ble.n	1a0040e8 <_svfprintf_r+0xbc8>
1a0040a6:	2610      	movs	r6, #16
1a0040a8:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a0040ac:	e004      	b.n	1a0040b8 <_svfprintf_r+0xb98>
1a0040ae:	3d10      	subs	r5, #16
1a0040b0:	2d10      	cmp	r5, #16
1a0040b2:	f109 0908 	add.w	r9, r9, #8
1a0040b6:	dd17      	ble.n	1a0040e8 <_svfprintf_r+0xbc8>
1a0040b8:	3301      	adds	r3, #1
1a0040ba:	4a24      	ldr	r2, [pc, #144]	; (1a00414c <_svfprintf_r+0xc2c>)
1a0040bc:	3410      	adds	r4, #16
1a0040be:	2b07      	cmp	r3, #7
1a0040c0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0040c4:	e9c9 2600 	strd	r2, r6, [r9]
1a0040c8:	ddf1      	ble.n	1a0040ae <_svfprintf_r+0xb8e>
1a0040ca:	aa28      	add	r2, sp, #160	; 0xa0
1a0040cc:	4641      	mov	r1, r8
1a0040ce:	4638      	mov	r0, r7
1a0040d0:	f002 fcee 	bl	1a006ab0 <__ssprint_r>
1a0040d4:	2800      	cmp	r0, #0
1a0040d6:	f47f ab02 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0040da:	3d10      	subs	r5, #16
1a0040dc:	2d10      	cmp	r5, #16
1a0040de:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a0040e2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0040e6:	dce7      	bgt.n	1a0040b8 <_svfprintf_r+0xb98>
1a0040e8:	3301      	adds	r3, #1
1a0040ea:	4a18      	ldr	r2, [pc, #96]	; (1a00414c <_svfprintf_r+0xc2c>)
1a0040ec:	442c      	add	r4, r5
1a0040ee:	2b07      	cmp	r3, #7
1a0040f0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a0040f4:	e9c9 2500 	strd	r2, r5, [r9]
1a0040f8:	f77f ad07 	ble.w	1a003b0a <_svfprintf_r+0x5ea>
1a0040fc:	aa28      	add	r2, sp, #160	; 0xa0
1a0040fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004102:	f002 fcd5 	bl	1a006ab0 <__ssprint_r>
1a004106:	2800      	cmp	r0, #0
1a004108:	f47f aae9 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a00410c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00410e:	e4fc      	b.n	1a003b0a <_svfprintf_r+0x5ea>
1a004110:	2b01      	cmp	r3, #1
1a004112:	f000 8467 	beq.w	1a0049e4 <_svfprintf_r+0x14c4>
1a004116:	2b02      	cmp	r3, #2
1a004118:	9f02      	ldr	r7, [sp, #8]
1a00411a:	f47f adfe 	bne.w	1a003d1a <_svfprintf_r+0x7fa>
1a00411e:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004120:	ae54      	add	r6, sp, #336	; 0x150
1a004122:	0923      	lsrs	r3, r4, #4
1a004124:	f004 010f 	and.w	r1, r4, #15
1a004128:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a00412c:	092a      	lsrs	r2, r5, #4
1a00412e:	461c      	mov	r4, r3
1a004130:	4615      	mov	r5, r2
1a004132:	5c43      	ldrb	r3, [r0, r1]
1a004134:	f806 3d01 	strb.w	r3, [r6, #-1]!
1a004138:	ea54 0305 	orrs.w	r3, r4, r5
1a00413c:	d1f1      	bne.n	1a004122 <_svfprintf_r+0xc02>
1a00413e:	ab54      	add	r3, sp, #336	; 0x150
1a004140:	9702      	str	r7, [sp, #8]
1a004142:	1b9f      	subs	r7, r3, r6
1a004144:	e5d6      	b.n	1a003cf4 <_svfprintf_r+0x7d4>
1a004146:	bf00      	nop
1a004148:	1a0070ac 	.word	0x1a0070ac
1a00414c:	1a00709c 	.word	0x1a00709c
1a004150:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004152:	2b00      	cmp	r3, #0
1a004154:	f340 82ff 	ble.w	1a004756 <_svfprintf_r+0x1236>
1a004158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00415a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00415c:	4293      	cmp	r3, r2
1a00415e:	bfa8      	it	ge
1a004160:	4613      	movge	r3, r2
1a004162:	2b00      	cmp	r3, #0
1a004164:	461d      	mov	r5, r3
1a004166:	dd0d      	ble.n	1a004184 <_svfprintf_r+0xc64>
1a004168:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00416a:	f8c9 6000 	str.w	r6, [r9]
1a00416e:	3301      	adds	r3, #1
1a004170:	442c      	add	r4, r5
1a004172:	2b07      	cmp	r3, #7
1a004174:	942a      	str	r4, [sp, #168]	; 0xa8
1a004176:	f8c9 5004 	str.w	r5, [r9, #4]
1a00417a:	9329      	str	r3, [sp, #164]	; 0xa4
1a00417c:	f300 8480 	bgt.w	1a004a80 <_svfprintf_r+0x1560>
1a004180:	f109 0908 	add.w	r9, r9, #8
1a004184:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004186:	2d00      	cmp	r5, #0
1a004188:	bfa8      	it	ge
1a00418a:	1b5b      	subge	r3, r3, r5
1a00418c:	2b00      	cmp	r3, #0
1a00418e:	461d      	mov	r5, r3
1a004190:	f300 8213 	bgt.w	1a0045ba <_svfprintf_r+0x109a>
1a004194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004196:	4433      	add	r3, r6
1a004198:	469a      	mov	sl, r3
1a00419a:	9b02      	ldr	r3, [sp, #8]
1a00419c:	055f      	lsls	r7, r3, #21
1a00419e:	f100 8233 	bmi.w	1a004608 <_svfprintf_r+0x10e8>
1a0041a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0041a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0041a6:	4293      	cmp	r3, r2
1a0041a8:	db03      	blt.n	1a0041b2 <_svfprintf_r+0xc92>
1a0041aa:	9a02      	ldr	r2, [sp, #8]
1a0041ac:	07d5      	lsls	r5, r2, #31
1a0041ae:	f140 83de 	bpl.w	1a00496e <_svfprintf_r+0x144e>
1a0041b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0041b4:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0041b6:	f8c9 1000 	str.w	r1, [r9]
1a0041ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0041bc:	f8c9 1004 	str.w	r1, [r9, #4]
1a0041c0:	3201      	adds	r2, #1
1a0041c2:	440c      	add	r4, r1
1a0041c4:	2a07      	cmp	r2, #7
1a0041c6:	942a      	str	r4, [sp, #168]	; 0xa8
1a0041c8:	9229      	str	r2, [sp, #164]	; 0xa4
1a0041ca:	f300 847c 	bgt.w	1a004ac6 <_svfprintf_r+0x15a6>
1a0041ce:	f109 0908 	add.w	r9, r9, #8
1a0041d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0041d4:	18b5      	adds	r5, r6, r2
1a0041d6:	eba5 050a 	sub.w	r5, r5, sl
1a0041da:	1ad3      	subs	r3, r2, r3
1a0041dc:	429d      	cmp	r5, r3
1a0041de:	bfa8      	it	ge
1a0041e0:	461d      	movge	r5, r3
1a0041e2:	2d00      	cmp	r5, #0
1a0041e4:	dd0d      	ble.n	1a004202 <_svfprintf_r+0xce2>
1a0041e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0041e8:	f8c9 a000 	str.w	sl, [r9]
1a0041ec:	3201      	adds	r2, #1
1a0041ee:	442c      	add	r4, r5
1a0041f0:	2a07      	cmp	r2, #7
1a0041f2:	942a      	str	r4, [sp, #168]	; 0xa8
1a0041f4:	f8c9 5004 	str.w	r5, [r9, #4]
1a0041f8:	9229      	str	r2, [sp, #164]	; 0xa4
1a0041fa:	f300 8579 	bgt.w	1a004cf0 <_svfprintf_r+0x17d0>
1a0041fe:	f109 0908 	add.w	r9, r9, #8
1a004202:	2d00      	cmp	r5, #0
1a004204:	bfac      	ite	ge
1a004206:	1b5d      	subge	r5, r3, r5
1a004208:	461d      	movlt	r5, r3
1a00420a:	2d00      	cmp	r5, #0
1a00420c:	f77f ac74 	ble.w	1a003af8 <_svfprintf_r+0x5d8>
1a004210:	2d10      	cmp	r5, #16
1a004212:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004214:	4bc2      	ldr	r3, [pc, #776]	; (1a004520 <_svfprintf_r+0x1000>)
1a004216:	f340 82df 	ble.w	1a0047d8 <_svfprintf_r+0x12b8>
1a00421a:	2610      	movs	r6, #16
1a00421c:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a004220:	469a      	mov	sl, r3
1a004222:	e005      	b.n	1a004230 <_svfprintf_r+0xd10>
1a004224:	f109 0908 	add.w	r9, r9, #8
1a004228:	3d10      	subs	r5, #16
1a00422a:	2d10      	cmp	r5, #16
1a00422c:	f340 82d3 	ble.w	1a0047d6 <_svfprintf_r+0x12b6>
1a004230:	3201      	adds	r2, #1
1a004232:	3410      	adds	r4, #16
1a004234:	2a07      	cmp	r2, #7
1a004236:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00423a:	e9c9 a600 	strd	sl, r6, [r9]
1a00423e:	ddf1      	ble.n	1a004224 <_svfprintf_r+0xd04>
1a004240:	aa28      	add	r2, sp, #160	; 0xa0
1a004242:	4641      	mov	r1, r8
1a004244:	4638      	mov	r0, r7
1a004246:	f002 fc33 	bl	1a006ab0 <__ssprint_r>
1a00424a:	2800      	cmp	r0, #0
1a00424c:	f47f aa47 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004250:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004254:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004258:	e7e6      	b.n	1a004228 <_svfprintf_r+0xd08>
1a00425a:	9a02      	ldr	r2, [sp, #8]
1a00425c:	07d0      	lsls	r0, r2, #31
1a00425e:	f53f aeb4 	bmi.w	1a003fca <_svfprintf_r+0xaaa>
1a004262:	2201      	movs	r2, #1
1a004264:	2d07      	cmp	r5, #7
1a004266:	f8c9 6000 	str.w	r6, [r9]
1a00426a:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a00426e:	f8c9 2004 	str.w	r2, [r9, #4]
1a004272:	f300 8246 	bgt.w	1a004702 <_svfprintf_r+0x11e2>
1a004276:	3302      	adds	r3, #2
1a004278:	930a      	str	r3, [sp, #40]	; 0x28
1a00427a:	f109 0910 	add.w	r9, r9, #16
1a00427e:	e6e0      	b.n	1a004042 <_svfprintf_r+0xb22>
1a004280:	f1b8 0f00 	cmp.w	r8, #0
1a004284:	f77f aedd 	ble.w	1a004042 <_svfprintf_r+0xb22>
1a004288:	f1b8 0f10 	cmp.w	r8, #16
1a00428c:	4ba4      	ldr	r3, [pc, #656]	; (1a004520 <_svfprintf_r+0x1000>)
1a00428e:	f340 8639 	ble.w	1a004f04 <_svfprintf_r+0x19e4>
1a004292:	461a      	mov	r2, r3
1a004294:	4655      	mov	r5, sl
1a004296:	4623      	mov	r3, r4
1a004298:	2610      	movs	r6, #16
1a00429a:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a00429e:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a0042a2:	4614      	mov	r4, r2
1a0042a4:	e007      	b.n	1a0042b6 <_svfprintf_r+0xd96>
1a0042a6:	3708      	adds	r7, #8
1a0042a8:	f1a8 0810 	sub.w	r8, r8, #16
1a0042ac:	f1b8 0f10 	cmp.w	r8, #16
1a0042b0:	f340 8304 	ble.w	1a0048bc <_svfprintf_r+0x139c>
1a0042b4:	3501      	adds	r5, #1
1a0042b6:	3310      	adds	r3, #16
1a0042b8:	2d07      	cmp	r5, #7
1a0042ba:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a0042be:	e9c7 4600 	strd	r4, r6, [r7]
1a0042c2:	ddf0      	ble.n	1a0042a6 <_svfprintf_r+0xd86>
1a0042c4:	aa28      	add	r2, sp, #160	; 0xa0
1a0042c6:	4651      	mov	r1, sl
1a0042c8:	4648      	mov	r0, r9
1a0042ca:	f002 fbf1 	bl	1a006ab0 <__ssprint_r>
1a0042ce:	2800      	cmp	r0, #0
1a0042d0:	f47f aa05 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0042d4:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a0042d8:	af2b      	add	r7, sp, #172	; 0xac
1a0042da:	e7e5      	b.n	1a0042a8 <_svfprintf_r+0xd88>
1a0042dc:	aa28      	add	r2, sp, #160	; 0xa0
1a0042de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0042e2:	f002 fbe5 	bl	1a006ab0 <__ssprint_r>
1a0042e6:	2800      	cmp	r0, #0
1a0042e8:	f47f a9f9 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0042ec:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0042ee:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0042f2:	f7ff bbef 	b.w	1a003ad4 <_svfprintf_r+0x5b4>
1a0042f6:	232d      	movs	r3, #45	; 0x2d
1a0042f8:	4264      	negs	r4, r4
1a0042fa:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a0042fe:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a004302:	2301      	movs	r3, #1
1a004304:	f7ff ba65 	b.w	1a0037d2 <_svfprintf_r+0x2b2>
1a004308:	4634      	mov	r4, r6
1a00430a:	f7ff b95c 	b.w	1a0035c6 <_svfprintf_r+0xa6>
1a00430e:	aa28      	add	r2, sp, #160	; 0xa0
1a004310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004314:	f002 fbcc 	bl	1a006ab0 <__ssprint_r>
1a004318:	2800      	cmp	r0, #0
1a00431a:	f47f a9e0 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a00431e:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a004322:	af2b      	add	r7, sp, #172	; 0xac
1a004324:	e65b      	b.n	1a003fde <_svfprintf_r+0xabe>
1a004326:	aa28      	add	r2, sp, #160	; 0xa0
1a004328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00432c:	f002 fbc0 	bl	1a006ab0 <__ssprint_r>
1a004330:	2800      	cmp	r0, #0
1a004332:	f47f a9d4 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004336:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00433a:	af2b      	add	r7, sp, #172	; 0xac
1a00433c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00433e:	e65b      	b.n	1a003ff8 <_svfprintf_r+0xad8>
1a004340:	9b02      	ldr	r3, [sp, #8]
1a004342:	07db      	lsls	r3, r3, #31
1a004344:	f53f ad72 	bmi.w	1a003e2c <_svfprintf_r+0x90c>
1a004348:	f7ff bbd6 	b.w	1a003af8 <_svfprintf_r+0x5d8>
1a00434c:	ae54      	add	r6, sp, #336	; 0x150
1a00434e:	e4d1      	b.n	1a003cf4 <_svfprintf_r+0x7d4>
1a004350:	9b02      	ldr	r3, [sp, #8]
1a004352:	059f      	lsls	r7, r3, #22
1a004354:	f100 831c 	bmi.w	1a004990 <_svfprintf_r+0x1470>
1a004358:	2500      	movs	r5, #0
1a00435a:	f7ff b9df 	b.w	1a00371c <_svfprintf_r+0x1fc>
1a00435e:	9904      	ldr	r1, [sp, #16]
1a004360:	6812      	ldr	r2, [r2, #0]
1a004362:	9309      	str	r3, [sp, #36]	; 0x24
1a004364:	17cd      	asrs	r5, r1, #31
1a004366:	4608      	mov	r0, r1
1a004368:	4629      	mov	r1, r5
1a00436a:	e9c2 0100 	strd	r0, r1, [r2]
1a00436e:	465e      	mov	r6, fp
1a004370:	f7ff ba76 	b.w	1a003860 <_svfprintf_r+0x340>
1a004374:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004376:	1d1a      	adds	r2, r3, #4
1a004378:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00437a:	9209      	str	r2, [sp, #36]	; 0x24
1a00437c:	681c      	ldr	r4, [r3, #0]
1a00437e:	2500      	movs	r5, #0
1a004380:	2301      	movs	r3, #1
1a004382:	f7ff ba23 	b.w	1a0037cc <_svfprintf_r+0x2ac>
1a004386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00438a:	4602      	mov	r2, r0
1a00438c:	460b      	mov	r3, r1
1a00438e:	f7fe f93b 	bl	1a002608 <__aeabi_dcmpun>
1a004392:	2800      	cmp	r0, #0
1a004394:	f040 8528 	bne.w	1a004de8 <_svfprintf_r+0x18c8>
1a004398:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a00439c:	f000 850d 	beq.w	1a004dba <_svfprintf_r+0x189a>
1a0043a0:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a0043a4:	f000 83e9 	beq.w	1a004b7a <_svfprintf_r+0x165a>
1a0043a8:	f028 0320 	bic.w	r3, r8, #32
1a0043ac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0043b0:	9303      	str	r3, [sp, #12]
1a0043b2:	f000 8307 	beq.w	1a0049c4 <_svfprintf_r+0x14a4>
1a0043b6:	2b47      	cmp	r3, #71	; 0x47
1a0043b8:	d104      	bne.n	1a0043c4 <_svfprintf_r+0xea4>
1a0043ba:	f1ba 0f00 	cmp.w	sl, #0
1a0043be:	bf08      	it	eq
1a0043c0:	f04f 0a01 	moveq.w	sl, #1
1a0043c4:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a0043c8:	9902      	ldr	r1, [sp, #8]
1a0043ca:	2d00      	cmp	r5, #0
1a0043cc:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a0043d0:	f2c0 8476 	blt.w	1a004cc0 <_svfprintf_r+0x17a0>
1a0043d4:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a0043d8:	2300      	movs	r3, #0
1a0043da:	931e      	str	r3, [sp, #120]	; 0x78
1a0043dc:	910a      	str	r1, [sp, #40]	; 0x28
1a0043de:	9308      	str	r3, [sp, #32]
1a0043e0:	9202      	str	r2, [sp, #8]
1a0043e2:	9b03      	ldr	r3, [sp, #12]
1a0043e4:	2b46      	cmp	r3, #70	; 0x46
1a0043e6:	f000 837c 	beq.w	1a004ae2 <_svfprintf_r+0x15c2>
1a0043ea:	2b45      	cmp	r3, #69	; 0x45
1a0043ec:	f000 84d4 	beq.w	1a004d98 <_svfprintf_r+0x1878>
1a0043f0:	aa26      	add	r2, sp, #152	; 0x98
1a0043f2:	ab23      	add	r3, sp, #140	; 0x8c
1a0043f4:	e9cd 3200 	strd	r3, r2, [sp]
1a0043f8:	2102      	movs	r1, #2
1a0043fa:	ab22      	add	r3, sp, #136	; 0x88
1a0043fc:	4652      	mov	r2, sl
1a0043fe:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004402:	9806      	ldr	r0, [sp, #24]
1a004404:	f000 fe3c 	bl	1a005080 <_dtoa_r>
1a004408:	9b03      	ldr	r3, [sp, #12]
1a00440a:	2b47      	cmp	r3, #71	; 0x47
1a00440c:	4606      	mov	r6, r0
1a00440e:	f040 858e 	bne.w	1a004f2e <_svfprintf_r+0x1a0e>
1a004412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004414:	07db      	lsls	r3, r3, #31
1a004416:	f100 847b 	bmi.w	1a004d10 <_svfprintf_r+0x17f0>
1a00441a:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a00441c:	1bbb      	subs	r3, r7, r6
1a00441e:	9312      	str	r3, [sp, #72]	; 0x48
1a004420:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004422:	930e      	str	r3, [sp, #56]	; 0x38
1a004424:	9b03      	ldr	r3, [sp, #12]
1a004426:	2b47      	cmp	r3, #71	; 0x47
1a004428:	f000 82ee 	beq.w	1a004a08 <_svfprintf_r+0x14e8>
1a00442c:	9b03      	ldr	r3, [sp, #12]
1a00442e:	2b46      	cmp	r3, #70	; 0x46
1a004430:	f000 8380 	beq.w	1a004b34 <_svfprintf_r+0x1614>
1a004434:	9903      	ldr	r1, [sp, #12]
1a004436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004438:	2941      	cmp	r1, #65	; 0x41
1a00443a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00443e:	fa5f f388 	uxtb.w	r3, r8
1a004442:	bf03      	ittte	eq
1a004444:	330f      	addeq	r3, #15
1a004446:	b2db      	uxtbeq	r3, r3
1a004448:	2101      	moveq	r1, #1
1a00444a:	2100      	movne	r1, #0
1a00444c:	2a00      	cmp	r2, #0
1a00444e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a004452:	bfb8      	it	lt
1a004454:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a004456:	9222      	str	r2, [sp, #136]	; 0x88
1a004458:	bfb6      	itet	lt
1a00445a:	f1c3 0201 	rsblt	r2, r3, #1
1a00445e:	232b      	movge	r3, #43	; 0x2b
1a004460:	232d      	movlt	r3, #45	; 0x2d
1a004462:	2a09      	cmp	r2, #9
1a004464:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a004468:	f340 84ae 	ble.w	1a004dc8 <_svfprintf_r+0x18a8>
1a00446c:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a004470:	4620      	mov	r0, r4
1a004472:	4d2c      	ldr	r5, [pc, #176]	; (1a004524 <_svfprintf_r+0x1004>)
1a004474:	e001      	b.n	1a00447a <_svfprintf_r+0xf5a>
1a004476:	4608      	mov	r0, r1
1a004478:	461a      	mov	r2, r3
1a00447a:	fb85 3102 	smull	r3, r1, r5, r2
1a00447e:	17d3      	asrs	r3, r2, #31
1a004480:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a004484:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004488:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a00448c:	3130      	adds	r1, #48	; 0x30
1a00448e:	2a63      	cmp	r2, #99	; 0x63
1a004490:	f800 1c01 	strb.w	r1, [r0, #-1]
1a004494:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a004498:	dced      	bgt.n	1a004476 <_svfprintf_r+0xf56>
1a00449a:	3330      	adds	r3, #48	; 0x30
1a00449c:	1e82      	subs	r2, r0, #2
1a00449e:	b2db      	uxtb	r3, r3
1a0044a0:	4294      	cmp	r4, r2
1a0044a2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0044a6:	f240 8545 	bls.w	1a004f34 <_svfprintf_r+0x1a14>
1a0044aa:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a0044ae:	e001      	b.n	1a0044b4 <_svfprintf_r+0xf94>
1a0044b0:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0044b4:	f802 3b01 	strb.w	r3, [r2], #1
1a0044b8:	428c      	cmp	r4, r1
1a0044ba:	d1f9      	bne.n	1a0044b0 <_svfprintf_r+0xf90>
1a0044bc:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a0044c0:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a0044c4:	1a1b      	subs	r3, r3, r0
1a0044c6:	4413      	add	r3, r2
1a0044c8:	aa24      	add	r2, sp, #144	; 0x90
1a0044ca:	1a9b      	subs	r3, r3, r2
1a0044cc:	9316      	str	r3, [sp, #88]	; 0x58
1a0044ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0044d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a0044d2:	2b01      	cmp	r3, #1
1a0044d4:	eb03 0702 	add.w	r7, r3, r2
1a0044d8:	f340 84ee 	ble.w	1a004eb8 <_svfprintf_r+0x1998>
1a0044dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0044de:	441f      	add	r7, r3
1a0044e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0044e2:	2200      	movs	r2, #0
1a0044e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a0044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a0044ec:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a0044f0:	9302      	str	r3, [sp, #8]
1a0044f2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a0044f6:	920c      	str	r2, [sp, #48]	; 0x30
1a0044f8:	9303      	str	r3, [sp, #12]
1a0044fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a0044fc:	2b00      	cmp	r3, #0
1a0044fe:	f040 82aa 	bne.w	1a004a56 <_svfprintf_r+0x1536>
1a004502:	469a      	mov	sl, r3
1a004504:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004508:	f7ff b9ea 	b.w	1a0038e0 <_svfprintf_r+0x3c0>
1a00450c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00450e:	1d1a      	adds	r2, r3, #4
1a004510:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004512:	9209      	str	r2, [sp, #36]	; 0x24
1a004514:	681c      	ldr	r4, [r3, #0]
1a004516:	17e5      	asrs	r5, r4, #31
1a004518:	4622      	mov	r2, r4
1a00451a:	462b      	mov	r3, r5
1a00451c:	f7ff ba0f 	b.w	1a00393e <_svfprintf_r+0x41e>
1a004520:	1a0070ac 	.word	0x1a0070ac
1a004524:	66666667 	.word	0x66666667
1a004528:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00452a:	1d1a      	adds	r2, r3, #4
1a00452c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00452e:	9209      	str	r2, [sp, #36]	; 0x24
1a004530:	681c      	ldr	r4, [r3, #0]
1a004532:	2500      	movs	r5, #0
1a004534:	f7ff b9e8 	b.w	1a003908 <_svfprintf_r+0x3e8>
1a004538:	4252      	negs	r2, r2
1a00453a:	9205      	str	r2, [sp, #20]
1a00453c:	9309      	str	r3, [sp, #36]	; 0x24
1a00453e:	f7ff b925 	b.w	1a00378c <_svfprintf_r+0x26c>
1a004542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a004546:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00454a:	9302      	str	r3, [sp, #8]
1a00454c:	f10b 0b01 	add.w	fp, fp, #1
1a004550:	f7ff b846 	b.w	1a0035e0 <_svfprintf_r+0xc0>
1a004554:	f043 0320 	orr.w	r3, r3, #32
1a004558:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00455c:	9302      	str	r3, [sp, #8]
1a00455e:	f10b 0b01 	add.w	fp, fp, #1
1a004562:	f7ff b83d 	b.w	1a0035e0 <_svfprintf_r+0xc0>
1a004566:	aa28      	add	r2, sp, #160	; 0xa0
1a004568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00456c:	f002 faa0 	bl	1a006ab0 <__ssprint_r>
1a004570:	2800      	cmp	r0, #0
1a004572:	f47f a8b4 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004576:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004578:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00457c:	e466      	b.n	1a003e4c <_svfprintf_r+0x92c>
1a00457e:	2140      	movs	r1, #64	; 0x40
1a004580:	9806      	ldr	r0, [sp, #24]
1a004582:	f7fe fb6f 	bl	1a002c64 <_malloc_r>
1a004586:	9b07      	ldr	r3, [sp, #28]
1a004588:	6018      	str	r0, [r3, #0]
1a00458a:	6118      	str	r0, [r3, #16]
1a00458c:	2800      	cmp	r0, #0
1a00458e:	f000 84c6 	beq.w	1a004f1e <_svfprintf_r+0x19fe>
1a004592:	9a07      	ldr	r2, [sp, #28]
1a004594:	2340      	movs	r3, #64	; 0x40
1a004596:	6153      	str	r3, [r2, #20]
1a004598:	f7fe bfd9 	b.w	1a00354e <_svfprintf_r+0x2e>
1a00459c:	4657      	mov	r7, sl
1a00459e:	2f06      	cmp	r7, #6
1a0045a0:	bf28      	it	cs
1a0045a2:	2706      	movcs	r7, #6
1a0045a4:	46b2      	mov	sl, r6
1a0045a6:	960c      	str	r6, [sp, #48]	; 0x30
1a0045a8:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
1a0045ac:	9608      	str	r6, [sp, #32]
1a0045ae:	4632      	mov	r2, r6
1a0045b0:	9703      	str	r7, [sp, #12]
1a0045b2:	9409      	str	r4, [sp, #36]	; 0x24
1a0045b4:	4ebe      	ldr	r6, [pc, #760]	; (1a0048b0 <_svfprintf_r+0x1390>)
1a0045b6:	f7ff b993 	b.w	1a0038e0 <_svfprintf_r+0x3c0>
1a0045ba:	2d10      	cmp	r5, #16
1a0045bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0045be:	4bbd      	ldr	r3, [pc, #756]	; (1a0048b4 <_svfprintf_r+0x1394>)
1a0045c0:	f340 81b8 	ble.w	1a004934 <_svfprintf_r+0x1414>
1a0045c4:	4619      	mov	r1, r3
1a0045c6:	2710      	movs	r7, #16
1a0045c8:	4623      	mov	r3, r4
1a0045ca:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a0045ce:	460c      	mov	r4, r1
1a0045d0:	e005      	b.n	1a0045de <_svfprintf_r+0x10be>
1a0045d2:	f109 0908 	add.w	r9, r9, #8
1a0045d6:	3d10      	subs	r5, #16
1a0045d8:	2d10      	cmp	r5, #16
1a0045da:	f340 81a8 	ble.w	1a00492e <_svfprintf_r+0x140e>
1a0045de:	3201      	adds	r2, #1
1a0045e0:	3310      	adds	r3, #16
1a0045e2:	2a07      	cmp	r2, #7
1a0045e4:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a0045e8:	e9c9 4700 	strd	r4, r7, [r9]
1a0045ec:	ddf1      	ble.n	1a0045d2 <_svfprintf_r+0x10b2>
1a0045ee:	aa28      	add	r2, sp, #160	; 0xa0
1a0045f0:	4651      	mov	r1, sl
1a0045f2:	4640      	mov	r0, r8
1a0045f4:	f002 fa5c 	bl	1a006ab0 <__ssprint_r>
1a0045f8:	2800      	cmp	r0, #0
1a0045fa:	f47f a870 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0045fe:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a004602:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004606:	e7e6      	b.n	1a0045d6 <_svfprintf_r+0x10b6>
1a004608:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00460a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a00460e:	18f3      	adds	r3, r6, r3
1a004610:	930a      	str	r3, [sp, #40]	; 0x28
1a004612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004614:	960e      	str	r6, [sp, #56]	; 0x38
1a004616:	464a      	mov	r2, r9
1a004618:	4656      	mov	r6, sl
1a00461a:	4fa6      	ldr	r7, [pc, #664]	; (1a0048b4 <_svfprintf_r+0x1394>)
1a00461c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004620:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
1a004624:	4621      	mov	r1, r4
1a004626:	e9dd b906 	ldrd	fp, r9, [sp, #24]
1a00462a:	2b00      	cmp	r3, #0
1a00462c:	d033      	beq.n	1a004696 <_svfprintf_r+0x1176>
1a00462e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004630:	2b00      	cmp	r3, #0
1a004632:	d134      	bne.n	1a00469e <_svfprintf_r+0x117e>
1a004634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004636:	3b01      	subs	r3, #1
1a004638:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a00463c:	930f      	str	r3, [sp, #60]	; 0x3c
1a00463e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004640:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a004642:	6010      	str	r0, [r2, #0]
1a004644:	3301      	adds	r3, #1
1a004646:	4451      	add	r1, sl
1a004648:	2b07      	cmp	r3, #7
1a00464a:	912a      	str	r1, [sp, #168]	; 0xa8
1a00464c:	f8c2 a004 	str.w	sl, [r2, #4]
1a004650:	9329      	str	r3, [sp, #164]	; 0xa4
1a004652:	dc66      	bgt.n	1a004722 <_svfprintf_r+0x1202>
1a004654:	3208      	adds	r2, #8
1a004656:	980a      	ldr	r0, [sp, #40]	; 0x28
1a004658:	f898 3000 	ldrb.w	r3, [r8]
1a00465c:	1b85      	subs	r5, r0, r6
1a00465e:	429d      	cmp	r5, r3
1a004660:	bfa8      	it	ge
1a004662:	461d      	movge	r5, r3
1a004664:	2d00      	cmp	r5, #0
1a004666:	dd0c      	ble.n	1a004682 <_svfprintf_r+0x1162>
1a004668:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a00466a:	6016      	str	r6, [r2, #0]
1a00466c:	3301      	adds	r3, #1
1a00466e:	4429      	add	r1, r5
1a004670:	2b07      	cmp	r3, #7
1a004672:	912a      	str	r1, [sp, #168]	; 0xa8
1a004674:	6055      	str	r5, [r2, #4]
1a004676:	9329      	str	r3, [sp, #164]	; 0xa4
1a004678:	f300 80b8 	bgt.w	1a0047ec <_svfprintf_r+0x12cc>
1a00467c:	f898 3000 	ldrb.w	r3, [r8]
1a004680:	3208      	adds	r2, #8
1a004682:	2d00      	cmp	r5, #0
1a004684:	bfac      	ite	ge
1a004686:	1b5d      	subge	r5, r3, r5
1a004688:	461d      	movlt	r5, r3
1a00468a:	2d00      	cmp	r5, #0
1a00468c:	dc0b      	bgt.n	1a0046a6 <_svfprintf_r+0x1186>
1a00468e:	441e      	add	r6, r3
1a004690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004692:	2b00      	cmp	r3, #0
1a004694:	d1cb      	bne.n	1a00462e <_svfprintf_r+0x110e>
1a004696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004698:	2b00      	cmp	r3, #0
1a00469a:	f000 81a6 	beq.w	1a0049ea <_svfprintf_r+0x14ca>
1a00469e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0046a0:	3b01      	subs	r3, #1
1a0046a2:	930c      	str	r3, [sp, #48]	; 0x30
1a0046a4:	e7cb      	b.n	1a00463e <_svfprintf_r+0x111e>
1a0046a6:	2d10      	cmp	r5, #16
1a0046a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0046aa:	dd1c      	ble.n	1a0046e6 <_svfprintf_r+0x11c6>
1a0046ac:	2410      	movs	r4, #16
1a0046ae:	e004      	b.n	1a0046ba <_svfprintf_r+0x119a>
1a0046b0:	3d10      	subs	r5, #16
1a0046b2:	2d10      	cmp	r5, #16
1a0046b4:	f102 0208 	add.w	r2, r2, #8
1a0046b8:	dd15      	ble.n	1a0046e6 <_svfprintf_r+0x11c6>
1a0046ba:	3001      	adds	r0, #1
1a0046bc:	3110      	adds	r1, #16
1a0046be:	2807      	cmp	r0, #7
1a0046c0:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0046c4:	e9c2 7400 	strd	r7, r4, [r2]
1a0046c8:	ddf2      	ble.n	1a0046b0 <_svfprintf_r+0x1190>
1a0046ca:	aa28      	add	r2, sp, #160	; 0xa0
1a0046cc:	4649      	mov	r1, r9
1a0046ce:	4658      	mov	r0, fp
1a0046d0:	f002 f9ee 	bl	1a006ab0 <__ssprint_r>
1a0046d4:	2800      	cmp	r0, #0
1a0046d6:	f47f a802 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0046da:	3d10      	subs	r5, #16
1a0046dc:	2d10      	cmp	r5, #16
1a0046de:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a0046e2:	aa2b      	add	r2, sp, #172	; 0xac
1a0046e4:	dce9      	bgt.n	1a0046ba <_svfprintf_r+0x119a>
1a0046e6:	3001      	adds	r0, #1
1a0046e8:	4429      	add	r1, r5
1a0046ea:	2807      	cmp	r0, #7
1a0046ec:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a0046f0:	e9c2 7500 	strd	r7, r5, [r2]
1a0046f4:	f300 81b6 	bgt.w	1a004a64 <_svfprintf_r+0x1544>
1a0046f8:	f898 3000 	ldrb.w	r3, [r8]
1a0046fc:	3208      	adds	r2, #8
1a0046fe:	441e      	add	r6, r3
1a004700:	e7c6      	b.n	1a004690 <_svfprintf_r+0x1170>
1a004702:	aa28      	add	r2, sp, #160	; 0xa0
1a004704:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004708:	f002 f9d2 	bl	1a006ab0 <__ssprint_r>
1a00470c:	2800      	cmp	r0, #0
1a00470e:	f47e afe6 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004712:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004716:	3301      	adds	r3, #1
1a004718:	930a      	str	r3, [sp, #40]	; 0x28
1a00471a:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
1a00471e:	af2b      	add	r7, sp, #172	; 0xac
1a004720:	e48f      	b.n	1a004042 <_svfprintf_r+0xb22>
1a004722:	aa28      	add	r2, sp, #160	; 0xa0
1a004724:	4649      	mov	r1, r9
1a004726:	4658      	mov	r0, fp
1a004728:	f002 f9c2 	bl	1a006ab0 <__ssprint_r>
1a00472c:	2800      	cmp	r0, #0
1a00472e:	f47e afd6 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004732:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a004734:	aa2b      	add	r2, sp, #172	; 0xac
1a004736:	e78e      	b.n	1a004656 <_svfprintf_r+0x1136>
1a004738:	aa28      	add	r2, sp, #160	; 0xa0
1a00473a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00473e:	f002 f9b7 	bl	1a006ab0 <__ssprint_r>
1a004742:	2800      	cmp	r0, #0
1a004744:	f47e afcb 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004748:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00474c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00474e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004752:	f7ff b996 	b.w	1a003a82 <_svfprintf_r+0x562>
1a004756:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004758:	4957      	ldr	r1, [pc, #348]	; (1a0048b8 <_svfprintf_r+0x1398>)
1a00475a:	f8c9 1000 	str.w	r1, [r9]
1a00475e:	3201      	adds	r2, #1
1a004760:	3401      	adds	r4, #1
1a004762:	2101      	movs	r1, #1
1a004764:	2a07      	cmp	r2, #7
1a004766:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00476a:	f8c9 1004 	str.w	r1, [r9, #4]
1a00476e:	f300 80f1 	bgt.w	1a004954 <_svfprintf_r+0x1434>
1a004772:	f109 0908 	add.w	r9, r9, #8
1a004776:	2b00      	cmp	r3, #0
1a004778:	d15a      	bne.n	1a004830 <_svfprintf_r+0x1310>
1a00477a:	9b02      	ldr	r3, [sp, #8]
1a00477c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00477e:	f003 0301 	and.w	r3, r3, #1
1a004782:	4313      	orrs	r3, r2
1a004784:	f43f a9b8 	beq.w	1a003af8 <_svfprintf_r+0x5d8>
1a004788:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a00478a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00478c:	f8c9 3000 	str.w	r3, [r9]
1a004790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004792:	f8c9 3004 	str.w	r3, [r9, #4]
1a004796:	3201      	adds	r2, #1
1a004798:	441c      	add	r4, r3
1a00479a:	2a07      	cmp	r2, #7
1a00479c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00479e:	9229      	str	r2, [sp, #164]	; 0xa4
1a0047a0:	f300 8102 	bgt.w	1a0049a8 <_svfprintf_r+0x1488>
1a0047a4:	f109 0908 	add.w	r9, r9, #8
1a0047a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0047aa:	3201      	adds	r2, #1
1a0047ac:	441c      	add	r4, r3
1a0047ae:	2a07      	cmp	r2, #7
1a0047b0:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0047b4:	e9c9 6300 	strd	r6, r3, [r9]
1a0047b8:	f77f a99c 	ble.w	1a003af4 <_svfprintf_r+0x5d4>
1a0047bc:	e44c      	b.n	1a004058 <_svfprintf_r+0xb38>
1a0047be:	aa28      	add	r2, sp, #160	; 0xa0
1a0047c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0047c4:	f002 f974 	bl	1a006ab0 <__ssprint_r>
1a0047c8:	2800      	cmp	r0, #0
1a0047ca:	f47e af88 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0047ce:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0047d2:	f7ff bb25 	b.w	1a003e20 <_svfprintf_r+0x900>
1a0047d6:	4653      	mov	r3, sl
1a0047d8:	3201      	adds	r2, #1
1a0047da:	442c      	add	r4, r5
1a0047dc:	2a07      	cmp	r2, #7
1a0047de:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0047e2:	e9c9 3500 	strd	r3, r5, [r9]
1a0047e6:	f77f a985 	ble.w	1a003af4 <_svfprintf_r+0x5d4>
1a0047ea:	e435      	b.n	1a004058 <_svfprintf_r+0xb38>
1a0047ec:	aa28      	add	r2, sp, #160	; 0xa0
1a0047ee:	4649      	mov	r1, r9
1a0047f0:	4658      	mov	r0, fp
1a0047f2:	f002 f95d 	bl	1a006ab0 <__ssprint_r>
1a0047f6:	2800      	cmp	r0, #0
1a0047f8:	f47e af71 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0047fc:	f898 3000 	ldrb.w	r3, [r8]
1a004800:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a004802:	aa2b      	add	r2, sp, #172	; 0xac
1a004804:	e73d      	b.n	1a004682 <_svfprintf_r+0x1162>
1a004806:	aa28      	add	r2, sp, #160	; 0xa0
1a004808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00480c:	f002 f950 	bl	1a006ab0 <__ssprint_r>
1a004810:	2800      	cmp	r0, #0
1a004812:	f47e af64 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004816:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004818:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00481c:	f7ff b955 	b.w	1a003aca <_svfprintf_r+0x5aa>
1a004820:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004822:	6812      	ldr	r2, [r2, #0]
1a004824:	9309      	str	r3, [sp, #36]	; 0x24
1a004826:	9b04      	ldr	r3, [sp, #16]
1a004828:	6013      	str	r3, [r2, #0]
1a00482a:	465e      	mov	r6, fp
1a00482c:	f7ff b818 	b.w	1a003860 <_svfprintf_r+0x340>
1a004830:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004832:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004834:	f8c9 1000 	str.w	r1, [r9]
1a004838:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00483a:	f8c9 1004 	str.w	r1, [r9, #4]
1a00483e:	3201      	adds	r2, #1
1a004840:	440c      	add	r4, r1
1a004842:	2a07      	cmp	r2, #7
1a004844:	942a      	str	r4, [sp, #168]	; 0xa8
1a004846:	9229      	str	r2, [sp, #164]	; 0xa4
1a004848:	f300 80ae 	bgt.w	1a0049a8 <_svfprintf_r+0x1488>
1a00484c:	f109 0908 	add.w	r9, r9, #8
1a004850:	2b00      	cmp	r3, #0
1a004852:	daa9      	bge.n	1a0047a8 <_svfprintf_r+0x1288>
1a004854:	425d      	negs	r5, r3
1a004856:	3310      	adds	r3, #16
1a004858:	4b16      	ldr	r3, [pc, #88]	; (1a0048b4 <_svfprintf_r+0x1394>)
1a00485a:	f280 8287 	bge.w	1a004d6c <_svfprintf_r+0x184c>
1a00485e:	4619      	mov	r1, r3
1a004860:	2710      	movs	r7, #16
1a004862:	4623      	mov	r3, r4
1a004864:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a004868:	460c      	mov	r4, r1
1a00486a:	e005      	b.n	1a004878 <_svfprintf_r+0x1358>
1a00486c:	f109 0908 	add.w	r9, r9, #8
1a004870:	3d10      	subs	r5, #16
1a004872:	2d10      	cmp	r5, #16
1a004874:	f340 8277 	ble.w	1a004d66 <_svfprintf_r+0x1846>
1a004878:	3201      	adds	r2, #1
1a00487a:	3310      	adds	r3, #16
1a00487c:	2a07      	cmp	r2, #7
1a00487e:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a004882:	e9c9 4700 	strd	r4, r7, [r9]
1a004886:	ddf1      	ble.n	1a00486c <_svfprintf_r+0x134c>
1a004888:	aa28      	add	r2, sp, #160	; 0xa0
1a00488a:	4651      	mov	r1, sl
1a00488c:	4640      	mov	r0, r8
1a00488e:	f002 f90f 	bl	1a006ab0 <__ssprint_r>
1a004892:	2800      	cmp	r0, #0
1a004894:	f47e af23 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004898:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a00489c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0048a0:	e7e6      	b.n	1a004870 <_svfprintf_r+0x1350>
1a0048a2:	4630      	mov	r0, r6
1a0048a4:	f7fe fdcc 	bl	1a003440 <strlen>
1a0048a8:	46aa      	mov	sl, r5
1a0048aa:	4607      	mov	r7, r0
1a0048ac:	f7ff b80c 	b.w	1a0038c8 <_svfprintf_r+0x3a8>
1a0048b0:	1a007090 	.word	0x1a007090
1a0048b4:	1a0070ac 	.word	0x1a0070ac
1a0048b8:	1a007098 	.word	0x1a007098
1a0048bc:	4622      	mov	r2, r4
1a0048be:	461c      	mov	r4, r3
1a0048c0:	4613      	mov	r3, r2
1a0048c2:	462a      	mov	r2, r5
1a0048c4:	3201      	adds	r2, #1
1a0048c6:	920a      	str	r2, [sp, #40]	; 0x28
1a0048c8:	f107 0208 	add.w	r2, r7, #8
1a0048cc:	e9c7 3800 	strd	r3, r8, [r7]
1a0048d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0048d2:	9329      	str	r3, [sp, #164]	; 0xa4
1a0048d4:	4444      	add	r4, r8
1a0048d6:	2b07      	cmp	r3, #7
1a0048d8:	942a      	str	r4, [sp, #168]	; 0xa8
1a0048da:	f73f af12 	bgt.w	1a004702 <_svfprintf_r+0x11e2>
1a0048de:	3301      	adds	r3, #1
1a0048e0:	930a      	str	r3, [sp, #40]	; 0x28
1a0048e2:	f102 0908 	add.w	r9, r2, #8
1a0048e6:	4617      	mov	r7, r2
1a0048e8:	f7ff bbab 	b.w	1a004042 <_svfprintf_r+0xb22>
1a0048ec:	9f02      	ldr	r7, [sp, #8]
1a0048ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0048f0:	f417 7f00 	tst.w	r7, #512	; 0x200
1a0048f4:	d044      	beq.n	1a004980 <_svfprintf_r+0x1460>
1a0048f6:	f993 4000 	ldrsb.w	r4, [r3]
1a0048fa:	9209      	str	r2, [sp, #36]	; 0x24
1a0048fc:	17e5      	asrs	r5, r4, #31
1a0048fe:	4622      	mov	r2, r4
1a004900:	462b      	mov	r3, r5
1a004902:	f7ff b81c 	b.w	1a00393e <_svfprintf_r+0x41e>
1a004906:	9f02      	ldr	r7, [sp, #8]
1a004908:	05b9      	lsls	r1, r7, #22
1a00490a:	bf47      	ittee	mi
1a00490c:	9209      	strmi	r2, [sp, #36]	; 0x24
1a00490e:	b2e4      	uxtbmi	r4, r4
1a004910:	9f02      	ldrpl	r7, [sp, #8]
1a004912:	9209      	strpl	r2, [sp, #36]	; 0x24
1a004914:	2500      	movs	r5, #0
1a004916:	f7fe bff7 	b.w	1a003908 <_svfprintf_r+0x3e8>
1a00491a:	9f02      	ldr	r7, [sp, #8]
1a00491c:	9209      	str	r2, [sp, #36]	; 0x24
1a00491e:	05b8      	lsls	r0, r7, #22
1a004920:	bf4c      	ite	mi
1a004922:	b2e4      	uxtbmi	r4, r4
1a004924:	9f02      	ldrpl	r7, [sp, #8]
1a004926:	2500      	movs	r5, #0
1a004928:	2301      	movs	r3, #1
1a00492a:	f7fe bf4f 	b.w	1a0037cc <_svfprintf_r+0x2ac>
1a00492e:	4621      	mov	r1, r4
1a004930:	461c      	mov	r4, r3
1a004932:	460b      	mov	r3, r1
1a004934:	3201      	adds	r2, #1
1a004936:	442c      	add	r4, r5
1a004938:	2a07      	cmp	r2, #7
1a00493a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00493e:	e9c9 3500 	strd	r3, r5, [r9]
1a004942:	dc42      	bgt.n	1a0049ca <_svfprintf_r+0x14aa>
1a004944:	f109 0908 	add.w	r9, r9, #8
1a004948:	e424      	b.n	1a004194 <_svfprintf_r+0xc74>
1a00494a:	222d      	movs	r2, #45	; 0x2d
1a00494c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a004950:	f7ff b95d 	b.w	1a003c0e <_svfprintf_r+0x6ee>
1a004954:	aa28      	add	r2, sp, #160	; 0xa0
1a004956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00495a:	f002 f8a9 	bl	1a006ab0 <__ssprint_r>
1a00495e:	2800      	cmp	r0, #0
1a004960:	f47e aebd 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004964:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004966:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004968:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00496c:	e703      	b.n	1a004776 <_svfprintf_r+0x1256>
1a00496e:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004970:	18b5      	adds	r5, r6, r2
1a004972:	eba5 050a 	sub.w	r5, r5, sl
1a004976:	1ad3      	subs	r3, r2, r3
1a004978:	429d      	cmp	r5, r3
1a00497a:	bfa8      	it	ge
1a00497c:	461d      	movge	r5, r3
1a00497e:	e440      	b.n	1a004202 <_svfprintf_r+0xce2>
1a004980:	681c      	ldr	r4, [r3, #0]
1a004982:	9209      	str	r2, [sp, #36]	; 0x24
1a004984:	17e5      	asrs	r5, r4, #31
1a004986:	9f02      	ldr	r7, [sp, #8]
1a004988:	4622      	mov	r2, r4
1a00498a:	462b      	mov	r3, r5
1a00498c:	f7fe bfd7 	b.w	1a00393e <_svfprintf_r+0x41e>
1a004990:	b2e4      	uxtb	r4, r4
1a004992:	2500      	movs	r5, #0
1a004994:	f7fe bec2 	b.w	1a00371c <_svfprintf_r+0x1fc>
1a004998:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00499a:	9309      	str	r3, [sp, #36]	; 0x24
1a00499c:	6812      	ldr	r2, [r2, #0]
1a00499e:	9b04      	ldr	r3, [sp, #16]
1a0049a0:	8013      	strh	r3, [r2, #0]
1a0049a2:	465e      	mov	r6, fp
1a0049a4:	f7fe bf5c 	b.w	1a003860 <_svfprintf_r+0x340>
1a0049a8:	aa28      	add	r2, sp, #160	; 0xa0
1a0049aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0049ae:	f002 f87f 	bl	1a006ab0 <__ssprint_r>
1a0049b2:	2800      	cmp	r0, #0
1a0049b4:	f47e ae93 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0049b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0049ba:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0049be:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0049c2:	e745      	b.n	1a004850 <_svfprintf_r+0x1330>
1a0049c4:	f04f 0a06 	mov.w	sl, #6
1a0049c8:	e4fc      	b.n	1a0043c4 <_svfprintf_r+0xea4>
1a0049ca:	aa28      	add	r2, sp, #160	; 0xa0
1a0049cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0049d0:	f002 f86e 	bl	1a006ab0 <__ssprint_r>
1a0049d4:	2800      	cmp	r0, #0
1a0049d6:	f47e ae82 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a0049da:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0049dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0049e0:	f7ff bbd8 	b.w	1a004194 <_svfprintf_r+0xc74>
1a0049e4:	9f02      	ldr	r7, [sp, #8]
1a0049e6:	f7ff b97e 	b.w	1a003ce6 <_svfprintf_r+0x7c6>
1a0049ea:	46b2      	mov	sl, r6
1a0049ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0049ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a0049f0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a0049f4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a0049f8:	18f3      	adds	r3, r6, r3
1a0049fa:	459a      	cmp	sl, r3
1a0049fc:	460c      	mov	r4, r1
1a0049fe:	4691      	mov	r9, r2
1a004a00:	bf28      	it	cs
1a004a02:	469a      	movcs	sl, r3
1a004a04:	f7ff bbcd 	b.w	1a0041a2 <_svfprintf_r+0xc82>
1a004a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004a0a:	1cda      	adds	r2, r3, #3
1a004a0c:	db01      	blt.n	1a004a12 <_svfprintf_r+0x14f2>
1a004a0e:	459a      	cmp	sl, r3
1a004a10:	da05      	bge.n	1a004a1e <_svfprintf_r+0x14fe>
1a004a12:	f1a8 0802 	sub.w	r8, r8, #2
1a004a16:	f028 0320 	bic.w	r3, r8, #32
1a004a1a:	9303      	str	r3, [sp, #12]
1a004a1c:	e50a      	b.n	1a004434 <_svfprintf_r+0xf14>
1a004a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004a20:	4619      	mov	r1, r3
1a004a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004a24:	4299      	cmp	r1, r3
1a004a26:	f300 8159 	bgt.w	1a004cdc <_svfprintf_r+0x17bc>
1a004a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004a2c:	07d7      	lsls	r7, r2, #31
1a004a2e:	f140 81c9 	bpl.w	1a004dc4 <_svfprintf_r+0x18a4>
1a004a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a004a34:	189f      	adds	r7, r3, r2
1a004a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004a38:	055d      	lsls	r5, r3, #21
1a004a3a:	d503      	bpl.n	1a004a44 <_svfprintf_r+0x1524>
1a004a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004a3e:	2b00      	cmp	r3, #0
1a004a40:	f300 81f6 	bgt.w	1a004e30 <_svfprintf_r+0x1910>
1a004a44:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004a48:	9303      	str	r3, [sp, #12]
1a004a4a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004a4e:	2300      	movs	r3, #0
1a004a50:	930c      	str	r3, [sp, #48]	; 0x30
1a004a52:	930f      	str	r3, [sp, #60]	; 0x3c
1a004a54:	e551      	b.n	1a0044fa <_svfprintf_r+0xfda>
1a004a56:	222d      	movs	r2, #45	; 0x2d
1a004a58:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a004a5c:	f04f 0a00 	mov.w	sl, #0
1a004a60:	f7fe bf41 	b.w	1a0038e6 <_svfprintf_r+0x3c6>
1a004a64:	aa28      	add	r2, sp, #160	; 0xa0
1a004a66:	4649      	mov	r1, r9
1a004a68:	4658      	mov	r0, fp
1a004a6a:	f002 f821 	bl	1a006ab0 <__ssprint_r>
1a004a6e:	2800      	cmp	r0, #0
1a004a70:	f47e ae35 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004a74:	f898 3000 	ldrb.w	r3, [r8]
1a004a78:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a004a7a:	aa2b      	add	r2, sp, #172	; 0xac
1a004a7c:	441e      	add	r6, r3
1a004a7e:	e607      	b.n	1a004690 <_svfprintf_r+0x1170>
1a004a80:	aa28      	add	r2, sp, #160	; 0xa0
1a004a82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004a86:	f002 f813 	bl	1a006ab0 <__ssprint_r>
1a004a8a:	2800      	cmp	r0, #0
1a004a8c:	f47e ae27 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004a90:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004a92:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004a96:	f7ff bb75 	b.w	1a004184 <_svfprintf_r+0xc64>
1a004a9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004a9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a004a9e:	1af6      	subs	r6, r6, r3
1a004aa0:	461a      	mov	r2, r3
1a004aa2:	4630      	mov	r0, r6
1a004aa4:	f001 ffca 	bl	1a006a3c <strncpy>
1a004aa8:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004aac:	b10b      	cbz	r3, 1a004ab2 <_svfprintf_r+0x1592>
1a004aae:	f108 0801 	add.w	r8, r8, #1
1a004ab2:	220a      	movs	r2, #10
1a004ab4:	2300      	movs	r3, #0
1a004ab6:	4620      	mov	r0, r4
1a004ab8:	4629      	mov	r1, r5
1a004aba:	f04f 0b00 	mov.w	fp, #0
1a004abe:	f7fd fde1 	bl	1a002684 <__aeabi_uldivmod>
1a004ac2:	f7ff b960 	b.w	1a003d86 <_svfprintf_r+0x866>
1a004ac6:	aa28      	add	r2, sp, #160	; 0xa0
1a004ac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004acc:	f001 fff0 	bl	1a006ab0 <__ssprint_r>
1a004ad0:	2800      	cmp	r0, #0
1a004ad2:	f47e ae04 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004ad6:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004ad8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ada:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004ade:	f7ff bb78 	b.w	1a0041d2 <_svfprintf_r+0xcb2>
1a004ae2:	aa26      	add	r2, sp, #152	; 0x98
1a004ae4:	ab23      	add	r3, sp, #140	; 0x8c
1a004ae6:	e9cd 3200 	strd	r3, r2, [sp]
1a004aea:	2103      	movs	r1, #3
1a004aec:	ab22      	add	r3, sp, #136	; 0x88
1a004aee:	4652      	mov	r2, sl
1a004af0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004af4:	9806      	ldr	r0, [sp, #24]
1a004af6:	f000 fac3 	bl	1a005080 <_dtoa_r>
1a004afa:	7803      	ldrb	r3, [r0, #0]
1a004afc:	2b30      	cmp	r3, #48	; 0x30
1a004afe:	4606      	mov	r6, r0
1a004b00:	f000 81cd 	beq.w	1a004e9e <_svfprintf_r+0x197e>
1a004b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b06:	4453      	add	r3, sl
1a004b08:	18f4      	adds	r4, r6, r3
1a004b0a:	2200      	movs	r2, #0
1a004b0c:	2300      	movs	r3, #0
1a004b0e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a004b12:	f7fd fd47 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004b16:	b108      	cbz	r0, 1a004b1c <_svfprintf_r+0x15fc>
1a004b18:	4627      	mov	r7, r4
1a004b1a:	e47f      	b.n	1a00441c <_svfprintf_r+0xefc>
1a004b1c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a004b1e:	42a7      	cmp	r7, r4
1a004b20:	f4bf ac7c 	bcs.w	1a00441c <_svfprintf_r+0xefc>
1a004b24:	2230      	movs	r2, #48	; 0x30
1a004b26:	1c7b      	adds	r3, r7, #1
1a004b28:	9326      	str	r3, [sp, #152]	; 0x98
1a004b2a:	703a      	strb	r2, [r7, #0]
1a004b2c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a004b2e:	42bc      	cmp	r4, r7
1a004b30:	d8f9      	bhi.n	1a004b26 <_svfprintf_r+0x1606>
1a004b32:	e473      	b.n	1a00441c <_svfprintf_r+0xefc>
1a004b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004b38:	f003 0301 	and.w	r3, r3, #1
1a004b3c:	2a00      	cmp	r2, #0
1a004b3e:	ea43 030a 	orr.w	r3, r3, sl
1a004b42:	f340 81bf 	ble.w	1a004ec4 <_svfprintf_r+0x19a4>
1a004b46:	2b00      	cmp	r3, #0
1a004b48:	f040 819a 	bne.w	1a004e80 <_svfprintf_r+0x1960>
1a004b4c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a004b4e:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004b54:	055a      	lsls	r2, r3, #21
1a004b56:	f100 816d 	bmi.w	1a004e34 <_svfprintf_r+0x1914>
1a004b5a:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004b5e:	9303      	str	r3, [sp, #12]
1a004b60:	e775      	b.n	1a004a4e <_svfprintf_r+0x152e>
1a004b62:	4657      	mov	r7, sl
1a004b64:	f8cd a00c 	str.w	sl, [sp, #12]
1a004b68:	9409      	str	r4, [sp, #36]	; 0x24
1a004b6a:	4682      	mov	sl, r0
1a004b6c:	900c      	str	r0, [sp, #48]	; 0x30
1a004b6e:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a004b72:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004b76:	f7fe beb3 	b.w	1a0038e0 <_svfprintf_r+0x3c0>
1a004b7a:	2330      	movs	r3, #48	; 0x30
1a004b7c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004b80:	2358      	movs	r3, #88	; 0x58
1a004b82:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a004b86:	9b02      	ldr	r3, [sp, #8]
1a004b88:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
1a004b8c:	f043 0302 	orr.w	r3, r3, #2
1a004b90:	930a      	str	r3, [sp, #40]	; 0x28
1a004b92:	f300 80dd 	bgt.w	1a004d50 <_svfprintf_r+0x1830>
1a004b96:	2300      	movs	r3, #0
1a004b98:	9308      	str	r3, [sp, #32]
1a004b9a:	ae3b      	add	r6, sp, #236	; 0xec
1a004b9c:	9a02      	ldr	r2, [sp, #8]
1a004b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004ba0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a004ba4:	9202      	str	r2, [sp, #8]
1a004ba6:	2b00      	cmp	r3, #0
1a004ba8:	f028 0220 	bic.w	r2, r8, #32
1a004bac:	9203      	str	r2, [sp, #12]
1a004bae:	f2c0 808c 	blt.w	1a004cca <_svfprintf_r+0x17aa>
1a004bb2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004bb6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a004bba:	2300      	movs	r3, #0
1a004bbc:	931e      	str	r3, [sp, #120]	; 0x78
1a004bbe:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004bc2:	f000 811d 	beq.w	1a004e00 <_svfprintf_r+0x18e0>
1a004bc6:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004bca:	f47f ac0a 	bne.w	1a0043e2 <_svfprintf_r+0xec2>
1a004bce:	a822      	add	r0, sp, #136	; 0x88
1a004bd0:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004bd4:	f001 fefc 	bl	1a0069d0 <frexp>
1a004bd8:	2200      	movs	r2, #0
1a004bda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004bde:	ec51 0b10 	vmov	r0, r1, d0
1a004be2:	f7fd fa77 	bl	1a0020d4 <__aeabi_dmul>
1a004be6:	2200      	movs	r2, #0
1a004be8:	2300      	movs	r3, #0
1a004bea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004bee:	f7fd fcd9 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004bf2:	b108      	cbz	r0, 1a004bf8 <_svfprintf_r+0x16d8>
1a004bf4:	2301      	movs	r3, #1
1a004bf6:	9322      	str	r3, [sp, #136]	; 0x88
1a004bf8:	4bb6      	ldr	r3, [pc, #728]	; (1a004ed4 <_svfprintf_r+0x19b4>)
1a004bfa:	930b      	str	r3, [sp, #44]	; 0x2c
1a004bfc:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
1a004c00:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
1a004c04:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a004c08:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
1a004c0c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a004c10:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a004c14:	46b2      	mov	sl, r6
1a004c16:	960c      	str	r6, [sp, #48]	; 0x30
1a004c18:	e003      	b.n	1a004c22 <_svfprintf_r+0x1702>
1a004c1a:	f7fd fcc3 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004c1e:	bb20      	cbnz	r0, 1a004c6a <_svfprintf_r+0x174a>
1a004c20:	46ba      	mov	sl, r7
1a004c22:	2200      	movs	r2, #0
1a004c24:	4bac      	ldr	r3, [pc, #688]	; (1a004ed8 <_svfprintf_r+0x19b8>)
1a004c26:	4640      	mov	r0, r8
1a004c28:	4649      	mov	r1, r9
1a004c2a:	f7fd fa53 	bl	1a0020d4 <__aeabi_dmul>
1a004c2e:	4689      	mov	r9, r1
1a004c30:	4680      	mov	r8, r0
1a004c32:	f7fd fcff 	bl	1a002634 <__aeabi_d2iz>
1a004c36:	4606      	mov	r6, r0
1a004c38:	f7fd f9e2 	bl	1a002000 <__aeabi_i2d>
1a004c3c:	4602      	mov	r2, r0
1a004c3e:	460b      	mov	r3, r1
1a004c40:	4640      	mov	r0, r8
1a004c42:	4649      	mov	r1, r9
1a004c44:	f7fd f88e 	bl	1a001d64 <__aeabi_dsub>
1a004c48:	4657      	mov	r7, sl
1a004c4a:	f81b 4006 	ldrb.w	r4, [fp, r6]
1a004c4e:	f807 4b01 	strb.w	r4, [r7], #1
1a004c52:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a004c56:	462c      	mov	r4, r5
1a004c58:	4680      	mov	r8, r0
1a004c5a:	4689      	mov	r9, r1
1a004c5c:	f04f 0200 	mov.w	r2, #0
1a004c60:	f04f 0300 	mov.w	r3, #0
1a004c64:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a004c68:	d1d7      	bne.n	1a004c1a <_svfprintf_r+0x16fa>
1a004c6a:	4640      	mov	r0, r8
1a004c6c:	4649      	mov	r1, r9
1a004c6e:	2200      	movs	r2, #0
1a004c70:	4b9a      	ldr	r3, [pc, #616]	; (1a004edc <_svfprintf_r+0x19bc>)
1a004c72:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1a004c76:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
1a004c7a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a004c7e:	4635      	mov	r5, r6
1a004c80:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
1a004c84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a004c86:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a004c8a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004c8e:	f7fd fcb1 	bl	1a0025f4 <__aeabi_dcmpgt>
1a004c92:	2800      	cmp	r0, #0
1a004c94:	d13f      	bne.n	1a004d16 <_svfprintf_r+0x17f6>
1a004c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a004c9a:	2200      	movs	r2, #0
1a004c9c:	4b8f      	ldr	r3, [pc, #572]	; (1a004edc <_svfprintf_r+0x19bc>)
1a004c9e:	f7fd fc81 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004ca2:	b108      	cbz	r0, 1a004ca8 <_svfprintf_r+0x1788>
1a004ca4:	07e9      	lsls	r1, r5, #31
1a004ca6:	d436      	bmi.n	1a004d16 <_svfprintf_r+0x17f6>
1a004ca8:	2c00      	cmp	r4, #0
1a004caa:	f6ff abb7 	blt.w	1a00441c <_svfprintf_r+0xefc>
1a004cae:	1c63      	adds	r3, r4, #1
1a004cb0:	443b      	add	r3, r7
1a004cb2:	2230      	movs	r2, #48	; 0x30
1a004cb4:	f807 2b01 	strb.w	r2, [r7], #1
1a004cb8:	42bb      	cmp	r3, r7
1a004cba:	d1fb      	bne.n	1a004cb4 <_svfprintf_r+0x1794>
1a004cbc:	f7ff bbae 	b.w	1a00441c <_svfprintf_r+0xefc>
1a004cc0:	9b02      	ldr	r3, [sp, #8]
1a004cc2:	930a      	str	r3, [sp, #40]	; 0x28
1a004cc4:	2300      	movs	r3, #0
1a004cc6:	9308      	str	r3, [sp, #32]
1a004cc8:	9202      	str	r2, [sp, #8]
1a004cca:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a004cce:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a004cd2:	931d      	str	r3, [sp, #116]	; 0x74
1a004cd4:	232d      	movs	r3, #45	; 0x2d
1a004cd6:	911c      	str	r1, [sp, #112]	; 0x70
1a004cd8:	931e      	str	r3, [sp, #120]	; 0x78
1a004cda:	e770      	b.n	1a004bbe <_svfprintf_r+0x169e>
1a004cdc:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a004ce0:	189f      	adds	r7, r3, r2
1a004ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004ce4:	2b00      	cmp	r3, #0
1a004ce6:	f340 80d1 	ble.w	1a004e8c <_svfprintf_r+0x196c>
1a004cea:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004cee:	e730      	b.n	1a004b52 <_svfprintf_r+0x1632>
1a004cf0:	aa28      	add	r2, sp, #160	; 0xa0
1a004cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004cf6:	f001 fedb 	bl	1a006ab0 <__ssprint_r>
1a004cfa:	2800      	cmp	r0, #0
1a004cfc:	f47e acef 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004d02:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004d04:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004d06:	1ad3      	subs	r3, r2, r3
1a004d08:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004d0c:	f7ff ba79 	b.w	1a004202 <_svfprintf_r+0xce2>
1a004d10:	eb06 040a 	add.w	r4, r6, sl
1a004d14:	e6f9      	b.n	1a004b0a <_svfprintf_r+0x15ea>
1a004d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d18:	9326      	str	r3, [sp, #152]	; 0x98
1a004d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004d1c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
1a004d20:	7bd9      	ldrb	r1, [r3, #15]
1a004d22:	4291      	cmp	r1, r2
1a004d24:	463b      	mov	r3, r7
1a004d26:	d109      	bne.n	1a004d3c <_svfprintf_r+0x181c>
1a004d28:	2030      	movs	r0, #48	; 0x30
1a004d2a:	f803 0c01 	strb.w	r0, [r3, #-1]
1a004d2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a004d30:	1e5a      	subs	r2, r3, #1
1a004d32:	9226      	str	r2, [sp, #152]	; 0x98
1a004d34:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a004d38:	4291      	cmp	r1, r2
1a004d3a:	d0f6      	beq.n	1a004d2a <_svfprintf_r+0x180a>
1a004d3c:	2a39      	cmp	r2, #57	; 0x39
1a004d3e:	bf0b      	itete	eq
1a004d40:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a004d42:	3201      	addne	r2, #1
1a004d44:	7a92      	ldrbeq	r2, [r2, #10]
1a004d46:	b2d2      	uxtbne	r2, r2
1a004d48:	f803 2c01 	strb.w	r2, [r3, #-1]
1a004d4c:	f7ff bb66 	b.w	1a00441c <_svfprintf_r+0xefc>
1a004d50:	f10a 0101 	add.w	r1, sl, #1
1a004d54:	9806      	ldr	r0, [sp, #24]
1a004d56:	f7fd ff85 	bl	1a002c64 <_malloc_r>
1a004d5a:	4606      	mov	r6, r0
1a004d5c:	2800      	cmp	r0, #0
1a004d5e:	f000 80ed 	beq.w	1a004f3c <_svfprintf_r+0x1a1c>
1a004d62:	9008      	str	r0, [sp, #32]
1a004d64:	e71a      	b.n	1a004b9c <_svfprintf_r+0x167c>
1a004d66:	4621      	mov	r1, r4
1a004d68:	461c      	mov	r4, r3
1a004d6a:	460b      	mov	r3, r1
1a004d6c:	3201      	adds	r2, #1
1a004d6e:	442c      	add	r4, r5
1a004d70:	2a07      	cmp	r2, #7
1a004d72:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004d76:	e9c9 3500 	strd	r3, r5, [r9]
1a004d7a:	f77f ad13 	ble.w	1a0047a4 <_svfprintf_r+0x1284>
1a004d7e:	aa28      	add	r2, sp, #160	; 0xa0
1a004d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004d84:	f001 fe94 	bl	1a006ab0 <__ssprint_r>
1a004d88:	2800      	cmp	r0, #0
1a004d8a:	f47e aca8 	bne.w	1a0036de <_svfprintf_r+0x1be>
1a004d8e:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004d92:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004d96:	e507      	b.n	1a0047a8 <_svfprintf_r+0x1288>
1a004d98:	f10a 0401 	add.w	r4, sl, #1
1a004d9c:	a926      	add	r1, sp, #152	; 0x98
1a004d9e:	ab23      	add	r3, sp, #140	; 0x8c
1a004da0:	e9cd 3100 	strd	r3, r1, [sp]
1a004da4:	4622      	mov	r2, r4
1a004da6:	ab22      	add	r3, sp, #136	; 0x88
1a004da8:	2102      	movs	r1, #2
1a004daa:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004dae:	9806      	ldr	r0, [sp, #24]
1a004db0:	f000 f966 	bl	1a005080 <_dtoa_r>
1a004db4:	4606      	mov	r6, r0
1a004db6:	4434      	add	r4, r6
1a004db8:	e6a7      	b.n	1a004b0a <_svfprintf_r+0x15ea>
1a004dba:	2330      	movs	r3, #48	; 0x30
1a004dbc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004dc0:	2378      	movs	r3, #120	; 0x78
1a004dc2:	e6de      	b.n	1a004b82 <_svfprintf_r+0x1662>
1a004dc4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a004dc6:	e636      	b.n	1a004a36 <_svfprintf_r+0x1516>
1a004dc8:	2900      	cmp	r1, #0
1a004dca:	f040 8098 	bne.w	1a004efe <_svfprintf_r+0x19de>
1a004dce:	2330      	movs	r3, #48	; 0x30
1a004dd0:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a004dd4:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a004dd8:	3230      	adds	r2, #48	; 0x30
1a004dda:	f803 2b01 	strb.w	r2, [r3], #1
1a004dde:	aa24      	add	r2, sp, #144	; 0x90
1a004de0:	1a9b      	subs	r3, r3, r2
1a004de2:	9316      	str	r3, [sp, #88]	; 0x58
1a004de4:	f7ff bb73 	b.w	1a0044ce <_svfprintf_r+0xfae>
1a004de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004dea:	4e3d      	ldr	r6, [pc, #244]	; (1a004ee0 <_svfprintf_r+0x19c0>)
1a004dec:	2b00      	cmp	r3, #0
1a004dee:	bfb6      	itet	lt
1a004df0:	222d      	movlt	r2, #45	; 0x2d
1a004df2:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a004df6:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a004dfa:	4b3a      	ldr	r3, [pc, #232]	; (1a004ee4 <_svfprintf_r+0x19c4>)
1a004dfc:	f7fe bf09 	b.w	1a003c12 <_svfprintf_r+0x6f2>
1a004e00:	a822      	add	r0, sp, #136	; 0x88
1a004e02:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004e06:	f001 fde3 	bl	1a0069d0 <frexp>
1a004e0a:	2200      	movs	r2, #0
1a004e0c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004e10:	ec51 0b10 	vmov	r0, r1, d0
1a004e14:	f7fd f95e 	bl	1a0020d4 <__aeabi_dmul>
1a004e18:	2200      	movs	r2, #0
1a004e1a:	2300      	movs	r3, #0
1a004e1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004e20:	f7fd fbc0 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004e24:	b108      	cbz	r0, 1a004e2a <_svfprintf_r+0x190a>
1a004e26:	2301      	movs	r3, #1
1a004e28:	9322      	str	r3, [sp, #136]	; 0x88
1a004e2a:	4b2f      	ldr	r3, [pc, #188]	; (1a004ee8 <_svfprintf_r+0x19c8>)
1a004e2c:	930b      	str	r3, [sp, #44]	; 0x2c
1a004e2e:	e6e5      	b.n	1a004bfc <_svfprintf_r+0x16dc>
1a004e30:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004e34:	9818      	ldr	r0, [sp, #96]	; 0x60
1a004e36:	2200      	movs	r2, #0
1a004e38:	920c      	str	r2, [sp, #48]	; 0x30
1a004e3a:	920f      	str	r2, [sp, #60]	; 0x3c
1a004e3c:	7803      	ldrb	r3, [r0, #0]
1a004e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004e40:	2bff      	cmp	r3, #255	; 0xff
1a004e42:	d00c      	beq.n	1a004e5e <_svfprintf_r+0x193e>
1a004e44:	4293      	cmp	r3, r2
1a004e46:	da0a      	bge.n	1a004e5e <_svfprintf_r+0x193e>
1a004e48:	7841      	ldrb	r1, [r0, #1]
1a004e4a:	1ad2      	subs	r2, r2, r3
1a004e4c:	b1a1      	cbz	r1, 1a004e78 <_svfprintf_r+0x1958>
1a004e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004e50:	3301      	adds	r3, #1
1a004e52:	930f      	str	r3, [sp, #60]	; 0x3c
1a004e54:	460b      	mov	r3, r1
1a004e56:	2bff      	cmp	r3, #255	; 0xff
1a004e58:	f100 0001 	add.w	r0, r0, #1
1a004e5c:	d1f2      	bne.n	1a004e44 <_svfprintf_r+0x1924>
1a004e5e:	920e      	str	r2, [sp, #56]	; 0x38
1a004e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004e64:	9018      	str	r0, [sp, #96]	; 0x60
1a004e66:	4413      	add	r3, r2
1a004e68:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a004e6a:	fb02 7703 	mla	r7, r2, r3, r7
1a004e6e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004e72:	9303      	str	r3, [sp, #12]
1a004e74:	f7ff bb41 	b.w	1a0044fa <_svfprintf_r+0xfda>
1a004e78:	990c      	ldr	r1, [sp, #48]	; 0x30
1a004e7a:	3101      	adds	r1, #1
1a004e7c:	910c      	str	r1, [sp, #48]	; 0x30
1a004e7e:	e7df      	b.n	1a004e40 <_svfprintf_r+0x1920>
1a004e80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004e82:	18d7      	adds	r7, r2, r3
1a004e84:	4457      	add	r7, sl
1a004e86:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004e8a:	e662      	b.n	1a004b52 <_svfprintf_r+0x1632>
1a004e8c:	f1c3 0301 	rsb	r3, r3, #1
1a004e90:	441f      	add	r7, r3
1a004e92:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004e96:	9303      	str	r3, [sp, #12]
1a004e98:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004e9c:	e5d7      	b.n	1a004a4e <_svfprintf_r+0x152e>
1a004e9e:	2200      	movs	r2, #0
1a004ea0:	2300      	movs	r3, #0
1a004ea2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a004ea6:	f7fd fb7d 	bl	1a0025a4 <__aeabi_dcmpeq>
1a004eaa:	2800      	cmp	r0, #0
1a004eac:	f47f ae2a 	bne.w	1a004b04 <_svfprintf_r+0x15e4>
1a004eb0:	f1ca 0301 	rsb	r3, sl, #1
1a004eb4:	9322      	str	r3, [sp, #136]	; 0x88
1a004eb6:	e626      	b.n	1a004b06 <_svfprintf_r+0x15e6>
1a004eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004eba:	07db      	lsls	r3, r3, #31
1a004ebc:	f57f ab10 	bpl.w	1a0044e0 <_svfprintf_r+0xfc0>
1a004ec0:	f7ff bb0c 	b.w	1a0044dc <_svfprintf_r+0xfbc>
1a004ec4:	b993      	cbnz	r3, 1a004eec <_svfprintf_r+0x19cc>
1a004ec6:	2301      	movs	r3, #1
1a004ec8:	9303      	str	r3, [sp, #12]
1a004eca:	461f      	mov	r7, r3
1a004ecc:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004ed0:	e5bd      	b.n	1a004a4e <_svfprintf_r+0x152e>
1a004ed2:	bf00      	nop
1a004ed4:	1a00707c 	.word	0x1a00707c
1a004ed8:	40300000 	.word	0x40300000
1a004edc:	3fe00000 	.word	0x3fe00000
1a004ee0:	1a007060 	.word	0x1a007060
1a004ee4:	1a007064 	.word	0x1a007064
1a004ee8:	1a007068 	.word	0x1a007068
1a004eec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004eee:	1c5f      	adds	r7, r3, #1
1a004ef0:	4457      	add	r7, sl
1a004ef2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004ef6:	9303      	str	r3, [sp, #12]
1a004ef8:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004efc:	e5a7      	b.n	1a004a4e <_svfprintf_r+0x152e>
1a004efe:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a004f02:	e769      	b.n	1a004dd8 <_svfprintf_r+0x18b8>
1a004f04:	464a      	mov	r2, r9
1a004f06:	e4e1      	b.n	1a0048cc <_svfprintf_r+0x13ac>
1a004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004f0a:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a004f0e:	f853 0b04 	ldr.w	r0, [r3], #4
1a004f12:	9309      	str	r3, [sp, #36]	; 0x24
1a004f14:	4693      	mov	fp, r2
1a004f16:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
1a004f1a:	f7fe bb61 	b.w	1a0035e0 <_svfprintf_r+0xc0>
1a004f1e:	9a06      	ldr	r2, [sp, #24]
1a004f20:	230c      	movs	r3, #12
1a004f22:	6013      	str	r3, [r2, #0]
1a004f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a004f28:	9304      	str	r3, [sp, #16]
1a004f2a:	f7fe bbe7 	b.w	1a0036fc <_svfprintf_r+0x1dc>
1a004f2e:	4654      	mov	r4, sl
1a004f30:	4434      	add	r4, r6
1a004f32:	e5ea      	b.n	1a004b0a <_svfprintf_r+0x15ea>
1a004f34:	2302      	movs	r3, #2
1a004f36:	9316      	str	r3, [sp, #88]	; 0x58
1a004f38:	f7ff bac9 	b.w	1a0044ce <_svfprintf_r+0xfae>
1a004f3c:	9a07      	ldr	r2, [sp, #28]
1a004f3e:	8993      	ldrh	r3, [r2, #12]
1a004f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004f44:	8193      	strh	r3, [r2, #12]
1a004f46:	f7fe bbd2 	b.w	1a0036ee <_svfprintf_r+0x1ce>
1a004f4a:	461f      	mov	r7, r3
1a004f4c:	f7ff ba14 	b.w	1a004378 <_svfprintf_r+0xe58>
1a004f50:	461f      	mov	r7, r3
1a004f52:	f7ff baeb 	b.w	1a00452c <_svfprintf_r+0x100c>
1a004f56:	461f      	mov	r7, r3
1a004f58:	f7ff bada 	b.w	1a004510 <_svfprintf_r+0xff0>

1a004f5c <quorem>:
1a004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004f60:	6903      	ldr	r3, [r0, #16]
1a004f62:	690f      	ldr	r7, [r1, #16]
1a004f64:	42bb      	cmp	r3, r7
1a004f66:	b083      	sub	sp, #12
1a004f68:	f2c0 8086 	blt.w	1a005078 <quorem+0x11c>
1a004f6c:	3f01      	subs	r7, #1
1a004f6e:	f101 0614 	add.w	r6, r1, #20
1a004f72:	f100 0a14 	add.w	sl, r0, #20
1a004f76:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a004f7a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a004f7e:	00bc      	lsls	r4, r7, #2
1a004f80:	3301      	adds	r3, #1
1a004f82:	9400      	str	r4, [sp, #0]
1a004f84:	eb06 0904 	add.w	r9, r6, r4
1a004f88:	429a      	cmp	r2, r3
1a004f8a:	4454      	add	r4, sl
1a004f8c:	fbb2 f8f3 	udiv	r8, r2, r3
1a004f90:	9401      	str	r4, [sp, #4]
1a004f92:	d33a      	bcc.n	1a00500a <quorem+0xae>
1a004f94:	2500      	movs	r5, #0
1a004f96:	462a      	mov	r2, r5
1a004f98:	46b6      	mov	lr, r6
1a004f9a:	46d4      	mov	ip, sl
1a004f9c:	f85e 4b04 	ldr.w	r4, [lr], #4
1a004fa0:	f8dc 3000 	ldr.w	r3, [ip]
1a004fa4:	fa1f fb84 	uxth.w	fp, r4
1a004fa8:	fb08 550b 	mla	r5, r8, fp, r5
1a004fac:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a004fb0:	0c24      	lsrs	r4, r4, #16
1a004fb2:	fb08 b404 	mla	r4, r8, r4, fp
1a004fb6:	b2ad      	uxth	r5, r5
1a004fb8:	1b55      	subs	r5, r2, r5
1a004fba:	b2a2      	uxth	r2, r4
1a004fbc:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a004fc0:	fa15 f383 	uxtah	r3, r5, r3
1a004fc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a004fc8:	b29b      	uxth	r3, r3
1a004fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a004fce:	45f1      	cmp	r9, lr
1a004fd0:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a004fd4:	f84c 3b04 	str.w	r3, [ip], #4
1a004fd8:	ea4f 4222 	mov.w	r2, r2, asr #16
1a004fdc:	d2de      	bcs.n	1a004f9c <quorem+0x40>
1a004fde:	9b00      	ldr	r3, [sp, #0]
1a004fe0:	f85a 3003 	ldr.w	r3, [sl, r3]
1a004fe4:	b98b      	cbnz	r3, 1a00500a <quorem+0xae>
1a004fe6:	9a01      	ldr	r2, [sp, #4]
1a004fe8:	1f13      	subs	r3, r2, #4
1a004fea:	459a      	cmp	sl, r3
1a004fec:	d20c      	bcs.n	1a005008 <quorem+0xac>
1a004fee:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a004ff2:	b94b      	cbnz	r3, 1a005008 <quorem+0xac>
1a004ff4:	f1a2 0308 	sub.w	r3, r2, #8
1a004ff8:	e002      	b.n	1a005000 <quorem+0xa4>
1a004ffa:	681a      	ldr	r2, [r3, #0]
1a004ffc:	3b04      	subs	r3, #4
1a004ffe:	b91a      	cbnz	r2, 1a005008 <quorem+0xac>
1a005000:	459a      	cmp	sl, r3
1a005002:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005006:	d3f8      	bcc.n	1a004ffa <quorem+0x9e>
1a005008:	6107      	str	r7, [r0, #16]
1a00500a:	4604      	mov	r4, r0
1a00500c:	f001 fa32 	bl	1a006474 <__mcmp>
1a005010:	2800      	cmp	r0, #0
1a005012:	db2d      	blt.n	1a005070 <quorem+0x114>
1a005014:	f108 0801 	add.w	r8, r8, #1
1a005018:	4650      	mov	r0, sl
1a00501a:	2300      	movs	r3, #0
1a00501c:	f856 1b04 	ldr.w	r1, [r6], #4
1a005020:	6805      	ldr	r5, [r0, #0]
1a005022:	b28a      	uxth	r2, r1
1a005024:	1a9a      	subs	r2, r3, r2
1a005026:	0c0b      	lsrs	r3, r1, #16
1a005028:	fa12 f285 	uxtah	r2, r2, r5
1a00502c:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a005030:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a005034:	b292      	uxth	r2, r2
1a005036:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00503a:	45b1      	cmp	r9, r6
1a00503c:	f840 2b04 	str.w	r2, [r0], #4
1a005040:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005044:	d2ea      	bcs.n	1a00501c <quorem+0xc0>
1a005046:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00504a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00504e:	b97a      	cbnz	r2, 1a005070 <quorem+0x114>
1a005050:	1f1a      	subs	r2, r3, #4
1a005052:	4592      	cmp	sl, r2
1a005054:	d20b      	bcs.n	1a00506e <quorem+0x112>
1a005056:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a00505a:	b942      	cbnz	r2, 1a00506e <quorem+0x112>
1a00505c:	3b08      	subs	r3, #8
1a00505e:	e002      	b.n	1a005066 <quorem+0x10a>
1a005060:	681a      	ldr	r2, [r3, #0]
1a005062:	3b04      	subs	r3, #4
1a005064:	b91a      	cbnz	r2, 1a00506e <quorem+0x112>
1a005066:	459a      	cmp	sl, r3
1a005068:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a00506c:	d3f8      	bcc.n	1a005060 <quorem+0x104>
1a00506e:	6127      	str	r7, [r4, #16]
1a005070:	4640      	mov	r0, r8
1a005072:	b003      	add	sp, #12
1a005074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005078:	2000      	movs	r0, #0
1a00507a:	b003      	add	sp, #12
1a00507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a005080 <_dtoa_r>:
1a005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005084:	ec57 6b10 	vmov	r6, r7, d0
1a005088:	b097      	sub	sp, #92	; 0x5c
1a00508a:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a00508c:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a00508e:	9102      	str	r1, [sp, #8]
1a005090:	4682      	mov	sl, r0
1a005092:	920a      	str	r2, [sp, #40]	; 0x28
1a005094:	9307      	str	r3, [sp, #28]
1a005096:	e9cd 6700 	strd	r6, r7, [sp]
1a00509a:	b155      	cbz	r5, 1a0050b2 <_dtoa_r+0x32>
1a00509c:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a00509e:	606a      	str	r2, [r5, #4]
1a0050a0:	2301      	movs	r3, #1
1a0050a2:	4093      	lsls	r3, r2
1a0050a4:	60ab      	str	r3, [r5, #8]
1a0050a6:	4629      	mov	r1, r5
1a0050a8:	f000 fff8 	bl	1a00609c <_Bfree>
1a0050ac:	2300      	movs	r3, #0
1a0050ae:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a0050b2:	1e3e      	subs	r6, r7, #0
1a0050b4:	bfb4      	ite	lt
1a0050b6:	2301      	movlt	r3, #1
1a0050b8:	2300      	movge	r3, #0
1a0050ba:	6023      	str	r3, [r4, #0]
1a0050bc:	4b76      	ldr	r3, [pc, #472]	; (1a005298 <_dtoa_r+0x218>)
1a0050be:	bfbc      	itt	lt
1a0050c0:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a0050c4:	9601      	strlt	r6, [sp, #4]
1a0050c6:	43b3      	bics	r3, r6
1a0050c8:	f000 80ae 	beq.w	1a005228 <_dtoa_r+0x1a8>
1a0050cc:	ed9d 7b00 	vldr	d7, [sp]
1a0050d0:	2200      	movs	r2, #0
1a0050d2:	2300      	movs	r3, #0
1a0050d4:	ec51 0b17 	vmov	r0, r1, d7
1a0050d8:	ed8d 7b04 	vstr	d7, [sp, #16]
1a0050dc:	f7fd fa62 	bl	1a0025a4 <__aeabi_dcmpeq>
1a0050e0:	4605      	mov	r5, r0
1a0050e2:	b178      	cbz	r0, 1a005104 <_dtoa_r+0x84>
1a0050e4:	9a07      	ldr	r2, [sp, #28]
1a0050e6:	2301      	movs	r3, #1
1a0050e8:	6013      	str	r3, [r2, #0]
1a0050ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0050ec:	2b00      	cmp	r3, #0
1a0050ee:	f000 8313 	beq.w	1a005718 <_dtoa_r+0x698>
1a0050f2:	4b6a      	ldr	r3, [pc, #424]	; (1a00529c <_dtoa_r+0x21c>)
1a0050f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0050f6:	6013      	str	r3, [r2, #0]
1a0050f8:	3b01      	subs	r3, #1
1a0050fa:	9303      	str	r3, [sp, #12]
1a0050fc:	9803      	ldr	r0, [sp, #12]
1a0050fe:	b017      	add	sp, #92	; 0x5c
1a005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005104:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a005108:	aa14      	add	r2, sp, #80	; 0x50
1a00510a:	a915      	add	r1, sp, #84	; 0x54
1a00510c:	ec48 7b10 	vmov	d0, r7, r8
1a005110:	4650      	mov	r0, sl
1a005112:	f001 fa47 	bl	1a0065a4 <__d2b>
1a005116:	0d34      	lsrs	r4, r6, #20
1a005118:	4683      	mov	fp, r0
1a00511a:	f040 809b 	bne.w	1a005254 <_dtoa_r+0x1d4>
1a00511e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a005122:	442c      	add	r4, r5
1a005124:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a005128:	2b20      	cmp	r3, #32
1a00512a:	f340 83bb 	ble.w	1a0058a4 <_dtoa_r+0x824>
1a00512e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a005132:	409e      	lsls	r6, r3
1a005134:	9b00      	ldr	r3, [sp, #0]
1a005136:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00513a:	fa23 f000 	lsr.w	r0, r3, r0
1a00513e:	4330      	orrs	r0, r6
1a005140:	f7fc ff4e 	bl	1a001fe0 <__aeabi_ui2d>
1a005144:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a005148:	2101      	movs	r1, #1
1a00514a:	4602      	mov	r2, r0
1a00514c:	3c01      	subs	r4, #1
1a00514e:	910e      	str	r1, [sp, #56]	; 0x38
1a005150:	4610      	mov	r0, r2
1a005152:	4619      	mov	r1, r3
1a005154:	2200      	movs	r2, #0
1a005156:	4b52      	ldr	r3, [pc, #328]	; (1a0052a0 <_dtoa_r+0x220>)
1a005158:	f7fc fe04 	bl	1a001d64 <__aeabi_dsub>
1a00515c:	a348      	add	r3, pc, #288	; (adr r3, 1a005280 <_dtoa_r+0x200>)
1a00515e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005162:	f7fc ffb7 	bl	1a0020d4 <__aeabi_dmul>
1a005166:	a348      	add	r3, pc, #288	; (adr r3, 1a005288 <_dtoa_r+0x208>)
1a005168:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00516c:	f7fc fdfc 	bl	1a001d68 <__adddf3>
1a005170:	4606      	mov	r6, r0
1a005172:	4620      	mov	r0, r4
1a005174:	460f      	mov	r7, r1
1a005176:	f7fc ff43 	bl	1a002000 <__aeabi_i2d>
1a00517a:	a345      	add	r3, pc, #276	; (adr r3, 1a005290 <_dtoa_r+0x210>)
1a00517c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005180:	f7fc ffa8 	bl	1a0020d4 <__aeabi_dmul>
1a005184:	4602      	mov	r2, r0
1a005186:	460b      	mov	r3, r1
1a005188:	4630      	mov	r0, r6
1a00518a:	4639      	mov	r1, r7
1a00518c:	f7fc fdec 	bl	1a001d68 <__adddf3>
1a005190:	4606      	mov	r6, r0
1a005192:	460f      	mov	r7, r1
1a005194:	f7fd fa4e 	bl	1a002634 <__aeabi_d2iz>
1a005198:	2200      	movs	r2, #0
1a00519a:	4681      	mov	r9, r0
1a00519c:	2300      	movs	r3, #0
1a00519e:	4630      	mov	r0, r6
1a0051a0:	4639      	mov	r1, r7
1a0051a2:	f7fd fa09 	bl	1a0025b8 <__aeabi_dcmplt>
1a0051a6:	2800      	cmp	r0, #0
1a0051a8:	f040 82a9 	bne.w	1a0056fe <_dtoa_r+0x67e>
1a0051ac:	1b2c      	subs	r4, r5, r4
1a0051ae:	f1b9 0f16 	cmp.w	r9, #22
1a0051b2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a0051b6:	f200 8296 	bhi.w	1a0056e6 <_dtoa_r+0x666>
1a0051ba:	4b3a      	ldr	r3, [pc, #232]	; (1a0052a4 <_dtoa_r+0x224>)
1a0051bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a0051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0051c8:	f7fd f9f6 	bl	1a0025b8 <__aeabi_dcmplt>
1a0051cc:	2800      	cmp	r0, #0
1a0051ce:	d06f      	beq.n	1a0052b0 <_dtoa_r+0x230>
1a0051d0:	2300      	movs	r3, #0
1a0051d2:	f1b8 0f00 	cmp.w	r8, #0
1a0051d6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a0051da:	930d      	str	r3, [sp, #52]	; 0x34
1a0051dc:	f2c0 8289 	blt.w	1a0056f2 <_dtoa_r+0x672>
1a0051e0:	2300      	movs	r3, #0
1a0051e2:	9308      	str	r3, [sp, #32]
1a0051e4:	f1b9 0f00 	cmp.w	r9, #0
1a0051e8:	da68      	bge.n	1a0052bc <_dtoa_r+0x23c>
1a0051ea:	9b08      	ldr	r3, [sp, #32]
1a0051ec:	f8cd 9018 	str.w	r9, [sp, #24]
1a0051f0:	eba3 0309 	sub.w	r3, r3, r9
1a0051f4:	9308      	str	r3, [sp, #32]
1a0051f6:	f1c9 0300 	rsb	r3, r9, #0
1a0051fa:	930c      	str	r3, [sp, #48]	; 0x30
1a0051fc:	9b02      	ldr	r3, [sp, #8]
1a0051fe:	2b09      	cmp	r3, #9
1a005200:	f04f 0900 	mov.w	r9, #0
1a005204:	d862      	bhi.n	1a0052cc <_dtoa_r+0x24c>
1a005206:	2b05      	cmp	r3, #5
1a005208:	f340 834a 	ble.w	1a0058a0 <_dtoa_r+0x820>
1a00520c:	3b04      	subs	r3, #4
1a00520e:	9302      	str	r3, [sp, #8]
1a005210:	2400      	movs	r4, #0
1a005212:	9b02      	ldr	r3, [sp, #8]
1a005214:	3b02      	subs	r3, #2
1a005216:	2b03      	cmp	r3, #3
1a005218:	f200 8641 	bhi.w	1a005e9e <_dtoa_r+0xe1e>
1a00521c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005220:	04630466 	.word	0x04630466
1a005224:	0456043b 	.word	0x0456043b
1a005228:	9a07      	ldr	r2, [sp, #28]
1a00522a:	f242 730f 	movw	r3, #9999	; 0x270f
1a00522e:	6013      	str	r3, [r2, #0]
1a005230:	9b00      	ldr	r3, [sp, #0]
1a005232:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a005236:	4333      	orrs	r3, r6
1a005238:	d118      	bne.n	1a00526c <_dtoa_r+0x1ec>
1a00523a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00523c:	2b00      	cmp	r3, #0
1a00523e:	f000 8625 	beq.w	1a005e8c <_dtoa_r+0xe0c>
1a005242:	4b19      	ldr	r3, [pc, #100]	; (1a0052a8 <_dtoa_r+0x228>)
1a005244:	9303      	str	r3, [sp, #12]
1a005246:	3308      	adds	r3, #8
1a005248:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a00524a:	9803      	ldr	r0, [sp, #12]
1a00524c:	6013      	str	r3, [r2, #0]
1a00524e:	b017      	add	sp, #92	; 0x5c
1a005250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005254:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a005258:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a00525c:	950e      	str	r5, [sp, #56]	; 0x38
1a00525e:	463a      	mov	r2, r7
1a005260:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a005264:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a005268:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a00526a:	e771      	b.n	1a005150 <_dtoa_r+0xd0>
1a00526c:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00526e:	2b00      	cmp	r3, #0
1a005270:	f040 8400 	bne.w	1a005a74 <_dtoa_r+0x9f4>
1a005274:	4b0d      	ldr	r3, [pc, #52]	; (1a0052ac <_dtoa_r+0x22c>)
1a005276:	9303      	str	r3, [sp, #12]
1a005278:	e740      	b.n	1a0050fc <_dtoa_r+0x7c>
1a00527a:	bf00      	nop
1a00527c:	f3af 8000 	nop.w
1a005280:	636f4361 	.word	0x636f4361
1a005284:	3fd287a7 	.word	0x3fd287a7
1a005288:	8b60c8b3 	.word	0x8b60c8b3
1a00528c:	3fc68a28 	.word	0x3fc68a28
1a005290:	509f79fb 	.word	0x509f79fb
1a005294:	3fd34413 	.word	0x3fd34413
1a005298:	7ff00000 	.word	0x7ff00000
1a00529c:	1a007099 	.word	0x1a007099
1a0052a0:	3ff80000 	.word	0x3ff80000
1a0052a4:	1a0070f8 	.word	0x1a0070f8
1a0052a8:	1a0070c0 	.word	0x1a0070c0
1a0052ac:	1a0070bc 	.word	0x1a0070bc
1a0052b0:	f1b8 0f00 	cmp.w	r8, #0
1a0052b4:	f2c0 84b6 	blt.w	1a005c24 <_dtoa_r+0xba4>
1a0052b8:	900d      	str	r0, [sp, #52]	; 0x34
1a0052ba:	9008      	str	r0, [sp, #32]
1a0052bc:	2300      	movs	r3, #0
1a0052be:	930c      	str	r3, [sp, #48]	; 0x30
1a0052c0:	9b02      	ldr	r3, [sp, #8]
1a0052c2:	f8cd 9018 	str.w	r9, [sp, #24]
1a0052c6:	2b09      	cmp	r3, #9
1a0052c8:	44c8      	add	r8, r9
1a0052ca:	d99c      	bls.n	1a005206 <_dtoa_r+0x186>
1a0052cc:	2300      	movs	r3, #0
1a0052ce:	2401      	movs	r4, #1
1a0052d0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a0052d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a0052d8:	9302      	str	r3, [sp, #8]
1a0052da:	9509      	str	r5, [sp, #36]	; 0x24
1a0052dc:	2100      	movs	r1, #0
1a0052de:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a0052e2:	950f      	str	r5, [sp, #60]	; 0x3c
1a0052e4:	4650      	mov	r0, sl
1a0052e6:	f000 feb3 	bl	1a006050 <_Balloc>
1a0052ea:	2d0e      	cmp	r5, #14
1a0052ec:	9003      	str	r0, [sp, #12]
1a0052ee:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a0052f2:	f200 810a 	bhi.w	1a00550a <_dtoa_r+0x48a>
1a0052f6:	2c00      	cmp	r4, #0
1a0052f8:	f000 8107 	beq.w	1a00550a <_dtoa_r+0x48a>
1a0052fc:	9906      	ldr	r1, [sp, #24]
1a0052fe:	2900      	cmp	r1, #0
1a005300:	f340 8466 	ble.w	1a005bd0 <_dtoa_r+0xb50>
1a005304:	4bb1      	ldr	r3, [pc, #708]	; (1a0055cc <_dtoa_r+0x54c>)
1a005306:	f001 020f 	and.w	r2, r1, #15
1a00530a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00530e:	ed93 7b00 	vldr	d7, [r3]
1a005312:	110c      	asrs	r4, r1, #4
1a005314:	06e3      	lsls	r3, r4, #27
1a005316:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00531a:	f140 8406 	bpl.w	1a005b2a <_dtoa_r+0xaaa>
1a00531e:	4bac      	ldr	r3, [pc, #688]	; (1a0055d0 <_dtoa_r+0x550>)
1a005320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005328:	f7fc fffe 	bl	1a002328 <__aeabi_ddiv>
1a00532c:	e9cd 0100 	strd	r0, r1, [sp]
1a005330:	f004 040f 	and.w	r4, r4, #15
1a005334:	2603      	movs	r6, #3
1a005336:	b17c      	cbz	r4, 1a005358 <_dtoa_r+0x2d8>
1a005338:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00533c:	4da4      	ldr	r5, [pc, #656]	; (1a0055d0 <_dtoa_r+0x550>)
1a00533e:	07e7      	lsls	r7, r4, #31
1a005340:	d504      	bpl.n	1a00534c <_dtoa_r+0x2cc>
1a005342:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005346:	f7fc fec5 	bl	1a0020d4 <__aeabi_dmul>
1a00534a:	3601      	adds	r6, #1
1a00534c:	1064      	asrs	r4, r4, #1
1a00534e:	f105 0508 	add.w	r5, r5, #8
1a005352:	d1f4      	bne.n	1a00533e <_dtoa_r+0x2be>
1a005354:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a005358:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00535c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005360:	f7fc ffe2 	bl	1a002328 <__aeabi_ddiv>
1a005364:	e9cd 0100 	strd	r0, r1, [sp]
1a005368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00536a:	b153      	cbz	r3, 1a005382 <_dtoa_r+0x302>
1a00536c:	e9dd 4500 	ldrd	r4, r5, [sp]
1a005370:	2200      	movs	r2, #0
1a005372:	4b98      	ldr	r3, [pc, #608]	; (1a0055d4 <_dtoa_r+0x554>)
1a005374:	4620      	mov	r0, r4
1a005376:	4629      	mov	r1, r5
1a005378:	f7fd f91e 	bl	1a0025b8 <__aeabi_dcmplt>
1a00537c:	2800      	cmp	r0, #0
1a00537e:	f040 8521 	bne.w	1a005dc4 <_dtoa_r+0xd44>
1a005382:	4630      	mov	r0, r6
1a005384:	f7fc fe3c 	bl	1a002000 <__aeabi_i2d>
1a005388:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00538c:	f7fc fea2 	bl	1a0020d4 <__aeabi_dmul>
1a005390:	4b91      	ldr	r3, [pc, #580]	; (1a0055d8 <_dtoa_r+0x558>)
1a005392:	2200      	movs	r2, #0
1a005394:	f7fc fce8 	bl	1a001d68 <__adddf3>
1a005398:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00539a:	4604      	mov	r4, r0
1a00539c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0053a0:	2b00      	cmp	r3, #0
1a0053a2:	f000 83f9 	beq.w	1a005b98 <_dtoa_r+0xb18>
1a0053a6:	9b06      	ldr	r3, [sp, #24]
1a0053a8:	9312      	str	r3, [sp, #72]	; 0x48
1a0053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053ac:	9310      	str	r3, [sp, #64]	; 0x40
1a0053ae:	e9dd 6700 	ldrd	r6, r7, [sp]
1a0053b2:	4639      	mov	r1, r7
1a0053b4:	4630      	mov	r0, r6
1a0053b6:	f7fd f93d 	bl	1a002634 <__aeabi_d2iz>
1a0053ba:	9000      	str	r0, [sp, #0]
1a0053bc:	f7fc fe20 	bl	1a002000 <__aeabi_i2d>
1a0053c0:	4602      	mov	r2, r0
1a0053c2:	460b      	mov	r3, r1
1a0053c4:	4630      	mov	r0, r6
1a0053c6:	4639      	mov	r1, r7
1a0053c8:	f7fc fccc 	bl	1a001d64 <__aeabi_dsub>
1a0053cc:	4b7f      	ldr	r3, [pc, #508]	; (1a0055cc <_dtoa_r+0x54c>)
1a0053ce:	9a00      	ldr	r2, [sp, #0]
1a0053d0:	460f      	mov	r7, r1
1a0053d2:	9910      	ldr	r1, [sp, #64]	; 0x40
1a0053d4:	4606      	mov	r6, r0
1a0053d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a0053da:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a0053dc:	9903      	ldr	r1, [sp, #12]
1a0053de:	3230      	adds	r2, #48	; 0x30
1a0053e0:	e9cd 4500 	strd	r4, r5, [sp]
1a0053e4:	b2d5      	uxtb	r5, r2
1a0053e6:	1c4c      	adds	r4, r1, #1
1a0053e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a0053ec:	2800      	cmp	r0, #0
1a0053ee:	f000 848d 	beq.w	1a005d0c <_dtoa_r+0xc8c>
1a0053f2:	2000      	movs	r0, #0
1a0053f4:	4979      	ldr	r1, [pc, #484]	; (1a0055dc <_dtoa_r+0x55c>)
1a0053f6:	f7fc ff97 	bl	1a002328 <__aeabi_ddiv>
1a0053fa:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0053fe:	f7fc fcb1 	bl	1a001d64 <__aeabi_dsub>
1a005402:	9b03      	ldr	r3, [sp, #12]
1a005404:	4632      	mov	r2, r6
1a005406:	701d      	strb	r5, [r3, #0]
1a005408:	463b      	mov	r3, r7
1a00540a:	e9cd 0100 	strd	r0, r1, [sp]
1a00540e:	f7fd f8f1 	bl	1a0025f4 <__aeabi_dcmpgt>
1a005412:	2800      	cmp	r0, #0
1a005414:	f040 84ca 	bne.w	1a005dac <_dtoa_r+0xd2c>
1a005418:	4632      	mov	r2, r6
1a00541a:	463b      	mov	r3, r7
1a00541c:	2000      	movs	r0, #0
1a00541e:	496d      	ldr	r1, [pc, #436]	; (1a0055d4 <_dtoa_r+0x554>)
1a005420:	f7fc fca0 	bl	1a001d64 <__aeabi_dsub>
1a005424:	4602      	mov	r2, r0
1a005426:	460b      	mov	r3, r1
1a005428:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00542c:	f7fd f8e2 	bl	1a0025f4 <__aeabi_dcmpgt>
1a005430:	2800      	cmp	r0, #0
1a005432:	f040 8526 	bne.w	1a005e82 <_dtoa_r+0xe02>
1a005436:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005438:	2b01      	cmp	r3, #1
1a00543a:	d062      	beq.n	1a005502 <_dtoa_r+0x482>
1a00543c:	9a03      	ldr	r2, [sp, #12]
1a00543e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005442:	4413      	add	r3, r2
1a005444:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a005448:	e9dd 8900 	ldrd	r8, r9, [sp]
1a00544c:	f8cd b000 	str.w	fp, [sp]
1a005450:	46d3      	mov	fp, sl
1a005452:	469a      	mov	sl, r3
1a005454:	e00c      	b.n	1a005470 <_dtoa_r+0x3f0>
1a005456:	2000      	movs	r0, #0
1a005458:	495e      	ldr	r1, [pc, #376]	; (1a0055d4 <_dtoa_r+0x554>)
1a00545a:	f7fc fc83 	bl	1a001d64 <__aeabi_dsub>
1a00545e:	4642      	mov	r2, r8
1a005460:	464b      	mov	r3, r9
1a005462:	f7fd f8a9 	bl	1a0025b8 <__aeabi_dcmplt>
1a005466:	2800      	cmp	r0, #0
1a005468:	f040 84eb 	bne.w	1a005e42 <_dtoa_r+0xdc2>
1a00546c:	45a2      	cmp	sl, r4
1a00546e:	d041      	beq.n	1a0054f4 <_dtoa_r+0x474>
1a005470:	4640      	mov	r0, r8
1a005472:	4649      	mov	r1, r9
1a005474:	2200      	movs	r2, #0
1a005476:	4b5a      	ldr	r3, [pc, #360]	; (1a0055e0 <_dtoa_r+0x560>)
1a005478:	f7fc fe2c 	bl	1a0020d4 <__aeabi_dmul>
1a00547c:	2200      	movs	r2, #0
1a00547e:	4b58      	ldr	r3, [pc, #352]	; (1a0055e0 <_dtoa_r+0x560>)
1a005480:	4680      	mov	r8, r0
1a005482:	4689      	mov	r9, r1
1a005484:	4630      	mov	r0, r6
1a005486:	4639      	mov	r1, r7
1a005488:	f7fc fe24 	bl	1a0020d4 <__aeabi_dmul>
1a00548c:	460f      	mov	r7, r1
1a00548e:	4606      	mov	r6, r0
1a005490:	f7fd f8d0 	bl	1a002634 <__aeabi_d2iz>
1a005494:	4605      	mov	r5, r0
1a005496:	f7fc fdb3 	bl	1a002000 <__aeabi_i2d>
1a00549a:	4602      	mov	r2, r0
1a00549c:	460b      	mov	r3, r1
1a00549e:	4630      	mov	r0, r6
1a0054a0:	4639      	mov	r1, r7
1a0054a2:	f7fc fc5f 	bl	1a001d64 <__aeabi_dsub>
1a0054a6:	3530      	adds	r5, #48	; 0x30
1a0054a8:	b2ed      	uxtb	r5, r5
1a0054aa:	4642      	mov	r2, r8
1a0054ac:	464b      	mov	r3, r9
1a0054ae:	f804 5b01 	strb.w	r5, [r4], #1
1a0054b2:	4606      	mov	r6, r0
1a0054b4:	460f      	mov	r7, r1
1a0054b6:	f7fd f87f 	bl	1a0025b8 <__aeabi_dcmplt>
1a0054ba:	4632      	mov	r2, r6
1a0054bc:	463b      	mov	r3, r7
1a0054be:	2800      	cmp	r0, #0
1a0054c0:	d0c9      	beq.n	1a005456 <_dtoa_r+0x3d6>
1a0054c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0054c4:	46da      	mov	sl, fp
1a0054c6:	3301      	adds	r3, #1
1a0054c8:	f8dd b000 	ldr.w	fp, [sp]
1a0054cc:	9306      	str	r3, [sp, #24]
1a0054ce:	4659      	mov	r1, fp
1a0054d0:	4650      	mov	r0, sl
1a0054d2:	f000 fde3 	bl	1a00609c <_Bfree>
1a0054d6:	2300      	movs	r3, #0
1a0054d8:	7023      	strb	r3, [r4, #0]
1a0054da:	9b07      	ldr	r3, [sp, #28]
1a0054dc:	461a      	mov	r2, r3
1a0054de:	9b06      	ldr	r3, [sp, #24]
1a0054e0:	6013      	str	r3, [r2, #0]
1a0054e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0054e4:	2b00      	cmp	r3, #0
1a0054e6:	f43f ae09 	beq.w	1a0050fc <_dtoa_r+0x7c>
1a0054ea:	9803      	ldr	r0, [sp, #12]
1a0054ec:	601c      	str	r4, [r3, #0]
1a0054ee:	b017      	add	sp, #92	; 0x5c
1a0054f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0054f4:	46da      	mov	sl, fp
1a0054f6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a0054fa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a0054fe:	f8dd b000 	ldr.w	fp, [sp]
1a005502:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a005506:	e9cd 3400 	strd	r3, r4, [sp]
1a00550a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00550c:	2b00      	cmp	r3, #0
1a00550e:	f2c0 80c9 	blt.w	1a0056a4 <_dtoa_r+0x624>
1a005512:	9a06      	ldr	r2, [sp, #24]
1a005514:	2a0e      	cmp	r2, #14
1a005516:	f300 80c5 	bgt.w	1a0056a4 <_dtoa_r+0x624>
1a00551a:	4b2c      	ldr	r3, [pc, #176]	; (1a0055cc <_dtoa_r+0x54c>)
1a00551c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005520:	e9d3 8900 	ldrd	r8, r9, [r3]
1a005524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005526:	2b00      	cmp	r3, #0
1a005528:	da17      	bge.n	1a00555a <_dtoa_r+0x4da>
1a00552a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a00552c:	2f00      	cmp	r7, #0
1a00552e:	dc14      	bgt.n	1a00555a <_dtoa_r+0x4da>
1a005530:	f040 834b 	bne.w	1a005bca <_dtoa_r+0xb4a>
1a005534:	2200      	movs	r2, #0
1a005536:	4b2b      	ldr	r3, [pc, #172]	; (1a0055e4 <_dtoa_r+0x564>)
1a005538:	4640      	mov	r0, r8
1a00553a:	4649      	mov	r1, r9
1a00553c:	f7fc fdca 	bl	1a0020d4 <__aeabi_dmul>
1a005540:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005544:	f7fd f84c 	bl	1a0025e0 <__aeabi_dcmpge>
1a005548:	2800      	cmp	r0, #0
1a00554a:	f000 83be 	beq.w	1a005cca <_dtoa_r+0xc4a>
1a00554e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a005550:	463d      	mov	r5, r7
1a005552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005554:	9c03      	ldr	r4, [sp, #12]
1a005556:	43db      	mvns	r3, r3
1a005558:	e260      	b.n	1a005a1c <_dtoa_r+0x99c>
1a00555a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00555e:	4642      	mov	r2, r8
1a005560:	464b      	mov	r3, r9
1a005562:	4620      	mov	r0, r4
1a005564:	4629      	mov	r1, r5
1a005566:	f7fc fedf 	bl	1a002328 <__aeabi_ddiv>
1a00556a:	f7fd f863 	bl	1a002634 <__aeabi_d2iz>
1a00556e:	9000      	str	r0, [sp, #0]
1a005570:	f7fc fd46 	bl	1a002000 <__aeabi_i2d>
1a005574:	4642      	mov	r2, r8
1a005576:	464b      	mov	r3, r9
1a005578:	f7fc fdac 	bl	1a0020d4 <__aeabi_dmul>
1a00557c:	4602      	mov	r2, r0
1a00557e:	460b      	mov	r3, r1
1a005580:	4620      	mov	r0, r4
1a005582:	4629      	mov	r1, r5
1a005584:	f7fc fbee 	bl	1a001d64 <__aeabi_dsub>
1a005588:	9b00      	ldr	r3, [sp, #0]
1a00558a:	9c03      	ldr	r4, [sp, #12]
1a00558c:	9a06      	ldr	r2, [sp, #24]
1a00558e:	3330      	adds	r3, #48	; 0x30
1a005590:	f804 3b01 	strb.w	r3, [r4], #1
1a005594:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005596:	3201      	adds	r2, #1
1a005598:	2b01      	cmp	r3, #1
1a00559a:	4606      	mov	r6, r0
1a00559c:	460f      	mov	r7, r1
1a00559e:	9206      	str	r2, [sp, #24]
1a0055a0:	d054      	beq.n	1a00564c <_dtoa_r+0x5cc>
1a0055a2:	2200      	movs	r2, #0
1a0055a4:	4b0e      	ldr	r3, [pc, #56]	; (1a0055e0 <_dtoa_r+0x560>)
1a0055a6:	f7fc fd95 	bl	1a0020d4 <__aeabi_dmul>
1a0055aa:	2200      	movs	r2, #0
1a0055ac:	2300      	movs	r3, #0
1a0055ae:	4606      	mov	r6, r0
1a0055b0:	460f      	mov	r7, r1
1a0055b2:	f7fc fff7 	bl	1a0025a4 <__aeabi_dcmpeq>
1a0055b6:	2800      	cmp	r0, #0
1a0055b8:	d189      	bne.n	1a0054ce <_dtoa_r+0x44e>
1a0055ba:	f8cd b000 	str.w	fp, [sp]
1a0055be:	2501      	movs	r5, #1
1a0055c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a0055c4:	f8cd a008 	str.w	sl, [sp, #8]
1a0055c8:	e019      	b.n	1a0055fe <_dtoa_r+0x57e>
1a0055ca:	bf00      	nop
1a0055cc:	1a0070f8 	.word	0x1a0070f8
1a0055d0:	1a0070d0 	.word	0x1a0070d0
1a0055d4:	3ff00000 	.word	0x3ff00000
1a0055d8:	401c0000 	.word	0x401c0000
1a0055dc:	3fe00000 	.word	0x3fe00000
1a0055e0:	40240000 	.word	0x40240000
1a0055e4:	40140000 	.word	0x40140000
1a0055e8:	f7fc fd74 	bl	1a0020d4 <__aeabi_dmul>
1a0055ec:	2200      	movs	r2, #0
1a0055ee:	2300      	movs	r3, #0
1a0055f0:	4606      	mov	r6, r0
1a0055f2:	460f      	mov	r7, r1
1a0055f4:	f7fc ffd6 	bl	1a0025a4 <__aeabi_dcmpeq>
1a0055f8:	2800      	cmp	r0, #0
1a0055fa:	f040 835c 	bne.w	1a005cb6 <_dtoa_r+0xc36>
1a0055fe:	4642      	mov	r2, r8
1a005600:	464b      	mov	r3, r9
1a005602:	4630      	mov	r0, r6
1a005604:	4639      	mov	r1, r7
1a005606:	f7fc fe8f 	bl	1a002328 <__aeabi_ddiv>
1a00560a:	f7fd f813 	bl	1a002634 <__aeabi_d2iz>
1a00560e:	4682      	mov	sl, r0
1a005610:	f7fc fcf6 	bl	1a002000 <__aeabi_i2d>
1a005614:	4642      	mov	r2, r8
1a005616:	464b      	mov	r3, r9
1a005618:	f7fc fd5c 	bl	1a0020d4 <__aeabi_dmul>
1a00561c:	4602      	mov	r2, r0
1a00561e:	460b      	mov	r3, r1
1a005620:	4630      	mov	r0, r6
1a005622:	4639      	mov	r1, r7
1a005624:	f7fc fb9e 	bl	1a001d64 <__aeabi_dsub>
1a005628:	3501      	adds	r5, #1
1a00562a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a00562e:	45ab      	cmp	fp, r5
1a005630:	4606      	mov	r6, r0
1a005632:	460f      	mov	r7, r1
1a005634:	f04f 0200 	mov.w	r2, #0
1a005638:	4ba7      	ldr	r3, [pc, #668]	; (1a0058d8 <_dtoa_r+0x858>)
1a00563a:	f804 cb01 	strb.w	ip, [r4], #1
1a00563e:	d1d3      	bne.n	1a0055e8 <_dtoa_r+0x568>
1a005640:	f8dd b000 	ldr.w	fp, [sp]
1a005644:	f8cd a000 	str.w	sl, [sp]
1a005648:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00564c:	4632      	mov	r2, r6
1a00564e:	463b      	mov	r3, r7
1a005650:	4630      	mov	r0, r6
1a005652:	4639      	mov	r1, r7
1a005654:	f7fc fb88 	bl	1a001d68 <__adddf3>
1a005658:	4642      	mov	r2, r8
1a00565a:	464b      	mov	r3, r9
1a00565c:	4606      	mov	r6, r0
1a00565e:	460f      	mov	r7, r1
1a005660:	f7fc ffc8 	bl	1a0025f4 <__aeabi_dcmpgt>
1a005664:	b960      	cbnz	r0, 1a005680 <_dtoa_r+0x600>
1a005666:	4642      	mov	r2, r8
1a005668:	464b      	mov	r3, r9
1a00566a:	4630      	mov	r0, r6
1a00566c:	4639      	mov	r1, r7
1a00566e:	f7fc ff99 	bl	1a0025a4 <__aeabi_dcmpeq>
1a005672:	2800      	cmp	r0, #0
1a005674:	f43f af2b 	beq.w	1a0054ce <_dtoa_r+0x44e>
1a005678:	9b00      	ldr	r3, [sp, #0]
1a00567a:	07db      	lsls	r3, r3, #31
1a00567c:	f57f af27 	bpl.w	1a0054ce <_dtoa_r+0x44e>
1a005680:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005684:	9a03      	ldr	r2, [sp, #12]
1a005686:	1e63      	subs	r3, r4, #1
1a005688:	e004      	b.n	1a005694 <_dtoa_r+0x614>
1a00568a:	429a      	cmp	r2, r3
1a00568c:	f000 83c0 	beq.w	1a005e10 <_dtoa_r+0xd90>
1a005690:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a005694:	2d39      	cmp	r5, #57	; 0x39
1a005696:	f103 0401 	add.w	r4, r3, #1
1a00569a:	d0f6      	beq.n	1a00568a <_dtoa_r+0x60a>
1a00569c:	1c6a      	adds	r2, r5, #1
1a00569e:	b2d2      	uxtb	r2, r2
1a0056a0:	701a      	strb	r2, [r3, #0]
1a0056a2:	e714      	b.n	1a0054ce <_dtoa_r+0x44e>
1a0056a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0056a6:	2a00      	cmp	r2, #0
1a0056a8:	d03c      	beq.n	1a005724 <_dtoa_r+0x6a4>
1a0056aa:	9a02      	ldr	r2, [sp, #8]
1a0056ac:	2a01      	cmp	r2, #1
1a0056ae:	f340 8258 	ble.w	1a005b62 <_dtoa_r+0xae2>
1a0056b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056b4:	1e5e      	subs	r6, r3, #1
1a0056b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0056b8:	42b3      	cmp	r3, r6
1a0056ba:	f280 8234 	bge.w	1a005b26 <_dtoa_r+0xaa6>
1a0056be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0056c0:	960c      	str	r6, [sp, #48]	; 0x30
1a0056c2:	1af3      	subs	r3, r6, r3
1a0056c4:	4499      	add	r9, r3
1a0056c6:	2600      	movs	r6, #0
1a0056c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056ca:	2b00      	cmp	r3, #0
1a0056cc:	f2c0 82f8 	blt.w	1a005cc0 <_dtoa_r+0xc40>
1a0056d0:	9a08      	ldr	r2, [sp, #32]
1a0056d2:	4614      	mov	r4, r2
1a0056d4:	441a      	add	r2, r3
1a0056d6:	4498      	add	r8, r3
1a0056d8:	9208      	str	r2, [sp, #32]
1a0056da:	2101      	movs	r1, #1
1a0056dc:	4650      	mov	r0, sl
1a0056de:	f000 fd7d 	bl	1a0061dc <__i2b>
1a0056e2:	4605      	mov	r5, r0
1a0056e4:	e021      	b.n	1a00572a <_dtoa_r+0x6aa>
1a0056e6:	2301      	movs	r3, #1
1a0056e8:	f1b8 0f00 	cmp.w	r8, #0
1a0056ec:	930d      	str	r3, [sp, #52]	; 0x34
1a0056ee:	f6bf ad77 	bge.w	1a0051e0 <_dtoa_r+0x160>
1a0056f2:	f1c4 0301 	rsb	r3, r4, #1
1a0056f6:	9308      	str	r3, [sp, #32]
1a0056f8:	f04f 0800 	mov.w	r8, #0
1a0056fc:	e572      	b.n	1a0051e4 <_dtoa_r+0x164>
1a0056fe:	4648      	mov	r0, r9
1a005700:	f7fc fc7e 	bl	1a002000 <__aeabi_i2d>
1a005704:	4632      	mov	r2, r6
1a005706:	463b      	mov	r3, r7
1a005708:	f7fc ff4c 	bl	1a0025a4 <__aeabi_dcmpeq>
1a00570c:	2800      	cmp	r0, #0
1a00570e:	f47f ad4d 	bne.w	1a0051ac <_dtoa_r+0x12c>
1a005712:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a005716:	e549      	b.n	1a0051ac <_dtoa_r+0x12c>
1a005718:	4b70      	ldr	r3, [pc, #448]	; (1a0058dc <_dtoa_r+0x85c>)
1a00571a:	9303      	str	r3, [sp, #12]
1a00571c:	9803      	ldr	r0, [sp, #12]
1a00571e:	b017      	add	sp, #92	; 0x5c
1a005720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005724:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a005726:	9c08      	ldr	r4, [sp, #32]
1a005728:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00572a:	2c00      	cmp	r4, #0
1a00572c:	dd0c      	ble.n	1a005748 <_dtoa_r+0x6c8>
1a00572e:	f1b8 0f00 	cmp.w	r8, #0
1a005732:	dd09      	ble.n	1a005748 <_dtoa_r+0x6c8>
1a005734:	4544      	cmp	r4, r8
1a005736:	9a08      	ldr	r2, [sp, #32]
1a005738:	4623      	mov	r3, r4
1a00573a:	bfa8      	it	ge
1a00573c:	4643      	movge	r3, r8
1a00573e:	1ad2      	subs	r2, r2, r3
1a005740:	9208      	str	r2, [sp, #32]
1a005742:	1ae4      	subs	r4, r4, r3
1a005744:	eba8 0803 	sub.w	r8, r8, r3
1a005748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00574a:	b1d3      	cbz	r3, 1a005782 <_dtoa_r+0x702>
1a00574c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00574e:	2b00      	cmp	r3, #0
1a005750:	f000 8189 	beq.w	1a005a66 <_dtoa_r+0x9e6>
1a005754:	2e00      	cmp	r6, #0
1a005756:	dd10      	ble.n	1a00577a <_dtoa_r+0x6fa>
1a005758:	4629      	mov	r1, r5
1a00575a:	4632      	mov	r2, r6
1a00575c:	4650      	mov	r0, sl
1a00575e:	f000 fddf 	bl	1a006320 <__pow5mult>
1a005762:	465a      	mov	r2, fp
1a005764:	4601      	mov	r1, r0
1a005766:	4605      	mov	r5, r0
1a005768:	4650      	mov	r0, sl
1a00576a:	f000 fd41 	bl	1a0061f0 <__multiply>
1a00576e:	4659      	mov	r1, fp
1a005770:	4607      	mov	r7, r0
1a005772:	4650      	mov	r0, sl
1a005774:	f000 fc92 	bl	1a00609c <_Bfree>
1a005778:	46bb      	mov	fp, r7
1a00577a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00577c:	1b9a      	subs	r2, r3, r6
1a00577e:	f040 8173 	bne.w	1a005a68 <_dtoa_r+0x9e8>
1a005782:	2101      	movs	r1, #1
1a005784:	4650      	mov	r0, sl
1a005786:	f000 fd29 	bl	1a0061dc <__i2b>
1a00578a:	f1b9 0f00 	cmp.w	r9, #0
1a00578e:	4607      	mov	r7, r0
1a005790:	f300 808e 	bgt.w	1a0058b0 <_dtoa_r+0x830>
1a005794:	9b02      	ldr	r3, [sp, #8]
1a005796:	2b01      	cmp	r3, #1
1a005798:	f340 8171 	ble.w	1a005a7e <_dtoa_r+0x9fe>
1a00579c:	2600      	movs	r6, #0
1a00579e:	2001      	movs	r0, #1
1a0057a0:	f1b9 0f00 	cmp.w	r9, #0
1a0057a4:	f040 808f 	bne.w	1a0058c6 <_dtoa_r+0x846>
1a0057a8:	4440      	add	r0, r8
1a0057aa:	f010 001f 	ands.w	r0, r0, #31
1a0057ae:	d075      	beq.n	1a00589c <_dtoa_r+0x81c>
1a0057b0:	f1c0 0320 	rsb	r3, r0, #32
1a0057b4:	2b04      	cmp	r3, #4
1a0057b6:	f340 836d 	ble.w	1a005e94 <_dtoa_r+0xe14>
1a0057ba:	f1c0 001c 	rsb	r0, r0, #28
1a0057be:	9b08      	ldr	r3, [sp, #32]
1a0057c0:	4403      	add	r3, r0
1a0057c2:	9308      	str	r3, [sp, #32]
1a0057c4:	4404      	add	r4, r0
1a0057c6:	4480      	add	r8, r0
1a0057c8:	9b08      	ldr	r3, [sp, #32]
1a0057ca:	2b00      	cmp	r3, #0
1a0057cc:	dd05      	ble.n	1a0057da <_dtoa_r+0x75a>
1a0057ce:	4659      	mov	r1, fp
1a0057d0:	461a      	mov	r2, r3
1a0057d2:	4650      	mov	r0, sl
1a0057d4:	f000 fdf4 	bl	1a0063c0 <__lshift>
1a0057d8:	4683      	mov	fp, r0
1a0057da:	f1b8 0f00 	cmp.w	r8, #0
1a0057de:	dd05      	ble.n	1a0057ec <_dtoa_r+0x76c>
1a0057e0:	4639      	mov	r1, r7
1a0057e2:	4642      	mov	r2, r8
1a0057e4:	4650      	mov	r0, sl
1a0057e6:	f000 fdeb 	bl	1a0063c0 <__lshift>
1a0057ea:	4607      	mov	r7, r0
1a0057ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0057ee:	2b00      	cmp	r3, #0
1a0057f0:	f040 811e 	bne.w	1a005a30 <_dtoa_r+0x9b0>
1a0057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0057f6:	2b00      	cmp	r3, #0
1a0057f8:	f340 80f5 	ble.w	1a0059e6 <_dtoa_r+0x966>
1a0057fc:	9b06      	ldr	r3, [sp, #24]
1a0057fe:	3301      	adds	r3, #1
1a005800:	9306      	str	r3, [sp, #24]
1a005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005804:	2b00      	cmp	r3, #0
1a005806:	d177      	bne.n	1a0058f8 <_dtoa_r+0x878>
1a005808:	9c03      	ldr	r4, [sp, #12]
1a00580a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00580e:	2601      	movs	r6, #1
1a005810:	e003      	b.n	1a00581a <_dtoa_r+0x79a>
1a005812:	f000 fc4d 	bl	1a0060b0 <__multadd>
1a005816:	3601      	adds	r6, #1
1a005818:	4683      	mov	fp, r0
1a00581a:	4639      	mov	r1, r7
1a00581c:	4658      	mov	r0, fp
1a00581e:	f7ff fb9d 	bl	1a004f5c <quorem>
1a005822:	4546      	cmp	r6, r8
1a005824:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a005828:	f804 9b01 	strb.w	r9, [r4], #1
1a00582c:	f04f 0300 	mov.w	r3, #0
1a005830:	f04f 020a 	mov.w	r2, #10
1a005834:	4659      	mov	r1, fp
1a005836:	4650      	mov	r0, sl
1a005838:	dbeb      	blt.n	1a005812 <_dtoa_r+0x792>
1a00583a:	2300      	movs	r3, #0
1a00583c:	9300      	str	r3, [sp, #0]
1a00583e:	4659      	mov	r1, fp
1a005840:	2201      	movs	r2, #1
1a005842:	4650      	mov	r0, sl
1a005844:	f000 fdbc 	bl	1a0063c0 <__lshift>
1a005848:	4639      	mov	r1, r7
1a00584a:	4683      	mov	fp, r0
1a00584c:	f000 fe12 	bl	1a006474 <__mcmp>
1a005850:	2800      	cmp	r0, #0
1a005852:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a005856:	f340 816f 	ble.w	1a005b38 <_dtoa_r+0xab8>
1a00585a:	1e63      	subs	r3, r4, #1
1a00585c:	9903      	ldr	r1, [sp, #12]
1a00585e:	e004      	b.n	1a00586a <_dtoa_r+0x7ea>
1a005860:	4299      	cmp	r1, r3
1a005862:	f000 8177 	beq.w	1a005b54 <_dtoa_r+0xad4>
1a005866:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a00586a:	2a39      	cmp	r2, #57	; 0x39
1a00586c:	f103 0401 	add.w	r4, r3, #1
1a005870:	d0f6      	beq.n	1a005860 <_dtoa_r+0x7e0>
1a005872:	3201      	adds	r2, #1
1a005874:	701a      	strb	r2, [r3, #0]
1a005876:	4639      	mov	r1, r7
1a005878:	4650      	mov	r0, sl
1a00587a:	f000 fc0f 	bl	1a00609c <_Bfree>
1a00587e:	2d00      	cmp	r5, #0
1a005880:	f43f ae25 	beq.w	1a0054ce <_dtoa_r+0x44e>
1a005884:	9900      	ldr	r1, [sp, #0]
1a005886:	b121      	cbz	r1, 1a005892 <_dtoa_r+0x812>
1a005888:	42a9      	cmp	r1, r5
1a00588a:	d002      	beq.n	1a005892 <_dtoa_r+0x812>
1a00588c:	4650      	mov	r0, sl
1a00588e:	f000 fc05 	bl	1a00609c <_Bfree>
1a005892:	4629      	mov	r1, r5
1a005894:	4650      	mov	r0, sl
1a005896:	f000 fc01 	bl	1a00609c <_Bfree>
1a00589a:	e618      	b.n	1a0054ce <_dtoa_r+0x44e>
1a00589c:	201c      	movs	r0, #28
1a00589e:	e78e      	b.n	1a0057be <_dtoa_r+0x73e>
1a0058a0:	2401      	movs	r4, #1
1a0058a2:	e4b6      	b.n	1a005212 <_dtoa_r+0x192>
1a0058a4:	f1c3 0620 	rsb	r6, r3, #32
1a0058a8:	9b00      	ldr	r3, [sp, #0]
1a0058aa:	fa03 f006 	lsl.w	r0, r3, r6
1a0058ae:	e447      	b.n	1a005140 <_dtoa_r+0xc0>
1a0058b0:	4601      	mov	r1, r0
1a0058b2:	464a      	mov	r2, r9
1a0058b4:	4650      	mov	r0, sl
1a0058b6:	f000 fd33 	bl	1a006320 <__pow5mult>
1a0058ba:	9b02      	ldr	r3, [sp, #8]
1a0058bc:	2b01      	cmp	r3, #1
1a0058be:	4607      	mov	r7, r0
1a0058c0:	f340 81b2 	ble.w	1a005c28 <_dtoa_r+0xba8>
1a0058c4:	2600      	movs	r6, #0
1a0058c6:	693b      	ldr	r3, [r7, #16]
1a0058c8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a0058cc:	6918      	ldr	r0, [r3, #16]
1a0058ce:	f000 fc35 	bl	1a00613c <__hi0bits>
1a0058d2:	f1c0 0020 	rsb	r0, r0, #32
1a0058d6:	e767      	b.n	1a0057a8 <_dtoa_r+0x728>
1a0058d8:	40240000 	.word	0x40240000
1a0058dc:	1a007098 	.word	0x1a007098
1a0058e0:	4629      	mov	r1, r5
1a0058e2:	2300      	movs	r3, #0
1a0058e4:	220a      	movs	r2, #10
1a0058e6:	4650      	mov	r0, sl
1a0058e8:	f000 fbe2 	bl	1a0060b0 <__multadd>
1a0058ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0058ee:	2b00      	cmp	r3, #0
1a0058f0:	4605      	mov	r5, r0
1a0058f2:	f340 82c1 	ble.w	1a005e78 <_dtoa_r+0xdf8>
1a0058f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0058f8:	2c00      	cmp	r4, #0
1a0058fa:	f300 810d 	bgt.w	1a005b18 <_dtoa_r+0xa98>
1a0058fe:	2e00      	cmp	r6, #0
1a005900:	f040 81c5 	bne.w	1a005c8e <_dtoa_r+0xc0e>
1a005904:	46a8      	mov	r8, r5
1a005906:	9b00      	ldr	r3, [sp, #0]
1a005908:	9902      	ldr	r1, [sp, #8]
1a00590a:	9e03      	ldr	r6, [sp, #12]
1a00590c:	f003 0201 	and.w	r2, r3, #1
1a005910:	920b      	str	r2, [sp, #44]	; 0x2c
1a005912:	430a      	orrs	r2, r1
1a005914:	920a      	str	r2, [sp, #40]	; 0x28
1a005916:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005918:	1e73      	subs	r3, r6, #1
1a00591a:	441a      	add	r2, r3
1a00591c:	9209      	str	r2, [sp, #36]	; 0x24
1a00591e:	463c      	mov	r4, r7
1a005920:	4621      	mov	r1, r4
1a005922:	4658      	mov	r0, fp
1a005924:	f7ff fb1a 	bl	1a004f5c <quorem>
1a005928:	4629      	mov	r1, r5
1a00592a:	9000      	str	r0, [sp, #0]
1a00592c:	4658      	mov	r0, fp
1a00592e:	f000 fda1 	bl	1a006474 <__mcmp>
1a005932:	4642      	mov	r2, r8
1a005934:	4607      	mov	r7, r0
1a005936:	4621      	mov	r1, r4
1a005938:	4650      	mov	r0, sl
1a00593a:	f000 fdb7 	bl	1a0064ac <__mdiff>
1a00593e:	9b00      	ldr	r3, [sp, #0]
1a005940:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a005944:	68c3      	ldr	r3, [r0, #12]
1a005946:	4681      	mov	r9, r0
1a005948:	2b00      	cmp	r3, #0
1a00594a:	d13e      	bne.n	1a0059ca <_dtoa_r+0x94a>
1a00594c:	4601      	mov	r1, r0
1a00594e:	4658      	mov	r0, fp
1a005950:	9208      	str	r2, [sp, #32]
1a005952:	f000 fd8f 	bl	1a006474 <__mcmp>
1a005956:	4649      	mov	r1, r9
1a005958:	9004      	str	r0, [sp, #16]
1a00595a:	4650      	mov	r0, sl
1a00595c:	f000 fb9e 	bl	1a00609c <_Bfree>
1a005960:	9b04      	ldr	r3, [sp, #16]
1a005962:	9a08      	ldr	r2, [sp, #32]
1a005964:	b91b      	cbnz	r3, 1a00596e <_dtoa_r+0x8ee>
1a005966:	990a      	ldr	r1, [sp, #40]	; 0x28
1a005968:	2900      	cmp	r1, #0
1a00596a:	f000 8271 	beq.w	1a005e50 <_dtoa_r+0xdd0>
1a00596e:	2f00      	cmp	r7, #0
1a005970:	f106 0901 	add.w	r9, r6, #1
1a005974:	f2c0 816e 	blt.w	1a005c54 <_dtoa_r+0xbd4>
1a005978:	9902      	ldr	r1, [sp, #8]
1a00597a:	430f      	orrs	r7, r1
1a00597c:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a00597e:	4339      	orrs	r1, r7
1a005980:	f000 8168 	beq.w	1a005c54 <_dtoa_r+0xbd4>
1a005984:	2b00      	cmp	r3, #0
1a005986:	f300 81a2 	bgt.w	1a005cce <_dtoa_r+0xc4e>
1a00598a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00598c:	7032      	strb	r2, [r6, #0]
1a00598e:	42b3      	cmp	r3, r6
1a005990:	f000 81a9 	beq.w	1a005ce6 <_dtoa_r+0xc66>
1a005994:	4659      	mov	r1, fp
1a005996:	2300      	movs	r3, #0
1a005998:	220a      	movs	r2, #10
1a00599a:	4650      	mov	r0, sl
1a00599c:	f000 fb88 	bl	1a0060b0 <__multadd>
1a0059a0:	4545      	cmp	r5, r8
1a0059a2:	4683      	mov	fp, r0
1a0059a4:	4629      	mov	r1, r5
1a0059a6:	f04f 0300 	mov.w	r3, #0
1a0059aa:	f04f 020a 	mov.w	r2, #10
1a0059ae:	4650      	mov	r0, sl
1a0059b0:	d013      	beq.n	1a0059da <_dtoa_r+0x95a>
1a0059b2:	f000 fb7d 	bl	1a0060b0 <__multadd>
1a0059b6:	4641      	mov	r1, r8
1a0059b8:	4605      	mov	r5, r0
1a0059ba:	2300      	movs	r3, #0
1a0059bc:	220a      	movs	r2, #10
1a0059be:	4650      	mov	r0, sl
1a0059c0:	f000 fb76 	bl	1a0060b0 <__multadd>
1a0059c4:	464e      	mov	r6, r9
1a0059c6:	4680      	mov	r8, r0
1a0059c8:	e7aa      	b.n	1a005920 <_dtoa_r+0x8a0>
1a0059ca:	4601      	mov	r1, r0
1a0059cc:	4650      	mov	r0, sl
1a0059ce:	9204      	str	r2, [sp, #16]
1a0059d0:	f000 fb64 	bl	1a00609c <_Bfree>
1a0059d4:	2301      	movs	r3, #1
1a0059d6:	9a04      	ldr	r2, [sp, #16]
1a0059d8:	e7c9      	b.n	1a00596e <_dtoa_r+0x8ee>
1a0059da:	f000 fb69 	bl	1a0060b0 <__multadd>
1a0059de:	464e      	mov	r6, r9
1a0059e0:	4605      	mov	r5, r0
1a0059e2:	4680      	mov	r8, r0
1a0059e4:	e79c      	b.n	1a005920 <_dtoa_r+0x8a0>
1a0059e6:	9b02      	ldr	r3, [sp, #8]
1a0059e8:	2b02      	cmp	r3, #2
1a0059ea:	f340 8082 	ble.w	1a005af2 <_dtoa_r+0xa72>
1a0059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0059f0:	2b00      	cmp	r3, #0
1a0059f2:	f47f adae 	bne.w	1a005552 <_dtoa_r+0x4d2>
1a0059f6:	4639      	mov	r1, r7
1a0059f8:	2205      	movs	r2, #5
1a0059fa:	4650      	mov	r0, sl
1a0059fc:	f000 fb58 	bl	1a0060b0 <__multadd>
1a005a00:	4601      	mov	r1, r0
1a005a02:	4607      	mov	r7, r0
1a005a04:	4658      	mov	r0, fp
1a005a06:	f000 fd35 	bl	1a006474 <__mcmp>
1a005a0a:	2800      	cmp	r0, #0
1a005a0c:	f77f ada1 	ble.w	1a005552 <_dtoa_r+0x4d2>
1a005a10:	9c03      	ldr	r4, [sp, #12]
1a005a12:	9b06      	ldr	r3, [sp, #24]
1a005a14:	2231      	movs	r2, #49	; 0x31
1a005a16:	f804 2b01 	strb.w	r2, [r4], #1
1a005a1a:	3301      	adds	r3, #1
1a005a1c:	3301      	adds	r3, #1
1a005a1e:	4639      	mov	r1, r7
1a005a20:	4650      	mov	r0, sl
1a005a22:	9306      	str	r3, [sp, #24]
1a005a24:	f000 fb3a 	bl	1a00609c <_Bfree>
1a005a28:	2d00      	cmp	r5, #0
1a005a2a:	f47f af32 	bne.w	1a005892 <_dtoa_r+0x812>
1a005a2e:	e54e      	b.n	1a0054ce <_dtoa_r+0x44e>
1a005a30:	4639      	mov	r1, r7
1a005a32:	4658      	mov	r0, fp
1a005a34:	f000 fd1e 	bl	1a006474 <__mcmp>
1a005a38:	2800      	cmp	r0, #0
1a005a3a:	f6bf aedb 	bge.w	1a0057f4 <_dtoa_r+0x774>
1a005a3e:	4659      	mov	r1, fp
1a005a40:	2300      	movs	r3, #0
1a005a42:	220a      	movs	r2, #10
1a005a44:	4650      	mov	r0, sl
1a005a46:	f000 fb33 	bl	1a0060b0 <__multadd>
1a005a4a:	9b06      	ldr	r3, [sp, #24]
1a005a4c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a005a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005a52:	4683      	mov	fp, r0
1a005a54:	2b00      	cmp	r3, #0
1a005a56:	f47f af43 	bne.w	1a0058e0 <_dtoa_r+0x860>
1a005a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005a5c:	2b00      	cmp	r3, #0
1a005a5e:	f340 8202 	ble.w	1a005e66 <_dtoa_r+0xde6>
1a005a62:	9309      	str	r3, [sp, #36]	; 0x24
1a005a64:	e6d0      	b.n	1a005808 <_dtoa_r+0x788>
1a005a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005a68:	4659      	mov	r1, fp
1a005a6a:	4650      	mov	r0, sl
1a005a6c:	f000 fc58 	bl	1a006320 <__pow5mult>
1a005a70:	4683      	mov	fp, r0
1a005a72:	e686      	b.n	1a005782 <_dtoa_r+0x702>
1a005a74:	4b9f      	ldr	r3, [pc, #636]	; (1a005cf4 <_dtoa_r+0xc74>)
1a005a76:	9303      	str	r3, [sp, #12]
1a005a78:	3303      	adds	r3, #3
1a005a7a:	f7ff bbe5 	b.w	1a005248 <_dtoa_r+0x1c8>
1a005a7e:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005a82:	2900      	cmp	r1, #0
1a005a84:	f47f ae8a 	bne.w	1a00579c <_dtoa_r+0x71c>
1a005a88:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a005a8c:	2b00      	cmp	r3, #0
1a005a8e:	f000 80d5 	beq.w	1a005c3c <_dtoa_r+0xbbc>
1a005a92:	9e00      	ldr	r6, [sp, #0]
1a005a94:	e683      	b.n	1a00579e <_dtoa_r+0x71e>
1a005a96:	2301      	movs	r3, #1
1a005a98:	930b      	str	r3, [sp, #44]	; 0x2c
1a005a9a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a005a9c:	2800      	cmp	r0, #0
1a005a9e:	dd46      	ble.n	1a005b2e <_dtoa_r+0xaae>
1a005aa0:	900f      	str	r0, [sp, #60]	; 0x3c
1a005aa2:	9009      	str	r0, [sp, #36]	; 0x24
1a005aa4:	2100      	movs	r1, #0
1a005aa6:	2817      	cmp	r0, #23
1a005aa8:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005aac:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005aae:	f77f ac19 	ble.w	1a0052e4 <_dtoa_r+0x264>
1a005ab2:	2201      	movs	r2, #1
1a005ab4:	2304      	movs	r3, #4
1a005ab6:	005b      	lsls	r3, r3, #1
1a005ab8:	f103 0614 	add.w	r6, r3, #20
1a005abc:	42b0      	cmp	r0, r6
1a005abe:	4611      	mov	r1, r2
1a005ac0:	f102 0201 	add.w	r2, r2, #1
1a005ac4:	d2f7      	bcs.n	1a005ab6 <_dtoa_r+0xa36>
1a005ac6:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005aca:	e40b      	b.n	1a0052e4 <_dtoa_r+0x264>
1a005acc:	2301      	movs	r3, #1
1a005ace:	930b      	str	r3, [sp, #44]	; 0x2c
1a005ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005ad2:	9a06      	ldr	r2, [sp, #24]
1a005ad4:	4413      	add	r3, r2
1a005ad6:	930f      	str	r3, [sp, #60]	; 0x3c
1a005ad8:	3301      	adds	r3, #1
1a005ada:	2b01      	cmp	r3, #1
1a005adc:	4618      	mov	r0, r3
1a005ade:	9309      	str	r3, [sp, #36]	; 0x24
1a005ae0:	bfb8      	it	lt
1a005ae2:	2001      	movlt	r0, #1
1a005ae4:	e7de      	b.n	1a005aa4 <_dtoa_r+0xa24>
1a005ae6:	2300      	movs	r3, #0
1a005ae8:	930b      	str	r3, [sp, #44]	; 0x2c
1a005aea:	e7f1      	b.n	1a005ad0 <_dtoa_r+0xa50>
1a005aec:	2300      	movs	r3, #0
1a005aee:	930b      	str	r3, [sp, #44]	; 0x2c
1a005af0:	e7d3      	b.n	1a005a9a <_dtoa_r+0xa1a>
1a005af2:	9b06      	ldr	r3, [sp, #24]
1a005af4:	3301      	adds	r3, #1
1a005af6:	9306      	str	r3, [sp, #24]
1a005af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005afa:	2b00      	cmp	r3, #0
1a005afc:	f47f aefc 	bne.w	1a0058f8 <_dtoa_r+0x878>
1a005b00:	4639      	mov	r1, r7
1a005b02:	4658      	mov	r0, fp
1a005b04:	f7ff fa2a 	bl	1a004f5c <quorem>
1a005b08:	9c03      	ldr	r4, [sp, #12]
1a005b0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a005b0e:	2300      	movs	r3, #0
1a005b10:	f804 9b01 	strb.w	r9, [r4], #1
1a005b14:	9300      	str	r3, [sp, #0]
1a005b16:	e692      	b.n	1a00583e <_dtoa_r+0x7be>
1a005b18:	4629      	mov	r1, r5
1a005b1a:	4622      	mov	r2, r4
1a005b1c:	4650      	mov	r0, sl
1a005b1e:	f000 fc4f 	bl	1a0063c0 <__lshift>
1a005b22:	4605      	mov	r5, r0
1a005b24:	e6eb      	b.n	1a0058fe <_dtoa_r+0x87e>
1a005b26:	1b9e      	subs	r6, r3, r6
1a005b28:	e5ce      	b.n	1a0056c8 <_dtoa_r+0x648>
1a005b2a:	2602      	movs	r6, #2
1a005b2c:	e403      	b.n	1a005336 <_dtoa_r+0x2b6>
1a005b2e:	2501      	movs	r5, #1
1a005b30:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a005b34:	f7ff bbd2 	b.w	1a0052dc <_dtoa_r+0x25c>
1a005b38:	d103      	bne.n	1a005b42 <_dtoa_r+0xac2>
1a005b3a:	f019 0f01 	tst.w	r9, #1
1a005b3e:	f47f ae8c 	bne.w	1a00585a <_dtoa_r+0x7da>
1a005b42:	1e63      	subs	r3, r4, #1
1a005b44:	e001      	b.n	1a005b4a <_dtoa_r+0xaca>
1a005b46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a005b4a:	2a30      	cmp	r2, #48	; 0x30
1a005b4c:	f103 0401 	add.w	r4, r3, #1
1a005b50:	d0f9      	beq.n	1a005b46 <_dtoa_r+0xac6>
1a005b52:	e690      	b.n	1a005876 <_dtoa_r+0x7f6>
1a005b54:	9a06      	ldr	r2, [sp, #24]
1a005b56:	3201      	adds	r2, #1
1a005b58:	9206      	str	r2, [sp, #24]
1a005b5a:	9a03      	ldr	r2, [sp, #12]
1a005b5c:	2331      	movs	r3, #49	; 0x31
1a005b5e:	7013      	strb	r3, [r2, #0]
1a005b60:	e689      	b.n	1a005876 <_dtoa_r+0x7f6>
1a005b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a005b64:	2a00      	cmp	r2, #0
1a005b66:	f000 8126 	beq.w	1a005db6 <_dtoa_r+0xd36>
1a005b6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a005b6e:	9a08      	ldr	r2, [sp, #32]
1a005b70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a005b72:	4614      	mov	r4, r2
1a005b74:	441a      	add	r2, r3
1a005b76:	4498      	add	r8, r3
1a005b78:	9208      	str	r2, [sp, #32]
1a005b7a:	e5ae      	b.n	1a0056da <_dtoa_r+0x65a>
1a005b7c:	4630      	mov	r0, r6
1a005b7e:	f7fc fa3f 	bl	1a002000 <__aeabi_i2d>
1a005b82:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005b86:	f7fc faa5 	bl	1a0020d4 <__aeabi_dmul>
1a005b8a:	2200      	movs	r2, #0
1a005b8c:	4b5a      	ldr	r3, [pc, #360]	; (1a005cf8 <_dtoa_r+0xc78>)
1a005b8e:	f7fc f8eb 	bl	1a001d68 <__adddf3>
1a005b92:	4604      	mov	r4, r0
1a005b94:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005b98:	2200      	movs	r2, #0
1a005b9a:	4b58      	ldr	r3, [pc, #352]	; (1a005cfc <_dtoa_r+0xc7c>)
1a005b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005ba0:	f7fc f8e0 	bl	1a001d64 <__aeabi_dsub>
1a005ba4:	4622      	mov	r2, r4
1a005ba6:	462b      	mov	r3, r5
1a005ba8:	4606      	mov	r6, r0
1a005baa:	460f      	mov	r7, r1
1a005bac:	f7fc fd22 	bl	1a0025f4 <__aeabi_dcmpgt>
1a005bb0:	2800      	cmp	r0, #0
1a005bb2:	f040 8089 	bne.w	1a005cc8 <_dtoa_r+0xc48>
1a005bb6:	4622      	mov	r2, r4
1a005bb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a005bbc:	4630      	mov	r0, r6
1a005bbe:	4639      	mov	r1, r7
1a005bc0:	f7fc fcfa 	bl	1a0025b8 <__aeabi_dcmplt>
1a005bc4:	2800      	cmp	r0, #0
1a005bc6:	f43f ac9c 	beq.w	1a005502 <_dtoa_r+0x482>
1a005bca:	2700      	movs	r7, #0
1a005bcc:	463d      	mov	r5, r7
1a005bce:	e4c0      	b.n	1a005552 <_dtoa_r+0x4d2>
1a005bd0:	f000 80f5 	beq.w	1a005dbe <_dtoa_r+0xd3e>
1a005bd4:	9b06      	ldr	r3, [sp, #24]
1a005bd6:	425c      	negs	r4, r3
1a005bd8:	4b49      	ldr	r3, [pc, #292]	; (1a005d00 <_dtoa_r+0xc80>)
1a005bda:	f004 020f 	and.w	r2, r4, #15
1a005bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005bea:	f7fc fa73 	bl	1a0020d4 <__aeabi_dmul>
1a005bee:	1124      	asrs	r4, r4, #4
1a005bf0:	e9cd 0100 	strd	r0, r1, [sp]
1a005bf4:	f000 80e3 	beq.w	1a005dbe <_dtoa_r+0xd3e>
1a005bf8:	4d42      	ldr	r5, [pc, #264]	; (1a005d04 <_dtoa_r+0xc84>)
1a005bfa:	2300      	movs	r3, #0
1a005bfc:	2602      	movs	r6, #2
1a005bfe:	07e2      	lsls	r2, r4, #31
1a005c00:	d505      	bpl.n	1a005c0e <_dtoa_r+0xb8e>
1a005c02:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005c06:	f7fc fa65 	bl	1a0020d4 <__aeabi_dmul>
1a005c0a:	3601      	adds	r6, #1
1a005c0c:	2301      	movs	r3, #1
1a005c0e:	1064      	asrs	r4, r4, #1
1a005c10:	f105 0508 	add.w	r5, r5, #8
1a005c14:	d1f3      	bne.n	1a005bfe <_dtoa_r+0xb7e>
1a005c16:	2b00      	cmp	r3, #0
1a005c18:	f43f aba6 	beq.w	1a005368 <_dtoa_r+0x2e8>
1a005c1c:	e9cd 0100 	strd	r0, r1, [sp]
1a005c20:	f7ff bba2 	b.w	1a005368 <_dtoa_r+0x2e8>
1a005c24:	900d      	str	r0, [sp, #52]	; 0x34
1a005c26:	e564      	b.n	1a0056f2 <_dtoa_r+0x672>
1a005c28:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005c2c:	2900      	cmp	r1, #0
1a005c2e:	f47f ae49 	bne.w	1a0058c4 <_dtoa_r+0x844>
1a005c32:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a005c36:	2b00      	cmp	r3, #0
1a005c38:	f47f ae44 	bne.w	1a0058c4 <_dtoa_r+0x844>
1a005c3c:	4e32      	ldr	r6, [pc, #200]	; (1a005d08 <_dtoa_r+0xc88>)
1a005c3e:	4016      	ands	r6, r2
1a005c40:	2e00      	cmp	r6, #0
1a005c42:	f43f adac 	beq.w	1a00579e <_dtoa_r+0x71e>
1a005c46:	9b08      	ldr	r3, [sp, #32]
1a005c48:	3301      	adds	r3, #1
1a005c4a:	9308      	str	r3, [sp, #32]
1a005c4c:	f108 0801 	add.w	r8, r8, #1
1a005c50:	2601      	movs	r6, #1
1a005c52:	e5a4      	b.n	1a00579e <_dtoa_r+0x71e>
1a005c54:	2b00      	cmp	r3, #0
1a005c56:	4627      	mov	r7, r4
1a005c58:	464c      	mov	r4, r9
1a005c5a:	4691      	mov	r9, r2
1a005c5c:	dd12      	ble.n	1a005c84 <_dtoa_r+0xc04>
1a005c5e:	4659      	mov	r1, fp
1a005c60:	2201      	movs	r2, #1
1a005c62:	4650      	mov	r0, sl
1a005c64:	f000 fbac 	bl	1a0063c0 <__lshift>
1a005c68:	4639      	mov	r1, r7
1a005c6a:	4683      	mov	fp, r0
1a005c6c:	f000 fc02 	bl	1a006474 <__mcmp>
1a005c70:	2800      	cmp	r0, #0
1a005c72:	f340 80df 	ble.w	1a005e34 <_dtoa_r+0xdb4>
1a005c76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a005c7a:	f000 80d0 	beq.w	1a005e1e <_dtoa_r+0xd9e>
1a005c7e:	9b00      	ldr	r3, [sp, #0]
1a005c80:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a005c84:	9500      	str	r5, [sp, #0]
1a005c86:	f886 9000 	strb.w	r9, [r6]
1a005c8a:	4645      	mov	r5, r8
1a005c8c:	e5f3      	b.n	1a005876 <_dtoa_r+0x7f6>
1a005c8e:	6869      	ldr	r1, [r5, #4]
1a005c90:	4650      	mov	r0, sl
1a005c92:	f000 f9dd 	bl	1a006050 <_Balloc>
1a005c96:	692b      	ldr	r3, [r5, #16]
1a005c98:	3302      	adds	r3, #2
1a005c9a:	009a      	lsls	r2, r3, #2
1a005c9c:	4604      	mov	r4, r0
1a005c9e:	f105 010c 	add.w	r1, r5, #12
1a005ca2:	300c      	adds	r0, #12
1a005ca4:	f7fd fa96 	bl	1a0031d4 <memcpy>
1a005ca8:	4621      	mov	r1, r4
1a005caa:	2201      	movs	r2, #1
1a005cac:	4650      	mov	r0, sl
1a005cae:	f000 fb87 	bl	1a0063c0 <__lshift>
1a005cb2:	4680      	mov	r8, r0
1a005cb4:	e627      	b.n	1a005906 <_dtoa_r+0x886>
1a005cb6:	f8dd b000 	ldr.w	fp, [sp]
1a005cba:	f8dd a008 	ldr.w	sl, [sp, #8]
1a005cbe:	e406      	b.n	1a0054ce <_dtoa_r+0x44e>
1a005cc0:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a005cc4:	1a9c      	subs	r4, r3, r2
1a005cc6:	e508      	b.n	1a0056da <_dtoa_r+0x65a>
1a005cc8:	2700      	movs	r7, #0
1a005cca:	463d      	mov	r5, r7
1a005ccc:	e6a0      	b.n	1a005a10 <_dtoa_r+0x990>
1a005cce:	2a39      	cmp	r2, #57	; 0x39
1a005cd0:	4627      	mov	r7, r4
1a005cd2:	464c      	mov	r4, r9
1a005cd4:	f000 80a3 	beq.w	1a005e1e <_dtoa_r+0xd9e>
1a005cd8:	f102 0901 	add.w	r9, r2, #1
1a005cdc:	9500      	str	r5, [sp, #0]
1a005cde:	f886 9000 	strb.w	r9, [r6]
1a005ce2:	4645      	mov	r5, r8
1a005ce4:	e5c7      	b.n	1a005876 <_dtoa_r+0x7f6>
1a005ce6:	4627      	mov	r7, r4
1a005ce8:	9500      	str	r5, [sp, #0]
1a005cea:	464c      	mov	r4, r9
1a005cec:	4645      	mov	r5, r8
1a005cee:	4691      	mov	r9, r2
1a005cf0:	e5a5      	b.n	1a00583e <_dtoa_r+0x7be>
1a005cf2:	bf00      	nop
1a005cf4:	1a0070bc 	.word	0x1a0070bc
1a005cf8:	401c0000 	.word	0x401c0000
1a005cfc:	40140000 	.word	0x40140000
1a005d00:	1a0070f8 	.word	0x1a0070f8
1a005d04:	1a0070d0 	.word	0x1a0070d0
1a005d08:	7ff00000 	.word	0x7ff00000
1a005d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005d10:	f7fc f9e0 	bl	1a0020d4 <__aeabi_dmul>
1a005d14:	9b03      	ldr	r3, [sp, #12]
1a005d16:	701d      	strb	r5, [r3, #0]
1a005d18:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005d1a:	2b01      	cmp	r3, #1
1a005d1c:	e9cd 0100 	strd	r0, r1, [sp]
1a005d20:	d023      	beq.n	1a005d6a <_dtoa_r+0xcea>
1a005d22:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005d24:	9a03      	ldr	r2, [sp, #12]
1a005d26:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005d2a:	4413      	add	r3, r2
1a005d2c:	46c1      	mov	r9, r8
1a005d2e:	4698      	mov	r8, r3
1a005d30:	2200      	movs	r2, #0
1a005d32:	4b64      	ldr	r3, [pc, #400]	; (1a005ec4 <_dtoa_r+0xe44>)
1a005d34:	4630      	mov	r0, r6
1a005d36:	4639      	mov	r1, r7
1a005d38:	f7fc f9cc 	bl	1a0020d4 <__aeabi_dmul>
1a005d3c:	460f      	mov	r7, r1
1a005d3e:	4606      	mov	r6, r0
1a005d40:	f7fc fc78 	bl	1a002634 <__aeabi_d2iz>
1a005d44:	4605      	mov	r5, r0
1a005d46:	f7fc f95b 	bl	1a002000 <__aeabi_i2d>
1a005d4a:	3530      	adds	r5, #48	; 0x30
1a005d4c:	4602      	mov	r2, r0
1a005d4e:	460b      	mov	r3, r1
1a005d50:	4630      	mov	r0, r6
1a005d52:	4639      	mov	r1, r7
1a005d54:	f7fc f806 	bl	1a001d64 <__aeabi_dsub>
1a005d58:	f804 5b01 	strb.w	r5, [r4], #1
1a005d5c:	45a0      	cmp	r8, r4
1a005d5e:	4606      	mov	r6, r0
1a005d60:	460f      	mov	r7, r1
1a005d62:	d1e5      	bne.n	1a005d30 <_dtoa_r+0xcb0>
1a005d64:	46c8      	mov	r8, r9
1a005d66:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a005d6a:	4b57      	ldr	r3, [pc, #348]	; (1a005ec8 <_dtoa_r+0xe48>)
1a005d6c:	2200      	movs	r2, #0
1a005d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005d72:	f7fb fff9 	bl	1a001d68 <__adddf3>
1a005d76:	4632      	mov	r2, r6
1a005d78:	463b      	mov	r3, r7
1a005d7a:	f7fc fc1d 	bl	1a0025b8 <__aeabi_dcmplt>
1a005d7e:	2800      	cmp	r0, #0
1a005d80:	d152      	bne.n	1a005e28 <_dtoa_r+0xda8>
1a005d82:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005d86:	2000      	movs	r0, #0
1a005d88:	494f      	ldr	r1, [pc, #316]	; (1a005ec8 <_dtoa_r+0xe48>)
1a005d8a:	f7fb ffeb 	bl	1a001d64 <__aeabi_dsub>
1a005d8e:	4632      	mov	r2, r6
1a005d90:	463b      	mov	r3, r7
1a005d92:	f7fc fc2f 	bl	1a0025f4 <__aeabi_dcmpgt>
1a005d96:	2800      	cmp	r0, #0
1a005d98:	f43f abb3 	beq.w	1a005502 <_dtoa_r+0x482>
1a005d9c:	e000      	b.n	1a005da0 <_dtoa_r+0xd20>
1a005d9e:	4614      	mov	r4, r2
1a005da0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a005da4:	2b30      	cmp	r3, #48	; 0x30
1a005da6:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a005daa:	d0f8      	beq.n	1a005d9e <_dtoa_r+0xd1e>
1a005dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005dae:	3301      	adds	r3, #1
1a005db0:	9306      	str	r3, [sp, #24]
1a005db2:	f7ff bb8c 	b.w	1a0054ce <_dtoa_r+0x44e>
1a005db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005db8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005dbc:	e6d7      	b.n	1a005b6e <_dtoa_r+0xaee>
1a005dbe:	2602      	movs	r6, #2
1a005dc0:	f7ff bad2 	b.w	1a005368 <_dtoa_r+0x2e8>
1a005dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005dc6:	2b00      	cmp	r3, #0
1a005dc8:	f43f aed8 	beq.w	1a005b7c <_dtoa_r+0xafc>
1a005dcc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a005dce:	2f00      	cmp	r7, #0
1a005dd0:	f77f ab97 	ble.w	1a005502 <_dtoa_r+0x482>
1a005dd4:	2200      	movs	r2, #0
1a005dd6:	4b3b      	ldr	r3, [pc, #236]	; (1a005ec4 <_dtoa_r+0xe44>)
1a005dd8:	4620      	mov	r0, r4
1a005dda:	4629      	mov	r1, r5
1a005ddc:	f7fc f97a 	bl	1a0020d4 <__aeabi_dmul>
1a005de0:	4604      	mov	r4, r0
1a005de2:	460d      	mov	r5, r1
1a005de4:	1c70      	adds	r0, r6, #1
1a005de6:	e9cd 4500 	strd	r4, r5, [sp]
1a005dea:	f7fc f909 	bl	1a002000 <__aeabi_i2d>
1a005dee:	4622      	mov	r2, r4
1a005df0:	462b      	mov	r3, r5
1a005df2:	f7fc f96f 	bl	1a0020d4 <__aeabi_dmul>
1a005df6:	4b35      	ldr	r3, [pc, #212]	; (1a005ecc <_dtoa_r+0xe4c>)
1a005df8:	2200      	movs	r2, #0
1a005dfa:	f7fb ffb5 	bl	1a001d68 <__adddf3>
1a005dfe:	9b06      	ldr	r3, [sp, #24]
1a005e00:	9710      	str	r7, [sp, #64]	; 0x40
1a005e02:	3b01      	subs	r3, #1
1a005e04:	4604      	mov	r4, r0
1a005e06:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005e0a:	9312      	str	r3, [sp, #72]	; 0x48
1a005e0c:	f7ff bacf 	b.w	1a0053ae <_dtoa_r+0x32e>
1a005e10:	9a06      	ldr	r2, [sp, #24]
1a005e12:	3201      	adds	r2, #1
1a005e14:	9206      	str	r2, [sp, #24]
1a005e16:	2231      	movs	r2, #49	; 0x31
1a005e18:	701a      	strb	r2, [r3, #0]
1a005e1a:	f7ff bb58 	b.w	1a0054ce <_dtoa_r+0x44e>
1a005e1e:	2239      	movs	r2, #57	; 0x39
1a005e20:	9500      	str	r5, [sp, #0]
1a005e22:	7032      	strb	r2, [r6, #0]
1a005e24:	4645      	mov	r5, r8
1a005e26:	e518      	b.n	1a00585a <_dtoa_r+0x7da>
1a005e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e2a:	3301      	adds	r3, #1
1a005e2c:	9306      	str	r3, [sp, #24]
1a005e2e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005e32:	e427      	b.n	1a005684 <_dtoa_r+0x604>
1a005e34:	f47f af26 	bne.w	1a005c84 <_dtoa_r+0xc04>
1a005e38:	f019 0f01 	tst.w	r9, #1
1a005e3c:	f47f af1b 	bne.w	1a005c76 <_dtoa_r+0xbf6>
1a005e40:	e720      	b.n	1a005c84 <_dtoa_r+0xc04>
1a005e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e44:	3301      	adds	r3, #1
1a005e46:	46da      	mov	sl, fp
1a005e48:	9306      	str	r3, [sp, #24]
1a005e4a:	f8dd b000 	ldr.w	fp, [sp]
1a005e4e:	e419      	b.n	1a005684 <_dtoa_r+0x604>
1a005e50:	2a39      	cmp	r2, #57	; 0x39
1a005e52:	463b      	mov	r3, r7
1a005e54:	4691      	mov	r9, r2
1a005e56:	4627      	mov	r7, r4
1a005e58:	f106 0401 	add.w	r4, r6, #1
1a005e5c:	d0df      	beq.n	1a005e1e <_dtoa_r+0xd9e>
1a005e5e:	2b00      	cmp	r3, #0
1a005e60:	f73f af0d 	bgt.w	1a005c7e <_dtoa_r+0xbfe>
1a005e64:	e70e      	b.n	1a005c84 <_dtoa_r+0xc04>
1a005e66:	9b02      	ldr	r3, [sp, #8]
1a005e68:	2b02      	cmp	r3, #2
1a005e6a:	f77f ae49 	ble.w	1a005b00 <_dtoa_r+0xa80>
1a005e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005e70:	9309      	str	r3, [sp, #36]	; 0x24
1a005e72:	f8cd 8018 	str.w	r8, [sp, #24]
1a005e76:	e5ba      	b.n	1a0059ee <_dtoa_r+0x96e>
1a005e78:	9b02      	ldr	r3, [sp, #8]
1a005e7a:	2b02      	cmp	r3, #2
1a005e7c:	dcf7      	bgt.n	1a005e6e <_dtoa_r+0xdee>
1a005e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005e80:	e539      	b.n	1a0058f6 <_dtoa_r+0x876>
1a005e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e84:	3301      	adds	r3, #1
1a005e86:	9306      	str	r3, [sp, #24]
1a005e88:	f7ff bbfc 	b.w	1a005684 <_dtoa_r+0x604>
1a005e8c:	4b10      	ldr	r3, [pc, #64]	; (1a005ed0 <_dtoa_r+0xe50>)
1a005e8e:	9303      	str	r3, [sp, #12]
1a005e90:	f7ff b934 	b.w	1a0050fc <_dtoa_r+0x7c>
1a005e94:	f43f ac98 	beq.w	1a0057c8 <_dtoa_r+0x748>
1a005e98:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a005e9c:	e48f      	b.n	1a0057be <_dtoa_r+0x73e>
1a005e9e:	2400      	movs	r4, #0
1a005ea0:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a005ea4:	4621      	mov	r1, r4
1a005ea6:	4650      	mov	r0, sl
1a005ea8:	f000 f8d2 	bl	1a006050 <_Balloc>
1a005eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a005eb0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a005eb4:	930f      	str	r3, [sp, #60]	; 0x3c
1a005eb6:	2301      	movs	r3, #1
1a005eb8:	9003      	str	r0, [sp, #12]
1a005eba:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005ebe:	930b      	str	r3, [sp, #44]	; 0x2c
1a005ec0:	f7ff bb23 	b.w	1a00550a <_dtoa_r+0x48a>
1a005ec4:	40240000 	.word	0x40240000
1a005ec8:	3fe00000 	.word	0x3fe00000
1a005ecc:	401c0000 	.word	0x401c0000
1a005ed0:	1a0070c0 	.word	0x1a0070c0

1a005ed4 <_localeconv_r>:
1a005ed4:	4800      	ldr	r0, [pc, #0]	; (1a005ed8 <_localeconv_r+0x4>)
1a005ed6:	4770      	bx	lr
1a005ed8:	10000978 	.word	0x10000978
1a005edc:	ffffffff 	.word	0xffffffff

1a005ee0 <memchr>:
1a005ee0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005ee4:	2a10      	cmp	r2, #16
1a005ee6:	db2b      	blt.n	1a005f40 <memchr+0x60>
1a005ee8:	f010 0f07 	tst.w	r0, #7
1a005eec:	d008      	beq.n	1a005f00 <memchr+0x20>
1a005eee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005ef2:	3a01      	subs	r2, #1
1a005ef4:	428b      	cmp	r3, r1
1a005ef6:	d02d      	beq.n	1a005f54 <memchr+0x74>
1a005ef8:	f010 0f07 	tst.w	r0, #7
1a005efc:	b342      	cbz	r2, 1a005f50 <memchr+0x70>
1a005efe:	d1f6      	bne.n	1a005eee <memchr+0xe>
1a005f00:	b4f0      	push	{r4, r5, r6, r7}
1a005f02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005f06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005f0a:	f022 0407 	bic.w	r4, r2, #7
1a005f0e:	f07f 0700 	mvns.w	r7, #0
1a005f12:	2300      	movs	r3, #0
1a005f14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005f18:	3c08      	subs	r4, #8
1a005f1a:	ea85 0501 	eor.w	r5, r5, r1
1a005f1e:	ea86 0601 	eor.w	r6, r6, r1
1a005f22:	fa85 f547 	uadd8	r5, r5, r7
1a005f26:	faa3 f587 	sel	r5, r3, r7
1a005f2a:	fa86 f647 	uadd8	r6, r6, r7
1a005f2e:	faa5 f687 	sel	r6, r5, r7
1a005f32:	b98e      	cbnz	r6, 1a005f58 <memchr+0x78>
1a005f34:	d1ee      	bne.n	1a005f14 <memchr+0x34>
1a005f36:	bcf0      	pop	{r4, r5, r6, r7}
1a005f38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005f3c:	f002 0207 	and.w	r2, r2, #7
1a005f40:	b132      	cbz	r2, 1a005f50 <memchr+0x70>
1a005f42:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005f46:	3a01      	subs	r2, #1
1a005f48:	ea83 0301 	eor.w	r3, r3, r1
1a005f4c:	b113      	cbz	r3, 1a005f54 <memchr+0x74>
1a005f4e:	d1f8      	bne.n	1a005f42 <memchr+0x62>
1a005f50:	2000      	movs	r0, #0
1a005f52:	4770      	bx	lr
1a005f54:	3801      	subs	r0, #1
1a005f56:	4770      	bx	lr
1a005f58:	2d00      	cmp	r5, #0
1a005f5a:	bf06      	itte	eq
1a005f5c:	4635      	moveq	r5, r6
1a005f5e:	3803      	subeq	r0, #3
1a005f60:	3807      	subne	r0, #7
1a005f62:	f015 0f01 	tst.w	r5, #1
1a005f66:	d107      	bne.n	1a005f78 <memchr+0x98>
1a005f68:	3001      	adds	r0, #1
1a005f6a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005f6e:	bf02      	ittt	eq
1a005f70:	3001      	addeq	r0, #1
1a005f72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005f76:	3001      	addeq	r0, #1
1a005f78:	bcf0      	pop	{r4, r5, r6, r7}
1a005f7a:	3801      	subs	r0, #1
1a005f7c:	4770      	bx	lr
1a005f7e:	bf00      	nop

1a005f80 <memmove>:
1a005f80:	4288      	cmp	r0, r1
1a005f82:	b4f0      	push	{r4, r5, r6, r7}
1a005f84:	d90d      	bls.n	1a005fa2 <memmove+0x22>
1a005f86:	188b      	adds	r3, r1, r2
1a005f88:	4283      	cmp	r3, r0
1a005f8a:	d90a      	bls.n	1a005fa2 <memmove+0x22>
1a005f8c:	1884      	adds	r4, r0, r2
1a005f8e:	b132      	cbz	r2, 1a005f9e <memmove+0x1e>
1a005f90:	4622      	mov	r2, r4
1a005f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a005f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a005f9a:	4299      	cmp	r1, r3
1a005f9c:	d1f9      	bne.n	1a005f92 <memmove+0x12>
1a005f9e:	bcf0      	pop	{r4, r5, r6, r7}
1a005fa0:	4770      	bx	lr
1a005fa2:	2a0f      	cmp	r2, #15
1a005fa4:	d80e      	bhi.n	1a005fc4 <memmove+0x44>
1a005fa6:	4603      	mov	r3, r0
1a005fa8:	1e54      	subs	r4, r2, #1
1a005faa:	2a00      	cmp	r2, #0
1a005fac:	d0f7      	beq.n	1a005f9e <memmove+0x1e>
1a005fae:	3401      	adds	r4, #1
1a005fb0:	440c      	add	r4, r1
1a005fb2:	3b01      	subs	r3, #1
1a005fb4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005fb8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a005fbc:	42a1      	cmp	r1, r4
1a005fbe:	d1f9      	bne.n	1a005fb4 <memmove+0x34>
1a005fc0:	bcf0      	pop	{r4, r5, r6, r7}
1a005fc2:	4770      	bx	lr
1a005fc4:	ea40 0301 	orr.w	r3, r0, r1
1a005fc8:	079b      	lsls	r3, r3, #30
1a005fca:	d13b      	bne.n	1a006044 <memmove+0xc4>
1a005fcc:	f1a2 0710 	sub.w	r7, r2, #16
1a005fd0:	093f      	lsrs	r7, r7, #4
1a005fd2:	f101 0620 	add.w	r6, r1, #32
1a005fd6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a005fda:	f101 0310 	add.w	r3, r1, #16
1a005fde:	f100 0410 	add.w	r4, r0, #16
1a005fe2:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a005fe6:	f844 5c10 	str.w	r5, [r4, #-16]
1a005fea:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a005fee:	f844 5c0c 	str.w	r5, [r4, #-12]
1a005ff2:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a005ff6:	f844 5c08 	str.w	r5, [r4, #-8]
1a005ffa:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a005ffe:	f844 5c04 	str.w	r5, [r4, #-4]
1a006002:	3310      	adds	r3, #16
1a006004:	42b3      	cmp	r3, r6
1a006006:	f104 0410 	add.w	r4, r4, #16
1a00600a:	d1ea      	bne.n	1a005fe2 <memmove+0x62>
1a00600c:	1c7b      	adds	r3, r7, #1
1a00600e:	011b      	lsls	r3, r3, #4
1a006010:	f012 0f0c 	tst.w	r2, #12
1a006014:	4419      	add	r1, r3
1a006016:	f002 050f 	and.w	r5, r2, #15
1a00601a:	4403      	add	r3, r0
1a00601c:	d015      	beq.n	1a00604a <memmove+0xca>
1a00601e:	3d04      	subs	r5, #4
1a006020:	08ad      	lsrs	r5, r5, #2
1a006022:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a006026:	1f1c      	subs	r4, r3, #4
1a006028:	460e      	mov	r6, r1
1a00602a:	f856 7b04 	ldr.w	r7, [r6], #4
1a00602e:	f844 7f04 	str.w	r7, [r4, #4]!
1a006032:	4564      	cmp	r4, ip
1a006034:	d1f9      	bne.n	1a00602a <memmove+0xaa>
1a006036:	3501      	adds	r5, #1
1a006038:	00ad      	lsls	r5, r5, #2
1a00603a:	442b      	add	r3, r5
1a00603c:	4429      	add	r1, r5
1a00603e:	f002 0203 	and.w	r2, r2, #3
1a006042:	e7b1      	b.n	1a005fa8 <memmove+0x28>
1a006044:	1e54      	subs	r4, r2, #1
1a006046:	4603      	mov	r3, r0
1a006048:	e7b1      	b.n	1a005fae <memmove+0x2e>
1a00604a:	462a      	mov	r2, r5
1a00604c:	e7ac      	b.n	1a005fa8 <memmove+0x28>
1a00604e:	bf00      	nop

1a006050 <_Balloc>:
1a006050:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006052:	b570      	push	{r4, r5, r6, lr}
1a006054:	4605      	mov	r5, r0
1a006056:	460c      	mov	r4, r1
1a006058:	b14b      	cbz	r3, 1a00606e <_Balloc+0x1e>
1a00605a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00605e:	b180      	cbz	r0, 1a006082 <_Balloc+0x32>
1a006060:	6802      	ldr	r2, [r0, #0]
1a006062:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006066:	2300      	movs	r3, #0
1a006068:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a00606c:	bd70      	pop	{r4, r5, r6, pc}
1a00606e:	2221      	movs	r2, #33	; 0x21
1a006070:	2104      	movs	r1, #4
1a006072:	f000 fd99 	bl	1a006ba8 <_calloc_r>
1a006076:	4603      	mov	r3, r0
1a006078:	64e8      	str	r0, [r5, #76]	; 0x4c
1a00607a:	2800      	cmp	r0, #0
1a00607c:	d1ed      	bne.n	1a00605a <_Balloc+0xa>
1a00607e:	2000      	movs	r0, #0
1a006080:	bd70      	pop	{r4, r5, r6, pc}
1a006082:	2101      	movs	r1, #1
1a006084:	fa01 f604 	lsl.w	r6, r1, r4
1a006088:	1d72      	adds	r2, r6, #5
1a00608a:	4628      	mov	r0, r5
1a00608c:	0092      	lsls	r2, r2, #2
1a00608e:	f000 fd8b 	bl	1a006ba8 <_calloc_r>
1a006092:	2800      	cmp	r0, #0
1a006094:	d0f3      	beq.n	1a00607e <_Balloc+0x2e>
1a006096:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a00609a:	e7e4      	b.n	1a006066 <_Balloc+0x16>

1a00609c <_Bfree>:
1a00609c:	b131      	cbz	r1, 1a0060ac <_Bfree+0x10>
1a00609e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a0060a0:	684a      	ldr	r2, [r1, #4]
1a0060a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a0060a6:	6008      	str	r0, [r1, #0]
1a0060a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a0060ac:	4770      	bx	lr
1a0060ae:	bf00      	nop

1a0060b0 <__multadd>:
1a0060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0060b2:	690c      	ldr	r4, [r1, #16]
1a0060b4:	b083      	sub	sp, #12
1a0060b6:	460d      	mov	r5, r1
1a0060b8:	4606      	mov	r6, r0
1a0060ba:	f101 0c14 	add.w	ip, r1, #20
1a0060be:	2700      	movs	r7, #0
1a0060c0:	f8dc 0000 	ldr.w	r0, [ip]
1a0060c4:	b281      	uxth	r1, r0
1a0060c6:	fb02 3301 	mla	r3, r2, r1, r3
1a0060ca:	0c19      	lsrs	r1, r3, #16
1a0060cc:	0c00      	lsrs	r0, r0, #16
1a0060ce:	fb02 1000 	mla	r0, r2, r0, r1
1a0060d2:	b29b      	uxth	r3, r3
1a0060d4:	3701      	adds	r7, #1
1a0060d6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a0060da:	42bc      	cmp	r4, r7
1a0060dc:	f84c 3b04 	str.w	r3, [ip], #4
1a0060e0:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a0060e4:	dcec      	bgt.n	1a0060c0 <__multadd+0x10>
1a0060e6:	b13b      	cbz	r3, 1a0060f8 <__multadd+0x48>
1a0060e8:	68aa      	ldr	r2, [r5, #8]
1a0060ea:	42a2      	cmp	r2, r4
1a0060ec:	dd07      	ble.n	1a0060fe <__multadd+0x4e>
1a0060ee:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0060f2:	3401      	adds	r4, #1
1a0060f4:	6153      	str	r3, [r2, #20]
1a0060f6:	612c      	str	r4, [r5, #16]
1a0060f8:	4628      	mov	r0, r5
1a0060fa:	b003      	add	sp, #12
1a0060fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0060fe:	6869      	ldr	r1, [r5, #4]
1a006100:	9301      	str	r3, [sp, #4]
1a006102:	3101      	adds	r1, #1
1a006104:	4630      	mov	r0, r6
1a006106:	f7ff ffa3 	bl	1a006050 <_Balloc>
1a00610a:	692a      	ldr	r2, [r5, #16]
1a00610c:	3202      	adds	r2, #2
1a00610e:	f105 010c 	add.w	r1, r5, #12
1a006112:	4607      	mov	r7, r0
1a006114:	0092      	lsls	r2, r2, #2
1a006116:	300c      	adds	r0, #12
1a006118:	f7fd f85c 	bl	1a0031d4 <memcpy>
1a00611c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00611e:	6869      	ldr	r1, [r5, #4]
1a006120:	9b01      	ldr	r3, [sp, #4]
1a006122:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006126:	6028      	str	r0, [r5, #0]
1a006128:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00612c:	463d      	mov	r5, r7
1a00612e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006132:	3401      	adds	r4, #1
1a006134:	6153      	str	r3, [r2, #20]
1a006136:	612c      	str	r4, [r5, #16]
1a006138:	e7de      	b.n	1a0060f8 <__multadd+0x48>
1a00613a:	bf00      	nop

1a00613c <__hi0bits>:
1a00613c:	0c02      	lsrs	r2, r0, #16
1a00613e:	0412      	lsls	r2, r2, #16
1a006140:	4603      	mov	r3, r0
1a006142:	b9ca      	cbnz	r2, 1a006178 <__hi0bits+0x3c>
1a006144:	0403      	lsls	r3, r0, #16
1a006146:	2010      	movs	r0, #16
1a006148:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00614c:	bf04      	itt	eq
1a00614e:	021b      	lsleq	r3, r3, #8
1a006150:	3008      	addeq	r0, #8
1a006152:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a006156:	bf04      	itt	eq
1a006158:	011b      	lsleq	r3, r3, #4
1a00615a:	3004      	addeq	r0, #4
1a00615c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a006160:	bf04      	itt	eq
1a006162:	009b      	lsleq	r3, r3, #2
1a006164:	3002      	addeq	r0, #2
1a006166:	2b00      	cmp	r3, #0
1a006168:	db05      	blt.n	1a006176 <__hi0bits+0x3a>
1a00616a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a00616e:	f100 0001 	add.w	r0, r0, #1
1a006172:	bf08      	it	eq
1a006174:	2020      	moveq	r0, #32
1a006176:	4770      	bx	lr
1a006178:	2000      	movs	r0, #0
1a00617a:	e7e5      	b.n	1a006148 <__hi0bits+0xc>

1a00617c <__lo0bits>:
1a00617c:	6803      	ldr	r3, [r0, #0]
1a00617e:	f013 0207 	ands.w	r2, r3, #7
1a006182:	4601      	mov	r1, r0
1a006184:	d007      	beq.n	1a006196 <__lo0bits+0x1a>
1a006186:	07da      	lsls	r2, r3, #31
1a006188:	d420      	bmi.n	1a0061cc <__lo0bits+0x50>
1a00618a:	0798      	lsls	r0, r3, #30
1a00618c:	d522      	bpl.n	1a0061d4 <__lo0bits+0x58>
1a00618e:	085b      	lsrs	r3, r3, #1
1a006190:	600b      	str	r3, [r1, #0]
1a006192:	2001      	movs	r0, #1
1a006194:	4770      	bx	lr
1a006196:	b298      	uxth	r0, r3
1a006198:	b9b0      	cbnz	r0, 1a0061c8 <__lo0bits+0x4c>
1a00619a:	0c1b      	lsrs	r3, r3, #16
1a00619c:	2010      	movs	r0, #16
1a00619e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0061a2:	bf04      	itt	eq
1a0061a4:	0a1b      	lsreq	r3, r3, #8
1a0061a6:	3008      	addeq	r0, #8
1a0061a8:	071a      	lsls	r2, r3, #28
1a0061aa:	bf04      	itt	eq
1a0061ac:	091b      	lsreq	r3, r3, #4
1a0061ae:	3004      	addeq	r0, #4
1a0061b0:	079a      	lsls	r2, r3, #30
1a0061b2:	bf04      	itt	eq
1a0061b4:	089b      	lsreq	r3, r3, #2
1a0061b6:	3002      	addeq	r0, #2
1a0061b8:	07da      	lsls	r2, r3, #31
1a0061ba:	d403      	bmi.n	1a0061c4 <__lo0bits+0x48>
1a0061bc:	085b      	lsrs	r3, r3, #1
1a0061be:	f100 0001 	add.w	r0, r0, #1
1a0061c2:	d005      	beq.n	1a0061d0 <__lo0bits+0x54>
1a0061c4:	600b      	str	r3, [r1, #0]
1a0061c6:	4770      	bx	lr
1a0061c8:	4610      	mov	r0, r2
1a0061ca:	e7e8      	b.n	1a00619e <__lo0bits+0x22>
1a0061cc:	2000      	movs	r0, #0
1a0061ce:	4770      	bx	lr
1a0061d0:	2020      	movs	r0, #32
1a0061d2:	4770      	bx	lr
1a0061d4:	089b      	lsrs	r3, r3, #2
1a0061d6:	600b      	str	r3, [r1, #0]
1a0061d8:	2002      	movs	r0, #2
1a0061da:	4770      	bx	lr

1a0061dc <__i2b>:
1a0061dc:	b510      	push	{r4, lr}
1a0061de:	460c      	mov	r4, r1
1a0061e0:	2101      	movs	r1, #1
1a0061e2:	f7ff ff35 	bl	1a006050 <_Balloc>
1a0061e6:	2201      	movs	r2, #1
1a0061e8:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a0061ec:	bd10      	pop	{r4, pc}
1a0061ee:	bf00      	nop

1a0061f0 <__multiply>:
1a0061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0061f4:	690e      	ldr	r6, [r1, #16]
1a0061f6:	6917      	ldr	r7, [r2, #16]
1a0061f8:	42be      	cmp	r6, r7
1a0061fa:	b083      	sub	sp, #12
1a0061fc:	460c      	mov	r4, r1
1a0061fe:	4615      	mov	r5, r2
1a006200:	db05      	blt.n	1a00620e <__multiply+0x1e>
1a006202:	463a      	mov	r2, r7
1a006204:	462b      	mov	r3, r5
1a006206:	4637      	mov	r7, r6
1a006208:	460d      	mov	r5, r1
1a00620a:	4616      	mov	r6, r2
1a00620c:	461c      	mov	r4, r3
1a00620e:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a006212:	eb07 0806 	add.w	r8, r7, r6
1a006216:	4543      	cmp	r3, r8
1a006218:	bfb8      	it	lt
1a00621a:	3101      	addlt	r1, #1
1a00621c:	f7ff ff18 	bl	1a006050 <_Balloc>
1a006220:	f100 0a14 	add.w	sl, r0, #20
1a006224:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a006228:	45ca      	cmp	sl, r9
1a00622a:	9000      	str	r0, [sp, #0]
1a00622c:	d205      	bcs.n	1a00623a <__multiply+0x4a>
1a00622e:	4653      	mov	r3, sl
1a006230:	2100      	movs	r1, #0
1a006232:	f843 1b04 	str.w	r1, [r3], #4
1a006236:	4599      	cmp	r9, r3
1a006238:	d8fb      	bhi.n	1a006232 <__multiply+0x42>
1a00623a:	f104 0e14 	add.w	lr, r4, #20
1a00623e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a006242:	f105 0314 	add.w	r3, r5, #20
1a006246:	45de      	cmp	lr, fp
1a006248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00624c:	d253      	bcs.n	1a0062f6 <__multiply+0x106>
1a00624e:	f8cd 8004 	str.w	r8, [sp, #4]
1a006252:	4698      	mov	r8, r3
1a006254:	e005      	b.n	1a006262 <__multiply+0x72>
1a006256:	0c09      	lsrs	r1, r1, #16
1a006258:	d128      	bne.n	1a0062ac <__multiply+0xbc>
1a00625a:	45f3      	cmp	fp, lr
1a00625c:	f10a 0a04 	add.w	sl, sl, #4
1a006260:	d947      	bls.n	1a0062f2 <__multiply+0x102>
1a006262:	f85e 1b04 	ldr.w	r1, [lr], #4
1a006266:	b28e      	uxth	r6, r1
1a006268:	2e00      	cmp	r6, #0
1a00626a:	d0f4      	beq.n	1a006256 <__multiply+0x66>
1a00626c:	4645      	mov	r5, r8
1a00626e:	4654      	mov	r4, sl
1a006270:	2300      	movs	r3, #0
1a006272:	f855 1b04 	ldr.w	r1, [r5], #4
1a006276:	6820      	ldr	r0, [r4, #0]
1a006278:	b28a      	uxth	r2, r1
1a00627a:	fa1f fc80 	uxth.w	ip, r0
1a00627e:	fb06 c202 	mla	r2, r6, r2, ip
1a006282:	0c09      	lsrs	r1, r1, #16
1a006284:	0c00      	lsrs	r0, r0, #16
1a006286:	4413      	add	r3, r2
1a006288:	fb06 0201 	mla	r2, r6, r1, r0
1a00628c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a006290:	b29b      	uxth	r3, r3
1a006292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006296:	42af      	cmp	r7, r5
1a006298:	f844 3b04 	str.w	r3, [r4], #4
1a00629c:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a0062a0:	d8e7      	bhi.n	1a006272 <__multiply+0x82>
1a0062a2:	6023      	str	r3, [r4, #0]
1a0062a4:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a0062a8:	0c09      	lsrs	r1, r1, #16
1a0062aa:	d0d6      	beq.n	1a00625a <__multiply+0x6a>
1a0062ac:	f8da 3000 	ldr.w	r3, [sl]
1a0062b0:	4640      	mov	r0, r8
1a0062b2:	461a      	mov	r2, r3
1a0062b4:	4654      	mov	r4, sl
1a0062b6:	f04f 0c00 	mov.w	ip, #0
1a0062ba:	8805      	ldrh	r5, [r0, #0]
1a0062bc:	0c12      	lsrs	r2, r2, #16
1a0062be:	fb01 2205 	mla	r2, r1, r5, r2
1a0062c2:	4494      	add	ip, r2
1a0062c4:	b29b      	uxth	r3, r3
1a0062c6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a0062ca:	f844 3b04 	str.w	r3, [r4], #4
1a0062ce:	f850 3b04 	ldr.w	r3, [r0], #4
1a0062d2:	6822      	ldr	r2, [r4, #0]
1a0062d4:	0c1b      	lsrs	r3, r3, #16
1a0062d6:	b295      	uxth	r5, r2
1a0062d8:	fb01 5303 	mla	r3, r1, r3, r5
1a0062dc:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a0062e0:	4287      	cmp	r7, r0
1a0062e2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0062e6:	d8e8      	bhi.n	1a0062ba <__multiply+0xca>
1a0062e8:	45f3      	cmp	fp, lr
1a0062ea:	6023      	str	r3, [r4, #0]
1a0062ec:	f10a 0a04 	add.w	sl, sl, #4
1a0062f0:	d8b7      	bhi.n	1a006262 <__multiply+0x72>
1a0062f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a0062f6:	f1b8 0f00 	cmp.w	r8, #0
1a0062fa:	dd0b      	ble.n	1a006314 <__multiply+0x124>
1a0062fc:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a006300:	f1a9 0904 	sub.w	r9, r9, #4
1a006304:	b11b      	cbz	r3, 1a00630e <__multiply+0x11e>
1a006306:	e005      	b.n	1a006314 <__multiply+0x124>
1a006308:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00630c:	b913      	cbnz	r3, 1a006314 <__multiply+0x124>
1a00630e:	f1b8 0801 	subs.w	r8, r8, #1
1a006312:	d1f9      	bne.n	1a006308 <__multiply+0x118>
1a006314:	9800      	ldr	r0, [sp, #0]
1a006316:	f8c0 8010 	str.w	r8, [r0, #16]
1a00631a:	b003      	add	sp, #12
1a00631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a006320 <__pow5mult>:
1a006320:	f012 0303 	ands.w	r3, r2, #3
1a006324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006328:	4614      	mov	r4, r2
1a00632a:	4607      	mov	r7, r0
1a00632c:	d12e      	bne.n	1a00638c <__pow5mult+0x6c>
1a00632e:	460d      	mov	r5, r1
1a006330:	10a4      	asrs	r4, r4, #2
1a006332:	d01c      	beq.n	1a00636e <__pow5mult+0x4e>
1a006334:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a006336:	b396      	cbz	r6, 1a00639e <__pow5mult+0x7e>
1a006338:	07e3      	lsls	r3, r4, #31
1a00633a:	f04f 0800 	mov.w	r8, #0
1a00633e:	d406      	bmi.n	1a00634e <__pow5mult+0x2e>
1a006340:	1064      	asrs	r4, r4, #1
1a006342:	d014      	beq.n	1a00636e <__pow5mult+0x4e>
1a006344:	6830      	ldr	r0, [r6, #0]
1a006346:	b1a8      	cbz	r0, 1a006374 <__pow5mult+0x54>
1a006348:	4606      	mov	r6, r0
1a00634a:	07e3      	lsls	r3, r4, #31
1a00634c:	d5f8      	bpl.n	1a006340 <__pow5mult+0x20>
1a00634e:	4632      	mov	r2, r6
1a006350:	4629      	mov	r1, r5
1a006352:	4638      	mov	r0, r7
1a006354:	f7ff ff4c 	bl	1a0061f0 <__multiply>
1a006358:	b1b5      	cbz	r5, 1a006388 <__pow5mult+0x68>
1a00635a:	686a      	ldr	r2, [r5, #4]
1a00635c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00635e:	1064      	asrs	r4, r4, #1
1a006360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006364:	6029      	str	r1, [r5, #0]
1a006366:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00636a:	4605      	mov	r5, r0
1a00636c:	d1ea      	bne.n	1a006344 <__pow5mult+0x24>
1a00636e:	4628      	mov	r0, r5
1a006370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006374:	4632      	mov	r2, r6
1a006376:	4631      	mov	r1, r6
1a006378:	4638      	mov	r0, r7
1a00637a:	f7ff ff39 	bl	1a0061f0 <__multiply>
1a00637e:	6030      	str	r0, [r6, #0]
1a006380:	f8c0 8000 	str.w	r8, [r0]
1a006384:	4606      	mov	r6, r0
1a006386:	e7e0      	b.n	1a00634a <__pow5mult+0x2a>
1a006388:	4605      	mov	r5, r0
1a00638a:	e7d9      	b.n	1a006340 <__pow5mult+0x20>
1a00638c:	3b01      	subs	r3, #1
1a00638e:	4a0b      	ldr	r2, [pc, #44]	; (1a0063bc <__pow5mult+0x9c>)
1a006390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a006394:	2300      	movs	r3, #0
1a006396:	f7ff fe8b 	bl	1a0060b0 <__multadd>
1a00639a:	4605      	mov	r5, r0
1a00639c:	e7c8      	b.n	1a006330 <__pow5mult+0x10>
1a00639e:	2101      	movs	r1, #1
1a0063a0:	4638      	mov	r0, r7
1a0063a2:	f7ff fe55 	bl	1a006050 <_Balloc>
1a0063a6:	f240 2371 	movw	r3, #625	; 0x271
1a0063aa:	6143      	str	r3, [r0, #20]
1a0063ac:	2201      	movs	r2, #1
1a0063ae:	2300      	movs	r3, #0
1a0063b0:	6102      	str	r2, [r0, #16]
1a0063b2:	4606      	mov	r6, r0
1a0063b4:	64b8      	str	r0, [r7, #72]	; 0x48
1a0063b6:	6003      	str	r3, [r0, #0]
1a0063b8:	e7be      	b.n	1a006338 <__pow5mult+0x18>
1a0063ba:	bf00      	nop
1a0063bc:	1a0071c0 	.word	0x1a0071c0

1a0063c0 <__lshift>:
1a0063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0063c4:	690e      	ldr	r6, [r1, #16]
1a0063c6:	460d      	mov	r5, r1
1a0063c8:	ea4f 1962 	mov.w	r9, r2, asr #5
1a0063cc:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a0063d0:	444e      	add	r6, r9
1a0063d2:	1c74      	adds	r4, r6, #1
1a0063d4:	429c      	cmp	r4, r3
1a0063d6:	4690      	mov	r8, r2
1a0063d8:	4607      	mov	r7, r0
1a0063da:	dd04      	ble.n	1a0063e6 <__lshift+0x26>
1a0063dc:	005b      	lsls	r3, r3, #1
1a0063de:	429c      	cmp	r4, r3
1a0063e0:	f101 0101 	add.w	r1, r1, #1
1a0063e4:	dcfa      	bgt.n	1a0063dc <__lshift+0x1c>
1a0063e6:	4638      	mov	r0, r7
1a0063e8:	f7ff fe32 	bl	1a006050 <_Balloc>
1a0063ec:	f1b9 0f00 	cmp.w	r9, #0
1a0063f0:	f100 0c14 	add.w	ip, r0, #20
1a0063f4:	dd0e      	ble.n	1a006414 <__lshift+0x54>
1a0063f6:	f109 0905 	add.w	r9, r9, #5
1a0063fa:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a0063fe:	eb00 0109 	add.w	r1, r0, r9
1a006402:	4663      	mov	r3, ip
1a006404:	2200      	movs	r2, #0
1a006406:	f843 2b04 	str.w	r2, [r3], #4
1a00640a:	428b      	cmp	r3, r1
1a00640c:	d1fb      	bne.n	1a006406 <__lshift+0x46>
1a00640e:	f1a9 0914 	sub.w	r9, r9, #20
1a006412:	44cc      	add	ip, r9
1a006414:	6929      	ldr	r1, [r5, #16]
1a006416:	f105 0314 	add.w	r3, r5, #20
1a00641a:	f018 081f 	ands.w	r8, r8, #31
1a00641e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a006422:	d01d      	beq.n	1a006460 <__lshift+0xa0>
1a006424:	f1c8 0920 	rsb	r9, r8, #32
1a006428:	2200      	movs	r2, #0
1a00642a:	6819      	ldr	r1, [r3, #0]
1a00642c:	fa01 f108 	lsl.w	r1, r1, r8
1a006430:	4311      	orrs	r1, r2
1a006432:	f84c 1b04 	str.w	r1, [ip], #4
1a006436:	f853 2b04 	ldr.w	r2, [r3], #4
1a00643a:	4573      	cmp	r3, lr
1a00643c:	fa22 f209 	lsr.w	r2, r2, r9
1a006440:	d3f3      	bcc.n	1a00642a <__lshift+0x6a>
1a006442:	f8cc 2000 	str.w	r2, [ip]
1a006446:	2a00      	cmp	r2, #0
1a006448:	bf18      	it	ne
1a00644a:	4626      	movne	r6, r4
1a00644c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00644e:	686a      	ldr	r2, [r5, #4]
1a006450:	6106      	str	r6, [r0, #16]
1a006452:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006456:	6029      	str	r1, [r5, #0]
1a006458:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00645c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006460:	f1ac 0c04 	sub.w	ip, ip, #4
1a006464:	f853 2b04 	ldr.w	r2, [r3], #4
1a006468:	f84c 2f04 	str.w	r2, [ip, #4]!
1a00646c:	459e      	cmp	lr, r3
1a00646e:	d8f9      	bhi.n	1a006464 <__lshift+0xa4>
1a006470:	e7ec      	b.n	1a00644c <__lshift+0x8c>
1a006472:	bf00      	nop

1a006474 <__mcmp>:
1a006474:	b430      	push	{r4, r5}
1a006476:	690b      	ldr	r3, [r1, #16]
1a006478:	4605      	mov	r5, r0
1a00647a:	6900      	ldr	r0, [r0, #16]
1a00647c:	1ac0      	subs	r0, r0, r3
1a00647e:	d110      	bne.n	1a0064a2 <__mcmp+0x2e>
1a006480:	009b      	lsls	r3, r3, #2
1a006482:	3514      	adds	r5, #20
1a006484:	3114      	adds	r1, #20
1a006486:	4419      	add	r1, r3
1a006488:	442b      	add	r3, r5
1a00648a:	e001      	b.n	1a006490 <__mcmp+0x1c>
1a00648c:	429d      	cmp	r5, r3
1a00648e:	d208      	bcs.n	1a0064a2 <__mcmp+0x2e>
1a006490:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a006494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006498:	4294      	cmp	r4, r2
1a00649a:	d0f7      	beq.n	1a00648c <__mcmp+0x18>
1a00649c:	d203      	bcs.n	1a0064a6 <__mcmp+0x32>
1a00649e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0064a2:	bc30      	pop	{r4, r5}
1a0064a4:	4770      	bx	lr
1a0064a6:	2001      	movs	r0, #1
1a0064a8:	bc30      	pop	{r4, r5}
1a0064aa:	4770      	bx	lr

1a0064ac <__mdiff>:
1a0064ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0064b0:	460f      	mov	r7, r1
1a0064b2:	690d      	ldr	r5, [r1, #16]
1a0064b4:	6911      	ldr	r1, [r2, #16]
1a0064b6:	1a6d      	subs	r5, r5, r1
1a0064b8:	2d00      	cmp	r5, #0
1a0064ba:	4690      	mov	r8, r2
1a0064bc:	4684      	mov	ip, r0
1a0064be:	f107 0414 	add.w	r4, r7, #20
1a0064c2:	f102 0614 	add.w	r6, r2, #20
1a0064c6:	d114      	bne.n	1a0064f2 <__mdiff+0x46>
1a0064c8:	0089      	lsls	r1, r1, #2
1a0064ca:	1863      	adds	r3, r4, r1
1a0064cc:	4431      	add	r1, r6
1a0064ce:	e001      	b.n	1a0064d4 <__mdiff+0x28>
1a0064d0:	42a3      	cmp	r3, r4
1a0064d2:	d95d      	bls.n	1a006590 <__mdiff+0xe4>
1a0064d4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a0064d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a0064dc:	4290      	cmp	r0, r2
1a0064de:	d0f7      	beq.n	1a0064d0 <__mdiff+0x24>
1a0064e0:	d209      	bcs.n	1a0064f6 <__mdiff+0x4a>
1a0064e2:	4622      	mov	r2, r4
1a0064e4:	463b      	mov	r3, r7
1a0064e6:	4634      	mov	r4, r6
1a0064e8:	4647      	mov	r7, r8
1a0064ea:	4616      	mov	r6, r2
1a0064ec:	4698      	mov	r8, r3
1a0064ee:	2501      	movs	r5, #1
1a0064f0:	e001      	b.n	1a0064f6 <__mdiff+0x4a>
1a0064f2:	dbf6      	blt.n	1a0064e2 <__mdiff+0x36>
1a0064f4:	2500      	movs	r5, #0
1a0064f6:	4660      	mov	r0, ip
1a0064f8:	6879      	ldr	r1, [r7, #4]
1a0064fa:	f7ff fda9 	bl	1a006050 <_Balloc>
1a0064fe:	693f      	ldr	r7, [r7, #16]
1a006500:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a006504:	60c5      	str	r5, [r0, #12]
1a006506:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00650a:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00650e:	f100 0514 	add.w	r5, r0, #20
1a006512:	2200      	movs	r2, #0
1a006514:	e000      	b.n	1a006518 <__mdiff+0x6c>
1a006516:	460d      	mov	r5, r1
1a006518:	f856 1b04 	ldr.w	r1, [r6], #4
1a00651c:	f854 8b04 	ldr.w	r8, [r4], #4
1a006520:	fa1f f981 	uxth.w	r9, r1
1a006524:	fa12 f388 	uxtah	r3, r2, r8
1a006528:	0c0a      	lsrs	r2, r1, #16
1a00652a:	eba3 0309 	sub.w	r3, r3, r9
1a00652e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a006532:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a006536:	4629      	mov	r1, r5
1a006538:	b29b      	uxth	r3, r3
1a00653a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00653e:	45b6      	cmp	lr, r6
1a006540:	ea4f 4222 	mov.w	r2, r2, asr #16
1a006544:	f841 3b04 	str.w	r3, [r1], #4
1a006548:	46a0      	mov	r8, r4
1a00654a:	d8e4      	bhi.n	1a006516 <__mdiff+0x6a>
1a00654c:	45a4      	cmp	ip, r4
1a00654e:	d916      	bls.n	1a00657e <__mdiff+0xd2>
1a006550:	460e      	mov	r6, r1
1a006552:	f858 5b04 	ldr.w	r5, [r8], #4
1a006556:	fa12 f385 	uxtah	r3, r2, r5
1a00655a:	141a      	asrs	r2, r3, #16
1a00655c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a006560:	b29b      	uxth	r3, r3
1a006562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006566:	45c4      	cmp	ip, r8
1a006568:	f846 3b04 	str.w	r3, [r6], #4
1a00656c:	ea4f 4222 	mov.w	r2, r2, asr #16
1a006570:	d8ef      	bhi.n	1a006552 <__mdiff+0xa6>
1a006572:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a006576:	1b2d      	subs	r5, r5, r4
1a006578:	f025 0503 	bic.w	r5, r5, #3
1a00657c:	440d      	add	r5, r1
1a00657e:	b923      	cbnz	r3, 1a00658a <__mdiff+0xde>
1a006580:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a006584:	3f01      	subs	r7, #1
1a006586:	2b00      	cmp	r3, #0
1a006588:	d0fa      	beq.n	1a006580 <__mdiff+0xd4>
1a00658a:	6107      	str	r7, [r0, #16]
1a00658c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006590:	4660      	mov	r0, ip
1a006592:	2100      	movs	r1, #0
1a006594:	f7ff fd5c 	bl	1a006050 <_Balloc>
1a006598:	2201      	movs	r2, #1
1a00659a:	2300      	movs	r3, #0
1a00659c:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a0065a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0065a4 <__d2b>:
1a0065a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0065a8:	460f      	mov	r7, r1
1a0065aa:	b083      	sub	sp, #12
1a0065ac:	2101      	movs	r1, #1
1a0065ae:	ec55 4b10 	vmov	r4, r5, d0
1a0065b2:	4616      	mov	r6, r2
1a0065b4:	f7ff fd4c 	bl	1a006050 <_Balloc>
1a0065b8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a0065bc:	4681      	mov	r9, r0
1a0065be:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a0065c2:	f1b8 0f00 	cmp.w	r8, #0
1a0065c6:	d001      	beq.n	1a0065cc <__d2b+0x28>
1a0065c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0065cc:	2c00      	cmp	r4, #0
1a0065ce:	9301      	str	r3, [sp, #4]
1a0065d0:	d02b      	beq.n	1a00662a <__d2b+0x86>
1a0065d2:	4668      	mov	r0, sp
1a0065d4:	9400      	str	r4, [sp, #0]
1a0065d6:	f7ff fdd1 	bl	1a00617c <__lo0bits>
1a0065da:	b9d0      	cbnz	r0, 1a006612 <__d2b+0x6e>
1a0065dc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0065e0:	f8c9 2014 	str.w	r2, [r9, #20]
1a0065e4:	2b00      	cmp	r3, #0
1a0065e6:	bf14      	ite	ne
1a0065e8:	2102      	movne	r1, #2
1a0065ea:	2101      	moveq	r1, #1
1a0065ec:	f8c9 3018 	str.w	r3, [r9, #24]
1a0065f0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0065f4:	f1b8 0f00 	cmp.w	r8, #0
1a0065f8:	d024      	beq.n	1a006644 <__d2b+0xa0>
1a0065fa:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a0065fe:	eb08 0300 	add.w	r3, r8, r0
1a006602:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a006606:	603b      	str	r3, [r7, #0]
1a006608:	6030      	str	r0, [r6, #0]
1a00660a:	4648      	mov	r0, r9
1a00660c:	b003      	add	sp, #12
1a00660e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006612:	e9dd 1300 	ldrd	r1, r3, [sp]
1a006616:	f1c0 0220 	rsb	r2, r0, #32
1a00661a:	fa03 f202 	lsl.w	r2, r3, r2
1a00661e:	430a      	orrs	r2, r1
1a006620:	40c3      	lsrs	r3, r0
1a006622:	9301      	str	r3, [sp, #4]
1a006624:	f8c9 2014 	str.w	r2, [r9, #20]
1a006628:	e7dc      	b.n	1a0065e4 <__d2b+0x40>
1a00662a:	a801      	add	r0, sp, #4
1a00662c:	f7ff fda6 	bl	1a00617c <__lo0bits>
1a006630:	9b01      	ldr	r3, [sp, #4]
1a006632:	f8c9 3014 	str.w	r3, [r9, #20]
1a006636:	2101      	movs	r1, #1
1a006638:	3020      	adds	r0, #32
1a00663a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00663e:	f1b8 0f00 	cmp.w	r8, #0
1a006642:	d1da      	bne.n	1a0065fa <__d2b+0x56>
1a006644:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a006648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00664c:	6038      	str	r0, [r7, #0]
1a00664e:	6918      	ldr	r0, [r3, #16]
1a006650:	f7ff fd74 	bl	1a00613c <__hi0bits>
1a006654:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a006658:	6030      	str	r0, [r6, #0]
1a00665a:	4648      	mov	r0, r9
1a00665c:	b003      	add	sp, #12
1a00665e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006662:	bf00      	nop

1a006664 <_realloc_r>:
1a006664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006668:	4617      	mov	r7, r2
1a00666a:	2900      	cmp	r1, #0
1a00666c:	f000 80bb 	beq.w	1a0067e6 <_realloc_r+0x182>
1a006670:	f107 040b 	add.w	r4, r7, #11
1a006674:	4681      	mov	r9, r0
1a006676:	460d      	mov	r5, r1
1a006678:	f7fc fe96 	bl	1a0033a8 <__malloc_lock>
1a00667c:	2c16      	cmp	r4, #22
1a00667e:	d85e      	bhi.n	1a00673e <_realloc_r+0xda>
1a006680:	2410      	movs	r4, #16
1a006682:	4622      	mov	r2, r4
1a006684:	42a7      	cmp	r7, r4
1a006686:	d85f      	bhi.n	1a006748 <_realloc_r+0xe4>
1a006688:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a00668c:	f02e 0603 	bic.w	r6, lr, #3
1a006690:	f1a5 0808 	sub.w	r8, r5, #8
1a006694:	4296      	cmp	r6, r2
1a006696:	eb08 0a06 	add.w	sl, r8, r6
1a00669a:	f280 8081 	bge.w	1a0067a0 <_realloc_r+0x13c>
1a00669e:	4bcb      	ldr	r3, [pc, #812]	; (1a0069cc <_realloc_r+0x368>)
1a0066a0:	f8da 0004 	ldr.w	r0, [sl, #4]
1a0066a4:	6899      	ldr	r1, [r3, #8]
1a0066a6:	4551      	cmp	r1, sl
1a0066a8:	f000 80b5 	beq.w	1a006816 <_realloc_r+0x1b2>
1a0066ac:	f020 0301 	bic.w	r3, r0, #1
1a0066b0:	4453      	add	r3, sl
1a0066b2:	685b      	ldr	r3, [r3, #4]
1a0066b4:	07db      	lsls	r3, r3, #31
1a0066b6:	f100 808a 	bmi.w	1a0067ce <_realloc_r+0x16a>
1a0066ba:	f020 0003 	bic.w	r0, r0, #3
1a0066be:	1833      	adds	r3, r6, r0
1a0066c0:	4293      	cmp	r3, r2
1a0066c2:	f280 8112 	bge.w	1a0068ea <_realloc_r+0x286>
1a0066c6:	f01e 0f01 	tst.w	lr, #1
1a0066ca:	d10f      	bne.n	1a0066ec <_realloc_r+0x88>
1a0066cc:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a0066d0:	eba8 0b03 	sub.w	fp, r8, r3
1a0066d4:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0066d8:	f021 0103 	bic.w	r1, r1, #3
1a0066dc:	4408      	add	r0, r1
1a0066de:	1983      	adds	r3, r0, r6
1a0066e0:	4293      	cmp	r3, r2
1a0066e2:	f280 8116 	bge.w	1a006912 <_realloc_r+0x2ae>
1a0066e6:	1873      	adds	r3, r6, r1
1a0066e8:	4293      	cmp	r3, r2
1a0066ea:	da34      	bge.n	1a006756 <_realloc_r+0xf2>
1a0066ec:	4639      	mov	r1, r7
1a0066ee:	4648      	mov	r0, r9
1a0066f0:	f7fc fab8 	bl	1a002c64 <_malloc_r>
1a0066f4:	4607      	mov	r7, r0
1a0066f6:	b1e0      	cbz	r0, 1a006732 <_realloc_r+0xce>
1a0066f8:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0066fc:	f023 0301 	bic.w	r3, r3, #1
1a006700:	4443      	add	r3, r8
1a006702:	f1a0 0208 	sub.w	r2, r0, #8
1a006706:	4293      	cmp	r3, r2
1a006708:	f000 80f7 	beq.w	1a0068fa <_realloc_r+0x296>
1a00670c:	1f32      	subs	r2, r6, #4
1a00670e:	2a24      	cmp	r2, #36	; 0x24
1a006710:	f200 80fb 	bhi.w	1a00690a <_realloc_r+0x2a6>
1a006714:	2a13      	cmp	r2, #19
1a006716:	6829      	ldr	r1, [r5, #0]
1a006718:	f200 80c9 	bhi.w	1a0068ae <_realloc_r+0x24a>
1a00671c:	4603      	mov	r3, r0
1a00671e:	462a      	mov	r2, r5
1a006720:	6019      	str	r1, [r3, #0]
1a006722:	6851      	ldr	r1, [r2, #4]
1a006724:	6059      	str	r1, [r3, #4]
1a006726:	6892      	ldr	r2, [r2, #8]
1a006728:	609a      	str	r2, [r3, #8]
1a00672a:	4629      	mov	r1, r5
1a00672c:	4648      	mov	r0, r9
1a00672e:	f7fc f97b 	bl	1a002a28 <_free_r>
1a006732:	4648      	mov	r0, r9
1a006734:	f7fc fe3e 	bl	1a0033b4 <__malloc_unlock>
1a006738:	4638      	mov	r0, r7
1a00673a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00673e:	f024 0407 	bic.w	r4, r4, #7
1a006742:	2c00      	cmp	r4, #0
1a006744:	4622      	mov	r2, r4
1a006746:	da9d      	bge.n	1a006684 <_realloc_r+0x20>
1a006748:	230c      	movs	r3, #12
1a00674a:	f8c9 3000 	str.w	r3, [r9]
1a00674e:	2700      	movs	r7, #0
1a006750:	4638      	mov	r0, r7
1a006752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006756:	465f      	mov	r7, fp
1a006758:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00675c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a006760:	1f32      	subs	r2, r6, #4
1a006762:	2a24      	cmp	r2, #36	; 0x24
1a006764:	60c1      	str	r1, [r0, #12]
1a006766:	eb0b 0a03 	add.w	sl, fp, r3
1a00676a:	6088      	str	r0, [r1, #8]
1a00676c:	f200 80d9 	bhi.w	1a006922 <_realloc_r+0x2be>
1a006770:	2a13      	cmp	r2, #19
1a006772:	6829      	ldr	r1, [r5, #0]
1a006774:	f240 80d3 	bls.w	1a00691e <_realloc_r+0x2ba>
1a006778:	f8cb 1008 	str.w	r1, [fp, #8]
1a00677c:	6869      	ldr	r1, [r5, #4]
1a00677e:	f8cb 100c 	str.w	r1, [fp, #12]
1a006782:	2a1b      	cmp	r2, #27
1a006784:	68a9      	ldr	r1, [r5, #8]
1a006786:	f200 80e0 	bhi.w	1a00694a <_realloc_r+0x2e6>
1a00678a:	f10b 0210 	add.w	r2, fp, #16
1a00678e:	3508      	adds	r5, #8
1a006790:	6011      	str	r1, [r2, #0]
1a006792:	6869      	ldr	r1, [r5, #4]
1a006794:	6051      	str	r1, [r2, #4]
1a006796:	68a9      	ldr	r1, [r5, #8]
1a006798:	6091      	str	r1, [r2, #8]
1a00679a:	461e      	mov	r6, r3
1a00679c:	46d8      	mov	r8, fp
1a00679e:	463d      	mov	r5, r7
1a0067a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a0067a4:	1b32      	subs	r2, r6, r4
1a0067a6:	2a0f      	cmp	r2, #15
1a0067a8:	f003 0301 	and.w	r3, r3, #1
1a0067ac:	d820      	bhi.n	1a0067f0 <_realloc_r+0x18c>
1a0067ae:	4333      	orrs	r3, r6
1a0067b0:	f8c8 3004 	str.w	r3, [r8, #4]
1a0067b4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0067b8:	f043 0301 	orr.w	r3, r3, #1
1a0067bc:	f8ca 3004 	str.w	r3, [sl, #4]
1a0067c0:	4648      	mov	r0, r9
1a0067c2:	462f      	mov	r7, r5
1a0067c4:	f7fc fdf6 	bl	1a0033b4 <__malloc_unlock>
1a0067c8:	4638      	mov	r0, r7
1a0067ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0067ce:	f01e 0f01 	tst.w	lr, #1
1a0067d2:	d18b      	bne.n	1a0066ec <_realloc_r+0x88>
1a0067d4:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a0067d8:	eba8 0b03 	sub.w	fp, r8, r3
1a0067dc:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0067e0:	f021 0103 	bic.w	r1, r1, #3
1a0067e4:	e77f      	b.n	1a0066e6 <_realloc_r+0x82>
1a0067e6:	4611      	mov	r1, r2
1a0067e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0067ec:	f7fc ba3a 	b.w	1a002c64 <_malloc_r>
1a0067f0:	eb08 0104 	add.w	r1, r8, r4
1a0067f4:	4323      	orrs	r3, r4
1a0067f6:	f042 0201 	orr.w	r2, r2, #1
1a0067fa:	f8c8 3004 	str.w	r3, [r8, #4]
1a0067fe:	604a      	str	r2, [r1, #4]
1a006800:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006804:	f043 0301 	orr.w	r3, r3, #1
1a006808:	3108      	adds	r1, #8
1a00680a:	f8ca 3004 	str.w	r3, [sl, #4]
1a00680e:	4648      	mov	r0, r9
1a006810:	f7fc f90a 	bl	1a002a28 <_free_r>
1a006814:	e7d4      	b.n	1a0067c0 <_realloc_r+0x15c>
1a006816:	f020 0003 	bic.w	r0, r0, #3
1a00681a:	1831      	adds	r1, r6, r0
1a00681c:	f104 0c10 	add.w	ip, r4, #16
1a006820:	4561      	cmp	r1, ip
1a006822:	da4f      	bge.n	1a0068c4 <_realloc_r+0x260>
1a006824:	f01e 0f01 	tst.w	lr, #1
1a006828:	f47f af60 	bne.w	1a0066ec <_realloc_r+0x88>
1a00682c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a006830:	eba8 0b01 	sub.w	fp, r8, r1
1a006834:	f8db 1004 	ldr.w	r1, [fp, #4]
1a006838:	f021 0103 	bic.w	r1, r1, #3
1a00683c:	4408      	add	r0, r1
1a00683e:	eb00 0a06 	add.w	sl, r0, r6
1a006842:	45d4      	cmp	ip, sl
1a006844:	f73f af4f 	bgt.w	1a0066e6 <_realloc_r+0x82>
1a006848:	465f      	mov	r7, fp
1a00684a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00684e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a006852:	1f32      	subs	r2, r6, #4
1a006854:	2a24      	cmp	r2, #36	; 0x24
1a006856:	60c1      	str	r1, [r0, #12]
1a006858:	6088      	str	r0, [r1, #8]
1a00685a:	f200 8099 	bhi.w	1a006990 <_realloc_r+0x32c>
1a00685e:	2a13      	cmp	r2, #19
1a006860:	6829      	ldr	r1, [r5, #0]
1a006862:	f240 8093 	bls.w	1a00698c <_realloc_r+0x328>
1a006866:	f8cb 1008 	str.w	r1, [fp, #8]
1a00686a:	6869      	ldr	r1, [r5, #4]
1a00686c:	f8cb 100c 	str.w	r1, [fp, #12]
1a006870:	2a1b      	cmp	r2, #27
1a006872:	68a9      	ldr	r1, [r5, #8]
1a006874:	f200 8092 	bhi.w	1a00699c <_realloc_r+0x338>
1a006878:	f10b 0210 	add.w	r2, fp, #16
1a00687c:	3508      	adds	r5, #8
1a00687e:	6011      	str	r1, [r2, #0]
1a006880:	6869      	ldr	r1, [r5, #4]
1a006882:	6051      	str	r1, [r2, #4]
1a006884:	68a9      	ldr	r1, [r5, #8]
1a006886:	6091      	str	r1, [r2, #8]
1a006888:	eb0b 0104 	add.w	r1, fp, r4
1a00688c:	ebaa 0204 	sub.w	r2, sl, r4
1a006890:	f042 0201 	orr.w	r2, r2, #1
1a006894:	6099      	str	r1, [r3, #8]
1a006896:	604a      	str	r2, [r1, #4]
1a006898:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00689c:	f003 0301 	and.w	r3, r3, #1
1a0068a0:	431c      	orrs	r4, r3
1a0068a2:	4648      	mov	r0, r9
1a0068a4:	f8cb 4004 	str.w	r4, [fp, #4]
1a0068a8:	f7fc fd84 	bl	1a0033b4 <__malloc_unlock>
1a0068ac:	e750      	b.n	1a006750 <_realloc_r+0xec>
1a0068ae:	6001      	str	r1, [r0, #0]
1a0068b0:	686b      	ldr	r3, [r5, #4]
1a0068b2:	6043      	str	r3, [r0, #4]
1a0068b4:	2a1b      	cmp	r2, #27
1a0068b6:	d83c      	bhi.n	1a006932 <_realloc_r+0x2ce>
1a0068b8:	f105 0208 	add.w	r2, r5, #8
1a0068bc:	f100 0308 	add.w	r3, r0, #8
1a0068c0:	68a9      	ldr	r1, [r5, #8]
1a0068c2:	e72d      	b.n	1a006720 <_realloc_r+0xbc>
1a0068c4:	eb08 0004 	add.w	r0, r8, r4
1a0068c8:	1b0a      	subs	r2, r1, r4
1a0068ca:	f042 0201 	orr.w	r2, r2, #1
1a0068ce:	6098      	str	r0, [r3, #8]
1a0068d0:	6042      	str	r2, [r0, #4]
1a0068d2:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0068d6:	f003 0301 	and.w	r3, r3, #1
1a0068da:	431c      	orrs	r4, r3
1a0068dc:	4648      	mov	r0, r9
1a0068de:	f845 4c04 	str.w	r4, [r5, #-4]
1a0068e2:	f7fc fd67 	bl	1a0033b4 <__malloc_unlock>
1a0068e6:	462f      	mov	r7, r5
1a0068e8:	e732      	b.n	1a006750 <_realloc_r+0xec>
1a0068ea:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a0068ee:	461e      	mov	r6, r3
1a0068f0:	60ca      	str	r2, [r1, #12]
1a0068f2:	eb08 0a03 	add.w	sl, r8, r3
1a0068f6:	6091      	str	r1, [r2, #8]
1a0068f8:	e752      	b.n	1a0067a0 <_realloc_r+0x13c>
1a0068fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0068fe:	f023 0303 	bic.w	r3, r3, #3
1a006902:	441e      	add	r6, r3
1a006904:	eb08 0a06 	add.w	sl, r8, r6
1a006908:	e74a      	b.n	1a0067a0 <_realloc_r+0x13c>
1a00690a:	4629      	mov	r1, r5
1a00690c:	f7ff fb38 	bl	1a005f80 <memmove>
1a006910:	e70b      	b.n	1a00672a <_realloc_r+0xc6>
1a006912:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a006916:	465f      	mov	r7, fp
1a006918:	60ca      	str	r2, [r1, #12]
1a00691a:	6091      	str	r1, [r2, #8]
1a00691c:	e71c      	b.n	1a006758 <_realloc_r+0xf4>
1a00691e:	463a      	mov	r2, r7
1a006920:	e736      	b.n	1a006790 <_realloc_r+0x12c>
1a006922:	4629      	mov	r1, r5
1a006924:	4638      	mov	r0, r7
1a006926:	461e      	mov	r6, r3
1a006928:	46d8      	mov	r8, fp
1a00692a:	f7ff fb29 	bl	1a005f80 <memmove>
1a00692e:	463d      	mov	r5, r7
1a006930:	e736      	b.n	1a0067a0 <_realloc_r+0x13c>
1a006932:	68ab      	ldr	r3, [r5, #8]
1a006934:	6083      	str	r3, [r0, #8]
1a006936:	68eb      	ldr	r3, [r5, #12]
1a006938:	60c3      	str	r3, [r0, #12]
1a00693a:	2a24      	cmp	r2, #36	; 0x24
1a00693c:	d011      	beq.n	1a006962 <_realloc_r+0x2fe>
1a00693e:	f105 0210 	add.w	r2, r5, #16
1a006942:	f100 0310 	add.w	r3, r0, #16
1a006946:	6929      	ldr	r1, [r5, #16]
1a006948:	e6ea      	b.n	1a006720 <_realloc_r+0xbc>
1a00694a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00694e:	68e9      	ldr	r1, [r5, #12]
1a006950:	f8cb 1014 	str.w	r1, [fp, #20]
1a006954:	2a24      	cmp	r2, #36	; 0x24
1a006956:	d00e      	beq.n	1a006976 <_realloc_r+0x312>
1a006958:	6929      	ldr	r1, [r5, #16]
1a00695a:	f10b 0218 	add.w	r2, fp, #24
1a00695e:	3510      	adds	r5, #16
1a006960:	e716      	b.n	1a006790 <_realloc_r+0x12c>
1a006962:	692b      	ldr	r3, [r5, #16]
1a006964:	6103      	str	r3, [r0, #16]
1a006966:	696b      	ldr	r3, [r5, #20]
1a006968:	6143      	str	r3, [r0, #20]
1a00696a:	69a9      	ldr	r1, [r5, #24]
1a00696c:	f105 0218 	add.w	r2, r5, #24
1a006970:	f100 0318 	add.w	r3, r0, #24
1a006974:	e6d4      	b.n	1a006720 <_realloc_r+0xbc>
1a006976:	692a      	ldr	r2, [r5, #16]
1a006978:	f8cb 2018 	str.w	r2, [fp, #24]
1a00697c:	696a      	ldr	r2, [r5, #20]
1a00697e:	f8cb 201c 	str.w	r2, [fp, #28]
1a006982:	69a9      	ldr	r1, [r5, #24]
1a006984:	f10b 0220 	add.w	r2, fp, #32
1a006988:	3518      	adds	r5, #24
1a00698a:	e701      	b.n	1a006790 <_realloc_r+0x12c>
1a00698c:	463a      	mov	r2, r7
1a00698e:	e776      	b.n	1a00687e <_realloc_r+0x21a>
1a006990:	4629      	mov	r1, r5
1a006992:	4638      	mov	r0, r7
1a006994:	f7ff faf4 	bl	1a005f80 <memmove>
1a006998:	4b0c      	ldr	r3, [pc, #48]	; (1a0069cc <_realloc_r+0x368>)
1a00699a:	e775      	b.n	1a006888 <_realloc_r+0x224>
1a00699c:	f8cb 1010 	str.w	r1, [fp, #16]
1a0069a0:	68e9      	ldr	r1, [r5, #12]
1a0069a2:	f8cb 1014 	str.w	r1, [fp, #20]
1a0069a6:	2a24      	cmp	r2, #36	; 0x24
1a0069a8:	d004      	beq.n	1a0069b4 <_realloc_r+0x350>
1a0069aa:	6929      	ldr	r1, [r5, #16]
1a0069ac:	f10b 0218 	add.w	r2, fp, #24
1a0069b0:	3510      	adds	r5, #16
1a0069b2:	e764      	b.n	1a00687e <_realloc_r+0x21a>
1a0069b4:	692a      	ldr	r2, [r5, #16]
1a0069b6:	f8cb 2018 	str.w	r2, [fp, #24]
1a0069ba:	696a      	ldr	r2, [r5, #20]
1a0069bc:	f8cb 201c 	str.w	r2, [fp, #28]
1a0069c0:	69a9      	ldr	r1, [r5, #24]
1a0069c2:	f10b 0220 	add.w	r2, fp, #32
1a0069c6:	3518      	adds	r5, #24
1a0069c8:	e759      	b.n	1a00687e <_realloc_r+0x21a>
1a0069ca:	bf00      	nop
1a0069cc:	10000478 	.word	0x10000478

1a0069d0 <frexp>:
1a0069d0:	ec53 2b10 	vmov	r2, r3, d0
1a0069d4:	b570      	push	{r4, r5, r6, lr}
1a0069d6:	4e16      	ldr	r6, [pc, #88]	; (1a006a30 <frexp+0x60>)
1a0069d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a0069dc:	2500      	movs	r5, #0
1a0069de:	42b1      	cmp	r1, r6
1a0069e0:	4604      	mov	r4, r0
1a0069e2:	6005      	str	r5, [r0, #0]
1a0069e4:	dc21      	bgt.n	1a006a2a <frexp+0x5a>
1a0069e6:	ee10 6a10 	vmov	r6, s0
1a0069ea:	430e      	orrs	r6, r1
1a0069ec:	d01d      	beq.n	1a006a2a <frexp+0x5a>
1a0069ee:	4e11      	ldr	r6, [pc, #68]	; (1a006a34 <frexp+0x64>)
1a0069f0:	401e      	ands	r6, r3
1a0069f2:	4618      	mov	r0, r3
1a0069f4:	b966      	cbnz	r6, 1a006a10 <frexp+0x40>
1a0069f6:	4619      	mov	r1, r3
1a0069f8:	2200      	movs	r2, #0
1a0069fa:	ee10 0a10 	vmov	r0, s0
1a0069fe:	4b0e      	ldr	r3, [pc, #56]	; (1a006a38 <frexp+0x68>)
1a006a00:	f7fb fb68 	bl	1a0020d4 <__aeabi_dmul>
1a006a04:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a006a08:	4602      	mov	r2, r0
1a006a0a:	4608      	mov	r0, r1
1a006a0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a006a10:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a006a14:	1509      	asrs	r1, r1, #20
1a006a16:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a006a1a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a006a1e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a006a22:	4429      	add	r1, r5
1a006a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a006a28:	6021      	str	r1, [r4, #0]
1a006a2a:	ec43 2b10 	vmov	d0, r2, r3
1a006a2e:	bd70      	pop	{r4, r5, r6, pc}
1a006a30:	7fefffff 	.word	0x7fefffff
1a006a34:	7ff00000 	.word	0x7ff00000
1a006a38:	43500000 	.word	0x43500000

1a006a3c <strncpy>:
1a006a3c:	b470      	push	{r4, r5, r6}
1a006a3e:	ea40 0401 	orr.w	r4, r0, r1
1a006a42:	07a3      	lsls	r3, r4, #30
1a006a44:	d127      	bne.n	1a006a96 <strncpy+0x5a>
1a006a46:	2a03      	cmp	r2, #3
1a006a48:	d925      	bls.n	1a006a96 <strncpy+0x5a>
1a006a4a:	460b      	mov	r3, r1
1a006a4c:	4606      	mov	r6, r0
1a006a4e:	4619      	mov	r1, r3
1a006a50:	f853 5b04 	ldr.w	r5, [r3], #4
1a006a54:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a006a58:	ea24 0405 	bic.w	r4, r4, r5
1a006a5c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a006a60:	d106      	bne.n	1a006a70 <strncpy+0x34>
1a006a62:	3a04      	subs	r2, #4
1a006a64:	2a03      	cmp	r2, #3
1a006a66:	f846 5b04 	str.w	r5, [r6], #4
1a006a6a:	4619      	mov	r1, r3
1a006a6c:	d8ef      	bhi.n	1a006a4e <strncpy+0x12>
1a006a6e:	b182      	cbz	r2, 1a006a92 <strncpy+0x56>
1a006a70:	4633      	mov	r3, r6
1a006a72:	780c      	ldrb	r4, [r1, #0]
1a006a74:	f803 4b01 	strb.w	r4, [r3], #1
1a006a78:	1e55      	subs	r5, r2, #1
1a006a7a:	b174      	cbz	r4, 1a006a9a <strncpy+0x5e>
1a006a7c:	4432      	add	r2, r6
1a006a7e:	442e      	add	r6, r5
1a006a80:	e005      	b.n	1a006a8e <strncpy+0x52>
1a006a82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a006a86:	1af5      	subs	r5, r6, r3
1a006a88:	f803 4b01 	strb.w	r4, [r3], #1
1a006a8c:	b12c      	cbz	r4, 1a006a9a <strncpy+0x5e>
1a006a8e:	429a      	cmp	r2, r3
1a006a90:	d1f7      	bne.n	1a006a82 <strncpy+0x46>
1a006a92:	bc70      	pop	{r4, r5, r6}
1a006a94:	4770      	bx	lr
1a006a96:	4606      	mov	r6, r0
1a006a98:	e7e9      	b.n	1a006a6e <strncpy+0x32>
1a006a9a:	2d00      	cmp	r5, #0
1a006a9c:	d0f9      	beq.n	1a006a92 <strncpy+0x56>
1a006a9e:	441d      	add	r5, r3
1a006aa0:	2200      	movs	r2, #0
1a006aa2:	f803 2b01 	strb.w	r2, [r3], #1
1a006aa6:	42ab      	cmp	r3, r5
1a006aa8:	d1fb      	bne.n	1a006aa2 <strncpy+0x66>
1a006aaa:	bc70      	pop	{r4, r5, r6}
1a006aac:	4770      	bx	lr
1a006aae:	bf00      	nop

1a006ab0 <__ssprint_r>:
1a006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006ab4:	6893      	ldr	r3, [r2, #8]
1a006ab6:	b083      	sub	sp, #12
1a006ab8:	4690      	mov	r8, r2
1a006aba:	2b00      	cmp	r3, #0
1a006abc:	d06d      	beq.n	1a006b9a <__ssprint_r+0xea>
1a006abe:	6817      	ldr	r7, [r2, #0]
1a006ac0:	688d      	ldr	r5, [r1, #8]
1a006ac2:	4682      	mov	sl, r0
1a006ac4:	460c      	mov	r4, r1
1a006ac6:	6808      	ldr	r0, [r1, #0]
1a006ac8:	3708      	adds	r7, #8
1a006aca:	e043      	b.n	1a006b54 <__ssprint_r+0xa4>
1a006acc:	89a3      	ldrh	r3, [r4, #12]
1a006ace:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a006ad2:	d02e      	beq.n	1a006b32 <__ssprint_r+0x82>
1a006ad4:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
1a006ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a006adc:	eba0 0b01 	sub.w	fp, r0, r1
1a006ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1a006ae4:	eb0b 0006 	add.w	r0, fp, r6
1a006ae8:	106d      	asrs	r5, r5, #1
1a006aea:	3001      	adds	r0, #1
1a006aec:	42a8      	cmp	r0, r5
1a006aee:	462a      	mov	r2, r5
1a006af0:	bf84      	itt	hi
1a006af2:	4605      	movhi	r5, r0
1a006af4:	462a      	movhi	r2, r5
1a006af6:	055b      	lsls	r3, r3, #21
1a006af8:	d536      	bpl.n	1a006b68 <__ssprint_r+0xb8>
1a006afa:	4611      	mov	r1, r2
1a006afc:	4650      	mov	r0, sl
1a006afe:	f7fc f8b1 	bl	1a002c64 <_malloc_r>
1a006b02:	2800      	cmp	r0, #0
1a006b04:	d03a      	beq.n	1a006b7c <__ssprint_r+0xcc>
1a006b06:	465a      	mov	r2, fp
1a006b08:	6921      	ldr	r1, [r4, #16]
1a006b0a:	9001      	str	r0, [sp, #4]
1a006b0c:	f7fc fb62 	bl	1a0031d4 <memcpy>
1a006b10:	89a2      	ldrh	r2, [r4, #12]
1a006b12:	9b01      	ldr	r3, [sp, #4]
1a006b14:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a006b1c:	81a2      	strh	r2, [r4, #12]
1a006b1e:	eba5 020b 	sub.w	r2, r5, fp
1a006b22:	eb03 000b 	add.w	r0, r3, fp
1a006b26:	6165      	str	r5, [r4, #20]
1a006b28:	6123      	str	r3, [r4, #16]
1a006b2a:	6020      	str	r0, [r4, #0]
1a006b2c:	60a2      	str	r2, [r4, #8]
1a006b2e:	4635      	mov	r5, r6
1a006b30:	46b3      	mov	fp, r6
1a006b32:	465a      	mov	r2, fp
1a006b34:	4649      	mov	r1, r9
1a006b36:	f7ff fa23 	bl	1a005f80 <memmove>
1a006b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006b3e:	68a2      	ldr	r2, [r4, #8]
1a006b40:	6820      	ldr	r0, [r4, #0]
1a006b42:	1b55      	subs	r5, r2, r5
1a006b44:	4458      	add	r0, fp
1a006b46:	1b9e      	subs	r6, r3, r6
1a006b48:	60a5      	str	r5, [r4, #8]
1a006b4a:	6020      	str	r0, [r4, #0]
1a006b4c:	f8c8 6008 	str.w	r6, [r8, #8]
1a006b50:	b31e      	cbz	r6, 1a006b9a <__ssprint_r+0xea>
1a006b52:	3708      	adds	r7, #8
1a006b54:	e957 9602 	ldrd	r9, r6, [r7, #-8]
1a006b58:	46ab      	mov	fp, r5
1a006b5a:	2e00      	cmp	r6, #0
1a006b5c:	d0f9      	beq.n	1a006b52 <__ssprint_r+0xa2>
1a006b5e:	42ae      	cmp	r6, r5
1a006b60:	d2b4      	bcs.n	1a006acc <__ssprint_r+0x1c>
1a006b62:	4635      	mov	r5, r6
1a006b64:	46b3      	mov	fp, r6
1a006b66:	e7e4      	b.n	1a006b32 <__ssprint_r+0x82>
1a006b68:	4650      	mov	r0, sl
1a006b6a:	f7ff fd7b 	bl	1a006664 <_realloc_r>
1a006b6e:	4603      	mov	r3, r0
1a006b70:	2800      	cmp	r0, #0
1a006b72:	d1d4      	bne.n	1a006b1e <__ssprint_r+0x6e>
1a006b74:	6921      	ldr	r1, [r4, #16]
1a006b76:	4650      	mov	r0, sl
1a006b78:	f7fb ff56 	bl	1a002a28 <_free_r>
1a006b7c:	230c      	movs	r3, #12
1a006b7e:	f8ca 3000 	str.w	r3, [sl]
1a006b82:	89a3      	ldrh	r3, [r4, #12]
1a006b84:	2200      	movs	r2, #0
1a006b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006b8e:	81a3      	strh	r3, [r4, #12]
1a006b90:	e9c8 2201 	strd	r2, r2, [r8, #4]
1a006b94:	b003      	add	sp, #12
1a006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006b9a:	2000      	movs	r0, #0
1a006b9c:	f8c8 0004 	str.w	r0, [r8, #4]
1a006ba0:	b003      	add	sp, #12
1a006ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006ba6:	bf00      	nop

1a006ba8 <_calloc_r>:
1a006ba8:	b510      	push	{r4, lr}
1a006baa:	fb02 f101 	mul.w	r1, r2, r1
1a006bae:	f7fc f859 	bl	1a002c64 <_malloc_r>
1a006bb2:	4604      	mov	r4, r0
1a006bb4:	b168      	cbz	r0, 1a006bd2 <_calloc_r+0x2a>
1a006bb6:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a006bba:	f022 0203 	bic.w	r2, r2, #3
1a006bbe:	3a04      	subs	r2, #4
1a006bc0:	2a24      	cmp	r2, #36	; 0x24
1a006bc2:	d818      	bhi.n	1a006bf6 <_calloc_r+0x4e>
1a006bc4:	2a13      	cmp	r2, #19
1a006bc6:	d806      	bhi.n	1a006bd6 <_calloc_r+0x2e>
1a006bc8:	4602      	mov	r2, r0
1a006bca:	2300      	movs	r3, #0
1a006bcc:	e9c2 3300 	strd	r3, r3, [r2]
1a006bd0:	6093      	str	r3, [r2, #8]
1a006bd2:	4620      	mov	r0, r4
1a006bd4:	bd10      	pop	{r4, pc}
1a006bd6:	2300      	movs	r3, #0
1a006bd8:	2a1b      	cmp	r2, #27
1a006bda:	e9c0 3300 	strd	r3, r3, [r0]
1a006bde:	d90f      	bls.n	1a006c00 <_calloc_r+0x58>
1a006be0:	2a24      	cmp	r2, #36	; 0x24
1a006be2:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a006be6:	bf12      	itee	ne
1a006be8:	f100 0210 	addne.w	r2, r0, #16
1a006bec:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a006bf0:	f100 0218 	addeq.w	r2, r0, #24
1a006bf4:	e7e9      	b.n	1a006bca <_calloc_r+0x22>
1a006bf6:	2100      	movs	r1, #0
1a006bf8:	f7fc fb86 	bl	1a003308 <memset>
1a006bfc:	4620      	mov	r0, r4
1a006bfe:	bd10      	pop	{r4, pc}
1a006c00:	f100 0208 	add.w	r2, r0, #8
1a006c04:	e7e1      	b.n	1a006bca <_calloc_r+0x22>
1a006c06:	bf00      	nop

1a006c08 <__ascii_mbtowc>:
1a006c08:	b082      	sub	sp, #8
1a006c0a:	b149      	cbz	r1, 1a006c20 <__ascii_mbtowc+0x18>
1a006c0c:	b15a      	cbz	r2, 1a006c26 <__ascii_mbtowc+0x1e>
1a006c0e:	b16b      	cbz	r3, 1a006c2c <__ascii_mbtowc+0x24>
1a006c10:	7813      	ldrb	r3, [r2, #0]
1a006c12:	600b      	str	r3, [r1, #0]
1a006c14:	7812      	ldrb	r2, [r2, #0]
1a006c16:	1c10      	adds	r0, r2, #0
1a006c18:	bf18      	it	ne
1a006c1a:	2001      	movne	r0, #1
1a006c1c:	b002      	add	sp, #8
1a006c1e:	4770      	bx	lr
1a006c20:	a901      	add	r1, sp, #4
1a006c22:	2a00      	cmp	r2, #0
1a006c24:	d1f3      	bne.n	1a006c0e <__ascii_mbtowc+0x6>
1a006c26:	4610      	mov	r0, r2
1a006c28:	b002      	add	sp, #8
1a006c2a:	4770      	bx	lr
1a006c2c:	f06f 0001 	mvn.w	r0, #1
1a006c30:	e7f4      	b.n	1a006c1c <__ascii_mbtowc+0x14>
1a006c32:	bf00      	nop

1a006c34 <__ascii_wctomb>:
1a006c34:	b149      	cbz	r1, 1a006c4a <__ascii_wctomb+0x16>
1a006c36:	2aff      	cmp	r2, #255	; 0xff
1a006c38:	d802      	bhi.n	1a006c40 <__ascii_wctomb+0xc>
1a006c3a:	700a      	strb	r2, [r1, #0]
1a006c3c:	2001      	movs	r0, #1
1a006c3e:	4770      	bx	lr
1a006c40:	238a      	movs	r3, #138	; 0x8a
1a006c42:	6003      	str	r3, [r0, #0]
1a006c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006c48:	4770      	bx	lr
1a006c4a:	4608      	mov	r0, r1
1a006c4c:	4770      	bx	lr
1a006c4e:	bf00      	nop

1a006c50 <ads111x_config_bit>:
1a006c50:	0000 0002 0003 0004 0005 0008 0009 000c     ................
1a006c60:	000f ffff                                   ....

1a006c64 <ads111x_config_mask>:
1a006c64:	0003 0004 0008 0010 00e0 0100 0e00 7000     ...............p
1a006c74:	8000 ffff 6553 5074 696f 746e 203a 6925     ....SetPoint: %i
1a006c84:	0d2e 000a 6554 706d 7265 7461 7275 3a65     ....Temperature:
1a006c94:	2520 2e69 0a0d ff00 07bb 1a00 077b 1a00      %i.........{...
1a006ca4:	0765 1a00 0725 1a00                         e...%...

1a006cac <ExtRateIn>:
1a006cac:	0000 0000                                   ....

1a006cb0 <GpioButtons>:
1a006cb0:	0400 0800 0900 0901                         ........

1a006cb8 <GpioLeds>:
1a006cb8:	0005 0105 0205 0e00 0b01 0c01               ............

1a006cc4 <GpioPorts>:
1a006cc4:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a006cd4:	0802 ffff                                   ....

1a006cd8 <OscRateIn>:
1a006cd8:	1b00 00b7                                   ....

1a006cdc <InitClkStates>:
1a006cdc:	0f01 0101                                   ....

1a006ce0 <pinmuxing>:
1a006ce0:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a006cf0:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a006d00:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a006d10:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a006d20:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a006d30:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a006d40:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a006d50:	0206 0057                                   ..W.

1a006d54 <UART_BClock>:
1a006d54:	01c2 01a2 0182 0162                         ......b.

1a006d5c <UART_PClock>:
1a006d5c:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a006d6c:	00ff ffff                                   ....

1a006d70 <periph_to_base>:
1a006d70:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a006d80:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a006d90:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a006da0:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a006db0:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a006dc0:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a006dd0:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a006ddc <InitClkStates>:
1a006ddc:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a006dec:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a006dfc:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a006e0c:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a006e1c:	111a 0001 111b 0001                         ........

1a006e24 <lpcUarts>:
1a006e24:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a006e34:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a006e44:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a006e54:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a006e64:	0302 0202 0204 001b                         ........

1a006e6c <gpioPinsInit>:
1a006e6c:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a006e7c:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a006e8c:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a006e9c:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a006eac:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a006ebc:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a006ecc:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a006edc:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a006eec:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a006efc:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a006f0c:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a006f1c:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a006f2c:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a006f3c:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a006f4c:	020b 000c 0c01 ffff                         ........

1a006f54 <_ctype_>:
1a006f54:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
1a006f64:	2020 2020 2020 2020 2020 2020 2020 2020                     
1a006f74:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
1a006f84:	0410 0404 0404 0404 0404 1004 1010 1010     ................
1a006f94:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
1a006fa4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
1a006fb4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
1a006fc4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
1a006fd4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
1a007054:	ff00 ffff 4e49 0046 6e69 0066 414e 004e     ....INF.inf.NAN.
1a007064:	616e 006e 3130 3332 3534 3736 3938 6261     nan.0123456789ab
1a007074:	6463 6665 0000 0000 3130 3332 3534 3736     cdef....01234567
1a007084:	3938 4241 4443 4645 0000 0000 6e28 6c75     89ABCDEF....(nul
1a007094:	296c 0000 0030 ffff                         l)..0...

1a00709c <blanks.8678>:
1a00709c:	2020 2020 2020 2020 2020 2020 2020 2020                     

1a0070ac <zeroes.8679>:
1a0070ac:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
1a0070bc:	614e 004e 6e49 6966 696e 7974 ff00 ffff     NaN.Infinity....
1a0070cc:	ffff ffff                                   ....

1a0070d0 <__mprec_bigtens>:
1a0070d0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
1a0070e0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
1a0070f0:	bf3c 7f73 4fdd 7515                         <.s..O.u

1a0070f8 <__mprec_tens>:
1a0070f8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
1a007108:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
1a007118:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
1a007128:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
1a007138:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
1a007148:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
1a007158:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
1a007168:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
1a007178:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
1a007188:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
1a007198:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
1a0071a8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
1a0071b8:	9db4 79d9 7843 44ea                         ...yCx.D

1a0071c0 <p05.7442>:
1a0071c0:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
1a0071d0:	4f50 4953 0058 ffff 002e 0000               POSIX.......
