
MyCIAAPrograms/ADS1115_ControlTemp/ads111x/out/ads111x.elf:     file format elf32-littlearm
MyCIAAPrograms/ADS1115_ControlTemp/ads111x/out/ads111x.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0008b1

Program Header:
0x70000001 off    0x00017220 vaddr 0x1a007220 paddr 0x1a007220 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000b28 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00007228 memsz 0x00007228 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a007228 align 2**16
         filesz 0x000009f4 memsz 0x000009f4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000721c  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009f4  10000000  1a007228  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
  6 .bss          00000130  100009f8  100009f8  000009f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 11 .init_array   00000004  1a00721c  1a00721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a007220  1a007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000209f4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000209f4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000209f4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000209f4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000209f4  2**2
                  CONTENTS
 18 .noinit       00000000  10000b28  10000b28  000209f4  2**2
                  CONTENTS
 19 .debug_info   00024f63  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004e4e  00000000  00000000  00045957  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008501  00000000  00000000  0004a7a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ac8  00000000  00000000  00052ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000b70  00000000  00000000  0005376e  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000e3c7  00000000  00000000  000542de  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00013e96  00000000  00000000  000626a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002a80a  00000000  00000000  0007653b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  000a0d45  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000a0dad  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000024bc  00000000  00000000  000a0de0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100009f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00721c l    d  .init_array	00000000 .init_array
1a007220 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b28 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ads111x_driver.c
1a000300 l     F .text	00000010 ADS111x_WriteRegister
1a000310 l     F .text	00000024 ADS111x_ReadRegister
1a000334 l     F .text	0000003c ADS111x_SetConfiguration
100009f8 l     O .bss	0000000c ads111x_i2c
1a006c90 l     O .text	00000012 ads111x_config_bit
1a006ca4 l     O .text	00000012 ads111x_config_mask
00000000 l    df *ABS*	00000000 i2c_custom.c
00000000 l    df *ABS*	00000000 port.c
1a0004a6 l     F .text	00000020 PORT_i2cWriteRead
1a0004c6 l     F .text	00000020 PORT_i2cWrite
1a0004e8 l     F .text	00000010 PORT_i2cInit
00000000 l    df *ABS*	00000000 app.c
1a000514 l     F .text	0000001c ConutsToTemp
1a000530 l     F .text	00000018 TempToCounts
1a000548 l     F .text	00000034 SetNewSetTreshold
1a00057c l     F .text	00000058 ADS1115_Init
10000a04 l     O .bss	00000004 ads1115_0
10000000 l     O .data	00000002 temperature_setpoint
00000000 l    df *ABS*	00000000 button.c
1a00075c l     F .text	00000008 buttonReleased
1a000764 l     F .text	00000008 buttonPressed
1a00076c l     F .text	00000040 RisingState
1a0007ac l     F .text	00000016 DownState
1a0007c2 l     F .text	00000040 FallingState
1a000802 l     F .text	00000016 UpState
10000a08 l     O .bss	000000a0 teclas
00000000 l    df *ABS*	00000000 system.c
10000aa8 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a00095c l     F .text	00000044 Board_LED_Init
1a0009a0 l     F .text	00000040 Board_TEC_Init
1a0009e0 l     F .text	00000040 Board_GPIO_Init
1a000a20 l     F .text	00000030 Board_ADC_Init
1a000a50 l     F .text	00000038 Board_SPI_Init
1a000a88 l     F .text	00000024 Board_I2C_Init
1a006cf0 l     O .text	00000008 GpioButtons
1a006cf8 l     O .text	0000000c GpioLeds
1a006d04 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006d1c l     O .text	00000004 InitClkStates
1a006d20 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000eb0 l     F .text	0000002c Chip_UART_GetIndex
1a006d94 l     O .text	00000008 UART_BClock
1a006d9c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00100c l     F .text	00000014 Chip_ADC_GetClockIndex
1a001020 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0010e8 l     F .text	000000a0 pll_calc_divs
1a001188 l     F .text	0000010c pll_get_frac
1a001294 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001508 l     F .text	00000022 Chip_Clock_GetDivRate
10000aac l     O .bss	00000008 audio_usb_pll_freq
1a006db0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006e1c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0017d0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0017e4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a006e64 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
10000ab4 l     O .bss	00000004 callBackFuncParams
10000ab8 l     O .bss	00000008 tickCounter
10000ac0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001a00 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000ac4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a0070dc l     O .text	00000010 blanks.8678
1a0070ec l     O .text	00000010 zeroes.8679
00000000 l    df *ABS*	00000000 dtoa.c
1a004f9c l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1a007200 l     O .text	0000000c p05.7442
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a007220 l       .init_array	00000000 __init_array_end
1a00721c l       .bss_RAM5	00000000 __preinit_array_end
1a00721c l       .init_array	00000000 __init_array_start
1a00721c l       .bss_RAM5	00000000 __preinit_array_start
1a002650 g     F .text	0000002c .hidden __aeabi_dcmpun
1a00132c g     F .text	0000001c Chip_Clock_GetDividerSource
1a002614 g     F .text	00000012 .hidden __aeabi_dcmple
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a002550 g     F .text	0000007a .hidden __cmpdf2
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a000474 g     F .text	00000010 i2c_MasterSend
1a002550 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0020c0 g     F .text	0000005a .hidden __floatdidf
1a00049c g     F .text	0000000a I2C0_IRQHandler
1a000b00 g     F .text	00000008 __stdio_init
10000b04 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a000434 g     F .text	00000040 i2c_Init
1a001d64 g     F .text	0000003e delayRead
1a000394 g     F .text	0000000e ADS111x_SetThresholdLow
1a00017a  w    F .text	00000002 HardFault_Handler
1a000bd8 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a0010c6 g     F .text	0000000c Chip_ADC_SetResolution
1a0033fc g     F .text	0000000c __malloc_unlock
1a0019d4 g     F .text	0000002c SysTick_Handler
10000b08 g     O .bss	00000001 __lock___arc4random_mutex
1a0008ac  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a005fc0 g     F .text	000000ce memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a006090 g     F .text	0000004c _Balloc
1a007228 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a002540 g     F .text	0000008a .hidden __gtdf2
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a000e18 g     F .text	0000002e Chip_I2C_MasterSend
53ff6fde g       *ABS*	00000000 __valid_user_code_checksum
1a000d84 g     F .text	00000094 Chip_I2C_MasterTransfer
1a007228 g       .ARM.exidx	00000000 _etext
1a0025dc g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0015aa g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a00321c g     F .text	00000134 memcpy
1a0025cc g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003560 g     F .text	00001a3c _svfprintf_r
1a002048 g     F .text	00000022 .hidden __floatsidf
1a000e80 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a000844 g     F .text	00000040 FSMButtonUpdate
1a002548 g     F .text	00000082 .hidden __ltdf2
1a0026cc g     F .text	00000000 .hidden __aeabi_uldivmod
10000b28 g       .noinit	00000000 _noinit
1a00191e g     F .text	00000016 uartWriteString
10000afc g     O .bss	00000004 SystemCoreClock
1a000edc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a007138 g     O .text	000000c8 __mprec_tens
1a000180  w    F .text	00000002 UsageFault_Handler
1a001628 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
10000af8 g     O .bss	00000004 __malloc_top_pad
1a000b40 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002028 g     F .text	0000001e .hidden __aeabi_ui2d
1a005f14 g     F .text	00000008 _localeconv_r
1a00621c g     F .text	00000012 __i2b
1a000d54 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0003c8 g     F .text	00000040 ADS111x_Init
1a0026fc g     F .text	000002d0 .hidden __udivmoddi4
1a001da4 g     F .text	00000000 .hidden __aeabi_drsub
1a00093c g     F .text	00000020 _sbrk_r
1a006cec g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000484 g     F .text	00000018 i2c_MasterReceive
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000386 g     F .text	0000000e ADS111x_Read
1a002600 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
10000af0 g     O .bss	00000004 __malloc_max_sbrked_mem
1a00206c g     F .text	00000042 .hidden __extendsfdf2
1a002370 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001db0 g     F .text	00000276 .hidden __adddf3
1a007220 g       .ARM.exidx	00000000 __exidx_start
10000b0c g     O .bss	00000001 __lock___env_recursive_mutex
1a00211c g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000b10 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a0066a4 g     F .text	0000036c _realloc_r
1a002c5c g     F .text	00000048 __libc_init_array
1a007110 g     O .text	00000028 __mprec_bigtens
1a002028 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0064b4 g     F .text	00000038 __mcmp
1a000ad0 g     F .text	00000030 Board_Init
1a00093a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000b28 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0008b0 g     F .text	00000088 Reset_Handler
1a001958 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00617c g     F .text	00000040 __hi0bits
1a000d1c g     F .text	00000038 Chip_I2C_SetClockRate
1a00267c g     F .text	0000004e .hidden __fixdfsi
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0004f8 g     F .text	0000001c PORT_Init
1a0012e0 g     F .text	0000004c Chip_Clock_EnableCrystal
10000b14 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001db0 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a002548 g     F .text	00000082 .hidden __ledf2
1a006360 g     F .text	000000a0 __pow5mult
1a0020b0 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000cf8 g     F .text	00000024 Chip_I2C_Init
1a002ca8 g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a00149c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0003b0 g     F .text	0000000c ADS111x_SetMultiplexer
1a006eac g     O .text	000000e6 gpioPinsInit
1a001904 g     F .text	0000001a uartWriteByte
1a0017fc g     F .text	00000012 Chip_SSP_SetClockRate
1a00263c g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a005f20 g     F .text	00000000 memchr
1a002a70 g     F .text	000001ec _free_r
1a001584 g     F .text	00000026 Chip_Clock_GetBaseClock
1a002628 g     F .text	00000012 .hidden __aeabi_dcmpge
1a000370 g     F .text	00000016 ADS111x_StartConversion
1a000408 g     F .text	0000000c ADS111x_SetDataRate
100009f8 g       .bss	00000000 _bss
1a001094 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001dac g     F .text	0000027a .hidden __aeabi_dsub
10000880 g     O .data	00000004 __malloc_sbrk_base
1a0003bc g     F .text	0000000c ADS111x_SetGain
1a001d44 g     F .text	00000020 delayInit
1a0020b0 g     F .text	0000006a .hidden __floatundidf
1a006400 g     F .text	000000b2 __lshift
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a006af0 g     F .text	000000f6 __ssprint_r
1a00180e g     F .text	0000003e Chip_SSP_SetBitRate
1a000818 g     F .text	0000002c FSMButtonInit
1a0017cc g     F .text	00000002 Chip_GPIO_Init
1a006d18 g     O .text	00000004 OscRateIn
1a0003a2 g     F .text	0000000e ADS111x_SetThresholdHigh
1a006230 g     F .text	00000130 __multiply
10000b28 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a006a7c g     F .text	00000072 strncpy
10000ac8 g     O .bss	00000028 __malloc_current_mallinfo
1a0065e4 g     F .text	000000be __d2b
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002048 g     F .text	00000022 .hidden __aeabi_i2d
1a001a34 g     F .text	000001ac gpioInit
1a000884 g     F .text	00000028 CheckFallState
1a0029cc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002370 g     F .text	000001d0 .hidden __divdf3
10000478 g     O .data	00000408 __malloc_av_
1a00211c g     F .text	00000254 .hidden __muldf3
1a001cb4 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0033f0 g     F .text	0000000c __malloc_lock
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a006be8 g     F .text	0000005e _calloc_r
1a001348 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002ca4 g     F .text	00000002 __retarget_lock_acquire_recursive
1a003350 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005d4 g     F .text	00000188 main
10000af4 g     O .bss	00000004 __malloc_max_total_mem
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0050c0 g     F .text	00000e54 _dtoa_r
1a002cac g     F .text	00000570 _malloc_r
1a006c74 g     F .text	0000001a __ascii_wctomb
1a0020c0 g     F .text	0000005a .hidden __aeabi_l2d
1a0018d8 g     F .text	00000018 uartTxReady
1a000414 g     F .text	0000000c ADS111x_SetMode
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0015b8 g     F .text	0000003c Chip_Clock_EnableOpts
1a0029d0 g     F .text	000000a0 _malloc_trim_r
1a001364 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00141c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001884 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a002550 g     F .text	0000007a .hidden __nedf2
1a001be0 g     F .text	0000006a gpioWrite
1a000938  w    F .text	00000002 _fini
1a003408 g     F .text	00000044 sprintf
1a001054 g     F .text	00000040 Chip_ADC_Init
10000b00 g     O .bss	00000004 g_pUsbApi
1a000b08 g     F .text	00000038 Board_SetupMuxing
1a000f30 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001934 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a0018f0 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a006c48 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000b28 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00184c g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000aac g     F .text	00000024 Board_Debug_Init
1a0025ec g     F .text	00000012 .hidden __aeabi_dcmpeq
100009f4 g       .data	00000000 _edata
1a000bb8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000b18 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a001674 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a0010d4 g     F .text	00000014 SystemCoreClockUpdate
1a0064ec g     F .text	000000f8 __mdiff
1a00267c g     F .text	0000004e .hidden __aeabi_d2iz
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a006f94 g     O .text	00000101 _ctype_
1a0029cc  w    F .text	00000002 .hidden __aeabi_idiv0
1a002650 g     F .text	0000002c .hidden __unorddf2
1a000e46 g     F .text	00000038 Chip_I2C_MasterCmdRead
1a00017e  w    F .text	00000002 BusFault_Handler
10000b1c g     O .bss	00000001 __lock___dd_hash_mutex
10000b20 g     O .bss	00000001 __lock___tz_mutex
1a003480 g     F .text	000000dc strlen
1a0015f4 g     F .text	00000034 Chip_Clock_Enable
1a0025dc g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a002540 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001c4a g     F .text	00000068 gpioRead
1a00206c g     F .text	00000042 .hidden __aeabi_f2d
1a001cd0 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a001dac g     F .text	0000027a .hidden __subdf3
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0061bc g     F .text	00000060 __lo0bits
1a001940 g     F .text	00000018 tickPowerSet
1a000420 g     F .text	00000014 ADS111x_SetComparatorQueue
1a006a10 g     F .text	0000006c frexp
10000888 g     O .data	0000016c __global_locale
1a00152c g     F .text	00000058 Chip_Clock_SetBaseClock
1a0018bc g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000b24 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000bac g     F .text	0000000c Board_SystemInit
1a0060f0 g     F .text	0000008a __multadd
1a0060dc g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b1 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a de 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	d5 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	b5 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a 9d 04 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a007228 	.word	0x1a007228
1a000118:	10000000 	.word	0x10000000
1a00011c:	000009f4 	.word	0x000009f4
1a000120:	1a007228 	.word	0x1a007228
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007228 	.word	0x1a007228
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007228 	.word	0x1a007228
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007228 	.word	0x1a007228
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100009f8 	.word	0x100009f8
1a000154:	00000130 	.word	0x00000130
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ADS111x_WriteRegister>:
    }
}

/*=====[Implementations of private functions]===============================*/

static void ADS111x_WriteRegister(ads111x_addr_t i2c_address, ads111x_reg_t reg, uint16_t value) {
1a000300:	b508      	push	{r3, lr}
    ads111x_i2c.Write(i2c_address, reg, value);
1a000302:	4b02      	ldr	r3, [pc, #8]	; (1a00030c <ADS111x_WriteRegister+0xc>)
1a000304:	685b      	ldr	r3, [r3, #4]
1a000306:	4798      	blx	r3
}
1a000308:	bd08      	pop	{r3, pc}
1a00030a:	bf00      	nop
1a00030c:	100009f8 	.word	0x100009f8

1a000310 <ADS111x_ReadRegister>:

static uint16_t ADS111x_ReadRegister(uint8_t i2c_address, uint8_t reg) {
1a000310:	b500      	push	{lr}
1a000312:	b083      	sub	sp, #12
    uint16_t value = 0;
1a000314:	2300      	movs	r3, #0
1a000316:	f8ad 3006 	strh.w	r3, [sp, #6]
    ads111x_i2c.WriteRead(i2c_address, reg, &value);
1a00031a:	4b05      	ldr	r3, [pc, #20]	; (1a000330 <ADS111x_ReadRegister+0x20>)
1a00031c:	689b      	ldr	r3, [r3, #8]
1a00031e:	f10d 0206 	add.w	r2, sp, #6
1a000322:	4798      	blx	r3
    return value;
  
}
1a000324:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a000328:	b003      	add	sp, #12
1a00032a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00032e:	bf00      	nop
1a000330:	100009f8 	.word	0x100009f8

1a000334 <ADS111x_SetConfiguration>:

static void ADS111x_SetConfiguration(ads111x_obj_t *ptr_asd111x, ads111x_config_field_t field, uint8_t field_config) {
1a000334:	b510      	push	{r4, lr}
    if (field_config <= (ads111x_config_mask[field]>>ads111x_config_bit[field])) {
1a000336:	4b0c      	ldr	r3, [pc, #48]	; (1a000368 <ADS111x_SetConfiguration+0x34>)
1a000338:	f833 4011 	ldrh.w	r4, [r3, r1, lsl #1]
1a00033c:	4b0b      	ldr	r3, [pc, #44]	; (1a00036c <ADS111x_SetConfiguration+0x38>)
1a00033e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
1a000342:	fa44 f301 	asr.w	r3, r4, r1
1a000346:	429a      	cmp	r2, r3
1a000348:	dd00      	ble.n	1a00034c <ADS111x_SetConfiguration+0x18>
        ptr_asd111x->configuration &= ~(ads111x_config_mask[field]);
        ptr_asd111x->configuration |= field_config << ads111x_config_bit[field];
        ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_CONFIG_REG,ptr_asd111x->configuration);
    }
}
1a00034a:	bd10      	pop	{r4, pc}
        ptr_asd111x->configuration &= ~(ads111x_config_mask[field]);
1a00034c:	8803      	ldrh	r3, [r0, #0]
1a00034e:	ea23 0304 	bic.w	r3, r3, r4
1a000352:	b21b      	sxth	r3, r3
        ptr_asd111x->configuration |= field_config << ads111x_config_bit[field];
1a000354:	408a      	lsls	r2, r1
1a000356:	431a      	orrs	r2, r3
1a000358:	b292      	uxth	r2, r2
1a00035a:	8002      	strh	r2, [r0, #0]
        ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_CONFIG_REG,ptr_asd111x->configuration);
1a00035c:	2101      	movs	r1, #1
1a00035e:	78c0      	ldrb	r0, [r0, #3]
1a000360:	f7ff ffce 	bl	1a000300 <ADS111x_WriteRegister>
}
1a000364:	e7f1      	b.n	1a00034a <ADS111x_SetConfiguration+0x16>
1a000366:	bf00      	nop
1a000368:	1a006ca4 	.word	0x1a006ca4
1a00036c:	1a006c90 	.word	0x1a006c90

1a000370 <ADS111x_StartConversion>:
void ADS111x_StartConversion(ads111x_obj_t *ptr_asd111x) {
1a000370:	b510      	push	{r4, lr}
1a000372:	4604      	mov	r4, r0
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_OS, ADS111X_START_CONVERSION);
1a000374:	2201      	movs	r2, #1
1a000376:	2108      	movs	r1, #8
1a000378:	f7ff ffdc 	bl	1a000334 <ADS111x_SetConfiguration>
    ptr_asd111x->configuration &=~ADS111X_CONFIG_FIELD_OS_MASK; // Clear OS bit to avoid unnecessary conversion cmd when a configuration is performed
1a00037c:	8823      	ldrh	r3, [r4, #0]
1a00037e:	f3c3 030e 	ubfx	r3, r3, #0, #15
1a000382:	8023      	strh	r3, [r4, #0]
}
1a000384:	bd10      	pop	{r4, pc}

1a000386 <ADS111x_Read>:
int16_t ADS111x_Read(ads111x_obj_t *ptr_asd111x) {
1a000386:	b508      	push	{r3, lr}
    data = ADS111x_ReadRegister(ptr_asd111x->i2c_address,ADS111X_CONVERSION_REG);   
1a000388:	2100      	movs	r1, #0
1a00038a:	78c0      	ldrb	r0, [r0, #3]
1a00038c:	f7ff ffc0 	bl	1a000310 <ADS111x_ReadRegister>
}
1a000390:	b200      	sxth	r0, r0
1a000392:	bd08      	pop	{r3, pc}

1a000394 <ADS111x_SetThresholdLow>:
void ADS111x_SetThresholdLow(ads111x_obj_t *ptr_asd111x, uint16_t threshold) {
1a000394:	b508      	push	{r3, lr}
    ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_LO_THRESH_REG,threshold);
1a000396:	460a      	mov	r2, r1
1a000398:	2102      	movs	r1, #2
1a00039a:	78c0      	ldrb	r0, [r0, #3]
1a00039c:	f7ff ffb0 	bl	1a000300 <ADS111x_WriteRegister>
}
1a0003a0:	bd08      	pop	{r3, pc}

1a0003a2 <ADS111x_SetThresholdHigh>:
void ADS111x_SetThresholdHigh(ads111x_obj_t *ptr_asd111x, uint16_t threshold) {
1a0003a2:	b508      	push	{r3, lr}
    ADS111x_WriteRegister(ptr_asd111x->i2c_address,ADS111X_HI_THRESH_REG,threshold);
1a0003a4:	460a      	mov	r2, r1
1a0003a6:	2103      	movs	r1, #3
1a0003a8:	78c0      	ldrb	r0, [r0, #3]
1a0003aa:	f7ff ffa9 	bl	1a000300 <ADS111x_WriteRegister>
}
1a0003ae:	bd08      	pop	{r3, pc}

1a0003b0 <ADS111x_SetMultiplexer>:
void ADS111x_SetMultiplexer(ads111x_obj_t *ptr_asd111x, ads111x_mux_t mux) {
1a0003b0:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_MUX, mux);
1a0003b2:	460a      	mov	r2, r1
1a0003b4:	2107      	movs	r1, #7
1a0003b6:	f7ff ffbd 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a0003ba:	bd08      	pop	{r3, pc}

1a0003bc <ADS111x_SetGain>:
void ADS111x_SetGain(ads111x_obj_t *ptr_asd111x, ads111x_pga_t gain) {
1a0003bc:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_PGA, gain);
1a0003be:	460a      	mov	r2, r1
1a0003c0:	2106      	movs	r1, #6
1a0003c2:	f7ff ffb7 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a0003c6:	bd08      	pop	{r3, pc}

1a0003c8 <ADS111x_Init>:
uint8_t ADS111x_Init(ads111x_obj_t *ptr_asd111x, ads111x_addr_t i2c_address, ads111x_pga_t gain, ads111x_device_t device, ads111x_i2c_t *port) {
1a0003c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0003cc:	4604      	mov	r4, r0
1a0003ce:	460f      	mov	r7, r1
1a0003d0:	4616      	mov	r6, r2
1a0003d2:	4698      	mov	r8, r3
1a0003d4:	9b06      	ldr	r3, [sp, #24]
    if (port != NULL) {
1a0003d6:	b12b      	cbz	r3, 1a0003e4 <ADS111x_Init+0x1c>
        ads111x_i2c = *port;
1a0003d8:	4d0a      	ldr	r5, [pc, #40]	; (1a000404 <ADS111x_Init+0x3c>)
1a0003da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a0003de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        port->Init();
1a0003e2:	4780      	blx	r0
    if (ptr_asd111x!=NULL) {
1a0003e4:	b164      	cbz	r4, 1a000400 <ADS111x_Init+0x38>
        ptr_asd111x->device = device;
1a0003e6:	f884 8002 	strb.w	r8, [r4, #2]
        ptr_asd111x->i2c_address = i2c_address;
1a0003ea:	70e7      	strb	r7, [r4, #3]
        ptr_asd111x->configuration = ADS_111x_RESET_CONFIG & (~ADS111X_CONFIG_FIELD_OS_MASK);
1a0003ec:	f240 5383 	movw	r3, #1411	; 0x583
1a0003f0:	8023      	strh	r3, [r4, #0]
        ADS111x_SetGain(ptr_asd111x, gain);
1a0003f2:	4631      	mov	r1, r6
1a0003f4:	4620      	mov	r0, r4
1a0003f6:	f7ff ffe1 	bl	1a0003bc <ADS111x_SetGain>
        result = ADS111x_CONFIG_SUCCESS;
1a0003fa:	2000      	movs	r0, #0
}
1a0003fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t result = ADS111x_CONFIG_ERROR;
1a000400:	20ff      	movs	r0, #255	; 0xff
1a000402:	e7fb      	b.n	1a0003fc <ADS111x_Init+0x34>
1a000404:	100009f8 	.word	0x100009f8

1a000408 <ADS111x_SetDataRate>:
void ADS111x_SetDataRate(ads111x_obj_t *ptr_asd111x, ads111x_data_rate_t dr) {
1a000408:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_DR, dr);
1a00040a:	460a      	mov	r2, r1
1a00040c:	2104      	movs	r1, #4
1a00040e:	f7ff ff91 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a000412:	bd08      	pop	{r3, pc}

1a000414 <ADS111x_SetMode>:
void ADS111x_SetMode(ads111x_obj_t *ptr_asd111x, ads111x_mode_t mode) {
1a000414:	b508      	push	{r3, lr}
    ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_MODE, mode);
1a000416:	460a      	mov	r2, r1
1a000418:	2105      	movs	r1, #5
1a00041a:	f7ff ff8b 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a00041e:	bd08      	pop	{r3, pc}

1a000420 <ADS111x_SetComparatorQueue>:
void ADS111x_SetComparatorQueue(ads111x_obj_t *ptr_asd111x, ads111x_comp_que_t que) {
1a000420:	b508      	push	{r3, lr}
    if(ptr_asd111x->device != ADS1113) {
1a000422:	7883      	ldrb	r3, [r0, #2]
1a000424:	2b01      	cmp	r3, #1
1a000426:	d100      	bne.n	1a00042a <ADS111x_SetComparatorQueue+0xa>
}
1a000428:	bd08      	pop	{r3, pc}
1a00042a:	460a      	mov	r2, r1
        ADS111x_SetConfiguration(ptr_asd111x, ADS111X_CONFIG_FIELD_COMP_QUE, que);
1a00042c:	2100      	movs	r1, #0
1a00042e:	f7ff ff81 	bl	1a000334 <ADS111x_SetConfiguration>
}
1a000432:	e7f9      	b.n	1a000428 <ADS111x_SetComparatorQueue+0x8>

1a000434 <i2c_Init>:

/*=====[Definitions of private global variables]=============================*/

/*=====[Implementation of public functions]==================================*/
bool i2c_Init(I2C_ID_T i2cNumber, uint32_t clockRateHz){
    if( i2cNumber != I2C0 ) {
1a000434:	b108      	cbz	r0, 1a00043a <i2c_Init+0x6>
        return false;
1a000436:	2000      	movs	r0, #0
    Chip_I2C_Init( i2cNumber );
   // Seleccion de velocidad del bus
    Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
    Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandler);
    NVIC_EnableIRQ(I2C0_IRQn);
}
1a000438:	4770      	bx	lr
bool i2c_Init(I2C_ID_T i2cNumber, uint32_t clockRateHz){
1a00043a:	b538      	push	{r3, r4, r5, lr}
1a00043c:	4604      	mov	r4, r0
1a00043e:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000440:	4b09      	ldr	r3, [pc, #36]	; (1a000468 <i2c_Init+0x34>)
1a000442:	f640 0208 	movw	r2, #2056	; 0x808
1a000446:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_Init( i2cNumber );
1a00044a:	f000 fc55 	bl	1a000cf8 <Chip_I2C_Init>
    Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a00044e:	4629      	mov	r1, r5
1a000450:	4620      	mov	r0, r4
1a000452:	f000 fc63 	bl	1a000d1c <Chip_I2C_SetClockRate>
    Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandler);
1a000456:	4905      	ldr	r1, [pc, #20]	; (1a00046c <i2c_Init+0x38>)
1a000458:	2000      	movs	r0, #0
1a00045a:	f000 fc7b 	bl	1a000d54 <Chip_I2C_SetMasterEventHandler>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00045e:	4b04      	ldr	r3, [pc, #16]	; (1a000470 <i2c_Init+0x3c>)
1a000460:	f44f 2280 	mov.w	r2, #262144	; 0x40000
1a000464:	601a      	str	r2, [r3, #0]
}
1a000466:	bd38      	pop	{r3, r4, r5, pc}
1a000468:	40086000 	.word	0x40086000
1a00046c:	1a000bb9 	.word	0x1a000bb9
1a000470:	e000e100 	.word	0xe000e100

1a000474 <i2c_MasterSend>:

int i2c_MasterSend(uint8_t slaveAddr, const uint8_t *buff, uint8_t len) {
1a000474:	b508      	push	{r3, lr}
    return Chip_I2C_MasterSend( I2C0, slaveAddr, buff, len );
1a000476:	4613      	mov	r3, r2
1a000478:	460a      	mov	r2, r1
1a00047a:	4601      	mov	r1, r0
1a00047c:	2000      	movs	r0, #0
1a00047e:	f000 fccb 	bl	1a000e18 <Chip_I2C_MasterSend>
}
1a000482:	bd08      	pop	{r3, pc}

1a000484 <i2c_MasterReceive>:

int i2c_MasterReceive(uint8_t slaveAddr, uint8_t reg, uint8_t *buff, uint8_t len) {
1a000484:	b500      	push	{lr}
1a000486:	b083      	sub	sp, #12
    return Chip_I2C_MasterCmdRead( I2C0, slaveAddr, reg, buff, len );
1a000488:	9300      	str	r3, [sp, #0]
1a00048a:	4613      	mov	r3, r2
1a00048c:	460a      	mov	r2, r1
1a00048e:	4601      	mov	r1, r0
1a000490:	2000      	movs	r0, #0
1a000492:	f000 fcd8 	bl	1a000e46 <Chip_I2C_MasterCmdRead>
}
1a000496:	b003      	add	sp, #12
1a000498:	f85d fb04 	ldr.w	pc, [sp], #4

1a00049c <I2C0_IRQHandler>:

/*=====[Implementations of private functions]================================*/

/*=====[Implementations of interrupt functions]==============================*/

void I2C0_IRQHandler(void) {
1a00049c:	b508      	push	{r3, lr}
    Chip_I2C_MasterStateHandler(I2C0);
1a00049e:	2000      	movs	r0, #0
1a0004a0:	f000 fcee 	bl	1a000e80 <Chip_I2C_MasterStateHandler>
}
1a0004a4:	bd08      	pop	{r3, pc}

1a0004a6 <PORT_i2cWriteRead>:
    data_to_send[1] = (uint8_t)((data >> 8) & 0xFF);
    data_to_send[2] = (uint8_t)(data & 0xFF);
    i2c_MasterSend(i2cSlaveAddress, data_to_send, 3);
}

static void PORT_i2cWriteRead(uint8_t i2cSlaveAddress, uint8_t i2c_register, uint16_t *readden_data) {
1a0004a6:	b510      	push	{r4, lr}
1a0004a8:	b082      	sub	sp, #8
1a0004aa:	4614      	mov	r4, r2
    uint8_t dataToRead[2];
    i2c_MasterReceive(i2cSlaveAddress, i2c_register, dataToRead, 2);
1a0004ac:	2302      	movs	r3, #2
1a0004ae:	aa01      	add	r2, sp, #4
1a0004b0:	f7ff ffe8 	bl	1a000484 <i2c_MasterReceive>
    *readden_data = (dataToRead[0] << 8) | dataToRead[1];
1a0004b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
1a0004b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a0004bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0004c0:	8023      	strh	r3, [r4, #0]
}
1a0004c2:	b002      	add	sp, #8
1a0004c4:	bd10      	pop	{r4, pc}

1a0004c6 <PORT_i2cWrite>:
static void PORT_i2cWrite(uint8_t i2cSlaveAddress, uint8_t i2c_register, uint16_t data) {
1a0004c6:	b500      	push	{lr}
1a0004c8:	b083      	sub	sp, #12
    data_to_send[0] = i2c_register;
1a0004ca:	f88d 1004 	strb.w	r1, [sp, #4]
    data_to_send[1] = (uint8_t)((data >> 8) & 0xFF);
1a0004ce:	0a13      	lsrs	r3, r2, #8
1a0004d0:	f88d 3005 	strb.w	r3, [sp, #5]
    data_to_send[2] = (uint8_t)(data & 0xFF);
1a0004d4:	f88d 2006 	strb.w	r2, [sp, #6]
    i2c_MasterSend(i2cSlaveAddress, data_to_send, 3);
1a0004d8:	2203      	movs	r2, #3
1a0004da:	a901      	add	r1, sp, #4
1a0004dc:	f7ff ffca 	bl	1a000474 <i2c_MasterSend>
}
1a0004e0:	b003      	add	sp, #12
1a0004e2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0004e6:	Address 0x000000001a0004e6 is out of bounds.


1a0004e8 <PORT_i2cInit>:
static void PORT_i2cInit(void) {
1a0004e8:	b508      	push	{r3, lr}
    i2c_Init(I2C0, 100000);
1a0004ea:	4902      	ldr	r1, [pc, #8]	; (1a0004f4 <PORT_i2cInit+0xc>)
1a0004ec:	2000      	movs	r0, #0
1a0004ee:	f7ff ffa1 	bl	1a000434 <i2c_Init>
}
1a0004f2:	bd08      	pop	{r3, pc}
1a0004f4:	000186a0 	.word	0x000186a0

1a0004f8 <PORT_Init>:
    i2c_ads111x.Init = PORT_i2cInit;
1a0004f8:	4a03      	ldr	r2, [pc, #12]	; (1a000508 <PORT_Init+0x10>)
1a0004fa:	6002      	str	r2, [r0, #0]
    i2c_ads111x.Write = PORT_i2cWrite;
1a0004fc:	4a03      	ldr	r2, [pc, #12]	; (1a00050c <PORT_Init+0x14>)
1a0004fe:	6042      	str	r2, [r0, #4]
    i2c_ads111x.WriteRead = PORT_i2cWriteRead;
1a000500:	4a03      	ldr	r2, [pc, #12]	; (1a000510 <PORT_Init+0x18>)
1a000502:	6082      	str	r2, [r0, #8]
}
1a000504:	4770      	bx	lr
1a000506:	bf00      	nop
1a000508:	1a0004e9 	.word	0x1a0004e9
1a00050c:	1a0004c7 	.word	0x1a0004c7
1a000510:	1a0004a7 	.word	0x1a0004a7

1a000514 <ConutsToTemp>:
   SetNewSetTreshold(temperature_setpoint); //!< Set the initial setpoint
   ADS111x_StartConversion(&ads1115_0); //!< First conversion
}

static uint16_t ConutsToTemp(uint16_t counts) {
   return (counts * MAX_TEMP_D_CELSIUS) / 0x7FFF; //!< Convert the raw data to a temperature in Celsius
1a000514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a000518:	fb03 f000 	mul.w	r0, r3, r0
1a00051c:	4b03      	ldr	r3, [pc, #12]	; (1a00052c <ConutsToTemp+0x18>)
1a00051e:	fb83 2300 	smull	r2, r3, r3, r0
1a000522:	4418      	add	r0, r3
}
1a000524:	f3c0 308f 	ubfx	r0, r0, #14, #16
1a000528:	4770      	bx	lr
1a00052a:	bf00      	nop
1a00052c:	80010003 	.word	0x80010003

1a000530 <TempToCounts>:

static uint16_t TempToCounts(uint16_t temp) {
   return (temp * 0x7FFF) / MAX_TEMP_D_CELSIUS; //!< Convert the temperature in Celsius to a raw data for the ADC
1a000530:	ebc0 30c0 	rsb	r0, r0, r0, lsl #15
1a000534:	4b03      	ldr	r3, [pc, #12]	; (1a000544 <TempToCounts+0x14>)
1a000536:	fb83 2300 	smull	r2, r3, r3, r0
1a00053a:	17c0      	asrs	r0, r0, #31
1a00053c:	ebc0 1063 	rsb	r0, r0, r3, asr #5
}
1a000540:	b280      	uxth	r0, r0
1a000542:	4770      	bx	lr
1a000544:	10624dd3 	.word	0x10624dd3

1a000548 <SetNewSetTreshold>:

static void SetNewSetTreshold(uint16_t new_setpoint) {
1a000548:	b570      	push	{r4, r5, r6, lr}
1a00054a:	4604      	mov	r4, r0
   uint16_t thesh_lo = TempToCounts(new_setpoint - TEMP_2_D_CELSIUS); //!< Set the low threshold to 2 degrees below the setpoint
1a00054c:	3814      	subs	r0, #20
1a00054e:	b280      	uxth	r0, r0
1a000550:	f7ff ffee 	bl	1a000530 <TempToCounts>
1a000554:	4606      	mov	r6, r0
   uint16_t thesh_hi = TempToCounts(new_setpoint + TEMP_2_D_CELSIUS)  ; //!< Set the high threshold to 2 degrees above the setpoints
1a000556:	f104 0014 	add.w	r0, r4, #20
1a00055a:	b280      	uxth	r0, r0
1a00055c:	f7ff ffe8 	bl	1a000530 <TempToCounts>
1a000560:	4605      	mov	r5, r0
   ADS111x_SetThresholdLow(&ads1115_0, thesh_lo);
1a000562:	4c05      	ldr	r4, [pc, #20]	; (1a000578 <SetNewSetTreshold+0x30>)
1a000564:	4631      	mov	r1, r6
1a000566:	4620      	mov	r0, r4
1a000568:	f7ff ff14 	bl	1a000394 <ADS111x_SetThresholdLow>
   ADS111x_SetThresholdHigh(&ads1115_0, thesh_hi);
1a00056c:	4629      	mov	r1, r5
1a00056e:	4620      	mov	r0, r4
1a000570:	f7ff ff17 	bl	1a0003a2 <ADS111x_SetThresholdHigh>
1a000574:	bd70      	pop	{r4, r5, r6, pc}
1a000576:	bf00      	nop
1a000578:	10000a04 	.word	0x10000a04

1a00057c <ADS1115_Init>:
static void ADS1115_Init(void) {
1a00057c:	b530      	push	{r4, r5, lr}
1a00057e:	b087      	sub	sp, #28
   ads111x_i2c_t ads111x_port = PORT_Init();
1a000580:	ad03      	add	r5, sp, #12
1a000582:	4628      	mov	r0, r5
1a000584:	f7ff ffb8 	bl	1a0004f8 <PORT_Init>
   ADS111x_Init(&ads1115_0, ADS111X_ADDR_0, ADS111X_PGA_4096, ADS1115, &ads111x_port); //!< Initialize the ADS1115 with address 0x48, PGA = 4096, and the ADS1115 as the device
1a000588:	4c10      	ldr	r4, [pc, #64]	; (1a0005cc <ADS1115_Init+0x50>)
1a00058a:	9500      	str	r5, [sp, #0]
1a00058c:	2303      	movs	r3, #3
1a00058e:	2201      	movs	r2, #1
1a000590:	2148      	movs	r1, #72	; 0x48
1a000592:	4620      	mov	r0, r4
1a000594:	f7ff ff18 	bl	1a0003c8 <ADS111x_Init>
   ADS111x_SetDataRate(&ads1115_0, ADS111X_DATA_RATE_16SPS); //!< Set the data rate to 16 samples per second
1a000598:	2101      	movs	r1, #1
1a00059a:	4620      	mov	r0, r4
1a00059c:	f7ff ff34 	bl	1a000408 <ADS111x_SetDataRate>
   ADS111x_SetMultiplexer(&ads1115_0, ADS111X_MUX_AN0_GND); //!< Select the Analog input to be AN0
1a0005a0:	2104      	movs	r1, #4
1a0005a2:	4620      	mov	r0, r4
1a0005a4:	f7ff ff04 	bl	1a0003b0 <ADS111x_SetMultiplexer>
   ADS111x_SetMode(&ads1115_0, ADS111X_MODE_SINGLE); //!< Set the mode to single shot
1a0005a8:	2101      	movs	r1, #1
1a0005aa:	4620      	mov	r0, r4
1a0005ac:	f7ff ff32 	bl	1a000414 <ADS111x_SetMode>
   ADS111x_SetComparatorQueue(&ads1115_0, ADS111X_COMP_QUE_2_CONV); //!< Set the comparator queue to 2 conversions
1a0005b0:	2101      	movs	r1, #1
1a0005b2:	4620      	mov	r0, r4
1a0005b4:	f7ff ff34 	bl	1a000420 <ADS111x_SetComparatorQueue>
   SetNewSetTreshold(temperature_setpoint); //!< Set the initial setpoint
1a0005b8:	4b05      	ldr	r3, [pc, #20]	; (1a0005d0 <ADS1115_Init+0x54>)
1a0005ba:	8818      	ldrh	r0, [r3, #0]
1a0005bc:	f7ff ffc4 	bl	1a000548 <SetNewSetTreshold>
   ADS111x_StartConversion(&ads1115_0); //!< First conversion
1a0005c0:	4620      	mov	r0, r4
1a0005c2:	f7ff fed5 	bl	1a000370 <ADS111x_StartConversion>
}
1a0005c6:	b007      	add	sp, #28
1a0005c8:	bd30      	pop	{r4, r5, pc}
1a0005ca:	bf00      	nop
1a0005cc:	10000a04 	.word	0x10000a04
1a0005d0:	10000000 	.word	0x10000000

1a0005d4 <main>:
{
1a0005d4:	b530      	push	{r4, r5, lr}
1a0005d6:	b091      	sub	sp, #68	; 0x44
1a0005d8:	2400      	movs	r4, #0
   boardInit();
1a0005da:	f001 fb79 	bl	1a001cd0 <boardInit>
   FSMButtonInit(TEC1); //!< Initialize the button to decrease the setpoint
1a0005de:	2024      	movs	r0, #36	; 0x24
1a0005e0:	f000 f91a 	bl	1a000818 <FSMButtonInit>
   FSMButtonInit(TEC2); //!< Initialize the button to increase the setpoint
1a0005e4:	2025      	movs	r0, #37	; 0x25
1a0005e6:	f000 f917 	bl	1a000818 <FSMButtonInit>
   FSMButtonInit(TEC3); //!< Initialize the button to increase the setpoint
1a0005ea:	2026      	movs	r0, #38	; 0x26
1a0005ec:	f000 f914 	bl	1a000818 <FSMButtonInit>
   FSMButtonInit(TEC4); //!< Initialize the button to increase the setpoint
1a0005f0:	2027      	movs	r0, #39	; 0x27
1a0005f2:	f000 f911 	bl	1a000818 <FSMButtonInit>
   ADS1115_Init();      //!< Initialize the ADC
1a0005f6:	f7ff ffc1 	bl	1a00057c <ADS1115_Init>
   delayConfig(&wait_time, TIME_TO_WAIT_FOR_CONV_IN_MS); //!< Configure the delay
1a0005fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0005fe:	2300      	movs	r3, #0
1a000600:	a80a      	add	r0, sp, #40	; 0x28
1a000602:	f001 fb9f 	bl	1a001d44 <delayInit>
1a000606:	e060      	b.n	1a0006ca <main+0xf6>
         ADS111x_StartConversion(&ads1115_0); //!< Start the conversion
1a000608:	4850      	ldr	r0, [pc, #320]	; (1a00074c <main+0x178>)
1a00060a:	f7ff feb1 	bl	1a000370 <ADS111x_StartConversion>
1a00060e:	e061      	b.n	1a0006d4 <main+0x100>
         temperature_setpoint -= TEMP_1_D_CELSIUS;
1a000610:	4d4f      	ldr	r5, [pc, #316]	; (1a000750 <main+0x17c>)
1a000612:	8828      	ldrh	r0, [r5, #0]
1a000614:	380a      	subs	r0, #10
1a000616:	b280      	uxth	r0, r0
1a000618:	8028      	strh	r0, [r5, #0]
         SetNewSetTreshold(temperature_setpoint);
1a00061a:	f7ff ff95 	bl	1a000548 <SetNewSetTreshold>
         sprintf( str, "SetPoint: %i.\r\n", temperature_setpoint );
1a00061e:	882a      	ldrh	r2, [r5, #0]
1a000620:	494c      	ldr	r1, [pc, #304]	; (1a000754 <main+0x180>)
1a000622:	4668      	mov	r0, sp
1a000624:	f002 fef0 	bl	1a003408 <sprintf>
         uartWriteString(UART_USB, str);
1a000628:	4669      	mov	r1, sp
1a00062a:	2003      	movs	r0, #3
1a00062c:	f001 f977 	bl	1a00191e <uartWriteString>
         sprintf( str, "Temperature: %i.\r\n", curret_temp );
1a000630:	4622      	mov	r2, r4
1a000632:	4949      	ldr	r1, [pc, #292]	; (1a000758 <main+0x184>)
1a000634:	4668      	mov	r0, sp
1a000636:	f002 fee7 	bl	1a003408 <sprintf>
         uartWriteString(UART_USB, str);
1a00063a:	4669      	mov	r1, sp
1a00063c:	2003      	movs	r0, #3
1a00063e:	f001 f96e 	bl	1a00191e <uartWriteString>
1a000642:	e04c      	b.n	1a0006de <main+0x10a>
         SetNewSetTreshold(temperature_setpoint);
1a000644:	4d42      	ldr	r5, [pc, #264]	; (1a000750 <main+0x17c>)
1a000646:	8828      	ldrh	r0, [r5, #0]
1a000648:	f7ff ff7e 	bl	1a000548 <SetNewSetTreshold>
         sprintf( str, "SetPoint: %i.\r\n", temperature_setpoint );
1a00064c:	882a      	ldrh	r2, [r5, #0]
1a00064e:	4941      	ldr	r1, [pc, #260]	; (1a000754 <main+0x180>)
1a000650:	4668      	mov	r0, sp
1a000652:	f002 fed9 	bl	1a003408 <sprintf>
         uartWriteString(UART_USB, str);
1a000656:	4669      	mov	r1, sp
1a000658:	2003      	movs	r0, #3
1a00065a:	f001 f960 	bl	1a00191e <uartWriteString>
         sprintf( str, "Temperature: %i.\r\n", curret_temp );
1a00065e:	4622      	mov	r2, r4
1a000660:	493d      	ldr	r1, [pc, #244]	; (1a000758 <main+0x184>)
1a000662:	4668      	mov	r0, sp
1a000664:	f002 fed0 	bl	1a003408 <sprintf>
         uartWriteString(UART_USB, str);
1a000668:	4669      	mov	r1, sp
1a00066a:	2003      	movs	r0, #3
1a00066c:	f001 f957 	bl	1a00191e <uartWriteString>
      if(CheckFallState(TEC3)) { //Send the temperature to the UART
1a000670:	2026      	movs	r0, #38	; 0x26
1a000672:	f000 f907 	bl	1a000884 <CheckFallState>
1a000676:	2800      	cmp	r0, #0
1a000678:	d143      	bne.n	1a000702 <main+0x12e>
      if(CheckFallState(TEC4)) { //Send the temperature to the UART
1a00067a:	2027      	movs	r0, #39	; 0x27
1a00067c:	f000 f902 	bl	1a000884 <CheckFallState>
1a000680:	2800      	cmp	r0, #0
1a000682:	d149      	bne.n	1a000718 <main+0x144>
      curret_temp = ConutsToTemp(ADS111x_Read(&ads1115_0));
1a000684:	4831      	ldr	r0, [pc, #196]	; (1a00074c <main+0x178>)
1a000686:	f7ff fe7e 	bl	1a000386 <ADS111x_Read>
1a00068a:	b280      	uxth	r0, r0
1a00068c:	f7ff ff42 	bl	1a000514 <ConutsToTemp>
1a000690:	4604      	mov	r4, r0
      if( curret_temp > temperature_setpoint + TEMP_2_D_CELSIUS) { //!< temperature is too high
1a000692:	4605      	mov	r5, r0
1a000694:	4b2e      	ldr	r3, [pc, #184]	; (1a000750 <main+0x17c>)
1a000696:	881b      	ldrh	r3, [r3, #0]
1a000698:	3314      	adds	r3, #20
1a00069a:	4298      	cmp	r0, r3
1a00069c:	dd46      	ble.n	1a00072c <main+0x158>
         gpioWrite(LED2, ON); //!< Turn on the LED tha indicates that the temperature is too high
1a00069e:	2101      	movs	r1, #1
1a0006a0:	202c      	movs	r0, #44	; 0x2c
1a0006a2:	f001 fa9d 	bl	1a001be0 <gpioWrite>
      if(curret_temp < temperature_setpoint - TEMP_2_D_CELSIUS) { //!< temperature is lower than the setpoint
1a0006a6:	4b2a      	ldr	r3, [pc, #168]	; (1a000750 <main+0x17c>)
1a0006a8:	881b      	ldrh	r3, [r3, #0]
1a0006aa:	3b14      	subs	r3, #20
1a0006ac:	429d      	cmp	r5, r3
1a0006ae:	da42      	bge.n	1a000736 <main+0x162>
         gpioWrite(LED3, ON); //!< Turn on the LED tha indicates that the temperature is ok
1a0006b0:	2101      	movs	r1, #1
1a0006b2:	202d      	movs	r0, #45	; 0x2d
1a0006b4:	f001 fa94 	bl	1a001be0 <gpioWrite>
      if(!gpioRead(GPIO1)) { //!< alarm pin is set
1a0006b8:	200f      	movs	r0, #15
1a0006ba:	f001 fac6 	bl	1a001c4a <gpioRead>
1a0006be:	2800      	cmp	r0, #0
1a0006c0:	d13e      	bne.n	1a000740 <main+0x16c>
         gpioWrite(LED1, ON); //!< turn on the cooling system
1a0006c2:	2101      	movs	r1, #1
1a0006c4:	202b      	movs	r0, #43	; 0x2b
1a0006c6:	f001 fa8b 	bl	1a001be0 <gpioWrite>
      if(delayRead(&wait_time)) {
1a0006ca:	a80a      	add	r0, sp, #40	; 0x28
1a0006cc:	f001 fb4a 	bl	1a001d64 <delayRead>
1a0006d0:	2800      	cmp	r0, #0
1a0006d2:	d199      	bne.n	1a000608 <main+0x34>
      if(CheckFallState(TEC1)) { //Decrease temperature setpoint
1a0006d4:	2024      	movs	r0, #36	; 0x24
1a0006d6:	f000 f8d5 	bl	1a000884 <CheckFallState>
1a0006da:	2800      	cmp	r0, #0
1a0006dc:	d198      	bne.n	1a000610 <main+0x3c>
      if(CheckFallState(TEC2)) { //Increase temperature setpoint
1a0006de:	2025      	movs	r0, #37	; 0x25
1a0006e0:	f000 f8d0 	bl	1a000884 <CheckFallState>
1a0006e4:	2800      	cmp	r0, #0
1a0006e6:	d0c3      	beq.n	1a000670 <main+0x9c>
         temperature_setpoint += TEMP_1_D_CELSIUS;
1a0006e8:	4a19      	ldr	r2, [pc, #100]	; (1a000750 <main+0x17c>)
1a0006ea:	8813      	ldrh	r3, [r2, #0]
1a0006ec:	330a      	adds	r3, #10
1a0006ee:	b29b      	uxth	r3, r3
1a0006f0:	8013      	strh	r3, [r2, #0]
         if(temperature_setpoint > MAX_TEMP_D_CELSIUS) {
1a0006f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a0006f6:	d9a5      	bls.n	1a000644 <main+0x70>
            temperature_setpoint = MAX_TEMP_D_CELSIUS;
1a0006f8:	4613      	mov	r3, r2
1a0006fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a0006fe:	801a      	strh	r2, [r3, #0]
1a000700:	e7a0      	b.n	1a000644 <main+0x70>
         sprintf( str, "SetPoint: %i.\r\n", temperature_setpoint );
1a000702:	4b13      	ldr	r3, [pc, #76]	; (1a000750 <main+0x17c>)
1a000704:	881a      	ldrh	r2, [r3, #0]
1a000706:	4913      	ldr	r1, [pc, #76]	; (1a000754 <main+0x180>)
1a000708:	4668      	mov	r0, sp
1a00070a:	f002 fe7d 	bl	1a003408 <sprintf>
         uartWriteString(UART_USB, str);
1a00070e:	4669      	mov	r1, sp
1a000710:	2003      	movs	r0, #3
1a000712:	f001 f904 	bl	1a00191e <uartWriteString>
1a000716:	e7b0      	b.n	1a00067a <main+0xa6>
         sprintf( str, "Temperature: %i.\r\n", curret_temp );
1a000718:	4622      	mov	r2, r4
1a00071a:	490f      	ldr	r1, [pc, #60]	; (1a000758 <main+0x184>)
1a00071c:	4668      	mov	r0, sp
1a00071e:	f002 fe73 	bl	1a003408 <sprintf>
         uartWriteString(UART_USB, str);
1a000722:	4669      	mov	r1, sp
1a000724:	2003      	movs	r0, #3
1a000726:	f001 f8fa 	bl	1a00191e <uartWriteString>
1a00072a:	e7ab      	b.n	1a000684 <main+0xb0>
         gpioWrite(LED2, OFF); //!< Turn off the LED tha indicates that the temperature is too high
1a00072c:	2100      	movs	r1, #0
1a00072e:	202c      	movs	r0, #44	; 0x2c
1a000730:	f001 fa56 	bl	1a001be0 <gpioWrite>
1a000734:	e7b7      	b.n	1a0006a6 <main+0xd2>
         gpioWrite(LED3, OFF); //!< Turn off the LED tha indicates that the temperature is ok
1a000736:	2100      	movs	r1, #0
1a000738:	202d      	movs	r0, #45	; 0x2d
1a00073a:	f001 fa51 	bl	1a001be0 <gpioWrite>
1a00073e:	e7bb      	b.n	1a0006b8 <main+0xe4>
         gpioWrite(LED1, OFF); //!< turn off the cooling system
1a000740:	2100      	movs	r1, #0
1a000742:	202b      	movs	r0, #43	; 0x2b
1a000744:	f001 fa4c 	bl	1a001be0 <gpioWrite>
1a000748:	e7bf      	b.n	1a0006ca <main+0xf6>
1a00074a:	bf00      	nop
1a00074c:	10000a04 	.word	0x10000a04
1a000750:	10000000 	.word	0x10000000
1a000754:	1a006cb8 	.word	0x1a006cb8
1a000758:	1a006cc8 	.word	0x1a006cc8

1a00075c <buttonReleased>:
      }
   }
}

static void buttonReleased(dbn_t *tecla) {
   tecla->flag_rise = 0xFF;
1a00075c:	23ff      	movs	r3, #255	; 0xff
1a00075e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
}
1a000762:	4770      	bx	lr

1a000764 <buttonPressed>:

static void buttonPressed(dbn_t *tecla) {
   tecla->flag_fall = 0xFF;
1a000764:	23ff      	movs	r3, #255	; 0xff
1a000766:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
1a00076a:	4770      	bx	lr

1a00076c <RisingState>:
static void RisingState(dbn_t *dataTecla) {
1a00076c:	b510      	push	{r4, lr}
1a00076e:	4604      	mov	r4, r0
   if (!dataTecla->delay.running) {
1a000770:	7e03      	ldrb	r3, [r0, #24]
1a000772:	b12b      	cbz	r3, 1a000780 <RisingState+0x14>
   if (delayRead(&dataTecla->delay)) {
1a000774:	f104 0008 	add.w	r0, r4, #8
1a000778:	f001 faf4 	bl	1a001d64 <delayRead>
1a00077c:	b930      	cbnz	r0, 1a00078c <RisingState+0x20>
}
1a00077e:	bd10      	pop	{r4, pc}
      delayConfig(&dataTecla->delay,50);
1a000780:	2232      	movs	r2, #50	; 0x32
1a000782:	2300      	movs	r3, #0
1a000784:	3008      	adds	r0, #8
1a000786:	f001 fadd 	bl	1a001d44 <delayInit>
1a00078a:	e7f3      	b.n	1a000774 <RisingState+0x8>
      if (gpioRead(dataTecla->tecla)) {
1a00078c:	f994 0000 	ldrsb.w	r0, [r4]
1a000790:	f001 fa5b 	bl	1a001c4a <gpioRead>
1a000794:	b918      	cbnz	r0, 1a00079e <RisingState+0x32>
         dataTecla->state = DOWN;
1a000796:	2302      	movs	r3, #2
1a000798:	f884 3020 	strb.w	r3, [r4, #32]
}
1a00079c:	e7ef      	b.n	1a00077e <RisingState+0x12>
         dataTecla->state = UP;
1a00079e:	2300      	movs	r3, #0
1a0007a0:	f884 3020 	strb.w	r3, [r4, #32]
         buttonReleased(dataTecla);
1a0007a4:	4620      	mov	r0, r4
1a0007a6:	f7ff ffd9 	bl	1a00075c <buttonReleased>
1a0007aa:	e7e8      	b.n	1a00077e <RisingState+0x12>

1a0007ac <DownState>:
static void DownState(dbn_t *dataTecla) {
1a0007ac:	b510      	push	{r4, lr}
1a0007ae:	4604      	mov	r4, r0
   if (gpioRead(dataTecla->tecla)) {
1a0007b0:	f990 0000 	ldrsb.w	r0, [r0]
1a0007b4:	f001 fa49 	bl	1a001c4a <gpioRead>
1a0007b8:	b110      	cbz	r0, 1a0007c0 <DownState+0x14>
      dataTecla->state = RISING;
1a0007ba:	2303      	movs	r3, #3
1a0007bc:	f884 3020 	strb.w	r3, [r4, #32]
}
1a0007c0:	bd10      	pop	{r4, pc}

1a0007c2 <FallingState>:
static void FallingState(dbn_t *dataTecla) {
1a0007c2:	b510      	push	{r4, lr}
1a0007c4:	4604      	mov	r4, r0
   if (!dataTecla->delay.running) {
1a0007c6:	7e03      	ldrb	r3, [r0, #24]
1a0007c8:	b12b      	cbz	r3, 1a0007d6 <FallingState+0x14>
   if (delayRead(&dataTecla->delay)) {
1a0007ca:	f104 0008 	add.w	r0, r4, #8
1a0007ce:	f001 fac9 	bl	1a001d64 <delayRead>
1a0007d2:	b930      	cbnz	r0, 1a0007e2 <FallingState+0x20>
}
1a0007d4:	bd10      	pop	{r4, pc}
      delayConfig(&dataTecla->delay,50);
1a0007d6:	2232      	movs	r2, #50	; 0x32
1a0007d8:	2300      	movs	r3, #0
1a0007da:	3008      	adds	r0, #8
1a0007dc:	f001 fab2 	bl	1a001d44 <delayInit>
1a0007e0:	e7f3      	b.n	1a0007ca <FallingState+0x8>
      if (!gpioRead(dataTecla->tecla)) {
1a0007e2:	f994 0000 	ldrsb.w	r0, [r4]
1a0007e6:	f001 fa30 	bl	1a001c4a <gpioRead>
1a0007ea:	b118      	cbz	r0, 1a0007f4 <FallingState+0x32>
         dataTecla->state = UP;
1a0007ec:	2300      	movs	r3, #0
1a0007ee:	f884 3020 	strb.w	r3, [r4, #32]
}
1a0007f2:	e7ef      	b.n	1a0007d4 <FallingState+0x12>
         dataTecla->state = DOWN;
1a0007f4:	2302      	movs	r3, #2
1a0007f6:	f884 3020 	strb.w	r3, [r4, #32]
         buttonPressed(dataTecla);
1a0007fa:	4620      	mov	r0, r4
1a0007fc:	f7ff ffb2 	bl	1a000764 <buttonPressed>
1a000800:	e7e8      	b.n	1a0007d4 <FallingState+0x12>

1a000802 <UpState>:
static void UpState(dbn_t *dataTecla) {
1a000802:	b510      	push	{r4, lr}
1a000804:	4604      	mov	r4, r0
   if (!gpioRead(dataTecla->tecla)) {
1a000806:	f990 0000 	ldrsb.w	r0, [r0]
1a00080a:	f001 fa1e 	bl	1a001c4a <gpioRead>
1a00080e:	b910      	cbnz	r0, 1a000816 <UpState+0x14>
            dataTecla->state = FALLING;
1a000810:	2301      	movs	r3, #1
1a000812:	f884 3020 	strb.w	r3, [r4, #32]
}
1a000816:	bd10      	pop	{r4, pc}

1a000818 <FSMButtonInit>:
void FSMButtonInit(gpioMap_t index_tecla) {
1a000818:	b430      	push	{r4, r5}
   uint8_t array_index = index_tecla - TEC1;
1a00081a:	b2c3      	uxtb	r3, r0
1a00081c:	3b24      	subs	r3, #36	; 0x24
1a00081e:	b2db      	uxtb	r3, r3
   teclas[array_index].tecla = index_tecla;
1a000820:	4a07      	ldr	r2, [pc, #28]	; (1a000840 <FSMButtonInit+0x28>)
1a000822:	0099      	lsls	r1, r3, #2
1a000824:	18cd      	adds	r5, r1, r3
1a000826:	00ec      	lsls	r4, r5, #3
1a000828:	1915      	adds	r5, r2, r4
1a00082a:	5510      	strb	r0, [r2, r4]
   teclas[array_index].state = UP;
1a00082c:	2000      	movs	r0, #0
1a00082e:	f885 0020 	strb.w	r0, [r5, #32]
   teclas[array_index].flag_rise = FALSE;
1a000832:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   teclas[array_index].flag_fall = FALSE;
1a000836:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
}
1a00083a:	bc30      	pop	{r4, r5}
1a00083c:	4770      	bx	lr
1a00083e:	bf00      	nop
1a000840:	10000a08 	.word	0x10000a08

1a000844 <FSMButtonUpdate>:
void FSMButtonUpdate(gpioMap_t index_tecla) {
1a000844:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000846:	b085      	sub	sp, #20
   uint8_t array_index = index_tecla - TEC1;
1a000848:	b2c4      	uxtb	r4, r0
1a00084a:	3c24      	subs	r4, #36	; 0x24
1a00084c:	b2e4      	uxtb	r4, r4
   teclas[array_index].tecla = index_tecla;
1a00084e:	4e0b      	ldr	r6, [pc, #44]	; (1a00087c <FSMButtonUpdate+0x38>)
1a000850:	00a5      	lsls	r5, r4, #2
1a000852:	192a      	adds	r2, r5, r4
1a000854:	00d3      	lsls	r3, r2, #3
1a000856:	18f7      	adds	r7, r6, r3
1a000858:	54f0      	strb	r0, [r6, r3]
   void (*AntiReboteFunc[DEBOUNCE_QTY])(dbn_t *dataTecla) = {UpState, FallingState ,DownState, RisingState};
1a00085a:	4b09      	ldr	r3, [pc, #36]	; (1a000880 <FSMButtonUpdate+0x3c>)
1a00085c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a00085e:	f10d 0c10 	add.w	ip, sp, #16
1a000862:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
   AntiReboteFunc[teclas[array_index].state](&teclas[array_index]);
1a000866:	f897 3020 	ldrb.w	r3, [r7, #32]
1a00086a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
1a00086e:	f853 3c10 	ldr.w	r3, [r3, #-16]
1a000872:	4638      	mov	r0, r7
1a000874:	4798      	blx	r3
}
1a000876:	b005      	add	sp, #20
1a000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00087a:	bf00      	nop
1a00087c:	10000a08 	.word	0x10000a08
1a000880:	1a006cdc 	.word	0x1a006cdc

1a000884 <CheckFallState>:
bool_t CheckFallState(gpioMap_t index_tecla) { 
1a000884:	b510      	push	{r4, lr}
   uint8_t array_index = index_tecla - TEC1;
1a000886:	b2c4      	uxtb	r4, r0
1a000888:	3c24      	subs	r4, #36	; 0x24
1a00088a:	b2e4      	uxtb	r4, r4
   FSMButtonUpdate(index_tecla);
1a00088c:	f7ff ffda 	bl	1a000844 <FSMButtonUpdate>
   bool_t flag = teclas[array_index].flag_fall;
1a000890:	4a05      	ldr	r2, [pc, #20]	; (1a0008a8 <CheckFallState+0x24>)
1a000892:	00a3      	lsls	r3, r4, #2
1a000894:	1918      	adds	r0, r3, r4
1a000896:	00c1      	lsls	r1, r0, #3
1a000898:	4411      	add	r1, r2
1a00089a:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
   teclas[array_index].flag_fall = 0;
1a00089e:	2300      	movs	r3, #0
1a0008a0:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
}
1a0008a4:	bd10      	pop	{r4, pc}
1a0008a6:	bf00      	nop
1a0008a8:	10000a08 	.word	0x10000a08

1a0008ac <initialise_monitor_handles>:
}
1a0008ac:	4770      	bx	lr
1a0008ae:	Address 0x000000001a0008ae is out of bounds.


1a0008b0 <Reset_Handler>:
void Reset_Handler(void) {
1a0008b0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0008b2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0008b4:	4b19      	ldr	r3, [pc, #100]	; (1a00091c <Reset_Handler+0x6c>)
1a0008b6:	4a1a      	ldr	r2, [pc, #104]	; (1a000920 <Reset_Handler+0x70>)
1a0008b8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0008ba:	3304      	adds	r3, #4
1a0008bc:	4a19      	ldr	r2, [pc, #100]	; (1a000924 <Reset_Handler+0x74>)
1a0008be:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008c0:	2300      	movs	r3, #0
1a0008c2:	e005      	b.n	1a0008d0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0008c4:	4a18      	ldr	r2, [pc, #96]	; (1a000928 <Reset_Handler+0x78>)
1a0008c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0008ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0008ce:	3301      	adds	r3, #1
1a0008d0:	2b07      	cmp	r3, #7
1a0008d2:	d9f7      	bls.n	1a0008c4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0008d4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0008d6:	4b15      	ldr	r3, [pc, #84]	; (1a00092c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0008d8:	e007      	b.n	1a0008ea <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0008da:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0008de:	689a      	ldr	r2, [r3, #8]
1a0008e0:	6859      	ldr	r1, [r3, #4]
1a0008e2:	6818      	ldr	r0, [r3, #0]
1a0008e4:	f7ff fc51 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0008e8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0008ea:	4a11      	ldr	r2, [pc, #68]	; (1a000930 <Reset_Handler+0x80>)
1a0008ec:	4293      	cmp	r3, r2
1a0008ee:	d3f4      	bcc.n	1a0008da <Reset_Handler+0x2a>
1a0008f0:	e006      	b.n	1a000900 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0008f2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0008f4:	6859      	ldr	r1, [r3, #4]
1a0008f6:	f854 0b08 	ldr.w	r0, [r4], #8
1a0008fa:	f7ff fc55 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0008fe:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000900:	4a0c      	ldr	r2, [pc, #48]	; (1a000934 <Reset_Handler+0x84>)
1a000902:	4293      	cmp	r3, r2
1a000904:	d3f5      	bcc.n	1a0008f2 <Reset_Handler+0x42>
    SystemInit();
1a000906:	f000 ffbd 	bl	1a001884 <SystemInit>
    __libc_init_array();
1a00090a:	f002 f9a7 	bl	1a002c5c <__libc_init_array>
    initialise_monitor_handles();
1a00090e:	f7ff ffcd 	bl	1a0008ac <initialise_monitor_handles>
    main();
1a000912:	f7ff fe5f 	bl	1a0005d4 <main>
        __asm__ volatile("wfi");
1a000916:	bf30      	wfi
1a000918:	e7fd      	b.n	1a000916 <Reset_Handler+0x66>
1a00091a:	bf00      	nop
1a00091c:	40053100 	.word	0x40053100
1a000920:	10df1000 	.word	0x10df1000
1a000924:	01dff7ff 	.word	0x01dff7ff
1a000928:	e000e280 	.word	0xe000e280
1a00092c:	1a000114 	.word	0x1a000114
1a000930:	1a000150 	.word	0x1a000150
1a000934:	1a000178 	.word	0x1a000178

1a000938 <_fini>:
void _fini(void) {}
1a000938:	4770      	bx	lr

1a00093a <_init>:
void _init(void) {}
1a00093a:	4770      	bx	lr

1a00093c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00093c:	4b05      	ldr	r3, [pc, #20]	; (1a000954 <_sbrk_r+0x18>)
1a00093e:	681b      	ldr	r3, [r3, #0]
1a000940:	b123      	cbz	r3, 1a00094c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000942:	4b04      	ldr	r3, [pc, #16]	; (1a000954 <_sbrk_r+0x18>)
1a000944:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000946:	4401      	add	r1, r0
1a000948:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00094a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a00094c:	4b01      	ldr	r3, [pc, #4]	; (1a000954 <_sbrk_r+0x18>)
1a00094e:	4a02      	ldr	r2, [pc, #8]	; (1a000958 <_sbrk_r+0x1c>)
1a000950:	601a      	str	r2, [r3, #0]
1a000952:	e7f6      	b.n	1a000942 <_sbrk_r+0x6>
1a000954:	10000aa8 	.word	0x10000aa8
1a000958:	10000b28 	.word	0x10000b28

1a00095c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00095c:	2200      	movs	r2, #0
1a00095e:	2a05      	cmp	r2, #5
1a000960:	d819      	bhi.n	1a000996 <Board_LED_Init+0x3a>
{
1a000962:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000964:	490c      	ldr	r1, [pc, #48]	; (1a000998 <Board_LED_Init+0x3c>)
1a000966:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00096a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00096e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000970:	4b0a      	ldr	r3, [pc, #40]	; (1a00099c <Board_LED_Init+0x40>)
1a000972:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000976:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00097a:	2001      	movs	r0, #1
1a00097c:	40a0      	lsls	r0, r4
1a00097e:	4301      	orrs	r1, r0
1a000980:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000984:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000988:	2100      	movs	r1, #0
1a00098a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00098c:	3201      	adds	r2, #1
1a00098e:	2a05      	cmp	r2, #5
1a000990:	d9e8      	bls.n	1a000964 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000992:	bc70      	pop	{r4, r5, r6}
1a000994:	4770      	bx	lr
1a000996:	4770      	bx	lr
1a000998:	1a006cf8 	.word	0x1a006cf8
1a00099c:	400f4000 	.word	0x400f4000

1a0009a0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009a0:	2300      	movs	r3, #0
1a0009a2:	2b03      	cmp	r3, #3
1a0009a4:	d816      	bhi.n	1a0009d4 <Board_TEC_Init+0x34>
{
1a0009a6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009a8:	490b      	ldr	r1, [pc, #44]	; (1a0009d8 <Board_TEC_Init+0x38>)
1a0009aa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009ae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009b2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0009b4:	4c09      	ldr	r4, [pc, #36]	; (1a0009dc <Board_TEC_Init+0x3c>)
1a0009b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009ba:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009be:	2001      	movs	r0, #1
1a0009c0:	40a8      	lsls	r0, r5
1a0009c2:	ea21 0100 	bic.w	r1, r1, r0
1a0009c6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009ca:	3301      	adds	r3, #1
1a0009cc:	2b03      	cmp	r3, #3
1a0009ce:	d9eb      	bls.n	1a0009a8 <Board_TEC_Init+0x8>
   }
}
1a0009d0:	bc30      	pop	{r4, r5}
1a0009d2:	4770      	bx	lr
1a0009d4:	4770      	bx	lr
1a0009d6:	bf00      	nop
1a0009d8:	1a006cf0 	.word	0x1a006cf0
1a0009dc:	400f4000 	.word	0x400f4000

1a0009e0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0009e0:	2300      	movs	r3, #0
1a0009e2:	2b08      	cmp	r3, #8
1a0009e4:	d816      	bhi.n	1a000a14 <Board_GPIO_Init+0x34>
{
1a0009e6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009e8:	490b      	ldr	r1, [pc, #44]	; (1a000a18 <Board_GPIO_Init+0x38>)
1a0009ea:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009f2:	784d      	ldrb	r5, [r1, #1]
1a0009f4:	4c09      	ldr	r4, [pc, #36]	; (1a000a1c <Board_GPIO_Init+0x3c>)
1a0009f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009fa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009fe:	2001      	movs	r0, #1
1a000a00:	40a8      	lsls	r0, r5
1a000a02:	ea21 0100 	bic.w	r1, r1, r0
1a000a06:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a0a:	3301      	adds	r3, #1
1a000a0c:	2b08      	cmp	r3, #8
1a000a0e:	d9eb      	bls.n	1a0009e8 <Board_GPIO_Init+0x8>
   }
}
1a000a10:	bc30      	pop	{r4, r5}
1a000a12:	4770      	bx	lr
1a000a14:	4770      	bx	lr
1a000a16:	bf00      	nop
1a000a18:	1a006d04 	.word	0x1a006d04
1a000a1c:	400f4000 	.word	0x400f4000

1a000a20 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000a20:	b510      	push	{r4, lr}
1a000a22:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000a24:	4c08      	ldr	r4, [pc, #32]	; (1a000a48 <Board_ADC_Init+0x28>)
1a000a26:	4669      	mov	r1, sp
1a000a28:	4620      	mov	r0, r4
1a000a2a:	f000 fb13 	bl	1a001054 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000a2e:	4a07      	ldr	r2, [pc, #28]	; (1a000a4c <Board_ADC_Init+0x2c>)
1a000a30:	4669      	mov	r1, sp
1a000a32:	4620      	mov	r0, r4
1a000a34:	f000 fb2e 	bl	1a001094 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000a38:	2200      	movs	r2, #0
1a000a3a:	4669      	mov	r1, sp
1a000a3c:	4620      	mov	r0, r4
1a000a3e:	f000 fb42 	bl	1a0010c6 <Chip_ADC_SetResolution>
}
1a000a42:	b002      	add	sp, #8
1a000a44:	bd10      	pop	{r4, pc}
1a000a46:	bf00      	nop
1a000a48:	400e3000 	.word	0x400e3000
1a000a4c:	00061a80 	.word	0x00061a80

1a000a50 <Board_SPI_Init>:
{
1a000a50:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000a52:	4c0b      	ldr	r4, [pc, #44]	; (1a000a80 <Board_SPI_Init+0x30>)
1a000a54:	4620      	mov	r0, r4
1a000a56:	f000 fef9 	bl	1a00184c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a5a:	6863      	ldr	r3, [r4, #4]
1a000a5c:	f023 0304 	bic.w	r3, r3, #4
1a000a60:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a62:	6823      	ldr	r3, [r4, #0]
1a000a64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a68:	f043 0307 	orr.w	r3, r3, #7
1a000a6c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a6e:	4905      	ldr	r1, [pc, #20]	; (1a000a84 <Board_SPI_Init+0x34>)
1a000a70:	4620      	mov	r0, r4
1a000a72:	f000 fecc 	bl	1a00180e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a76:	6863      	ldr	r3, [r4, #4]
1a000a78:	f043 0302 	orr.w	r3, r3, #2
1a000a7c:	6063      	str	r3, [r4, #4]
}
1a000a7e:	bd10      	pop	{r4, pc}
1a000a80:	400c5000 	.word	0x400c5000
1a000a84:	000186a0 	.word	0x000186a0

1a000a88 <Board_I2C_Init>:
{
1a000a88:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000a8a:	2000      	movs	r0, #0
1a000a8c:	f000 f934 	bl	1a000cf8 <Chip_I2C_Init>
1a000a90:	4b04      	ldr	r3, [pc, #16]	; (1a000aa4 <Board_I2C_Init+0x1c>)
1a000a92:	f640 0208 	movw	r2, #2056	; 0x808
1a000a96:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000a9a:	4903      	ldr	r1, [pc, #12]	; (1a000aa8 <Board_I2C_Init+0x20>)
1a000a9c:	2000      	movs	r0, #0
1a000a9e:	f000 f93d 	bl	1a000d1c <Chip_I2C_SetClockRate>
}
1a000aa2:	bd08      	pop	{r3, pc}
1a000aa4:	40086000 	.word	0x40086000
1a000aa8:	000f4240 	.word	0x000f4240

1a000aac <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000aac:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000aae:	4c07      	ldr	r4, [pc, #28]	; (1a000acc <Board_Debug_Init+0x20>)
1a000ab0:	4620      	mov	r0, r4
1a000ab2:	f000 fa13 	bl	1a000edc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000ab6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000aba:	4620      	mov	r0, r4
1a000abc:	f000 fa38 	bl	1a000f30 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000ac0:	2303      	movs	r3, #3
1a000ac2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000ac4:	2301      	movs	r3, #1
1a000ac6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000ac8:	bd10      	pop	{r4, pc}
1a000aca:	bf00      	nop
1a000acc:	400c1000 	.word	0x400c1000

1a000ad0 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000ad0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000ad2:	f7ff ffeb 	bl	1a000aac <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000ad6:	4809      	ldr	r0, [pc, #36]	; (1a000afc <Board_Init+0x2c>)
1a000ad8:	f000 fe78 	bl	1a0017cc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000adc:	f7ff ff80 	bl	1a0009e0 <Board_GPIO_Init>
   Board_ADC_Init();
1a000ae0:	f7ff ff9e 	bl	1a000a20 <Board_ADC_Init>
   Board_SPI_Init();
1a000ae4:	f7ff ffb4 	bl	1a000a50 <Board_SPI_Init>
   Board_I2C_Init();
1a000ae8:	f7ff ffce 	bl	1a000a88 <Board_I2C_Init>

   Board_LED_Init();
1a000aec:	f7ff ff36 	bl	1a00095c <Board_LED_Init>
   Board_TEC_Init();
1a000af0:	f7ff ff56 	bl	1a0009a0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000af4:	f000 faee 	bl	1a0010d4 <SystemCoreClockUpdate>
}
1a000af8:	bd08      	pop	{r3, pc}
1a000afa:	bf00      	nop
1a000afc:	400f4000 	.word	0x400f4000

1a000b00 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000b00:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000b02:	f7ff ffd3 	bl	1a000aac <Board_Debug_Init>
1a000b06:	bd08      	pop	{r3, pc}

1a000b08 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b08:	2300      	movs	r3, #0
1a000b0a:	2b1c      	cmp	r3, #28
1a000b0c:	d812      	bhi.n	1a000b34 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000b0e:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000b10:	4a09      	ldr	r2, [pc, #36]	; (1a000b38 <Board_SetupMuxing+0x30>)
1a000b12:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000b16:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000b1a:	784a      	ldrb	r2, [r1, #1]
1a000b1c:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b1e:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000b22:	4906      	ldr	r1, [pc, #24]	; (1a000b3c <Board_SetupMuxing+0x34>)
1a000b24:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b28:	3301      	adds	r3, #1
1a000b2a:	2b1c      	cmp	r3, #28
1a000b2c:	d9f0      	bls.n	1a000b10 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b32:	4770      	bx	lr
1a000b34:	4770      	bx	lr
1a000b36:	bf00      	nop
1a000b38:	1a006d20 	.word	0x1a006d20
1a000b3c:	40086000 	.word	0x40086000

1a000b40 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b40:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b42:	4a17      	ldr	r2, [pc, #92]	; (1a000ba0 <Board_SetupClocking+0x60>)
1a000b44:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b4c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b50:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b54:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b5c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b60:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b64:	2201      	movs	r2, #1
1a000b66:	490f      	ldr	r1, [pc, #60]	; (1a000ba4 <Board_SetupClocking+0x64>)
1a000b68:	2006      	movs	r0, #6
1a000b6a:	f000 fd83 	bl	1a001674 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b6e:	2400      	movs	r4, #0
1a000b70:	b14c      	cbz	r4, 1a000b86 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b72:	4b0b      	ldr	r3, [pc, #44]	; (1a000ba0 <Board_SetupClocking+0x60>)
1a000b74:	685a      	ldr	r2, [r3, #4]
1a000b76:	f022 020c 	bic.w	r2, r2, #12
1a000b7a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b7c:	685a      	ldr	r2, [r3, #4]
1a000b7e:	f042 0203 	orr.w	r2, r2, #3
1a000b82:	605a      	str	r2, [r3, #4]
}
1a000b84:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b86:	4808      	ldr	r0, [pc, #32]	; (1a000ba8 <Board_SetupClocking+0x68>)
1a000b88:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b8c:	2301      	movs	r3, #1
1a000b8e:	788a      	ldrb	r2, [r1, #2]
1a000b90:	7849      	ldrb	r1, [r1, #1]
1a000b92:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b96:	f000 fcc9 	bl	1a00152c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b9a:	3401      	adds	r4, #1
1a000b9c:	e7e8      	b.n	1a000b70 <Board_SetupClocking+0x30>
1a000b9e:	bf00      	nop
1a000ba0:	40043000 	.word	0x40043000
1a000ba4:	0c28cb00 	.word	0x0c28cb00
1a000ba8:	1a006d1c 	.word	0x1a006d1c

1a000bac <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000bac:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000bae:	f7ff ffab 	bl	1a000b08 <Board_SetupMuxing>
    Board_SetupClocking();
1a000bb2:	f7ff ffc5 	bl	1a000b40 <Board_SetupClocking>
}
1a000bb6:	bd08      	pop	{r3, pc}

1a000bb8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000bb8:	2901      	cmp	r1, #1
1a000bba:	d109      	bne.n	1a000bd0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000bbc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000bc0:	0082      	lsls	r2, r0, #2
1a000bc2:	4b04      	ldr	r3, [pc, #16]	; (1a000bd4 <Chip_I2C_EventHandler+0x1c>)
1a000bc4:	4413      	add	r3, r2
1a000bc6:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000bc8:	7d13      	ldrb	r3, [r2, #20]
1a000bca:	b2db      	uxtb	r3, r3
1a000bcc:	2b04      	cmp	r3, #4
1a000bce:	d0fb      	beq.n	1a000bc8 <Chip_I2C_EventHandler+0x10>
}
1a000bd0:	4770      	bx	lr
1a000bd2:	bf00      	nop
1a000bd4:	10000004 	.word	0x10000004

1a000bd8 <handleMasterXferState>:
{
1a000bd8:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a000bda:	6843      	ldr	r3, [r0, #4]
1a000bdc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a000be0:	2b58      	cmp	r3, #88	; 0x58
1a000be2:	d87f      	bhi.n	1a000ce4 <handleMasterXferState+0x10c>
1a000be4:	e8df f003 	tbb	[pc, r3]
1a000be8:	7e7e7e7a 	.word	0x7e7e7e7a
1a000bec:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bf0:	7e7e7e2f 	.word	0x7e7e7e2f
1a000bf4:	7e7e7e7e 	.word	0x7e7e7e7e
1a000bf8:	7e7e7e2f 	.word	0x7e7e7e2f
1a000bfc:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c00:	7e7e7e39 	.word	0x7e7e7e39
1a000c04:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c08:	7e7e7e6e 	.word	0x7e7e7e6e
1a000c0c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c10:	7e7e7e39 	.word	0x7e7e7e39
1a000c14:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c18:	7e7e7e72 	.word	0x7e7e7e72
1a000c1c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c20:	7e7e7e76 	.word	0x7e7e7e76
1a000c24:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c28:	7e7e7e6c 	.word	0x7e7e7e6c
1a000c2c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c30:	7e7e7e6e 	.word	0x7e7e7e6e
1a000c34:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c38:	7e7e7e2d 	.word	0x7e7e7e2d
1a000c3c:	7e7e7e7e 	.word	0x7e7e7e7e
1a000c40:	4f          	.byte	0x4f
1a000c41:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a000c42:	233c      	movs	r3, #60	; 0x3c
1a000c44:	e020      	b.n	1a000c88 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a000c46:	780a      	ldrb	r2, [r1, #0]
1a000c48:	688b      	ldr	r3, [r1, #8]
1a000c4a:	fab3 f383 	clz	r3, r3
1a000c4e:	095b      	lsrs	r3, r3, #5
1a000c50:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a000c54:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a000c56:	233c      	movs	r3, #60	; 0x3c
		break;
1a000c58:	e023      	b.n	1a000ca2 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a000c5a:	688b      	ldr	r3, [r1, #8]
1a000c5c:	b94b      	cbnz	r3, 1a000c72 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a000c5e:	690b      	ldr	r3, [r1, #16]
1a000c60:	b123      	cbz	r3, 1a000c6c <handleMasterXferState+0x94>
1a000c62:	f06f 0320 	mvn.w	r3, #32
1a000c66:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a000c6a:	e01a      	b.n	1a000ca2 <handleMasterXferState+0xca>
1a000c6c:	f06f 0310 	mvn.w	r3, #16
1a000c70:	e7f9      	b.n	1a000c66 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a000c72:	684b      	ldr	r3, [r1, #4]
1a000c74:	1c5a      	adds	r2, r3, #1
1a000c76:	604a      	str	r2, [r1, #4]
1a000c78:	781b      	ldrb	r3, [r3, #0]
1a000c7a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a000c7c:	688b      	ldr	r3, [r1, #8]
1a000c7e:	3b01      	subs	r3, #1
1a000c80:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a000c82:	233c      	movs	r3, #60	; 0x3c
1a000c84:	e00d      	b.n	1a000ca2 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a000c86:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a000c88:	6884      	ldr	r4, [r0, #8]
1a000c8a:	68ca      	ldr	r2, [r1, #12]
1a000c8c:	1c55      	adds	r5, r2, #1
1a000c8e:	60cd      	str	r5, [r1, #12]
1a000c90:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a000c92:	690a      	ldr	r2, [r1, #16]
1a000c94:	3a01      	subs	r2, #1
1a000c96:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a000c98:	690a      	ldr	r2, [r1, #16]
1a000c9a:	2a01      	cmp	r2, #1
1a000c9c:	dd01      	ble.n	1a000ca2 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a000c9e:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a000ca2:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a000ca6:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a000ca8:	f023 0210 	bic.w	r2, r3, #16
1a000cac:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a000cae:	f013 0f10 	tst.w	r3, #16
1a000cb2:	d019      	beq.n	1a000ce8 <handleMasterXferState+0x110>
1a000cb4:	7d0b      	ldrb	r3, [r1, #20]
1a000cb6:	2b02      	cmp	r3, #2
1a000cb8:	d016      	beq.n	1a000ce8 <handleMasterXferState+0x110>
	return 1;
1a000cba:	2001      	movs	r0, #1
}
1a000cbc:	bc30      	pop	{r4, r5}
1a000cbe:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a000cc0:	233c      	movs	r3, #60	; 0x3c
1a000cc2:	e7e9      	b.n	1a000c98 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a000cc4:	2305      	movs	r3, #5
1a000cc6:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000cc8:	232c      	movs	r3, #44	; 0x2c
		break;
1a000cca:	e7ea      	b.n	1a000ca2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a000ccc:	2301      	movs	r3, #1
1a000cce:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000cd0:	232c      	movs	r3, #44	; 0x2c
		break;
1a000cd2:	e7e6      	b.n	1a000ca2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a000cd4:	2302      	movs	r3, #2
1a000cd6:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a000cd8:	233c      	movs	r3, #60	; 0x3c
		break;
1a000cda:	e7e2      	b.n	1a000ca2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a000cdc:	2303      	movs	r3, #3
1a000cde:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a000ce0:	232c      	movs	r3, #44	; 0x2c
1a000ce2:	e7de      	b.n	1a000ca2 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a000ce4:	233c      	movs	r3, #60	; 0x3c
1a000ce6:	e7dc      	b.n	1a000ca2 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a000ce8:	7d0b      	ldrb	r3, [r1, #20]
1a000cea:	2b04      	cmp	r3, #4
1a000cec:	d001      	beq.n	1a000cf2 <handleMasterXferState+0x11a>
		return 0;
1a000cee:	2000      	movs	r0, #0
1a000cf0:	e7e4      	b.n	1a000cbc <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a000cf2:	2300      	movs	r3, #0
1a000cf4:	750b      	strb	r3, [r1, #20]
1a000cf6:	e7fa      	b.n	1a000cee <handleMasterXferState+0x116>

1a000cf8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000cf8:	b570      	push	{r4, r5, r6, lr}
1a000cfa:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000cfc:	4e06      	ldr	r6, [pc, #24]	; (1a000d18 <Chip_I2C_Init+0x20>)
1a000cfe:	00c4      	lsls	r4, r0, #3
1a000d00:	1a22      	subs	r2, r4, r0
1a000d02:	0093      	lsls	r3, r2, #2
1a000d04:	4433      	add	r3, r6
1a000d06:	8898      	ldrh	r0, [r3, #4]
1a000d08:	f000 fc74 	bl	1a0015f4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000d0c:	1b64      	subs	r4, r4, r5
1a000d0e:	00a3      	lsls	r3, r4, #2
1a000d10:	58f3      	ldr	r3, [r6, r3]
1a000d12:	226c      	movs	r2, #108	; 0x6c
1a000d14:	619a      	str	r2, [r3, #24]
}
1a000d16:	bd70      	pop	{r4, r5, r6, pc}
1a000d18:	10000004 	.word	0x10000004

1a000d1c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d20:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000d22:	4e0b      	ldr	r6, [pc, #44]	; (1a000d50 <Chip_I2C_SetClockRate+0x34>)
1a000d24:	00c5      	lsls	r5, r0, #3
1a000d26:	1a2b      	subs	r3, r5, r0
1a000d28:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000d2c:	eb06 0308 	add.w	r3, r6, r8
1a000d30:	8898      	ldrh	r0, [r3, #4]
1a000d32:	f000 fc79 	bl	1a001628 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000d36:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000d3a:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d3e:	0842      	lsrs	r2, r0, #1
1a000d40:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000d42:	f856 3008 	ldr.w	r3, [r6, r8]
1a000d46:	691a      	ldr	r2, [r3, #16]
1a000d48:	1a80      	subs	r0, r0, r2
1a000d4a:	6158      	str	r0, [r3, #20]
}
1a000d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d50:	10000004 	.word	0x10000004

1a000d54 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a000d54:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000d58:	009a      	lsls	r2, r3, #2
1a000d5a:	4b09      	ldr	r3, [pc, #36]	; (1a000d80 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d5c:	4413      	add	r3, r2
1a000d5e:	691b      	ldr	r3, [r3, #16]
1a000d60:	b153      	cbz	r3, 1a000d78 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a000d62:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d66:	0082      	lsls	r2, r0, #2
1a000d68:	4b05      	ldr	r3, [pc, #20]	; (1a000d80 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d6a:	4413      	add	r3, r2
1a000d6c:	6898      	ldr	r0, [r3, #8]
}
1a000d6e:	4288      	cmp	r0, r1
1a000d70:	bf14      	ite	ne
1a000d72:	2000      	movne	r0, #0
1a000d74:	2001      	moveq	r0, #1
1a000d76:	4770      	bx	lr
		iic->mEvent = event;
1a000d78:	4b01      	ldr	r3, [pc, #4]	; (1a000d80 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a000d7a:	4413      	add	r3, r2
1a000d7c:	6099      	str	r1, [r3, #8]
1a000d7e:	e7f0      	b.n	1a000d62 <Chip_I2C_SetMasterEventHandler+0xe>
1a000d80:	10000004 	.word	0x10000004

1a000d84 <Chip_I2C_MasterTransfer>:
	return i2c[id].mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
1a000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000d86:	4605      	mov	r5, r0
1a000d88:	460e      	mov	r6, r1
	struct i2c_interface *iic = &i2c[id];
1a000d8a:	4604      	mov	r4, r0

	iic->mEvent(id, I2C_EVENT_LOCK);
1a000d8c:	00c3      	lsls	r3, r0, #3
1a000d8e:	1a1b      	subs	r3, r3, r0
1a000d90:	009a      	lsls	r2, r3, #2
1a000d92:	4f20      	ldr	r7, [pc, #128]	; (1a000e14 <Chip_I2C_MasterTransfer+0x90>)
1a000d94:	4417      	add	r7, r2
1a000d96:	68bb      	ldr	r3, [r7, #8]
1a000d98:	2103      	movs	r1, #3
1a000d9a:	4798      	blx	r3
	xfer->status = I2C_STATUS_BUSY;
1a000d9c:	2304      	movs	r3, #4
1a000d9e:	7533      	strb	r3, [r6, #20]
	iic->mXfer = xfer;
1a000da0:	613e      	str	r6, [r7, #16]

	/* If slave xfer not in progress */
	if (!iic->sXfer) {
1a000da2:	697b      	ldr	r3, [r7, #20]
1a000da4:	b35b      	cbz	r3, 1a000dfe <Chip_I2C_MasterTransfer+0x7a>
		startMasterXfer(iic->ip);
	}
	iic->mEvent(id, I2C_EVENT_WAIT);
1a000da6:	00eb      	lsls	r3, r5, #3
1a000da8:	1b5b      	subs	r3, r3, r5
1a000daa:	009a      	lsls	r2, r3, #2
1a000dac:	4f19      	ldr	r7, [pc, #100]	; (1a000e14 <Chip_I2C_MasterTransfer+0x90>)
1a000dae:	4417      	add	r7, r2
1a000db0:	68bb      	ldr	r3, [r7, #8]
1a000db2:	2101      	movs	r1, #1
1a000db4:	4628      	mov	r0, r5
1a000db6:	4798      	blx	r3
	iic->mXfer = 0;
1a000db8:	2300      	movs	r3, #0
1a000dba:	613b      	str	r3, [r7, #16]

	/* Wait for stop condition to appear on bus */
	while (!isI2CBusFree(iic->ip)) {}
1a000dbc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
1a000dc0:	0093      	lsls	r3, r2, #2
1a000dc2:	4a14      	ldr	r2, [pc, #80]	; (1a000e14 <Chip_I2C_MasterTransfer+0x90>)
1a000dc4:	58d3      	ldr	r3, [r2, r3]
	return !(pI2C->CONSET & I2C_CON_STO);
1a000dc6:	681a      	ldr	r2, [r3, #0]
	while (!isI2CBusFree(iic->ip)) {}
1a000dc8:	f012 0f10 	tst.w	r2, #16
1a000dcc:	d1f6      	bne.n	1a000dbc <Chip_I2C_MasterTransfer+0x38>

	/* Start slave if one is active */
	if (SLAVE_ACTIVE(iic)) {
1a000dce:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
1a000dd2:	0091      	lsls	r1, r2, #2
1a000dd4:	4a0f      	ldr	r2, [pc, #60]	; (1a000e14 <Chip_I2C_MasterTransfer+0x90>)
1a000dd6:	440a      	add	r2, r1
1a000dd8:	6992      	ldr	r2, [r2, #24]
1a000dda:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
1a000dde:	d003      	beq.n	1a000de8 <Chip_I2C_MasterTransfer+0x64>
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA;
1a000de0:	2228      	movs	r2, #40	; 0x28
1a000de2:	619a      	str	r2, [r3, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_AA;
1a000de4:	2244      	movs	r2, #68	; 0x44
1a000de6:	601a      	str	r2, [r3, #0]
		startSlaverXfer(iic->ip);
	}

	iic->mEvent(id, I2C_EVENT_UNLOCK);
1a000de8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
1a000dec:	009a      	lsls	r2, r3, #2
1a000dee:	4b09      	ldr	r3, [pc, #36]	; (1a000e14 <Chip_I2C_MasterTransfer+0x90>)
1a000df0:	4413      	add	r3, r2
1a000df2:	689b      	ldr	r3, [r3, #8]
1a000df4:	2104      	movs	r1, #4
1a000df6:	4628      	mov	r0, r5
1a000df8:	4798      	blx	r3
	return (int) xfer->status;
}
1a000dfa:	7d30      	ldrb	r0, [r6, #20]
1a000dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		startMasterXfer(iic->ip);
1a000dfe:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
1a000e02:	0093      	lsls	r3, r2, #2
1a000e04:	4a03      	ldr	r2, [pc, #12]	; (1a000e14 <Chip_I2C_MasterTransfer+0x90>)
1a000e06:	58d3      	ldr	r3, [r2, r3]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a000e08:	222c      	movs	r2, #44	; 0x2c
1a000e0a:	619a      	str	r2, [r3, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a000e0c:	2260      	movs	r2, #96	; 0x60
1a000e0e:	601a      	str	r2, [r3, #0]
1a000e10:	e7c9      	b.n	1a000da6 <Chip_I2C_MasterTransfer+0x22>
1a000e12:	bf00      	nop
1a000e14:	10000004 	.word	0x10000004

1a000e18 <Chip_I2C_MasterSend>:

/* Master tx only */
int Chip_I2C_MasterSend(I2C_ID_T id, uint8_t slaveAddr, const uint8_t *buff, uint8_t len)
{
1a000e18:	b530      	push	{r4, r5, lr}
1a000e1a:	b087      	sub	sp, #28
1a000e1c:	4604      	mov	r4, r0
1a000e1e:	461d      	mov	r5, r3
	I2C_XFER_T xfer = {0};
1a000e20:	2300      	movs	r3, #0
1a000e22:	9300      	str	r3, [sp, #0]
1a000e24:	9303      	str	r3, [sp, #12]
1a000e26:	9304      	str	r3, [sp, #16]
1a000e28:	9305      	str	r3, [sp, #20]
	xfer.slaveAddr = slaveAddr;
1a000e2a:	f88d 1000 	strb.w	r1, [sp]
	xfer.txBuff = buff;
1a000e2e:	9201      	str	r2, [sp, #4]
	xfer.txSz = len;
1a000e30:	9502      	str	r5, [sp, #8]
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {}
1a000e32:	4669      	mov	r1, sp
1a000e34:	4620      	mov	r0, r4
1a000e36:	f7ff ffa5 	bl	1a000d84 <Chip_I2C_MasterTransfer>
1a000e3a:	2802      	cmp	r0, #2
1a000e3c:	d0f9      	beq.n	1a000e32 <Chip_I2C_MasterSend+0x1a>
	return len - xfer.txSz;
}
1a000e3e:	9802      	ldr	r0, [sp, #8]
1a000e40:	1a28      	subs	r0, r5, r0
1a000e42:	b007      	add	sp, #28
1a000e44:	bd30      	pop	{r4, r5, pc}

1a000e46 <Chip_I2C_MasterCmdRead>:

/* Transmit one byte and receive an array of bytes after a repeated start condition is generated in Master mode.
 * This function is useful for communicating with the I2C slave registers
 */
int Chip_I2C_MasterCmdRead(I2C_ID_T id, uint8_t slaveAddr, uint8_t cmd, uint8_t *buff, int len)
{
1a000e46:	b530      	push	{r4, r5, lr}
1a000e48:	b089      	sub	sp, #36	; 0x24
1a000e4a:	4604      	mov	r4, r0
1a000e4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1a000e4e:	f88d 2007 	strb.w	r2, [sp, #7]
	I2C_XFER_T xfer = {0};
1a000e52:	2200      	movs	r2, #0
1a000e54:	9202      	str	r2, [sp, #8]
1a000e56:	9207      	str	r2, [sp, #28]
	xfer.slaveAddr = slaveAddr;
1a000e58:	f88d 1008 	strb.w	r1, [sp, #8]
	xfer.txBuff = &cmd;
1a000e5c:	f10d 0207 	add.w	r2, sp, #7
1a000e60:	9203      	str	r2, [sp, #12]
	xfer.txSz = 1;
1a000e62:	2201      	movs	r2, #1
1a000e64:	9204      	str	r2, [sp, #16]
	xfer.rxBuff = buff;
1a000e66:	9305      	str	r3, [sp, #20]
	xfer.rxSz = len;
1a000e68:	9506      	str	r5, [sp, #24]
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {}
1a000e6a:	a902      	add	r1, sp, #8
1a000e6c:	4620      	mov	r0, r4
1a000e6e:	f7ff ff89 	bl	1a000d84 <Chip_I2C_MasterTransfer>
1a000e72:	2802      	cmp	r0, #2
1a000e74:	d0f9      	beq.n	1a000e6a <Chip_I2C_MasterCmdRead+0x24>
	return len - xfer.rxSz;
}
1a000e76:	9806      	ldr	r0, [sp, #24]
1a000e78:	1a28      	subs	r0, r5, r0
1a000e7a:	b009      	add	sp, #36	; 0x24
1a000e7c:	bd30      	pop	{r4, r5, pc}
1a000e7e:	Address 0x000000001a000e7e is out of bounds.


1a000e80 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a000e80:	b510      	push	{r4, lr}
1a000e82:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a000e84:	4809      	ldr	r0, [pc, #36]	; (1a000eac <Chip_I2C_MasterStateHandler+0x2c>)
1a000e86:	00e3      	lsls	r3, r4, #3
1a000e88:	1b1b      	subs	r3, r3, r4
1a000e8a:	009a      	lsls	r2, r3, #2
1a000e8c:	1883      	adds	r3, r0, r2
1a000e8e:	6919      	ldr	r1, [r3, #16]
1a000e90:	5880      	ldr	r0, [r0, r2]
1a000e92:	f7ff fea1 	bl	1a000bd8 <handleMasterXferState>
1a000e96:	b940      	cbnz	r0, 1a000eaa <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a000e98:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a000e9c:	009a      	lsls	r2, r3, #2
1a000e9e:	4b03      	ldr	r3, [pc, #12]	; (1a000eac <Chip_I2C_MasterStateHandler+0x2c>)
1a000ea0:	4413      	add	r3, r2
1a000ea2:	689b      	ldr	r3, [r3, #8]
1a000ea4:	2102      	movs	r1, #2
1a000ea6:	4620      	mov	r0, r4
1a000ea8:	4798      	blx	r3
	}
}
1a000eaa:	bd10      	pop	{r4, pc}
1a000eac:	10000004 	.word	0x10000004

1a000eb0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000eb0:	4b09      	ldr	r3, [pc, #36]	; (1a000ed8 <Chip_UART_GetIndex+0x28>)
1a000eb2:	4298      	cmp	r0, r3
1a000eb4:	d009      	beq.n	1a000eca <Chip_UART_GetIndex+0x1a>
1a000eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000eba:	4298      	cmp	r0, r3
1a000ebc:	d007      	beq.n	1a000ece <Chip_UART_GetIndex+0x1e>
1a000ebe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000ec2:	4298      	cmp	r0, r3
1a000ec4:	d005      	beq.n	1a000ed2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000ec6:	2000      	movs	r0, #0
1a000ec8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000eca:	2002      	movs	r0, #2
1a000ecc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000ece:	2003      	movs	r0, #3
1a000ed0:	4770      	bx	lr
			return 1;
1a000ed2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000ed4:	4770      	bx	lr
1a000ed6:	bf00      	nop
1a000ed8:	400c1000 	.word	0x400c1000

1a000edc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000edc:	b530      	push	{r4, r5, lr}
1a000ede:	b083      	sub	sp, #12
1a000ee0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000ee2:	f7ff ffe5 	bl	1a000eb0 <Chip_UART_GetIndex>
1a000ee6:	2301      	movs	r3, #1
1a000ee8:	461a      	mov	r2, r3
1a000eea:	4619      	mov	r1, r3
1a000eec:	4d0e      	ldr	r5, [pc, #56]	; (1a000f28 <Chip_UART_Init+0x4c>)
1a000eee:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000ef2:	f000 fb61 	bl	1a0015b8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000ef6:	2307      	movs	r3, #7
1a000ef8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000efa:	2300      	movs	r3, #0
1a000efc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000efe:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000f00:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000f02:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000f04:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000f06:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000f08:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000f0a:	4b08      	ldr	r3, [pc, #32]	; (1a000f2c <Chip_UART_Init+0x50>)
1a000f0c:	429c      	cmp	r4, r3
1a000f0e:	d006      	beq.n	1a000f1e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000f10:	2303      	movs	r3, #3
1a000f12:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000f14:	2310      	movs	r3, #16
1a000f16:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000f18:	9b01      	ldr	r3, [sp, #4]
}
1a000f1a:	b003      	add	sp, #12
1a000f1c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000f1e:	2300      	movs	r3, #0
1a000f20:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000f22:	69a3      	ldr	r3, [r4, #24]
1a000f24:	9301      	str	r3, [sp, #4]
1a000f26:	e7f3      	b.n	1a000f10 <Chip_UART_Init+0x34>
1a000f28:	1a006d9c 	.word	0x1a006d9c
1a000f2c:	40082000 	.word	0x40082000

1a000f30 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f34:	b083      	sub	sp, #12
1a000f36:	9001      	str	r0, [sp, #4]
1a000f38:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000f3a:	f7ff ffb9 	bl	1a000eb0 <Chip_UART_GetIndex>
1a000f3e:	4b32      	ldr	r3, [pc, #200]	; (1a001008 <Chip_UART_SetBaudFDR+0xd8>)
1a000f40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000f44:	f000 fb70 	bl	1a001628 <Chip_Clock_GetRate>
1a000f48:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000f4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f4e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000f50:	f04f 0b00 	mov.w	fp, #0
1a000f54:	46a2      	mov	sl, r4
1a000f56:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000f58:	e02a      	b.n	1a000fb0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000f5a:	4242      	negs	r2, r0
				div ++;
1a000f5c:	1c4b      	adds	r3, r1, #1
1a000f5e:	e017      	b.n	1a000f90 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000f60:	b30a      	cbz	r2, 1a000fa6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000f62:	4617      	mov	r7, r2
			sd = d;
1a000f64:	46ab      	mov	fp, r5
			sm = m;
1a000f66:	46a2      	mov	sl, r4
			sdiv = div;
1a000f68:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000f6a:	3501      	adds	r5, #1
1a000f6c:	42ac      	cmp	r4, r5
1a000f6e:	d91e      	bls.n	1a000fae <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f70:	0933      	lsrs	r3, r6, #4
1a000f72:	0730      	lsls	r0, r6, #28
1a000f74:	fba4 0100 	umull	r0, r1, r4, r0
1a000f78:	fb04 1103 	mla	r1, r4, r3, r1
1a000f7c:	1962      	adds	r2, r4, r5
1a000f7e:	fb08 f202 	mul.w	r2, r8, r2
1a000f82:	2300      	movs	r3, #0
1a000f84:	f001 fba2 	bl	1a0026cc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000f88:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000f8a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000f8c:	2800      	cmp	r0, #0
1a000f8e:	dbe4      	blt.n	1a000f5a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f90:	4297      	cmp	r7, r2
1a000f92:	d3ea      	bcc.n	1a000f6a <Chip_UART_SetBaudFDR+0x3a>
1a000f94:	2b00      	cmp	r3, #0
1a000f96:	d0e8      	beq.n	1a000f6a <Chip_UART_SetBaudFDR+0x3a>
1a000f98:	0c19      	lsrs	r1, r3, #16
1a000f9a:	d1e6      	bne.n	1a000f6a <Chip_UART_SetBaudFDR+0x3a>
1a000f9c:	2b02      	cmp	r3, #2
1a000f9e:	d8df      	bhi.n	1a000f60 <Chip_UART_SetBaudFDR+0x30>
1a000fa0:	2d00      	cmp	r5, #0
1a000fa2:	d0dd      	beq.n	1a000f60 <Chip_UART_SetBaudFDR+0x30>
1a000fa4:	e7e1      	b.n	1a000f6a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000fa6:	4617      	mov	r7, r2
			sd = d;
1a000fa8:	46ab      	mov	fp, r5
			sm = m;
1a000faa:	46a2      	mov	sl, r4
			sdiv = div;
1a000fac:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000fae:	3401      	adds	r4, #1
1a000fb0:	b11f      	cbz	r7, 1a000fba <Chip_UART_SetBaudFDR+0x8a>
1a000fb2:	2c0f      	cmp	r4, #15
1a000fb4:	d801      	bhi.n	1a000fba <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000fb6:	2500      	movs	r5, #0
1a000fb8:	e7d8      	b.n	1a000f6c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000fba:	f1b9 0f00 	cmp.w	r9, #0
1a000fbe:	d01e      	beq.n	1a000ffe <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000fc0:	9a01      	ldr	r2, [sp, #4]
1a000fc2:	4611      	mov	r1, r2
1a000fc4:	68d3      	ldr	r3, [r2, #12]
1a000fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fca:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000fcc:	fa5f f389 	uxtb.w	r3, r9
1a000fd0:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000fd2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000fd6:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000fd8:	68d3      	ldr	r3, [r2, #12]
1a000fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fde:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000fe0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000fe4:	b2db      	uxtb	r3, r3
1a000fe6:	f00b 020f 	and.w	r2, fp, #15
1a000fea:	4313      	orrs	r3, r2
1a000fec:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000fee:	0933      	lsrs	r3, r6, #4
1a000ff0:	fb0a f303 	mul.w	r3, sl, r3
1a000ff4:	44da      	add	sl, fp
1a000ff6:	fb09 f90a 	mul.w	r9, r9, sl
1a000ffa:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000ffe:	4648      	mov	r0, r9
1a001000:	b003      	add	sp, #12
1a001002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001006:	bf00      	nop
1a001008:	1a006d94 	.word	0x1a006d94

1a00100c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00100c:	4b03      	ldr	r3, [pc, #12]	; (1a00101c <Chip_ADC_GetClockIndex+0x10>)
1a00100e:	4298      	cmp	r0, r3
1a001010:	d001      	beq.n	1a001016 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001012:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001014:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001016:	2004      	movs	r0, #4
1a001018:	4770      	bx	lr
1a00101a:	bf00      	nop
1a00101c:	400e4000 	.word	0x400e4000

1a001020 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001020:	b570      	push	{r4, r5, r6, lr}
1a001022:	460d      	mov	r5, r1
1a001024:	4614      	mov	r4, r2
1a001026:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001028:	f7ff fff0 	bl	1a00100c <Chip_ADC_GetClockIndex>
1a00102c:	f000 fafc 	bl	1a001628 <Chip_Clock_GetRate>
	if (burstMode) {
1a001030:	b155      	cbz	r5, 1a001048 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a001032:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001036:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00103a:	0064      	lsls	r4, r4, #1
1a00103c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001040:	b2c0      	uxtb	r0, r0
1a001042:	3801      	subs	r0, #1
	return div;
}
1a001044:	b2c0      	uxtb	r0, r0
1a001046:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a001048:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00104c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001050:	e7f1      	b.n	1a001036 <getClkDiv+0x16>
1a001052:	Address 0x000000001a001052 is out of bounds.


1a001054 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001054:	b538      	push	{r3, r4, r5, lr}
1a001056:	4605      	mov	r5, r0
1a001058:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00105a:	f7ff ffd7 	bl	1a00100c <Chip_ADC_GetClockIndex>
1a00105e:	2301      	movs	r3, #1
1a001060:	461a      	mov	r2, r3
1a001062:	4619      	mov	r1, r3
1a001064:	f000 faa8 	bl	1a0015b8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001068:	2100      	movs	r1, #0
1a00106a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00106c:	4a08      	ldr	r2, [pc, #32]	; (1a001090 <Chip_ADC_Init+0x3c>)
1a00106e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001070:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001072:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001074:	230b      	movs	r3, #11
1a001076:	4628      	mov	r0, r5
1a001078:	f7ff ffd2 	bl	1a001020 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00107c:	0200      	lsls	r0, r0, #8
1a00107e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001082:	7920      	ldrb	r0, [r4, #4]
1a001084:	0440      	lsls	r0, r0, #17
1a001086:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00108a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00108c:	6028      	str	r0, [r5, #0]
}
1a00108e:	bd38      	pop	{r3, r4, r5, pc}
1a001090:	00061a80 	.word	0x00061a80

1a001094 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001094:	b570      	push	{r4, r5, r6, lr}
1a001096:	4605      	mov	r5, r0
1a001098:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00109a:	6804      	ldr	r4, [r0, #0]
1a00109c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0010a0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0010a4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0010a6:	790b      	ldrb	r3, [r1, #4]
1a0010a8:	f1c3 030b 	rsb	r3, r3, #11
1a0010ac:	b2db      	uxtb	r3, r3
1a0010ae:	7949      	ldrb	r1, [r1, #5]
1a0010b0:	f7ff ffb6 	bl	1a001020 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0010b4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0010b8:	7933      	ldrb	r3, [r6, #4]
1a0010ba:	045b      	lsls	r3, r3, #17
1a0010bc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0010c0:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0010c2:	602b      	str	r3, [r5, #0]
}
1a0010c4:	bd70      	pop	{r4, r5, r6, pc}

1a0010c6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0010c6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0010c8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0010ca:	680a      	ldr	r2, [r1, #0]
1a0010cc:	f7ff ffe2 	bl	1a001094 <Chip_ADC_SetSampleRate>
}
1a0010d0:	bd08      	pop	{r3, pc}
1a0010d2:	Address 0x000000001a0010d2 is out of bounds.


1a0010d4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0010d4:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0010d6:	2069      	movs	r0, #105	; 0x69
1a0010d8:	f000 faa6 	bl	1a001628 <Chip_Clock_GetRate>
1a0010dc:	4b01      	ldr	r3, [pc, #4]	; (1a0010e4 <SystemCoreClockUpdate+0x10>)
1a0010de:	6018      	str	r0, [r3, #0]
}
1a0010e0:	bd08      	pop	{r3, pc}
1a0010e2:	bf00      	nop
1a0010e4:	10000afc 	.word	0x10000afc

1a0010e8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0010e8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0010ea:	680b      	ldr	r3, [r1, #0]
1a0010ec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010f0:	d002      	beq.n	1a0010f8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0010f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0010f6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0010f8:	4607      	mov	r7, r0
1a0010fa:	2501      	movs	r5, #1
1a0010fc:	e03a      	b.n	1a001174 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0010fe:	694b      	ldr	r3, [r1, #20]
1a001100:	fb03 f302 	mul.w	r3, r3, r2
1a001104:	fbb3 f3f5 	udiv	r3, r3, r5
1a001108:	e01c      	b.n	1a001144 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00110a:	461c      	mov	r4, r3
	if (val < 0)
1a00110c:	ebb0 0c04 	subs.w	ip, r0, r4
1a001110:	d427      	bmi.n	1a001162 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001112:	4567      	cmp	r7, ip
1a001114:	d906      	bls.n	1a001124 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a001116:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001118:	1c77      	adds	r7, r6, #1
1a00111a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00111c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00111e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001120:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001122:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a001124:	3201      	adds	r2, #1
1a001126:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00112a:	dc1d      	bgt.n	1a001168 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00112c:	680c      	ldr	r4, [r1, #0]
1a00112e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001132:	d0e4      	beq.n	1a0010fe <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001134:	1c73      	adds	r3, r6, #1
1a001136:	fa02 fc03 	lsl.w	ip, r2, r3
1a00113a:	694b      	ldr	r3, [r1, #20]
1a00113c:	fb03 f30c 	mul.w	r3, r3, ip
1a001140:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001144:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001180 <pll_calc_divs+0x98>
1a001148:	4563      	cmp	r3, ip
1a00114a:	d9eb      	bls.n	1a001124 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00114c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a001184 <pll_calc_divs+0x9c>
1a001150:	4563      	cmp	r3, ip
1a001152:	d809      	bhi.n	1a001168 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a001154:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001158:	d1d7      	bne.n	1a00110a <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00115a:	1c74      	adds	r4, r6, #1
1a00115c:	fa23 f404 	lsr.w	r4, r3, r4
1a001160:	e7d4      	b.n	1a00110c <pll_calc_divs+0x24>
		return -val;
1a001162:	f1cc 0c00 	rsb	ip, ip, #0
1a001166:	e7d4      	b.n	1a001112 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001168:	3601      	adds	r6, #1
1a00116a:	2e03      	cmp	r6, #3
1a00116c:	dc01      	bgt.n	1a001172 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00116e:	2201      	movs	r2, #1
1a001170:	e7d9      	b.n	1a001126 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a001172:	3501      	adds	r5, #1
1a001174:	2d04      	cmp	r5, #4
1a001176:	dc01      	bgt.n	1a00117c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001178:	2600      	movs	r6, #0
1a00117a:	e7f6      	b.n	1a00116a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00117c:	bcf0      	pop	{r4, r5, r6, r7}
1a00117e:	4770      	bx	lr
1a001180:	094c5eff 	.word	0x094c5eff
1a001184:	1312d000 	.word	0x1312d000

1a001188 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001188:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00118a:	b099      	sub	sp, #100	; 0x64
1a00118c:	4605      	mov	r5, r0
1a00118e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001190:	225c      	movs	r2, #92	; 0x5c
1a001192:	2100      	movs	r1, #0
1a001194:	a801      	add	r0, sp, #4
1a001196:	f002 f8db 	bl	1a003350 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00119a:	2380      	movs	r3, #128	; 0x80
1a00119c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00119e:	6963      	ldr	r3, [r4, #20]
1a0011a0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0011a2:	7923      	ldrb	r3, [r4, #4]
1a0011a4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0011a8:	4669      	mov	r1, sp
1a0011aa:	4628      	mov	r0, r5
1a0011ac:	f7ff ff9c 	bl	1a0010e8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0011b0:	9b06      	ldr	r3, [sp, #24]
1a0011b2:	42ab      	cmp	r3, r5
1a0011b4:	d027      	beq.n	1a001206 <pll_get_frac+0x7e>
	if (val < 0)
1a0011b6:	1aeb      	subs	r3, r5, r3
1a0011b8:	d42e      	bmi.n	1a001218 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0011ba:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0011bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0011be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0011c2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0011c4:	6963      	ldr	r3, [r4, #20]
1a0011c6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0011c8:	7923      	ldrb	r3, [r4, #4]
1a0011ca:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0011ce:	a910      	add	r1, sp, #64	; 0x40
1a0011d0:	4628      	mov	r0, r5
1a0011d2:	f7ff ff89 	bl	1a0010e8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0011d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0011d8:	42ab      	cmp	r3, r5
1a0011da:	d01f      	beq.n	1a00121c <pll_get_frac+0x94>
	if (val < 0)
1a0011dc:	1aeb      	subs	r3, r5, r3
1a0011de:	d425      	bmi.n	1a00122c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0011e0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0011e2:	4b2b      	ldr	r3, [pc, #172]	; (1a001290 <pll_get_frac+0x108>)
1a0011e4:	429d      	cmp	r5, r3
1a0011e6:	d923      	bls.n	1a001230 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0011e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0011ea:	1aed      	subs	r5, r5, r3
1a0011ec:	d433      	bmi.n	1a001256 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0011ee:	42ae      	cmp	r6, r5
1a0011f0:	dc3b      	bgt.n	1a00126a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0011f2:	42be      	cmp	r6, r7
1a0011f4:	dc31      	bgt.n	1a00125a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0011f6:	466d      	mov	r5, sp
1a0011f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0011fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0011fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001204:	e006      	b.n	1a001214 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001206:	466d      	mov	r5, sp
1a001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00120c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001214:	b019      	add	sp, #100	; 0x64
1a001216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001218:	425b      	negs	r3, r3
1a00121a:	e7ce      	b.n	1a0011ba <pll_get_frac+0x32>
		*ppll = pll[2];
1a00121c:	ad10      	add	r5, sp, #64	; 0x40
1a00121e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001222:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00122a:	e7f3      	b.n	1a001214 <pll_get_frac+0x8c>
		return -val;
1a00122c:	425b      	negs	r3, r3
1a00122e:	e7d7      	b.n	1a0011e0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001230:	2340      	movs	r3, #64	; 0x40
1a001232:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001234:	6963      	ldr	r3, [r4, #20]
1a001236:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001238:	a908      	add	r1, sp, #32
1a00123a:	4628      	mov	r0, r5
1a00123c:	f7ff ff54 	bl	1a0010e8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001242:	42ab      	cmp	r3, r5
1a001244:	d1d0      	bne.n	1a0011e8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001246:	ad08      	add	r5, sp, #32
1a001248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00124a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00124c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001254:	e7de      	b.n	1a001214 <pll_get_frac+0x8c>
		return -val;
1a001256:	426d      	negs	r5, r5
1a001258:	e7c9      	b.n	1a0011ee <pll_get_frac+0x66>
			*ppll = pll[2];
1a00125a:	ad10      	add	r5, sp, #64	; 0x40
1a00125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001260:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001268:	e7d4      	b.n	1a001214 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00126a:	42af      	cmp	r7, r5
1a00126c:	db07      	blt.n	1a00127e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00126e:	ad08      	add	r5, sp, #32
1a001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00127c:	e7ca      	b.n	1a001214 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00127e:	ad10      	add	r5, sp, #64	; 0x40
1a001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001284:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00128c:	e7c2      	b.n	1a001214 <pll_get_frac+0x8c>
1a00128e:	bf00      	nop
1a001290:	068e7780 	.word	0x068e7780

1a001294 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001294:	b430      	push	{r4, r5}
1a001296:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001298:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00129a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00129c:	e000      	b.n	1a0012a0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00129e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0012a0:	281c      	cmp	r0, #28
1a0012a2:	d118      	bne.n	1a0012d6 <Chip_Clock_FindBaseClock+0x42>
1a0012a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0012a8:	0051      	lsls	r1, r2, #1
1a0012aa:	4a0c      	ldr	r2, [pc, #48]	; (1a0012dc <Chip_Clock_FindBaseClock+0x48>)
1a0012ac:	440a      	add	r2, r1
1a0012ae:	7914      	ldrb	r4, [r2, #4]
1a0012b0:	4284      	cmp	r4, r0
1a0012b2:	d010      	beq.n	1a0012d6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0012b4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0012b8:	004a      	lsls	r2, r1, #1
1a0012ba:	4908      	ldr	r1, [pc, #32]	; (1a0012dc <Chip_Clock_FindBaseClock+0x48>)
1a0012bc:	5a8a      	ldrh	r2, [r1, r2]
1a0012be:	42aa      	cmp	r2, r5
1a0012c0:	d8ed      	bhi.n	1a00129e <Chip_Clock_FindBaseClock+0xa>
1a0012c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0012c6:	0051      	lsls	r1, r2, #1
1a0012c8:	4a04      	ldr	r2, [pc, #16]	; (1a0012dc <Chip_Clock_FindBaseClock+0x48>)
1a0012ca:	440a      	add	r2, r1
1a0012cc:	8852      	ldrh	r2, [r2, #2]
1a0012ce:	42aa      	cmp	r2, r5
1a0012d0:	d3e5      	bcc.n	1a00129e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0012d2:	4620      	mov	r0, r4
1a0012d4:	e7e4      	b.n	1a0012a0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0012d6:	bc30      	pop	{r4, r5}
1a0012d8:	4770      	bx	lr
1a0012da:	bf00      	nop
1a0012dc:	1a006db0 	.word	0x1a006db0

1a0012e0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0012e0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0012e6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0012e8:	4a0d      	ldr	r2, [pc, #52]	; (1a001320 <Chip_Clock_EnableCrystal+0x40>)
1a0012ea:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0012ec:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0012f0:	6992      	ldr	r2, [r2, #24]
1a0012f2:	428a      	cmp	r2, r1
1a0012f4:	d001      	beq.n	1a0012fa <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0012f6:	4a0a      	ldr	r2, [pc, #40]	; (1a001320 <Chip_Clock_EnableCrystal+0x40>)
1a0012f8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0012fa:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0012fe:	4a09      	ldr	r2, [pc, #36]	; (1a001324 <Chip_Clock_EnableCrystal+0x44>)
1a001300:	6811      	ldr	r1, [r2, #0]
1a001302:	4a09      	ldr	r2, [pc, #36]	; (1a001328 <Chip_Clock_EnableCrystal+0x48>)
1a001304:	4291      	cmp	r1, r2
1a001306:	d901      	bls.n	1a00130c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001308:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00130c:	4a04      	ldr	r2, [pc, #16]	; (1a001320 <Chip_Clock_EnableCrystal+0x40>)
1a00130e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001310:	9b01      	ldr	r3, [sp, #4]
1a001312:	1e5a      	subs	r2, r3, #1
1a001314:	9201      	str	r2, [sp, #4]
1a001316:	2b00      	cmp	r3, #0
1a001318:	d1fa      	bne.n	1a001310 <Chip_Clock_EnableCrystal+0x30>
}
1a00131a:	b002      	add	sp, #8
1a00131c:	4770      	bx	lr
1a00131e:	bf00      	nop
1a001320:	40050000 	.word	0x40050000
1a001324:	1a006d18 	.word	0x1a006d18
1a001328:	01312cff 	.word	0x01312cff

1a00132c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00132c:	3012      	adds	r0, #18
1a00132e:	4b05      	ldr	r3, [pc, #20]	; (1a001344 <Chip_Clock_GetDividerSource+0x18>)
1a001330:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001334:	f010 0f01 	tst.w	r0, #1
1a001338:	d102      	bne.n	1a001340 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00133a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00133e:	4770      	bx	lr
		return CLKINPUT_PD;
1a001340:	2011      	movs	r0, #17
}
1a001342:	4770      	bx	lr
1a001344:	40050000 	.word	0x40050000

1a001348 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001348:	f100 0212 	add.w	r2, r0, #18
1a00134c:	4b03      	ldr	r3, [pc, #12]	; (1a00135c <Chip_Clock_GetDividerDivisor+0x14>)
1a00134e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001352:	4b03      	ldr	r3, [pc, #12]	; (1a001360 <Chip_Clock_GetDividerDivisor+0x18>)
1a001354:	5c18      	ldrb	r0, [r3, r0]
}
1a001356:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00135a:	4770      	bx	lr
1a00135c:	40050000 	.word	0x40050000
1a001360:	1a006da8 	.word	0x1a006da8

1a001364 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001364:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001366:	2810      	cmp	r0, #16
1a001368:	d80a      	bhi.n	1a001380 <Chip_Clock_GetClockInputHz+0x1c>
1a00136a:	e8df f000 	tbb	[pc, r0]
1a00136e:	0b44      	.short	0x0b44
1a001370:	0921180d 	.word	0x0921180d
1a001374:	2d2a2724 	.word	0x2d2a2724
1a001378:	34300909 	.word	0x34300909
1a00137c:	3c38      	.short	0x3c38
1a00137e:	40          	.byte	0x40
1a00137f:	00          	.byte	0x00
	uint32_t rate = 0;
1a001380:	2000      	movs	r0, #0
1a001382:	e03a      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001384:	481e      	ldr	r0, [pc, #120]	; (1a001400 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001386:	e038      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001388:	4b1e      	ldr	r3, [pc, #120]	; (1a001404 <Chip_Clock_GetClockInputHz+0xa0>)
1a00138a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00138e:	f003 0307 	and.w	r3, r3, #7
1a001392:	2b04      	cmp	r3, #4
1a001394:	d001      	beq.n	1a00139a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001396:	481c      	ldr	r0, [pc, #112]	; (1a001408 <Chip_Clock_GetClockInputHz+0xa4>)
1a001398:	e02f      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a00139a:	2000      	movs	r0, #0
1a00139c:	e02d      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00139e:	4b19      	ldr	r3, [pc, #100]	; (1a001404 <Chip_Clock_GetClockInputHz+0xa0>)
1a0013a0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0013a4:	f003 0307 	and.w	r3, r3, #7
1a0013a8:	2b04      	cmp	r3, #4
1a0013aa:	d027      	beq.n	1a0013fc <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0013ac:	4816      	ldr	r0, [pc, #88]	; (1a001408 <Chip_Clock_GetClockInputHz+0xa4>)
1a0013ae:	e024      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0013b0:	4b16      	ldr	r3, [pc, #88]	; (1a00140c <Chip_Clock_GetClockInputHz+0xa8>)
1a0013b2:	6818      	ldr	r0, [r3, #0]
		break;
1a0013b4:	e021      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0013b6:	4b16      	ldr	r3, [pc, #88]	; (1a001410 <Chip_Clock_GetClockInputHz+0xac>)
1a0013b8:	6818      	ldr	r0, [r3, #0]
		break;
1a0013ba:	e01e      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0013bc:	4b15      	ldr	r3, [pc, #84]	; (1a001414 <Chip_Clock_GetClockInputHz+0xb0>)
1a0013be:	6818      	ldr	r0, [r3, #0]
		break;
1a0013c0:	e01b      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0013c2:	4b14      	ldr	r3, [pc, #80]	; (1a001414 <Chip_Clock_GetClockInputHz+0xb0>)
1a0013c4:	6858      	ldr	r0, [r3, #4]
		break;
1a0013c6:	e018      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0013c8:	f000 f868 	bl	1a00149c <Chip_Clock_GetMainPLLHz>
		break;
1a0013cc:	e015      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0013ce:	2100      	movs	r1, #0
1a0013d0:	f000 f89a 	bl	1a001508 <Chip_Clock_GetDivRate>
		break;
1a0013d4:	e011      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0013d6:	2101      	movs	r1, #1
1a0013d8:	f000 f896 	bl	1a001508 <Chip_Clock_GetDivRate>
		break;
1a0013dc:	e00d      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0013de:	2102      	movs	r1, #2
1a0013e0:	f000 f892 	bl	1a001508 <Chip_Clock_GetDivRate>
		break;
1a0013e4:	e009      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0013e6:	2103      	movs	r1, #3
1a0013e8:	f000 f88e 	bl	1a001508 <Chip_Clock_GetDivRate>
		break;
1a0013ec:	e005      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0013ee:	2104      	movs	r1, #4
1a0013f0:	f000 f88a 	bl	1a001508 <Chip_Clock_GetDivRate>
		break;
1a0013f4:	e001      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0013f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0013fa:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a0013fc:	4806      	ldr	r0, [pc, #24]	; (1a001418 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0013fe:	e7fc      	b.n	1a0013fa <Chip_Clock_GetClockInputHz+0x96>
1a001400:	00b71b00 	.word	0x00b71b00
1a001404:	40043000 	.word	0x40043000
1a001408:	017d7840 	.word	0x017d7840
1a00140c:	1a006cec 	.word	0x1a006cec
1a001410:	1a006d18 	.word	0x1a006d18
1a001414:	10000aac 	.word	0x10000aac
1a001418:	02faf080 	.word	0x02faf080

1a00141c <Chip_Clock_CalcMainPLLValue>:
{
1a00141c:	b538      	push	{r3, r4, r5, lr}
1a00141e:	4605      	mov	r5, r0
1a001420:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001422:	7908      	ldrb	r0, [r1, #4]
1a001424:	f7ff ff9e 	bl	1a001364 <Chip_Clock_GetClockInputHz>
1a001428:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00142a:	4b19      	ldr	r3, [pc, #100]	; (1a001490 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00142c:	442b      	add	r3, r5
1a00142e:	4a19      	ldr	r2, [pc, #100]	; (1a001494 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001430:	4293      	cmp	r3, r2
1a001432:	d821      	bhi.n	1a001478 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001434:	b318      	cbz	r0, 1a00147e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001436:	2380      	movs	r3, #128	; 0x80
1a001438:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00143a:	2300      	movs	r3, #0
1a00143c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00143e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001440:	fbb5 f3f0 	udiv	r3, r5, r0
1a001444:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001446:	4a14      	ldr	r2, [pc, #80]	; (1a001498 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001448:	4295      	cmp	r5, r2
1a00144a:	d903      	bls.n	1a001454 <Chip_Clock_CalcMainPLLValue+0x38>
1a00144c:	fb03 f000 	mul.w	r0, r3, r0
1a001450:	42a8      	cmp	r0, r5
1a001452:	d007      	beq.n	1a001464 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001454:	4621      	mov	r1, r4
1a001456:	4628      	mov	r0, r5
1a001458:	f7ff fe96 	bl	1a001188 <pll_get_frac>
		if (!ppll->nsel) {
1a00145c:	68a3      	ldr	r3, [r4, #8]
1a00145e:	b18b      	cbz	r3, 1a001484 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001460:	3b01      	subs	r3, #1
1a001462:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001464:	6923      	ldr	r3, [r4, #16]
1a001466:	b183      	cbz	r3, 1a00148a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001468:	68e2      	ldr	r2, [r4, #12]
1a00146a:	b10a      	cbz	r2, 1a001470 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00146c:	3a01      	subs	r2, #1
1a00146e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001470:	3b01      	subs	r3, #1
1a001472:	6123      	str	r3, [r4, #16]
	return 0;
1a001474:	2000      	movs	r0, #0
}
1a001476:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00147c:	e7fb      	b.n	1a001476 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00147e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001482:	e7f8      	b.n	1a001476 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001488:	e7f5      	b.n	1a001476 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00148a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00148e:	e7f2      	b.n	1a001476 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001490:	ff6b3a10 	.word	0xff6b3a10
1a001494:	0b940510 	.word	0x0b940510
1a001498:	094c5eff 	.word	0x094c5eff

1a00149c <Chip_Clock_GetMainPLLHz>:
{
1a00149c:	b530      	push	{r4, r5, lr}
1a00149e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0014a0:	4d17      	ldr	r5, [pc, #92]	; (1a001500 <Chip_Clock_GetMainPLLHz+0x64>)
1a0014a2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0014a4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0014a8:	f7ff ff5c 	bl	1a001364 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0014ac:	4b15      	ldr	r3, [pc, #84]	; (1a001504 <Chip_Clock_GetMainPLLHz+0x68>)
1a0014ae:	681b      	ldr	r3, [r3, #0]
1a0014b0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0014b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0014b4:	f013 0f01 	tst.w	r3, #1
1a0014b8:	d020      	beq.n	1a0014fc <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0014ba:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0014be:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0014c2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0014c6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0014ca:	3301      	adds	r3, #1
	n = nsel + 1;
1a0014cc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0014ce:	f10d 0c08 	add.w	ip, sp, #8
1a0014d2:	4461      	add	r1, ip
1a0014d4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0014d8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0014dc:	d108      	bne.n	1a0014f0 <Chip_Clock_GetMainPLLHz+0x54>
1a0014de:	b93d      	cbnz	r5, 1a0014f0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0014e0:	0049      	lsls	r1, r1, #1
1a0014e2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0014e6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0014ea:	fb00 f003 	mul.w	r0, r0, r3
1a0014ee:	e003      	b.n	1a0014f8 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0014f0:	fbb0 f0f2 	udiv	r0, r0, r2
1a0014f4:	fb03 f000 	mul.w	r0, r3, r0
}
1a0014f8:	b003      	add	sp, #12
1a0014fa:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0014fc:	2000      	movs	r0, #0
1a0014fe:	e7fb      	b.n	1a0014f8 <Chip_Clock_GetMainPLLHz+0x5c>
1a001500:	40050000 	.word	0x40050000
1a001504:	1a006da4 	.word	0x1a006da4

1a001508 <Chip_Clock_GetDivRate>:
{
1a001508:	b538      	push	{r3, r4, r5, lr}
1a00150a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00150c:	4608      	mov	r0, r1
1a00150e:	f7ff ff0d 	bl	1a00132c <Chip_Clock_GetDividerSource>
1a001512:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001514:	4620      	mov	r0, r4
1a001516:	f7ff ff17 	bl	1a001348 <Chip_Clock_GetDividerDivisor>
1a00151a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00151c:	4628      	mov	r0, r5
1a00151e:	f7ff ff21 	bl	1a001364 <Chip_Clock_GetClockInputHz>
1a001522:	3401      	adds	r4, #1
}
1a001524:	fbb0 f0f4 	udiv	r0, r0, r4
1a001528:	bd38      	pop	{r3, r4, r5, pc}
1a00152a:	Address 0x000000001a00152a is out of bounds.


1a00152c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00152c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00152e:	f100 0416 	add.w	r4, r0, #22
1a001532:	00a4      	lsls	r4, r4, #2
1a001534:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001538:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00153c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00153e:	281b      	cmp	r0, #27
1a001540:	d813      	bhi.n	1a00156a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001542:	2911      	cmp	r1, #17
1a001544:	d01a      	beq.n	1a00157c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001546:	4d0e      	ldr	r5, [pc, #56]	; (1a001580 <Chip_Clock_SetBaseClock+0x54>)
1a001548:	4025      	ands	r5, r4

			if (autoblocken) {
1a00154a:	b10a      	cbz	r2, 1a001550 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00154c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001550:	b10b      	cbz	r3, 1a001556 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001552:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001556:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00155a:	3016      	adds	r0, #22
1a00155c:	0080      	lsls	r0, r0, #2
1a00155e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001562:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001566:	6045      	str	r5, [r0, #4]
1a001568:	e008      	b.n	1a00157c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00156a:	f044 0401 	orr.w	r4, r4, #1
1a00156e:	3016      	adds	r0, #22
1a001570:	0080      	lsls	r0, r0, #2
1a001572:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001576:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00157a:	6044      	str	r4, [r0, #4]
	}
}
1a00157c:	bc30      	pop	{r4, r5}
1a00157e:	4770      	bx	lr
1a001580:	e0fff7fe 	.word	0xe0fff7fe

1a001584 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001584:	281b      	cmp	r0, #27
1a001586:	d80c      	bhi.n	1a0015a2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001588:	3016      	adds	r0, #22
1a00158a:	0080      	lsls	r0, r0, #2
1a00158c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001590:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001594:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001596:	f010 0f01 	tst.w	r0, #1
1a00159a:	d104      	bne.n	1a0015a6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00159c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0015a0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0015a2:	2011      	movs	r0, #17
1a0015a4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0015a6:	2011      	movs	r0, #17
}
1a0015a8:	4770      	bx	lr

1a0015aa <Chip_Clock_GetBaseClocktHz>:
{
1a0015aa:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0015ac:	f7ff ffea 	bl	1a001584 <Chip_Clock_GetBaseClock>
1a0015b0:	f7ff fed8 	bl	1a001364 <Chip_Clock_GetClockInputHz>
}
1a0015b4:	bd08      	pop	{r3, pc}
1a0015b6:	Address 0x000000001a0015b6 is out of bounds.


1a0015b8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0015b8:	b971      	cbnz	r1, 1a0015d8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0015ba:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0015bc:	b10a      	cbz	r2, 1a0015c2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0015be:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0015c2:	2b02      	cmp	r3, #2
1a0015c4:	d00a      	beq.n	1a0015dc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0015c6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015ca:	d30a      	bcc.n	1a0015e2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0015cc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0015d0:	4b06      	ldr	r3, [pc, #24]	; (1a0015ec <Chip_Clock_EnableOpts+0x34>)
1a0015d2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0015d6:	4770      	bx	lr
		reg |= (1 << 1);
1a0015d8:	2103      	movs	r1, #3
1a0015da:	e7ef      	b.n	1a0015bc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0015dc:	f041 0120 	orr.w	r1, r1, #32
1a0015e0:	e7f1      	b.n	1a0015c6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0015e2:	3020      	adds	r0, #32
1a0015e4:	4b02      	ldr	r3, [pc, #8]	; (1a0015f0 <Chip_Clock_EnableOpts+0x38>)
1a0015e6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0015ea:	4770      	bx	lr
1a0015ec:	40052000 	.word	0x40052000
1a0015f0:	40051000 	.word	0x40051000

1a0015f4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0015f4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0015f8:	d309      	bcc.n	1a00160e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0015fa:	4a09      	ldr	r2, [pc, #36]	; (1a001620 <Chip_Clock_Enable+0x2c>)
1a0015fc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001600:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001604:	f043 0301 	orr.w	r3, r3, #1
1a001608:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00160c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00160e:	4a05      	ldr	r2, [pc, #20]	; (1a001624 <Chip_Clock_Enable+0x30>)
1a001610:	3020      	adds	r0, #32
1a001612:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001616:	f043 0301 	orr.w	r3, r3, #1
1a00161a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00161e:	4770      	bx	lr
1a001620:	40052000 	.word	0x40052000
1a001624:	40051000 	.word	0x40051000

1a001628 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001628:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00162a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00162e:	d309      	bcc.n	1a001644 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001630:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001634:	4a0d      	ldr	r2, [pc, #52]	; (1a00166c <Chip_Clock_GetRate+0x44>)
1a001636:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00163a:	f014 0f01 	tst.w	r4, #1
1a00163e:	d107      	bne.n	1a001650 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001640:	2000      	movs	r0, #0
	}

	return rate;
}
1a001642:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001644:	f100 0320 	add.w	r3, r0, #32
1a001648:	4a09      	ldr	r2, [pc, #36]	; (1a001670 <Chip_Clock_GetRate+0x48>)
1a00164a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00164e:	e7f4      	b.n	1a00163a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001650:	f7ff fe20 	bl	1a001294 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001654:	f7ff ffa9 	bl	1a0015aa <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001658:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00165c:	d103      	bne.n	1a001666 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00165e:	2301      	movs	r3, #1
		rate = rate / div;
1a001660:	fbb0 f0f3 	udiv	r0, r0, r3
1a001664:	e7ed      	b.n	1a001642 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001666:	2302      	movs	r3, #2
1a001668:	e7fa      	b.n	1a001660 <Chip_Clock_GetRate+0x38>
1a00166a:	bf00      	nop
1a00166c:	40052000 	.word	0x40052000
1a001670:	40051000 	.word	0x40051000

1a001674 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001674:	b570      	push	{r4, r5, r6, lr}
1a001676:	b08a      	sub	sp, #40	; 0x28
1a001678:	4605      	mov	r5, r0
1a00167a:	460e      	mov	r6, r1
1a00167c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00167e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001682:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001684:	2806      	cmp	r0, #6
1a001686:	d018      	beq.n	1a0016ba <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001688:	2300      	movs	r3, #0
1a00168a:	2201      	movs	r2, #1
1a00168c:	4629      	mov	r1, r5
1a00168e:	2004      	movs	r0, #4
1a001690:	f7ff ff4c 	bl	1a00152c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001694:	4a4a      	ldr	r2, [pc, #296]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001696:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001698:	f043 0301 	orr.w	r3, r3, #1
1a00169c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00169e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0016a2:	a901      	add	r1, sp, #4
1a0016a4:	4630      	mov	r0, r6
1a0016a6:	f7ff feb9 	bl	1a00141c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0016aa:	4b46      	ldr	r3, [pc, #280]	; (1a0017c4 <Chip_SetupCoreClock+0x150>)
1a0016ac:	429e      	cmp	r6, r3
1a0016ae:	d916      	bls.n	1a0016de <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0016b0:	9b01      	ldr	r3, [sp, #4]
1a0016b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0016b6:	d003      	beq.n	1a0016c0 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0016b8:	e7fe      	b.n	1a0016b8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0016ba:	f7ff fe11 	bl	1a0012e0 <Chip_Clock_EnableCrystal>
1a0016be:	e7e3      	b.n	1a001688 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0016c0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0016c4:	d005      	beq.n	1a0016d2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0016c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0016ca:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0016cc:	2500      	movs	r5, #0
			direct = 1;
1a0016ce:	2601      	movs	r6, #1
1a0016d0:	e007      	b.n	1a0016e2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0016d2:	9b04      	ldr	r3, [sp, #16]
1a0016d4:	3301      	adds	r3, #1
1a0016d6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0016d8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0016da:	2600      	movs	r6, #0
1a0016dc:	e001      	b.n	1a0016e2 <Chip_SetupCoreClock+0x6e>
1a0016de:	2500      	movs	r5, #0
1a0016e0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0016e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0016e6:	9b01      	ldr	r3, [sp, #4]
1a0016e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0016ec:	9a05      	ldr	r2, [sp, #20]
1a0016ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0016f2:	9a03      	ldr	r2, [sp, #12]
1a0016f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0016f8:	9a04      	ldr	r2, [sp, #16]
1a0016fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0016fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001702:	4a2f      	ldr	r2, [pc, #188]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001704:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001706:	4b2e      	ldr	r3, [pc, #184]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00170a:	f013 0f01 	tst.w	r3, #1
1a00170e:	d0fa      	beq.n	1a001706 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001710:	2300      	movs	r3, #0
1a001712:	2201      	movs	r2, #1
1a001714:	2109      	movs	r1, #9
1a001716:	2004      	movs	r0, #4
1a001718:	f7ff ff08 	bl	1a00152c <Chip_Clock_SetBaseClock>

	if (direct) {
1a00171c:	b306      	cbz	r6, 1a001760 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00171e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001722:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001724:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001726:	1e5a      	subs	r2, r3, #1
1a001728:	9209      	str	r2, [sp, #36]	; 0x24
1a00172a:	2b00      	cmp	r3, #0
1a00172c:	d1fa      	bne.n	1a001724 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00172e:	9b01      	ldr	r3, [sp, #4]
1a001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001734:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001736:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00173a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00173e:	9a05      	ldr	r2, [sp, #20]
1a001740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001744:	9a03      	ldr	r2, [sp, #12]
1a001746:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00174a:	9a04      	ldr	r2, [sp, #16]
1a00174c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001750:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001754:	4a1a      	ldr	r2, [pc, #104]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a001756:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001758:	2c00      	cmp	r4, #0
1a00175a:	d12e      	bne.n	1a0017ba <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00175c:	b00a      	add	sp, #40	; 0x28
1a00175e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001760:	2d00      	cmp	r5, #0
1a001762:	d0f9      	beq.n	1a001758 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001764:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001768:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00176a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00176c:	1e5a      	subs	r2, r3, #1
1a00176e:	9209      	str	r2, [sp, #36]	; 0x24
1a001770:	2b00      	cmp	r3, #0
1a001772:	d1fa      	bne.n	1a00176a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001774:	9b04      	ldr	r3, [sp, #16]
1a001776:	1e5a      	subs	r2, r3, #1
1a001778:	9204      	str	r2, [sp, #16]
1a00177a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00177e:	9b01      	ldr	r3, [sp, #4]
1a001780:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001784:	9905      	ldr	r1, [sp, #20]
1a001786:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00178a:	9903      	ldr	r1, [sp, #12]
1a00178c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001790:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001798:	4a09      	ldr	r2, [pc, #36]	; (1a0017c0 <Chip_SetupCoreClock+0x14c>)
1a00179a:	6453      	str	r3, [r2, #68]	; 0x44
1a00179c:	e7dc      	b.n	1a001758 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00179e:	480a      	ldr	r0, [pc, #40]	; (1a0017c8 <Chip_SetupCoreClock+0x154>)
1a0017a0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0017a4:	78cb      	ldrb	r3, [r1, #3]
1a0017a6:	788a      	ldrb	r2, [r1, #2]
1a0017a8:	7849      	ldrb	r1, [r1, #1]
1a0017aa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0017ae:	f7ff febd 	bl	1a00152c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0017b2:	3401      	adds	r4, #1
1a0017b4:	2c11      	cmp	r4, #17
1a0017b6:	d9f2      	bls.n	1a00179e <Chip_SetupCoreClock+0x12a>
1a0017b8:	e7d0      	b.n	1a00175c <Chip_SetupCoreClock+0xe8>
1a0017ba:	2400      	movs	r4, #0
1a0017bc:	e7fa      	b.n	1a0017b4 <Chip_SetupCoreClock+0x140>
1a0017be:	bf00      	nop
1a0017c0:	40050000 	.word	0x40050000
1a0017c4:	068e7780 	.word	0x068e7780
1a0017c8:	1a006e1c 	.word	0x1a006e1c

1a0017cc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0017cc:	4770      	bx	lr
1a0017ce:	Address 0x000000001a0017ce is out of bounds.


1a0017d0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0017d0:	4b03      	ldr	r3, [pc, #12]	; (1a0017e0 <Chip_SSP_GetClockIndex+0x10>)
1a0017d2:	4298      	cmp	r0, r3
1a0017d4:	d001      	beq.n	1a0017da <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0017d6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0017d8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0017da:	20a5      	movs	r0, #165	; 0xa5
1a0017dc:	4770      	bx	lr
1a0017de:	bf00      	nop
1a0017e0:	400c5000 	.word	0x400c5000

1a0017e4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0017e4:	4b04      	ldr	r3, [pc, #16]	; (1a0017f8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0017e6:	4298      	cmp	r0, r3
1a0017e8:	d002      	beq.n	1a0017f0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0017ea:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0017ee:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0017f0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0017f4:	4770      	bx	lr
1a0017f6:	bf00      	nop
1a0017f8:	400c5000 	.word	0x400c5000

1a0017fc <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0017fc:	6803      	ldr	r3, [r0, #0]
1a0017fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001802:	0209      	lsls	r1, r1, #8
1a001804:	b289      	uxth	r1, r1
1a001806:	4319      	orrs	r1, r3
1a001808:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00180a:	6102      	str	r2, [r0, #16]
}
1a00180c:	4770      	bx	lr

1a00180e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00180e:	b570      	push	{r4, r5, r6, lr}
1a001810:	4606      	mov	r6, r0
1a001812:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001814:	f7ff ffe6 	bl	1a0017e4 <Chip_SSP_GetPeriphClockIndex>
1a001818:	f7ff ff06 	bl	1a001628 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00181c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00181e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001822:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001824:	e000      	b.n	1a001828 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001826:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001828:	42ab      	cmp	r3, r5
1a00182a:	d90b      	bls.n	1a001844 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00182c:	1c4c      	adds	r4, r1, #1
1a00182e:	fb02 f304 	mul.w	r3, r2, r4
1a001832:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001836:	429d      	cmp	r5, r3
1a001838:	d2f6      	bcs.n	1a001828 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00183a:	2cff      	cmp	r4, #255	; 0xff
1a00183c:	d9f3      	bls.n	1a001826 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00183e:	3202      	adds	r2, #2
				cr0_div = 0;
1a001840:	2100      	movs	r1, #0
1a001842:	e7f1      	b.n	1a001828 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001844:	4630      	mov	r0, r6
1a001846:	f7ff ffd9 	bl	1a0017fc <Chip_SSP_SetClockRate>
}
1a00184a:	bd70      	pop	{r4, r5, r6, pc}

1a00184c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00184c:	b510      	push	{r4, lr}
1a00184e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001850:	f7ff ffbe 	bl	1a0017d0 <Chip_SSP_GetClockIndex>
1a001854:	f7ff fece 	bl	1a0015f4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001858:	4620      	mov	r0, r4
1a00185a:	f7ff ffc3 	bl	1a0017e4 <Chip_SSP_GetPeriphClockIndex>
1a00185e:	f7ff fec9 	bl	1a0015f4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001862:	6863      	ldr	r3, [r4, #4]
1a001864:	f023 0304 	bic.w	r3, r3, #4
1a001868:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00186a:	6823      	ldr	r3, [r4, #0]
1a00186c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001870:	f043 0307 	orr.w	r3, r3, #7
1a001874:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001876:	4902      	ldr	r1, [pc, #8]	; (1a001880 <Chip_SSP_Init+0x34>)
1a001878:	4620      	mov	r0, r4
1a00187a:	f7ff ffc8 	bl	1a00180e <Chip_SSP_SetBitRate>
}
1a00187e:	bd10      	pop	{r4, pc}
1a001880:	000186a0 	.word	0x000186a0

1a001884 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001884:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001886:	4a0b      	ldr	r2, [pc, #44]	; (1a0018b4 <SystemInit+0x30>)
1a001888:	4b0b      	ldr	r3, [pc, #44]	; (1a0018b8 <SystemInit+0x34>)
1a00188a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00188c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001890:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001892:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001896:	2b20      	cmp	r3, #32
1a001898:	d004      	beq.n	1a0018a4 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a00189a:	f7ff f987 	bl	1a000bac <Board_SystemInit>
   Board_Init();
1a00189e:	f7ff f917 	bl	1a000ad0 <Board_Init>
#endif
}
1a0018a2:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0018a4:	4a04      	ldr	r2, [pc, #16]	; (1a0018b8 <SystemInit+0x34>)
1a0018a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0018aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0018ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0018b2:	e7f2      	b.n	1a00189a <SystemInit+0x16>
1a0018b4:	1a000000 	.word	0x1a000000
1a0018b8:	e000ed00 	.word	0xe000ed00

1a0018bc <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0018bc:	4b04      	ldr	r3, [pc, #16]	; (1a0018d0 <cyclesCounterInit+0x14>)
1a0018be:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0018c0:	4a04      	ldr	r2, [pc, #16]	; (1a0018d4 <cyclesCounterInit+0x18>)
1a0018c2:	6813      	ldr	r3, [r2, #0]
1a0018c4:	f043 0301 	orr.w	r3, r3, #1
1a0018c8:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0018ca:	2001      	movs	r0, #1
1a0018cc:	4770      	bx	lr
1a0018ce:	bf00      	nop
1a0018d0:	1000003c 	.word	0x1000003c
1a0018d4:	e0001000 	.word	0xe0001000

1a0018d8 <uartTxReady>:
}

// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0018d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0018dc:	0083      	lsls	r3, r0, #2
1a0018de:	4a03      	ldr	r2, [pc, #12]	; (1a0018ec <uartTxReady+0x14>)
1a0018e0:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0018e2:	6958      	ldr	r0, [r3, #20]
}
1a0018e4:	f000 0020 	and.w	r0, r0, #32
1a0018e8:	4770      	bx	lr
1a0018ea:	bf00      	nop
1a0018ec:	1a006e64 	.word	0x1a006e64

1a0018f0 <uartTxWrite>:
}

// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0018f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0018f4:	0083      	lsls	r3, r0, #2
1a0018f6:	4a02      	ldr	r2, [pc, #8]	; (1a001900 <uartTxWrite+0x10>)
1a0018f8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0018fa:	6019      	str	r1, [r3, #0]
}
1a0018fc:	4770      	bx	lr
1a0018fe:	bf00      	nop
1a001900:	1a006e64 	.word	0x1a006e64

1a001904 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001904:	b538      	push	{r3, r4, r5, lr}
1a001906:	4604      	mov	r4, r0
1a001908:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a00190a:	4620      	mov	r0, r4
1a00190c:	f7ff ffe4 	bl	1a0018d8 <uartTxReady>
1a001910:	2800      	cmp	r0, #0
1a001912:	d0fa      	beq.n	1a00190a <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001914:	4629      	mov	r1, r5
1a001916:	4620      	mov	r0, r4
1a001918:	f7ff ffea 	bl	1a0018f0 <uartTxWrite>
}
1a00191c:	bd38      	pop	{r3, r4, r5, pc}

1a00191e <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a00191e:	b538      	push	{r3, r4, r5, lr}
1a001920:	4605      	mov	r5, r0
1a001922:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001924:	7821      	ldrb	r1, [r4, #0]
1a001926:	b121      	cbz	r1, 1a001932 <uartWriteString+0x14>
      uartWriteByte( uart, (uint8_t)*str );
1a001928:	4628      	mov	r0, r5
1a00192a:	f7ff ffeb 	bl	1a001904 <uartWriteByte>
      str++;
1a00192e:	3401      	adds	r4, #1
1a001930:	e7f8      	b.n	1a001924 <uartWriteString+0x6>
   }
}
1a001932:	bd38      	pop	{r3, r4, r5, pc}

1a001934 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001934:	4b01      	ldr	r3, [pc, #4]	; (1a00193c <tickRead+0x8>)
1a001936:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00193a:	4770      	bx	lr
1a00193c:	10000ab8 	.word	0x10000ab8

1a001940 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001940:	b118      	cbz	r0, 1a00194a <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001942:	4b04      	ldr	r3, [pc, #16]	; (1a001954 <tickPowerSet+0x14>)
1a001944:	2207      	movs	r2, #7
1a001946:	601a      	str	r2, [r3, #0]
1a001948:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00194a:	4b02      	ldr	r3, [pc, #8]	; (1a001954 <tickPowerSet+0x14>)
1a00194c:	2200      	movs	r2, #0
1a00194e:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001950:	4770      	bx	lr
1a001952:	bf00      	nop
1a001954:	e000e010 	.word	0xe000e010

1a001958 <tickInit>:
{
1a001958:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00195a:	ea50 0401 	orrs.w	r4, r0, r1
1a00195e:	d02a      	beq.n	1a0019b6 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001960:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001964:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001968:	2b00      	cmp	r3, #0
1a00196a:	bf08      	it	eq
1a00196c:	2a32      	cmpeq	r2, #50	; 0x32
1a00196e:	d227      	bcs.n	1a0019c0 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001970:	4b14      	ldr	r3, [pc, #80]	; (1a0019c4 <tickInit+0x6c>)
1a001972:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001976:	4b14      	ldr	r3, [pc, #80]	; (1a0019c8 <tickInit+0x70>)
1a001978:	681b      	ldr	r3, [r3, #0]
1a00197a:	fba3 4500 	umull	r4, r5, r3, r0
1a00197e:	fb03 5501 	mla	r5, r3, r1, r5
1a001982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001986:	2300      	movs	r3, #0
1a001988:	4620      	mov	r0, r4
1a00198a:	4629      	mov	r1, r5
1a00198c:	f000 fe9e 	bl	1a0026cc <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001990:	3801      	subs	r0, #1
1a001992:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001996:	d209      	bcs.n	1a0019ac <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001998:	4b0c      	ldr	r3, [pc, #48]	; (1a0019cc <tickInit+0x74>)
1a00199a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00199c:	4a0c      	ldr	r2, [pc, #48]	; (1a0019d0 <tickInit+0x78>)
1a00199e:	21e0      	movs	r1, #224	; 0xe0
1a0019a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0019a4:	2200      	movs	r2, #0
1a0019a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0019a8:	2207      	movs	r2, #7
1a0019aa:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0019ac:	2001      	movs	r0, #1
1a0019ae:	f7ff ffc7 	bl	1a001940 <tickPowerSet>
      bool_t ret_val = 1;
1a0019b2:	2001      	movs	r0, #1
}
1a0019b4:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0019b6:	2000      	movs	r0, #0
1a0019b8:	f7ff ffc2 	bl	1a001940 <tickPowerSet>
         ret_val = 0;
1a0019bc:	2000      	movs	r0, #0
1a0019be:	e7f9      	b.n	1a0019b4 <tickInit+0x5c>
            ret_val = 0;
1a0019c0:	2000      	movs	r0, #0
1a0019c2:	e7f7      	b.n	1a0019b4 <tickInit+0x5c>
1a0019c4:	10000040 	.word	0x10000040
1a0019c8:	10000afc 	.word	0x10000afc
1a0019cc:	e000e010 	.word	0xe000e010
1a0019d0:	e000ed00 	.word	0xe000ed00

1a0019d4 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0019d4:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0019d6:	4a07      	ldr	r2, [pc, #28]	; (1a0019f4 <SysTick_Handler+0x20>)
1a0019d8:	6813      	ldr	r3, [r2, #0]
1a0019da:	6851      	ldr	r1, [r2, #4]
1a0019dc:	3301      	adds	r3, #1
1a0019de:	f141 0100 	adc.w	r1, r1, #0
1a0019e2:	6013      	str	r3, [r2, #0]
1a0019e4:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0019e6:	4b04      	ldr	r3, [pc, #16]	; (1a0019f8 <SysTick_Handler+0x24>)
1a0019e8:	681b      	ldr	r3, [r3, #0]
1a0019ea:	b113      	cbz	r3, 1a0019f2 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0019ec:	4a03      	ldr	r2, [pc, #12]	; (1a0019fc <SysTick_Handler+0x28>)
1a0019ee:	6810      	ldr	r0, [r2, #0]
1a0019f0:	4798      	blx	r3
   }
}
1a0019f2:	bd08      	pop	{r3, pc}
1a0019f4:	10000ab8 	.word	0x10000ab8
1a0019f8:	10000ac0 	.word	0x10000ac0
1a0019fc:	10000ab4 	.word	0x10000ab4

1a001a00 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001a00:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001a02:	4d0b      	ldr	r5, [pc, #44]	; (1a001a30 <gpioObtainPinInit+0x30>)
1a001a04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001a08:	182c      	adds	r4, r5, r0
1a001a0a:	5628      	ldrsb	r0, [r5, r0]
1a001a0c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001a0e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001a12:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001a14:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001a18:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001a1a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001a1e:	9b02      	ldr	r3, [sp, #8]
1a001a20:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001a22:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001a26:	9b03      	ldr	r3, [sp, #12]
1a001a28:	701a      	strb	r2, [r3, #0]
}
1a001a2a:	bc30      	pop	{r4, r5}
1a001a2c:	4770      	bx	lr
1a001a2e:	bf00      	nop
1a001a30:	1a006eac 	.word	0x1a006eac

1a001a34 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001a34:	f110 0f02 	cmn.w	r0, #2
1a001a38:	f000 80c7 	beq.w	1a001bca <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001a3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a40:	f000 80c5 	beq.w	1a001bce <gpioInit+0x19a>
{
1a001a44:	b570      	push	{r4, r5, r6, lr}
1a001a46:	b084      	sub	sp, #16
1a001a48:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001a4a:	2300      	movs	r3, #0
1a001a4c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001a50:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001a54:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001a58:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001a5c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001a60:	f10d 030b 	add.w	r3, sp, #11
1a001a64:	9301      	str	r3, [sp, #4]
1a001a66:	ab03      	add	r3, sp, #12
1a001a68:	9300      	str	r3, [sp, #0]
1a001a6a:	f10d 030d 	add.w	r3, sp, #13
1a001a6e:	f10d 020e 	add.w	r2, sp, #14
1a001a72:	f10d 010f 	add.w	r1, sp, #15
1a001a76:	f7ff ffc3 	bl	1a001a00 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001a7a:	2c05      	cmp	r4, #5
1a001a7c:	f200 80a9 	bhi.w	1a001bd2 <gpioInit+0x19e>
1a001a80:	e8df f004 	tbb	[pc, r4]
1a001a84:	45278109 	.word	0x45278109
1a001a88:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001a8a:	4853      	ldr	r0, [pc, #332]	; (1a001bd8 <gpioInit+0x1a4>)
1a001a8c:	f7ff fe9e 	bl	1a0017cc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001a90:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001a92:	b004      	add	sp, #16
1a001a94:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001a96:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001aa2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001aa6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001aaa:	494c      	ldr	r1, [pc, #304]	; (1a001bdc <gpioInit+0x1a8>)
1a001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001ab0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001ab4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ab8:	2001      	movs	r0, #1
1a001aba:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001abe:	4c46      	ldr	r4, [pc, #280]	; (1a001bd8 <gpioInit+0x1a4>)
1a001ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001ac4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001ac8:	ea22 0201 	bic.w	r2, r2, r1
1a001acc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001ad0:	e7df      	b.n	1a001a92 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001ad2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ad6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ada:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001ade:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001ae2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001ae6:	493d      	ldr	r1, [pc, #244]	; (1a001bdc <gpioInit+0x1a8>)
1a001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001aec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001af0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001af4:	2001      	movs	r0, #1
1a001af6:	fa00 f102 	lsl.w	r1, r0, r2
1a001afa:	4c37      	ldr	r4, [pc, #220]	; (1a001bd8 <gpioInit+0x1a4>)
1a001afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001b00:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001b04:	ea22 0201 	bic.w	r2, r2, r1
1a001b08:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001b0c:	e7c1      	b.n	1a001a92 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001b0e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b12:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b16:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b1a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001b1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b22:	492e      	ldr	r1, [pc, #184]	; (1a001bdc <gpioInit+0x1a8>)
1a001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001b28:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b2c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001b30:	2001      	movs	r0, #1
1a001b32:	fa00 f102 	lsl.w	r1, r0, r2
1a001b36:	4c28      	ldr	r4, [pc, #160]	; (1a001bd8 <gpioInit+0x1a4>)
1a001b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001b3c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001b40:	ea22 0201 	bic.w	r2, r2, r1
1a001b44:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001b48:	e7a3      	b.n	1a001a92 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001b4a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b52:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b56:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001b5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b5e:	491f      	ldr	r1, [pc, #124]	; (1a001bdc <gpioInit+0x1a8>)
1a001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001b64:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b68:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001b6c:	2001      	movs	r0, #1
1a001b6e:	fa00 f102 	lsl.w	r1, r0, r2
1a001b72:	4c19      	ldr	r4, [pc, #100]	; (1a001bd8 <gpioInit+0x1a4>)
1a001b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001b78:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001b7c:	ea22 0201 	bic.w	r2, r2, r1
1a001b80:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001b84:	e785      	b.n	1a001a92 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001b86:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b8e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b92:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001b96:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b9a:	4910      	ldr	r1, [pc, #64]	; (1a001bdc <gpioInit+0x1a8>)
1a001b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001ba0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001ba4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ba8:	2001      	movs	r0, #1
1a001baa:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001bae:	4b0a      	ldr	r3, [pc, #40]	; (1a001bd8 <gpioInit+0x1a4>)
1a001bb0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001bb4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001bb8:	4331      	orrs	r1, r6
1a001bba:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001bbe:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001bc0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001bc4:	2100      	movs	r1, #0
1a001bc6:	5499      	strb	r1, [r3, r2]
1a001bc8:	e763      	b.n	1a001a92 <gpioInit+0x5e>
	  return FALSE;
1a001bca:	2000      	movs	r0, #0
1a001bcc:	4770      	bx	lr
	  return FALSE;
1a001bce:	2000      	movs	r0, #0
}
1a001bd0:	4770      	bx	lr
      ret_val = 0;
1a001bd2:	2000      	movs	r0, #0
1a001bd4:	e75d      	b.n	1a001a92 <gpioInit+0x5e>
1a001bd6:	bf00      	nop
1a001bd8:	400f4000 	.word	0x400f4000
1a001bdc:	40086000 	.word	0x40086000

1a001be0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001be0:	f110 0f02 	cmn.w	r0, #2
1a001be4:	d02d      	beq.n	1a001c42 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001be6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001bea:	d02c      	beq.n	1a001c46 <gpioWrite+0x66>
{
1a001bec:	b510      	push	{r4, lr}
1a001bee:	b084      	sub	sp, #16
1a001bf0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001bf2:	2300      	movs	r3, #0
1a001bf4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001bf8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001bfc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001c00:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001c04:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001c08:	f10d 030b 	add.w	r3, sp, #11
1a001c0c:	9301      	str	r3, [sp, #4]
1a001c0e:	ab03      	add	r3, sp, #12
1a001c10:	9300      	str	r3, [sp, #0]
1a001c12:	f10d 030d 	add.w	r3, sp, #13
1a001c16:	f10d 020e 	add.w	r2, sp, #14
1a001c1a:	f10d 010f 	add.w	r1, sp, #15
1a001c1e:	f7ff feef 	bl	1a001a00 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001c22:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c26:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001c2a:	1c21      	adds	r1, r4, #0
1a001c2c:	bf18      	it	ne
1a001c2e:	2101      	movne	r1, #1
1a001c30:	015b      	lsls	r3, r3, #5
1a001c32:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001c36:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001c3a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001c3c:	2001      	movs	r0, #1
}
1a001c3e:	b004      	add	sp, #16
1a001c40:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001c42:	2000      	movs	r0, #0
1a001c44:	4770      	bx	lr
	  return FALSE;
1a001c46:	2000      	movs	r0, #0
}
1a001c48:	4770      	bx	lr

1a001c4a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a001c4a:	f110 0f02 	cmn.w	r0, #2
1a001c4e:	d02c      	beq.n	1a001caa <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001c50:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001c54:	d02b      	beq.n	1a001cae <gpioRead+0x64>
{
1a001c56:	b500      	push	{lr}
1a001c58:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001c5a:	2300      	movs	r3, #0
1a001c5c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001c60:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001c64:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001c68:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001c6c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001c70:	f10d 030b 	add.w	r3, sp, #11
1a001c74:	9301      	str	r3, [sp, #4]
1a001c76:	ab03      	add	r3, sp, #12
1a001c78:	9300      	str	r3, [sp, #0]
1a001c7a:	f10d 030d 	add.w	r3, sp, #13
1a001c7e:	f10d 020e 	add.w	r2, sp, #14
1a001c82:	f10d 010f 	add.w	r1, sp, #15
1a001c86:	f7ff febb 	bl	1a001a00 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001c8a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001c8e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001c92:	015b      	lsls	r3, r3, #5
1a001c94:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001c98:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001c9c:	5c98      	ldrb	r0, [r3, r2]
1a001c9e:	3000      	adds	r0, #0
1a001ca0:	bf18      	it	ne
1a001ca2:	2001      	movne	r0, #1

   return ret_val;
}
1a001ca4:	b005      	add	sp, #20
1a001ca6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a001caa:	2001      	movs	r0, #1
1a001cac:	4770      	bx	lr
      return FALSE;
1a001cae:	2000      	movs	r0, #0
}
1a001cb0:	4770      	bx	lr
1a001cb2:	Address 0x000000001a001cb2 is out of bounds.


1a001cb4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001cb4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001cb6:	4b04      	ldr	r3, [pc, #16]	; (1a001cc8 <USB0_IRQHandler+0x14>)
1a001cb8:	681b      	ldr	r3, [r3, #0]
1a001cba:	681b      	ldr	r3, [r3, #0]
1a001cbc:	68db      	ldr	r3, [r3, #12]
1a001cbe:	4a03      	ldr	r2, [pc, #12]	; (1a001ccc <USB0_IRQHandler+0x18>)
1a001cc0:	6810      	ldr	r0, [r2, #0]
1a001cc2:	4798      	blx	r3
}
1a001cc4:	bd08      	pop	{r3, pc}
1a001cc6:	bf00      	nop
1a001cc8:	10000b00 	.word	0x10000b00
1a001ccc:	10000ac4 	.word	0x10000ac4

1a001cd0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001cd0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001cd2:	f7ff f9ff 	bl	1a0010d4 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001cd6:	4b1a      	ldr	r3, [pc, #104]	; (1a001d40 <boardInit+0x70>)
1a001cd8:	6818      	ldr	r0, [r3, #0]
1a001cda:	f7ff fdef 	bl	1a0018bc <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001cde:	2001      	movs	r0, #1
1a001ce0:	2100      	movs	r1, #0
1a001ce2:	f7ff fe39 	bl	1a001958 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001ce6:	2105      	movs	r1, #5
1a001ce8:	2000      	movs	r0, #0
1a001cea:	f7ff fea3 	bl	1a001a34 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001cee:	2100      	movs	r1, #0
1a001cf0:	2024      	movs	r0, #36	; 0x24
1a001cf2:	f7ff fe9f 	bl	1a001a34 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001cf6:	2100      	movs	r1, #0
1a001cf8:	2025      	movs	r0, #37	; 0x25
1a001cfa:	f7ff fe9b 	bl	1a001a34 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001cfe:	2100      	movs	r1, #0
1a001d00:	2026      	movs	r0, #38	; 0x26
1a001d02:	f7ff fe97 	bl	1a001a34 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001d06:	2100      	movs	r1, #0
1a001d08:	2027      	movs	r0, #39	; 0x27
1a001d0a:	f7ff fe93 	bl	1a001a34 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001d0e:	2101      	movs	r1, #1
1a001d10:	2028      	movs	r0, #40	; 0x28
1a001d12:	f7ff fe8f 	bl	1a001a34 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001d16:	2101      	movs	r1, #1
1a001d18:	2029      	movs	r0, #41	; 0x29
1a001d1a:	f7ff fe8b 	bl	1a001a34 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001d1e:	2101      	movs	r1, #1
1a001d20:	202a      	movs	r0, #42	; 0x2a
1a001d22:	f7ff fe87 	bl	1a001a34 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001d26:	2101      	movs	r1, #1
1a001d28:	202b      	movs	r0, #43	; 0x2b
1a001d2a:	f7ff fe83 	bl	1a001a34 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001d2e:	2101      	movs	r1, #1
1a001d30:	202c      	movs	r0, #44	; 0x2c
1a001d32:	f7ff fe7f 	bl	1a001a34 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001d36:	2101      	movs	r1, #1
1a001d38:	202d      	movs	r0, #45	; 0x2d
1a001d3a:	f7ff fe7b 	bl	1a001a34 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001d3e:	bd08      	pop	{r3, pc}
1a001d40:	10000afc 	.word	0x10000afc

1a001d44 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001d44:	b510      	push	{r4, lr}
1a001d46:	4604      	mov	r4, r0
1a001d48:	4610      	mov	r0, r2
1a001d4a:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001d4c:	4b04      	ldr	r3, [pc, #16]	; (1a001d60 <delayInit+0x1c>)
1a001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001d52:	f000 fcbb 	bl	1a0026cc <__aeabi_uldivmod>
1a001d56:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001d5a:	2300      	movs	r3, #0
1a001d5c:	7423      	strb	r3, [r4, #16]
}
1a001d5e:	bd10      	pop	{r4, pc}
1a001d60:	10000040 	.word	0x10000040

1a001d64 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d66:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001d68:	7c05      	ldrb	r5, [r0, #16]
1a001d6a:	b93d      	cbnz	r5, 1a001d7c <delayRead+0x18>
      delay->startTime = tickRead();
1a001d6c:	f7ff fde2 	bl	1a001934 <tickRead>
1a001d70:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001d74:	2301      	movs	r3, #1
1a001d76:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001d78:	4628      	mov	r0, r5
1a001d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001d7c:	f7ff fdda 	bl	1a001934 <tickRead>
1a001d80:	6823      	ldr	r3, [r4, #0]
1a001d82:	6862      	ldr	r2, [r4, #4]
1a001d84:	1ac6      	subs	r6, r0, r3
1a001d86:	eb61 0702 	sbc.w	r7, r1, r2
1a001d8a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001d8e:	429f      	cmp	r7, r3
1a001d90:	bf08      	it	eq
1a001d92:	4296      	cmpeq	r6, r2
1a001d94:	d303      	bcc.n	1a001d9e <delayRead+0x3a>
         delay->running = 0;
1a001d96:	2300      	movs	r3, #0
1a001d98:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a001d9a:	2501      	movs	r5, #1
1a001d9c:	e7ec      	b.n	1a001d78 <delayRead+0x14>
   bool_t timeArrived = 0;
1a001d9e:	2500      	movs	r5, #0
1a001da0:	e7ea      	b.n	1a001d78 <delayRead+0x14>
1a001da2:	Address 0x000000001a001da2 is out of bounds.


1a001da4 <__aeabi_drsub>:
1a001da4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a001da8:	e002      	b.n	1a001db0 <__adddf3>
1a001daa:	bf00      	nop

1a001dac <__aeabi_dsub>:
1a001dac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a001db0 <__adddf3>:
1a001db0:	b530      	push	{r4, r5, lr}
1a001db2:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a001db6:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a001dba:	ea94 0f05 	teq	r4, r5
1a001dbe:	bf08      	it	eq
1a001dc0:	ea90 0f02 	teqeq	r0, r2
1a001dc4:	bf1f      	itttt	ne
1a001dc6:	ea54 0c00 	orrsne.w	ip, r4, r0
1a001dca:	ea55 0c02 	orrsne.w	ip, r5, r2
1a001dce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a001dd2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001dd6:	f000 80e2 	beq.w	1a001f9e <__adddf3+0x1ee>
1a001dda:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a001dde:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a001de2:	bfb8      	it	lt
1a001de4:	426d      	neglt	r5, r5
1a001de6:	dd0c      	ble.n	1a001e02 <__adddf3+0x52>
1a001de8:	442c      	add	r4, r5
1a001dea:	ea80 0202 	eor.w	r2, r0, r2
1a001dee:	ea81 0303 	eor.w	r3, r1, r3
1a001df2:	ea82 0000 	eor.w	r0, r2, r0
1a001df6:	ea83 0101 	eor.w	r1, r3, r1
1a001dfa:	ea80 0202 	eor.w	r2, r0, r2
1a001dfe:	ea81 0303 	eor.w	r3, r1, r3
1a001e02:	2d36      	cmp	r5, #54	; 0x36
1a001e04:	bf88      	it	hi
1a001e06:	bd30      	pophi	{r4, r5, pc}
1a001e08:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a001e0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001e10:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a001e14:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a001e18:	d002      	beq.n	1a001e20 <__adddf3+0x70>
1a001e1a:	4240      	negs	r0, r0
1a001e1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001e20:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a001e24:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001e28:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a001e2c:	d002      	beq.n	1a001e34 <__adddf3+0x84>
1a001e2e:	4252      	negs	r2, r2
1a001e30:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a001e34:	ea94 0f05 	teq	r4, r5
1a001e38:	f000 80a7 	beq.w	1a001f8a <__adddf3+0x1da>
1a001e3c:	f1a4 0401 	sub.w	r4, r4, #1
1a001e40:	f1d5 0e20 	rsbs	lr, r5, #32
1a001e44:	db0d      	blt.n	1a001e62 <__adddf3+0xb2>
1a001e46:	fa02 fc0e 	lsl.w	ip, r2, lr
1a001e4a:	fa22 f205 	lsr.w	r2, r2, r5
1a001e4e:	1880      	adds	r0, r0, r2
1a001e50:	f141 0100 	adc.w	r1, r1, #0
1a001e54:	fa03 f20e 	lsl.w	r2, r3, lr
1a001e58:	1880      	adds	r0, r0, r2
1a001e5a:	fa43 f305 	asr.w	r3, r3, r5
1a001e5e:	4159      	adcs	r1, r3
1a001e60:	e00e      	b.n	1a001e80 <__adddf3+0xd0>
1a001e62:	f1a5 0520 	sub.w	r5, r5, #32
1a001e66:	f10e 0e20 	add.w	lr, lr, #32
1a001e6a:	2a01      	cmp	r2, #1
1a001e6c:	fa03 fc0e 	lsl.w	ip, r3, lr
1a001e70:	bf28      	it	cs
1a001e72:	f04c 0c02 	orrcs.w	ip, ip, #2
1a001e76:	fa43 f305 	asr.w	r3, r3, r5
1a001e7a:	18c0      	adds	r0, r0, r3
1a001e7c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a001e80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001e84:	d507      	bpl.n	1a001e96 <__adddf3+0xe6>
1a001e86:	f04f 0e00 	mov.w	lr, #0
1a001e8a:	f1dc 0c00 	rsbs	ip, ip, #0
1a001e8e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a001e92:	eb6e 0101 	sbc.w	r1, lr, r1
1a001e96:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a001e9a:	d31b      	bcc.n	1a001ed4 <__adddf3+0x124>
1a001e9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a001ea0:	d30c      	bcc.n	1a001ebc <__adddf3+0x10c>
1a001ea2:	0849      	lsrs	r1, r1, #1
1a001ea4:	ea5f 0030 	movs.w	r0, r0, rrx
1a001ea8:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a001eac:	f104 0401 	add.w	r4, r4, #1
1a001eb0:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a001eb4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a001eb8:	f080 809a 	bcs.w	1a001ff0 <__adddf3+0x240>
1a001ebc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a001ec0:	bf08      	it	eq
1a001ec2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001ec6:	f150 0000 	adcs.w	r0, r0, #0
1a001eca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001ece:	ea41 0105 	orr.w	r1, r1, r5
1a001ed2:	bd30      	pop	{r4, r5, pc}
1a001ed4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a001ed8:	4140      	adcs	r0, r0
1a001eda:	eb41 0101 	adc.w	r1, r1, r1
1a001ede:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001ee2:	f1a4 0401 	sub.w	r4, r4, #1
1a001ee6:	d1e9      	bne.n	1a001ebc <__adddf3+0x10c>
1a001ee8:	f091 0f00 	teq	r1, #0
1a001eec:	bf04      	itt	eq
1a001eee:	4601      	moveq	r1, r0
1a001ef0:	2000      	moveq	r0, #0
1a001ef2:	fab1 f381 	clz	r3, r1
1a001ef6:	bf08      	it	eq
1a001ef8:	3320      	addeq	r3, #32
1a001efa:	f1a3 030b 	sub.w	r3, r3, #11
1a001efe:	f1b3 0220 	subs.w	r2, r3, #32
1a001f02:	da0c      	bge.n	1a001f1e <__adddf3+0x16e>
1a001f04:	320c      	adds	r2, #12
1a001f06:	dd08      	ble.n	1a001f1a <__adddf3+0x16a>
1a001f08:	f102 0c14 	add.w	ip, r2, #20
1a001f0c:	f1c2 020c 	rsb	r2, r2, #12
1a001f10:	fa01 f00c 	lsl.w	r0, r1, ip
1a001f14:	fa21 f102 	lsr.w	r1, r1, r2
1a001f18:	e00c      	b.n	1a001f34 <__adddf3+0x184>
1a001f1a:	f102 0214 	add.w	r2, r2, #20
1a001f1e:	bfd8      	it	le
1a001f20:	f1c2 0c20 	rsble	ip, r2, #32
1a001f24:	fa01 f102 	lsl.w	r1, r1, r2
1a001f28:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001f2c:	bfdc      	itt	le
1a001f2e:	ea41 010c 	orrle.w	r1, r1, ip
1a001f32:	4090      	lslle	r0, r2
1a001f34:	1ae4      	subs	r4, r4, r3
1a001f36:	bfa2      	ittt	ge
1a001f38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a001f3c:	4329      	orrge	r1, r5
1a001f3e:	bd30      	popge	{r4, r5, pc}
1a001f40:	ea6f 0404 	mvn.w	r4, r4
1a001f44:	3c1f      	subs	r4, #31
1a001f46:	da1c      	bge.n	1a001f82 <__adddf3+0x1d2>
1a001f48:	340c      	adds	r4, #12
1a001f4a:	dc0e      	bgt.n	1a001f6a <__adddf3+0x1ba>
1a001f4c:	f104 0414 	add.w	r4, r4, #20
1a001f50:	f1c4 0220 	rsb	r2, r4, #32
1a001f54:	fa20 f004 	lsr.w	r0, r0, r4
1a001f58:	fa01 f302 	lsl.w	r3, r1, r2
1a001f5c:	ea40 0003 	orr.w	r0, r0, r3
1a001f60:	fa21 f304 	lsr.w	r3, r1, r4
1a001f64:	ea45 0103 	orr.w	r1, r5, r3
1a001f68:	bd30      	pop	{r4, r5, pc}
1a001f6a:	f1c4 040c 	rsb	r4, r4, #12
1a001f6e:	f1c4 0220 	rsb	r2, r4, #32
1a001f72:	fa20 f002 	lsr.w	r0, r0, r2
1a001f76:	fa01 f304 	lsl.w	r3, r1, r4
1a001f7a:	ea40 0003 	orr.w	r0, r0, r3
1a001f7e:	4629      	mov	r1, r5
1a001f80:	bd30      	pop	{r4, r5, pc}
1a001f82:	fa21 f004 	lsr.w	r0, r1, r4
1a001f86:	4629      	mov	r1, r5
1a001f88:	bd30      	pop	{r4, r5, pc}
1a001f8a:	f094 0f00 	teq	r4, #0
1a001f8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a001f92:	bf06      	itte	eq
1a001f94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a001f98:	3401      	addeq	r4, #1
1a001f9a:	3d01      	subne	r5, #1
1a001f9c:	e74e      	b.n	1a001e3c <__adddf3+0x8c>
1a001f9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001fa2:	bf18      	it	ne
1a001fa4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001fa8:	d029      	beq.n	1a001ffe <__adddf3+0x24e>
1a001faa:	ea94 0f05 	teq	r4, r5
1a001fae:	bf08      	it	eq
1a001fb0:	ea90 0f02 	teqeq	r0, r2
1a001fb4:	d005      	beq.n	1a001fc2 <__adddf3+0x212>
1a001fb6:	ea54 0c00 	orrs.w	ip, r4, r0
1a001fba:	bf04      	itt	eq
1a001fbc:	4619      	moveq	r1, r3
1a001fbe:	4610      	moveq	r0, r2
1a001fc0:	bd30      	pop	{r4, r5, pc}
1a001fc2:	ea91 0f03 	teq	r1, r3
1a001fc6:	bf1e      	ittt	ne
1a001fc8:	2100      	movne	r1, #0
1a001fca:	2000      	movne	r0, #0
1a001fcc:	bd30      	popne	{r4, r5, pc}
1a001fce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a001fd2:	d105      	bne.n	1a001fe0 <__adddf3+0x230>
1a001fd4:	0040      	lsls	r0, r0, #1
1a001fd6:	4149      	adcs	r1, r1
1a001fd8:	bf28      	it	cs
1a001fda:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a001fde:	bd30      	pop	{r4, r5, pc}
1a001fe0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a001fe4:	bf3c      	itt	cc
1a001fe6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a001fea:	bd30      	popcc	{r4, r5, pc}
1a001fec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001ff0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a001ff4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001ff8:	f04f 0000 	mov.w	r0, #0
1a001ffc:	bd30      	pop	{r4, r5, pc}
1a001ffe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002002:	bf1a      	itte	ne
1a002004:	4619      	movne	r1, r3
1a002006:	4610      	movne	r0, r2
1a002008:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a00200c:	bf1c      	itt	ne
1a00200e:	460b      	movne	r3, r1
1a002010:	4602      	movne	r2, r0
1a002012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002016:	bf06      	itte	eq
1a002018:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a00201c:	ea91 0f03 	teqeq	r1, r3
1a002020:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002024:	bd30      	pop	{r4, r5, pc}
1a002026:	bf00      	nop

1a002028 <__aeabi_ui2d>:
1a002028:	f090 0f00 	teq	r0, #0
1a00202c:	bf04      	itt	eq
1a00202e:	2100      	moveq	r1, #0
1a002030:	4770      	bxeq	lr
1a002032:	b530      	push	{r4, r5, lr}
1a002034:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002038:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00203c:	f04f 0500 	mov.w	r5, #0
1a002040:	f04f 0100 	mov.w	r1, #0
1a002044:	e750      	b.n	1a001ee8 <__adddf3+0x138>
1a002046:	bf00      	nop

1a002048 <__aeabi_i2d>:
1a002048:	f090 0f00 	teq	r0, #0
1a00204c:	bf04      	itt	eq
1a00204e:	2100      	moveq	r1, #0
1a002050:	4770      	bxeq	lr
1a002052:	b530      	push	{r4, r5, lr}
1a002054:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002058:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00205c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002060:	bf48      	it	mi
1a002062:	4240      	negmi	r0, r0
1a002064:	f04f 0100 	mov.w	r1, #0
1a002068:	e73e      	b.n	1a001ee8 <__adddf3+0x138>
1a00206a:	bf00      	nop

1a00206c <__aeabi_f2d>:
1a00206c:	0042      	lsls	r2, r0, #1
1a00206e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002072:	ea4f 0131 	mov.w	r1, r1, rrx
1a002076:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00207a:	bf1f      	itttt	ne
1a00207c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002080:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002084:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002088:	4770      	bxne	lr
1a00208a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a00208e:	bf08      	it	eq
1a002090:	4770      	bxeq	lr
1a002092:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a002096:	bf04      	itt	eq
1a002098:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a00209c:	4770      	bxeq	lr
1a00209e:	b530      	push	{r4, r5, lr}
1a0020a0:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0020a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0020a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0020ac:	e71c      	b.n	1a001ee8 <__adddf3+0x138>
1a0020ae:	bf00      	nop

1a0020b0 <__aeabi_ul2d>:
1a0020b0:	ea50 0201 	orrs.w	r2, r0, r1
1a0020b4:	bf08      	it	eq
1a0020b6:	4770      	bxeq	lr
1a0020b8:	b530      	push	{r4, r5, lr}
1a0020ba:	f04f 0500 	mov.w	r5, #0
1a0020be:	e00a      	b.n	1a0020d6 <__aeabi_l2d+0x16>

1a0020c0 <__aeabi_l2d>:
1a0020c0:	ea50 0201 	orrs.w	r2, r0, r1
1a0020c4:	bf08      	it	eq
1a0020c6:	4770      	bxeq	lr
1a0020c8:	b530      	push	{r4, r5, lr}
1a0020ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0020ce:	d502      	bpl.n	1a0020d6 <__aeabi_l2d+0x16>
1a0020d0:	4240      	negs	r0, r0
1a0020d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0020d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0020da:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0020de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0020e2:	f43f aed8 	beq.w	1a001e96 <__adddf3+0xe6>
1a0020e6:	f04f 0203 	mov.w	r2, #3
1a0020ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0020ee:	bf18      	it	ne
1a0020f0:	3203      	addne	r2, #3
1a0020f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0020f6:	bf18      	it	ne
1a0020f8:	3203      	addne	r2, #3
1a0020fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0020fe:	f1c2 0320 	rsb	r3, r2, #32
1a002102:	fa00 fc03 	lsl.w	ip, r0, r3
1a002106:	fa20 f002 	lsr.w	r0, r0, r2
1a00210a:	fa01 fe03 	lsl.w	lr, r1, r3
1a00210e:	ea40 000e 	orr.w	r0, r0, lr
1a002112:	fa21 f102 	lsr.w	r1, r1, r2
1a002116:	4414      	add	r4, r2
1a002118:	e6bd      	b.n	1a001e96 <__adddf3+0xe6>
1a00211a:	bf00      	nop

1a00211c <__aeabi_dmul>:
1a00211c:	b570      	push	{r4, r5, r6, lr}
1a00211e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00212a:	bf1d      	ittte	ne
1a00212c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002130:	ea94 0f0c 	teqne	r4, ip
1a002134:	ea95 0f0c 	teqne	r5, ip
1a002138:	f000 f8de 	bleq	1a0022f8 <__aeabi_dmul+0x1dc>
1a00213c:	442c      	add	r4, r5
1a00213e:	ea81 0603 	eor.w	r6, r1, r3
1a002142:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002146:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a00214a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a00214e:	bf18      	it	ne
1a002150:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00215c:	d038      	beq.n	1a0021d0 <__aeabi_dmul+0xb4>
1a00215e:	fba0 ce02 	umull	ip, lr, r0, r2
1a002162:	f04f 0500 	mov.w	r5, #0
1a002166:	fbe1 e502 	umlal	lr, r5, r1, r2
1a00216a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a00216e:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002172:	f04f 0600 	mov.w	r6, #0
1a002176:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00217a:	f09c 0f00 	teq	ip, #0
1a00217e:	bf18      	it	ne
1a002180:	f04e 0e01 	orrne.w	lr, lr, #1
1a002184:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002188:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a00218c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002190:	d204      	bcs.n	1a00219c <__aeabi_dmul+0x80>
1a002192:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002196:	416d      	adcs	r5, r5
1a002198:	eb46 0606 	adc.w	r6, r6, r6
1a00219c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0021a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0021a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0021a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0021ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0021b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0021b4:	bf88      	it	hi
1a0021b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0021ba:	d81e      	bhi.n	1a0021fa <__aeabi_dmul+0xde>
1a0021bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0021c0:	bf08      	it	eq
1a0021c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0021c6:	f150 0000 	adcs.w	r0, r0, #0
1a0021ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0021ce:	bd70      	pop	{r4, r5, r6, pc}
1a0021d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0021d4:	ea46 0101 	orr.w	r1, r6, r1
1a0021d8:	ea40 0002 	orr.w	r0, r0, r2
1a0021dc:	ea81 0103 	eor.w	r1, r1, r3
1a0021e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a0021e4:	bfc2      	ittt	gt
1a0021e6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0021ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0021ee:	bd70      	popgt	{r4, r5, r6, pc}
1a0021f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0021f4:	f04f 0e00 	mov.w	lr, #0
1a0021f8:	3c01      	subs	r4, #1
1a0021fa:	f300 80ab 	bgt.w	1a002354 <__aeabi_dmul+0x238>
1a0021fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002202:	bfde      	ittt	le
1a002204:	2000      	movle	r0, #0
1a002206:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a00220a:	bd70      	pople	{r4, r5, r6, pc}
1a00220c:	f1c4 0400 	rsb	r4, r4, #0
1a002210:	3c20      	subs	r4, #32
1a002212:	da35      	bge.n	1a002280 <__aeabi_dmul+0x164>
1a002214:	340c      	adds	r4, #12
1a002216:	dc1b      	bgt.n	1a002250 <__aeabi_dmul+0x134>
1a002218:	f104 0414 	add.w	r4, r4, #20
1a00221c:	f1c4 0520 	rsb	r5, r4, #32
1a002220:	fa00 f305 	lsl.w	r3, r0, r5
1a002224:	fa20 f004 	lsr.w	r0, r0, r4
1a002228:	fa01 f205 	lsl.w	r2, r1, r5
1a00222c:	ea40 0002 	orr.w	r0, r0, r2
1a002230:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a00223c:	fa21 f604 	lsr.w	r6, r1, r4
1a002240:	eb42 0106 	adc.w	r1, r2, r6
1a002244:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002248:	bf08      	it	eq
1a00224a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00224e:	bd70      	pop	{r4, r5, r6, pc}
1a002250:	f1c4 040c 	rsb	r4, r4, #12
1a002254:	f1c4 0520 	rsb	r5, r4, #32
1a002258:	fa00 f304 	lsl.w	r3, r0, r4
1a00225c:	fa20 f005 	lsr.w	r0, r0, r5
1a002260:	fa01 f204 	lsl.w	r2, r1, r4
1a002264:	ea40 0002 	orr.w	r0, r0, r2
1a002268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00226c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002270:	f141 0100 	adc.w	r1, r1, #0
1a002274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002278:	bf08      	it	eq
1a00227a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00227e:	bd70      	pop	{r4, r5, r6, pc}
1a002280:	f1c4 0520 	rsb	r5, r4, #32
1a002284:	fa00 f205 	lsl.w	r2, r0, r5
1a002288:	ea4e 0e02 	orr.w	lr, lr, r2
1a00228c:	fa20 f304 	lsr.w	r3, r0, r4
1a002290:	fa01 f205 	lsl.w	r2, r1, r5
1a002294:	ea43 0302 	orr.w	r3, r3, r2
1a002298:	fa21 f004 	lsr.w	r0, r1, r4
1a00229c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0022a0:	fa21 f204 	lsr.w	r2, r1, r4
1a0022a4:	ea20 0002 	bic.w	r0, r0, r2
1a0022a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0022ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0022b0:	bf08      	it	eq
1a0022b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0022b6:	bd70      	pop	{r4, r5, r6, pc}
1a0022b8:	f094 0f00 	teq	r4, #0
1a0022bc:	d10f      	bne.n	1a0022de <__aeabi_dmul+0x1c2>
1a0022be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0022c2:	0040      	lsls	r0, r0, #1
1a0022c4:	eb41 0101 	adc.w	r1, r1, r1
1a0022c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0022cc:	bf08      	it	eq
1a0022ce:	3c01      	subeq	r4, #1
1a0022d0:	d0f7      	beq.n	1a0022c2 <__aeabi_dmul+0x1a6>
1a0022d2:	ea41 0106 	orr.w	r1, r1, r6
1a0022d6:	f095 0f00 	teq	r5, #0
1a0022da:	bf18      	it	ne
1a0022dc:	4770      	bxne	lr
1a0022de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0022e2:	0052      	lsls	r2, r2, #1
1a0022e4:	eb43 0303 	adc.w	r3, r3, r3
1a0022e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0022ec:	bf08      	it	eq
1a0022ee:	3d01      	subeq	r5, #1
1a0022f0:	d0f7      	beq.n	1a0022e2 <__aeabi_dmul+0x1c6>
1a0022f2:	ea43 0306 	orr.w	r3, r3, r6
1a0022f6:	4770      	bx	lr
1a0022f8:	ea94 0f0c 	teq	r4, ip
1a0022fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002300:	bf18      	it	ne
1a002302:	ea95 0f0c 	teqne	r5, ip
1a002306:	d00c      	beq.n	1a002322 <__aeabi_dmul+0x206>
1a002308:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00230c:	bf18      	it	ne
1a00230e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002312:	d1d1      	bne.n	1a0022b8 <__aeabi_dmul+0x19c>
1a002314:	ea81 0103 	eor.w	r1, r1, r3
1a002318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00231c:	f04f 0000 	mov.w	r0, #0
1a002320:	bd70      	pop	{r4, r5, r6, pc}
1a002322:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002326:	bf06      	itte	eq
1a002328:	4610      	moveq	r0, r2
1a00232a:	4619      	moveq	r1, r3
1a00232c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002330:	d019      	beq.n	1a002366 <__aeabi_dmul+0x24a>
1a002332:	ea94 0f0c 	teq	r4, ip
1a002336:	d102      	bne.n	1a00233e <__aeabi_dmul+0x222>
1a002338:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a00233c:	d113      	bne.n	1a002366 <__aeabi_dmul+0x24a>
1a00233e:	ea95 0f0c 	teq	r5, ip
1a002342:	d105      	bne.n	1a002350 <__aeabi_dmul+0x234>
1a002344:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002348:	bf1c      	itt	ne
1a00234a:	4610      	movne	r0, r2
1a00234c:	4619      	movne	r1, r3
1a00234e:	d10a      	bne.n	1a002366 <__aeabi_dmul+0x24a>
1a002350:	ea81 0103 	eor.w	r1, r1, r3
1a002354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002358:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00235c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002360:	f04f 0000 	mov.w	r0, #0
1a002364:	bd70      	pop	{r4, r5, r6, pc}
1a002366:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00236a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a00236e:	bd70      	pop	{r4, r5, r6, pc}

1a002370 <__aeabi_ddiv>:
1a002370:	b570      	push	{r4, r5, r6, lr}
1a002372:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002376:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00237a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00237e:	bf1d      	ittte	ne
1a002380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002384:	ea94 0f0c 	teqne	r4, ip
1a002388:	ea95 0f0c 	teqne	r5, ip
1a00238c:	f000 f8a7 	bleq	1a0024de <__aeabi_ddiv+0x16e>
1a002390:	eba4 0405 	sub.w	r4, r4, r5
1a002394:	ea81 0e03 	eor.w	lr, r1, r3
1a002398:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00239c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0023a0:	f000 8088 	beq.w	1a0024b4 <__aeabi_ddiv+0x144>
1a0023a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0023a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0023ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0023b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0023b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0023b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0023bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0023c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0023c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0023c8:	429d      	cmp	r5, r3
1a0023ca:	bf08      	it	eq
1a0023cc:	4296      	cmpeq	r6, r2
1a0023ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0023d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0023d6:	d202      	bcs.n	1a0023de <__aeabi_ddiv+0x6e>
1a0023d8:	085b      	lsrs	r3, r3, #1
1a0023da:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023de:	1ab6      	subs	r6, r6, r2
1a0023e0:	eb65 0503 	sbc.w	r5, r5, r3
1a0023e4:	085b      	lsrs	r3, r3, #1
1a0023e6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0023ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0023ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0023f2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0023f6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0023fa:	bf22      	ittt	cs
1a0023fc:	1ab6      	subcs	r6, r6, r2
1a0023fe:	4675      	movcs	r5, lr
1a002400:	ea40 000c 	orrcs.w	r0, r0, ip
1a002404:	085b      	lsrs	r3, r3, #1
1a002406:	ea4f 0232 	mov.w	r2, r2, rrx
1a00240a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00240e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002412:	bf22      	ittt	cs
1a002414:	1ab6      	subcs	r6, r6, r2
1a002416:	4675      	movcs	r5, lr
1a002418:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a00241c:	085b      	lsrs	r3, r3, #1
1a00241e:	ea4f 0232 	mov.w	r2, r2, rrx
1a002422:	ebb6 0e02 	subs.w	lr, r6, r2
1a002426:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00242a:	bf22      	ittt	cs
1a00242c:	1ab6      	subcs	r6, r6, r2
1a00242e:	4675      	movcs	r5, lr
1a002430:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002434:	085b      	lsrs	r3, r3, #1
1a002436:	ea4f 0232 	mov.w	r2, r2, rrx
1a00243a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00243e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002442:	bf22      	ittt	cs
1a002444:	1ab6      	subcs	r6, r6, r2
1a002446:	4675      	movcs	r5, lr
1a002448:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a00244c:	ea55 0e06 	orrs.w	lr, r5, r6
1a002450:	d018      	beq.n	1a002484 <__aeabi_ddiv+0x114>
1a002452:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002456:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a00245a:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a00245e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002462:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002466:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a00246a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a00246e:	d1c0      	bne.n	1a0023f2 <__aeabi_ddiv+0x82>
1a002470:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002474:	d10b      	bne.n	1a00248e <__aeabi_ddiv+0x11e>
1a002476:	ea41 0100 	orr.w	r1, r1, r0
1a00247a:	f04f 0000 	mov.w	r0, #0
1a00247e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002482:	e7b6      	b.n	1a0023f2 <__aeabi_ddiv+0x82>
1a002484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002488:	bf04      	itt	eq
1a00248a:	4301      	orreq	r1, r0
1a00248c:	2000      	moveq	r0, #0
1a00248e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002492:	bf88      	it	hi
1a002494:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002498:	f63f aeaf 	bhi.w	1a0021fa <__aeabi_dmul+0xde>
1a00249c:	ebb5 0c03 	subs.w	ip, r5, r3
1a0024a0:	bf04      	itt	eq
1a0024a2:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0024a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0024aa:	f150 0000 	adcs.w	r0, r0, #0
1a0024ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0024b2:	bd70      	pop	{r4, r5, r6, pc}
1a0024b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0024b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0024bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0024c0:	bfc2      	ittt	gt
1a0024c2:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0024c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0024ca:	bd70      	popgt	{r4, r5, r6, pc}
1a0024cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0024d0:	f04f 0e00 	mov.w	lr, #0
1a0024d4:	3c01      	subs	r4, #1
1a0024d6:	e690      	b.n	1a0021fa <__aeabi_dmul+0xde>
1a0024d8:	ea45 0e06 	orr.w	lr, r5, r6
1a0024dc:	e68d      	b.n	1a0021fa <__aeabi_dmul+0xde>
1a0024de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0024e2:	ea94 0f0c 	teq	r4, ip
1a0024e6:	bf08      	it	eq
1a0024e8:	ea95 0f0c 	teqeq	r5, ip
1a0024ec:	f43f af3b 	beq.w	1a002366 <__aeabi_dmul+0x24a>
1a0024f0:	ea94 0f0c 	teq	r4, ip
1a0024f4:	d10a      	bne.n	1a00250c <__aeabi_ddiv+0x19c>
1a0024f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0024fa:	f47f af34 	bne.w	1a002366 <__aeabi_dmul+0x24a>
1a0024fe:	ea95 0f0c 	teq	r5, ip
1a002502:	f47f af25 	bne.w	1a002350 <__aeabi_dmul+0x234>
1a002506:	4610      	mov	r0, r2
1a002508:	4619      	mov	r1, r3
1a00250a:	e72c      	b.n	1a002366 <__aeabi_dmul+0x24a>
1a00250c:	ea95 0f0c 	teq	r5, ip
1a002510:	d106      	bne.n	1a002520 <__aeabi_ddiv+0x1b0>
1a002512:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002516:	f43f aefd 	beq.w	1a002314 <__aeabi_dmul+0x1f8>
1a00251a:	4610      	mov	r0, r2
1a00251c:	4619      	mov	r1, r3
1a00251e:	e722      	b.n	1a002366 <__aeabi_dmul+0x24a>
1a002520:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002524:	bf18      	it	ne
1a002526:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00252a:	f47f aec5 	bne.w	1a0022b8 <__aeabi_dmul+0x19c>
1a00252e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002532:	f47f af0d 	bne.w	1a002350 <__aeabi_dmul+0x234>
1a002536:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a00253a:	f47f aeeb 	bne.w	1a002314 <__aeabi_dmul+0x1f8>
1a00253e:	e712      	b.n	1a002366 <__aeabi_dmul+0x24a>

1a002540 <__gedf2>:
1a002540:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a002544:	e006      	b.n	1a002554 <__cmpdf2+0x4>
1a002546:	bf00      	nop

1a002548 <__ledf2>:
1a002548:	f04f 0c01 	mov.w	ip, #1
1a00254c:	e002      	b.n	1a002554 <__cmpdf2+0x4>
1a00254e:	bf00      	nop

1a002550 <__cmpdf2>:
1a002550:	f04f 0c01 	mov.w	ip, #1
1a002554:	f84d cd04 	str.w	ip, [sp, #-4]!
1a002558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00255c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002564:	bf18      	it	ne
1a002566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00256a:	d01b      	beq.n	1a0025a4 <__cmpdf2+0x54>
1a00256c:	b001      	add	sp, #4
1a00256e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a002572:	bf0c      	ite	eq
1a002574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a002578:	ea91 0f03 	teqne	r1, r3
1a00257c:	bf02      	ittt	eq
1a00257e:	ea90 0f02 	teqeq	r0, r2
1a002582:	2000      	moveq	r0, #0
1a002584:	4770      	bxeq	lr
1a002586:	f110 0f00 	cmn.w	r0, #0
1a00258a:	ea91 0f03 	teq	r1, r3
1a00258e:	bf58      	it	pl
1a002590:	4299      	cmppl	r1, r3
1a002592:	bf08      	it	eq
1a002594:	4290      	cmpeq	r0, r2
1a002596:	bf2c      	ite	cs
1a002598:	17d8      	asrcs	r0, r3, #31
1a00259a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a00259e:	f040 0001 	orr.w	r0, r0, #1
1a0025a2:	4770      	bx	lr
1a0025a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0025a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0025ac:	d102      	bne.n	1a0025b4 <__cmpdf2+0x64>
1a0025ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a0025b2:	d107      	bne.n	1a0025c4 <__cmpdf2+0x74>
1a0025b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0025b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0025bc:	d1d6      	bne.n	1a00256c <__cmpdf2+0x1c>
1a0025be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0025c2:	d0d3      	beq.n	1a00256c <__cmpdf2+0x1c>
1a0025c4:	f85d 0b04 	ldr.w	r0, [sp], #4
1a0025c8:	4770      	bx	lr
1a0025ca:	bf00      	nop

1a0025cc <__aeabi_cdrcmple>:
1a0025cc:	4684      	mov	ip, r0
1a0025ce:	4610      	mov	r0, r2
1a0025d0:	4662      	mov	r2, ip
1a0025d2:	468c      	mov	ip, r1
1a0025d4:	4619      	mov	r1, r3
1a0025d6:	4663      	mov	r3, ip
1a0025d8:	e000      	b.n	1a0025dc <__aeabi_cdcmpeq>
1a0025da:	bf00      	nop

1a0025dc <__aeabi_cdcmpeq>:
1a0025dc:	b501      	push	{r0, lr}
1a0025de:	f7ff ffb7 	bl	1a002550 <__cmpdf2>
1a0025e2:	2800      	cmp	r0, #0
1a0025e4:	bf48      	it	mi
1a0025e6:	f110 0f00 	cmnmi.w	r0, #0
1a0025ea:	bd01      	pop	{r0, pc}

1a0025ec <__aeabi_dcmpeq>:
1a0025ec:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0025f0:	f7ff fff4 	bl	1a0025dc <__aeabi_cdcmpeq>
1a0025f4:	bf0c      	ite	eq
1a0025f6:	2001      	moveq	r0, #1
1a0025f8:	2000      	movne	r0, #0
1a0025fa:	f85d fb08 	ldr.w	pc, [sp], #8
1a0025fe:	bf00      	nop

1a002600 <__aeabi_dcmplt>:
1a002600:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002604:	f7ff ffea 	bl	1a0025dc <__aeabi_cdcmpeq>
1a002608:	bf34      	ite	cc
1a00260a:	2001      	movcc	r0, #1
1a00260c:	2000      	movcs	r0, #0
1a00260e:	f85d fb08 	ldr.w	pc, [sp], #8
1a002612:	bf00      	nop

1a002614 <__aeabi_dcmple>:
1a002614:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002618:	f7ff ffe0 	bl	1a0025dc <__aeabi_cdcmpeq>
1a00261c:	bf94      	ite	ls
1a00261e:	2001      	movls	r0, #1
1a002620:	2000      	movhi	r0, #0
1a002622:	f85d fb08 	ldr.w	pc, [sp], #8
1a002626:	bf00      	nop

1a002628 <__aeabi_dcmpge>:
1a002628:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00262c:	f7ff ffce 	bl	1a0025cc <__aeabi_cdrcmple>
1a002630:	bf94      	ite	ls
1a002632:	2001      	movls	r0, #1
1a002634:	2000      	movhi	r0, #0
1a002636:	f85d fb08 	ldr.w	pc, [sp], #8
1a00263a:	bf00      	nop

1a00263c <__aeabi_dcmpgt>:
1a00263c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a002640:	f7ff ffc4 	bl	1a0025cc <__aeabi_cdrcmple>
1a002644:	bf34      	ite	cc
1a002646:	2001      	movcc	r0, #1
1a002648:	2000      	movcs	r0, #0
1a00264a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00264e:	bf00      	nop

1a002650 <__aeabi_dcmpun>:
1a002650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a002654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002658:	d102      	bne.n	1a002660 <__aeabi_dcmpun+0x10>
1a00265a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a00265e:	d10a      	bne.n	1a002676 <__aeabi_dcmpun+0x26>
1a002660:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a002664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a002668:	d102      	bne.n	1a002670 <__aeabi_dcmpun+0x20>
1a00266a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a00266e:	d102      	bne.n	1a002676 <__aeabi_dcmpun+0x26>
1a002670:	f04f 0000 	mov.w	r0, #0
1a002674:	4770      	bx	lr
1a002676:	f04f 0001 	mov.w	r0, #1
1a00267a:	4770      	bx	lr

1a00267c <__aeabi_d2iz>:
1a00267c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002680:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a002684:	d215      	bcs.n	1a0026b2 <__aeabi_d2iz+0x36>
1a002686:	d511      	bpl.n	1a0026ac <__aeabi_d2iz+0x30>
1a002688:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a00268c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a002690:	d912      	bls.n	1a0026b8 <__aeabi_d2iz+0x3c>
1a002692:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00269a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a00269e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0026a2:	fa23 f002 	lsr.w	r0, r3, r2
1a0026a6:	bf18      	it	ne
1a0026a8:	4240      	negne	r0, r0
1a0026aa:	4770      	bx	lr
1a0026ac:	f04f 0000 	mov.w	r0, #0
1a0026b0:	4770      	bx	lr
1a0026b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0026b6:	d105      	bne.n	1a0026c4 <__aeabi_d2iz+0x48>
1a0026b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a0026bc:	bf08      	it	eq
1a0026be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a0026c2:	4770      	bx	lr
1a0026c4:	f04f 0000 	mov.w	r0, #0
1a0026c8:	4770      	bx	lr
1a0026ca:	bf00      	nop

1a0026cc <__aeabi_uldivmod>:
1a0026cc:	b953      	cbnz	r3, 1a0026e4 <__aeabi_uldivmod+0x18>
1a0026ce:	b94a      	cbnz	r2, 1a0026e4 <__aeabi_uldivmod+0x18>
1a0026d0:	2900      	cmp	r1, #0
1a0026d2:	bf08      	it	eq
1a0026d4:	2800      	cmpeq	r0, #0
1a0026d6:	bf1c      	itt	ne
1a0026d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0026dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0026e0:	f000 b974 	b.w	1a0029cc <__aeabi_idiv0>
1a0026e4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0026e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0026ec:	f000 f806 	bl	1a0026fc <__udivmoddi4>
1a0026f0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0026f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0026f8:	b004      	add	sp, #16
1a0026fa:	4770      	bx	lr

1a0026fc <__udivmoddi4>:
1a0026fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002700:	9e08      	ldr	r6, [sp, #32]
1a002702:	4604      	mov	r4, r0
1a002704:	4688      	mov	r8, r1
1a002706:	2b00      	cmp	r3, #0
1a002708:	f040 8085 	bne.w	1a002816 <__udivmoddi4+0x11a>
1a00270c:	428a      	cmp	r2, r1
1a00270e:	4615      	mov	r5, r2
1a002710:	d948      	bls.n	1a0027a4 <__udivmoddi4+0xa8>
1a002712:	fab2 f282 	clz	r2, r2
1a002716:	b14a      	cbz	r2, 1a00272c <__udivmoddi4+0x30>
1a002718:	f1c2 0720 	rsb	r7, r2, #32
1a00271c:	fa01 f302 	lsl.w	r3, r1, r2
1a002720:	fa20 f707 	lsr.w	r7, r0, r7
1a002724:	4095      	lsls	r5, r2
1a002726:	ea47 0803 	orr.w	r8, r7, r3
1a00272a:	4094      	lsls	r4, r2
1a00272c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002730:	0c23      	lsrs	r3, r4, #16
1a002732:	fbb8 f7fe 	udiv	r7, r8, lr
1a002736:	fa1f fc85 	uxth.w	ip, r5
1a00273a:	fb0e 8817 	mls	r8, lr, r7, r8
1a00273e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002742:	fb07 f10c 	mul.w	r1, r7, ip
1a002746:	4299      	cmp	r1, r3
1a002748:	d909      	bls.n	1a00275e <__udivmoddi4+0x62>
1a00274a:	18eb      	adds	r3, r5, r3
1a00274c:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002750:	f080 80e3 	bcs.w	1a00291a <__udivmoddi4+0x21e>
1a002754:	4299      	cmp	r1, r3
1a002756:	f240 80e0 	bls.w	1a00291a <__udivmoddi4+0x21e>
1a00275a:	3f02      	subs	r7, #2
1a00275c:	442b      	add	r3, r5
1a00275e:	1a5b      	subs	r3, r3, r1
1a002760:	b2a4      	uxth	r4, r4
1a002762:	fbb3 f0fe 	udiv	r0, r3, lr
1a002766:	fb0e 3310 	mls	r3, lr, r0, r3
1a00276a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00276e:	fb00 fc0c 	mul.w	ip, r0, ip
1a002772:	45a4      	cmp	ip, r4
1a002774:	d909      	bls.n	1a00278a <__udivmoddi4+0x8e>
1a002776:	192c      	adds	r4, r5, r4
1a002778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00277c:	f080 80cb 	bcs.w	1a002916 <__udivmoddi4+0x21a>
1a002780:	45a4      	cmp	ip, r4
1a002782:	f240 80c8 	bls.w	1a002916 <__udivmoddi4+0x21a>
1a002786:	3802      	subs	r0, #2
1a002788:	442c      	add	r4, r5
1a00278a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00278e:	eba4 040c 	sub.w	r4, r4, ip
1a002792:	2700      	movs	r7, #0
1a002794:	b11e      	cbz	r6, 1a00279e <__udivmoddi4+0xa2>
1a002796:	40d4      	lsrs	r4, r2
1a002798:	2300      	movs	r3, #0
1a00279a:	e9c6 4300 	strd	r4, r3, [r6]
1a00279e:	4639      	mov	r1, r7
1a0027a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0027a4:	2a00      	cmp	r2, #0
1a0027a6:	d053      	beq.n	1a002850 <__udivmoddi4+0x154>
1a0027a8:	fab2 f282 	clz	r2, r2
1a0027ac:	2a00      	cmp	r2, #0
1a0027ae:	f040 80b6 	bne.w	1a00291e <__udivmoddi4+0x222>
1a0027b2:	1b49      	subs	r1, r1, r5
1a0027b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0027b8:	fa1f f885 	uxth.w	r8, r5
1a0027bc:	2701      	movs	r7, #1
1a0027be:	fbb1 fcfe 	udiv	ip, r1, lr
1a0027c2:	0c23      	lsrs	r3, r4, #16
1a0027c4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0027c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0027cc:	fb08 f10c 	mul.w	r1, r8, ip
1a0027d0:	4299      	cmp	r1, r3
1a0027d2:	d907      	bls.n	1a0027e4 <__udivmoddi4+0xe8>
1a0027d4:	18eb      	adds	r3, r5, r3
1a0027d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0027da:	d202      	bcs.n	1a0027e2 <__udivmoddi4+0xe6>
1a0027dc:	4299      	cmp	r1, r3
1a0027de:	f200 80ec 	bhi.w	1a0029ba <__udivmoddi4+0x2be>
1a0027e2:	4684      	mov	ip, r0
1a0027e4:	1a59      	subs	r1, r3, r1
1a0027e6:	b2a3      	uxth	r3, r4
1a0027e8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0027ec:	fb0e 1410 	mls	r4, lr, r0, r1
1a0027f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0027f4:	fb08 f800 	mul.w	r8, r8, r0
1a0027f8:	45a0      	cmp	r8, r4
1a0027fa:	d907      	bls.n	1a00280c <__udivmoddi4+0x110>
1a0027fc:	192c      	adds	r4, r5, r4
1a0027fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002802:	d202      	bcs.n	1a00280a <__udivmoddi4+0x10e>
1a002804:	45a0      	cmp	r8, r4
1a002806:	f200 80dc 	bhi.w	1a0029c2 <__udivmoddi4+0x2c6>
1a00280a:	4618      	mov	r0, r3
1a00280c:	eba4 0408 	sub.w	r4, r4, r8
1a002810:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002814:	e7be      	b.n	1a002794 <__udivmoddi4+0x98>
1a002816:	428b      	cmp	r3, r1
1a002818:	d908      	bls.n	1a00282c <__udivmoddi4+0x130>
1a00281a:	2e00      	cmp	r6, #0
1a00281c:	d078      	beq.n	1a002910 <__udivmoddi4+0x214>
1a00281e:	2700      	movs	r7, #0
1a002820:	e9c6 0100 	strd	r0, r1, [r6]
1a002824:	4638      	mov	r0, r7
1a002826:	4639      	mov	r1, r7
1a002828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00282c:	fab3 f783 	clz	r7, r3
1a002830:	b97f      	cbnz	r7, 1a002852 <__udivmoddi4+0x156>
1a002832:	428b      	cmp	r3, r1
1a002834:	d302      	bcc.n	1a00283c <__udivmoddi4+0x140>
1a002836:	4282      	cmp	r2, r0
1a002838:	f200 80bd 	bhi.w	1a0029b6 <__udivmoddi4+0x2ba>
1a00283c:	1a84      	subs	r4, r0, r2
1a00283e:	eb61 0303 	sbc.w	r3, r1, r3
1a002842:	2001      	movs	r0, #1
1a002844:	4698      	mov	r8, r3
1a002846:	2e00      	cmp	r6, #0
1a002848:	d0a9      	beq.n	1a00279e <__udivmoddi4+0xa2>
1a00284a:	e9c6 4800 	strd	r4, r8, [r6]
1a00284e:	e7a6      	b.n	1a00279e <__udivmoddi4+0xa2>
1a002850:	deff      	udf	#255	; 0xff
1a002852:	f1c7 0520 	rsb	r5, r7, #32
1a002856:	40bb      	lsls	r3, r7
1a002858:	fa22 fc05 	lsr.w	ip, r2, r5
1a00285c:	ea4c 0c03 	orr.w	ip, ip, r3
1a002860:	fa01 f407 	lsl.w	r4, r1, r7
1a002864:	fa20 f805 	lsr.w	r8, r0, r5
1a002868:	fa21 f305 	lsr.w	r3, r1, r5
1a00286c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002870:	ea48 0404 	orr.w	r4, r8, r4
1a002874:	fbb3 f9fe 	udiv	r9, r3, lr
1a002878:	0c21      	lsrs	r1, r4, #16
1a00287a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00287e:	fa1f f88c 	uxth.w	r8, ip
1a002882:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002886:	fb09 fa08 	mul.w	sl, r9, r8
1a00288a:	459a      	cmp	sl, r3
1a00288c:	fa02 f207 	lsl.w	r2, r2, r7
1a002890:	fa00 f107 	lsl.w	r1, r0, r7
1a002894:	d90b      	bls.n	1a0028ae <__udivmoddi4+0x1b2>
1a002896:	eb1c 0303 	adds.w	r3, ip, r3
1a00289a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00289e:	f080 8088 	bcs.w	1a0029b2 <__udivmoddi4+0x2b6>
1a0028a2:	459a      	cmp	sl, r3
1a0028a4:	f240 8085 	bls.w	1a0029b2 <__udivmoddi4+0x2b6>
1a0028a8:	f1a9 0902 	sub.w	r9, r9, #2
1a0028ac:	4463      	add	r3, ip
1a0028ae:	eba3 030a 	sub.w	r3, r3, sl
1a0028b2:	b2a4      	uxth	r4, r4
1a0028b4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0028b8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0028bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0028c0:	fb00 f808 	mul.w	r8, r0, r8
1a0028c4:	45a0      	cmp	r8, r4
1a0028c6:	d908      	bls.n	1a0028da <__udivmoddi4+0x1de>
1a0028c8:	eb1c 0404 	adds.w	r4, ip, r4
1a0028cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0028d0:	d26b      	bcs.n	1a0029aa <__udivmoddi4+0x2ae>
1a0028d2:	45a0      	cmp	r8, r4
1a0028d4:	d969      	bls.n	1a0029aa <__udivmoddi4+0x2ae>
1a0028d6:	3802      	subs	r0, #2
1a0028d8:	4464      	add	r4, ip
1a0028da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0028de:	eba4 0408 	sub.w	r4, r4, r8
1a0028e2:	fba0 8902 	umull	r8, r9, r0, r2
1a0028e6:	454c      	cmp	r4, r9
1a0028e8:	46c6      	mov	lr, r8
1a0028ea:	464b      	mov	r3, r9
1a0028ec:	d354      	bcc.n	1a002998 <__udivmoddi4+0x29c>
1a0028ee:	d051      	beq.n	1a002994 <__udivmoddi4+0x298>
1a0028f0:	2e00      	cmp	r6, #0
1a0028f2:	d069      	beq.n	1a0029c8 <__udivmoddi4+0x2cc>
1a0028f4:	ebb1 020e 	subs.w	r2, r1, lr
1a0028f8:	eb64 0403 	sbc.w	r4, r4, r3
1a0028fc:	fa04 f505 	lsl.w	r5, r4, r5
1a002900:	fa22 f307 	lsr.w	r3, r2, r7
1a002904:	40fc      	lsrs	r4, r7
1a002906:	431d      	orrs	r5, r3
1a002908:	e9c6 5400 	strd	r5, r4, [r6]
1a00290c:	2700      	movs	r7, #0
1a00290e:	e746      	b.n	1a00279e <__udivmoddi4+0xa2>
1a002910:	4637      	mov	r7, r6
1a002912:	4630      	mov	r0, r6
1a002914:	e743      	b.n	1a00279e <__udivmoddi4+0xa2>
1a002916:	4618      	mov	r0, r3
1a002918:	e737      	b.n	1a00278a <__udivmoddi4+0x8e>
1a00291a:	4607      	mov	r7, r0
1a00291c:	e71f      	b.n	1a00275e <__udivmoddi4+0x62>
1a00291e:	f1c2 0320 	rsb	r3, r2, #32
1a002922:	fa20 f703 	lsr.w	r7, r0, r3
1a002926:	4095      	lsls	r5, r2
1a002928:	fa01 f002 	lsl.w	r0, r1, r2
1a00292c:	fa21 f303 	lsr.w	r3, r1, r3
1a002930:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002934:	4338      	orrs	r0, r7
1a002936:	0c01      	lsrs	r1, r0, #16
1a002938:	fbb3 f7fe 	udiv	r7, r3, lr
1a00293c:	fa1f f885 	uxth.w	r8, r5
1a002940:	fb0e 3317 	mls	r3, lr, r7, r3
1a002944:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002948:	fb07 f308 	mul.w	r3, r7, r8
1a00294c:	428b      	cmp	r3, r1
1a00294e:	fa04 f402 	lsl.w	r4, r4, r2
1a002952:	d907      	bls.n	1a002964 <__udivmoddi4+0x268>
1a002954:	1869      	adds	r1, r5, r1
1a002956:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00295a:	d228      	bcs.n	1a0029ae <__udivmoddi4+0x2b2>
1a00295c:	428b      	cmp	r3, r1
1a00295e:	d926      	bls.n	1a0029ae <__udivmoddi4+0x2b2>
1a002960:	3f02      	subs	r7, #2
1a002962:	4429      	add	r1, r5
1a002964:	1acb      	subs	r3, r1, r3
1a002966:	b281      	uxth	r1, r0
1a002968:	fbb3 f0fe 	udiv	r0, r3, lr
1a00296c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002974:	fb00 f308 	mul.w	r3, r0, r8
1a002978:	428b      	cmp	r3, r1
1a00297a:	d907      	bls.n	1a00298c <__udivmoddi4+0x290>
1a00297c:	1869      	adds	r1, r5, r1
1a00297e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002982:	d210      	bcs.n	1a0029a6 <__udivmoddi4+0x2aa>
1a002984:	428b      	cmp	r3, r1
1a002986:	d90e      	bls.n	1a0029a6 <__udivmoddi4+0x2aa>
1a002988:	3802      	subs	r0, #2
1a00298a:	4429      	add	r1, r5
1a00298c:	1ac9      	subs	r1, r1, r3
1a00298e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002992:	e714      	b.n	1a0027be <__udivmoddi4+0xc2>
1a002994:	4541      	cmp	r1, r8
1a002996:	d2ab      	bcs.n	1a0028f0 <__udivmoddi4+0x1f4>
1a002998:	ebb8 0e02 	subs.w	lr, r8, r2
1a00299c:	eb69 020c 	sbc.w	r2, r9, ip
1a0029a0:	3801      	subs	r0, #1
1a0029a2:	4613      	mov	r3, r2
1a0029a4:	e7a4      	b.n	1a0028f0 <__udivmoddi4+0x1f4>
1a0029a6:	4660      	mov	r0, ip
1a0029a8:	e7f0      	b.n	1a00298c <__udivmoddi4+0x290>
1a0029aa:	4618      	mov	r0, r3
1a0029ac:	e795      	b.n	1a0028da <__udivmoddi4+0x1de>
1a0029ae:	4667      	mov	r7, ip
1a0029b0:	e7d8      	b.n	1a002964 <__udivmoddi4+0x268>
1a0029b2:	4681      	mov	r9, r0
1a0029b4:	e77b      	b.n	1a0028ae <__udivmoddi4+0x1b2>
1a0029b6:	4638      	mov	r0, r7
1a0029b8:	e745      	b.n	1a002846 <__udivmoddi4+0x14a>
1a0029ba:	f1ac 0c02 	sub.w	ip, ip, #2
1a0029be:	442b      	add	r3, r5
1a0029c0:	e710      	b.n	1a0027e4 <__udivmoddi4+0xe8>
1a0029c2:	3802      	subs	r0, #2
1a0029c4:	442c      	add	r4, r5
1a0029c6:	e721      	b.n	1a00280c <__udivmoddi4+0x110>
1a0029c8:	4637      	mov	r7, r6
1a0029ca:	e6e8      	b.n	1a00279e <__udivmoddi4+0xa2>

1a0029cc <__aeabi_idiv0>:
1a0029cc:	4770      	bx	lr
1a0029ce:	bf00      	nop

1a0029d0 <_malloc_trim_r>:
1a0029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0029d2:	4f24      	ldr	r7, [pc, #144]	; (1a002a64 <_malloc_trim_r+0x94>)
1a0029d4:	460c      	mov	r4, r1
1a0029d6:	4606      	mov	r6, r0
1a0029d8:	f000 fd0a 	bl	1a0033f0 <__malloc_lock>
1a0029dc:	68bb      	ldr	r3, [r7, #8]
1a0029de:	685d      	ldr	r5, [r3, #4]
1a0029e0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a0029e4:	310f      	adds	r1, #15
1a0029e6:	f025 0503 	bic.w	r5, r5, #3
1a0029ea:	4429      	add	r1, r5
1a0029ec:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a0029f0:	f021 010f 	bic.w	r1, r1, #15
1a0029f4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a0029f8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a0029fc:	db07      	blt.n	1a002a0e <_malloc_trim_r+0x3e>
1a0029fe:	2100      	movs	r1, #0
1a002a00:	4630      	mov	r0, r6
1a002a02:	f7fd ff9b 	bl	1a00093c <_sbrk_r>
1a002a06:	68bb      	ldr	r3, [r7, #8]
1a002a08:	442b      	add	r3, r5
1a002a0a:	4298      	cmp	r0, r3
1a002a0c:	d004      	beq.n	1a002a18 <_malloc_trim_r+0x48>
1a002a0e:	4630      	mov	r0, r6
1a002a10:	f000 fcf4 	bl	1a0033fc <__malloc_unlock>
1a002a14:	2000      	movs	r0, #0
1a002a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002a18:	4261      	negs	r1, r4
1a002a1a:	4630      	mov	r0, r6
1a002a1c:	f7fd ff8e 	bl	1a00093c <_sbrk_r>
1a002a20:	3001      	adds	r0, #1
1a002a22:	d00d      	beq.n	1a002a40 <_malloc_trim_r+0x70>
1a002a24:	4b10      	ldr	r3, [pc, #64]	; (1a002a68 <_malloc_trim_r+0x98>)
1a002a26:	68ba      	ldr	r2, [r7, #8]
1a002a28:	6819      	ldr	r1, [r3, #0]
1a002a2a:	1b2d      	subs	r5, r5, r4
1a002a2c:	f045 0501 	orr.w	r5, r5, #1
1a002a30:	4630      	mov	r0, r6
1a002a32:	1b09      	subs	r1, r1, r4
1a002a34:	6055      	str	r5, [r2, #4]
1a002a36:	6019      	str	r1, [r3, #0]
1a002a38:	f000 fce0 	bl	1a0033fc <__malloc_unlock>
1a002a3c:	2001      	movs	r0, #1
1a002a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002a40:	2100      	movs	r1, #0
1a002a42:	4630      	mov	r0, r6
1a002a44:	f7fd ff7a 	bl	1a00093c <_sbrk_r>
1a002a48:	68ba      	ldr	r2, [r7, #8]
1a002a4a:	1a83      	subs	r3, r0, r2
1a002a4c:	2b0f      	cmp	r3, #15
1a002a4e:	ddde      	ble.n	1a002a0e <_malloc_trim_r+0x3e>
1a002a50:	4c06      	ldr	r4, [pc, #24]	; (1a002a6c <_malloc_trim_r+0x9c>)
1a002a52:	4905      	ldr	r1, [pc, #20]	; (1a002a68 <_malloc_trim_r+0x98>)
1a002a54:	6824      	ldr	r4, [r4, #0]
1a002a56:	f043 0301 	orr.w	r3, r3, #1
1a002a5a:	1b00      	subs	r0, r0, r4
1a002a5c:	6053      	str	r3, [r2, #4]
1a002a5e:	6008      	str	r0, [r1, #0]
1a002a60:	e7d5      	b.n	1a002a0e <_malloc_trim_r+0x3e>
1a002a62:	bf00      	nop
1a002a64:	10000478 	.word	0x10000478
1a002a68:	10000ac8 	.word	0x10000ac8
1a002a6c:	10000880 	.word	0x10000880

1a002a70 <_free_r>:
1a002a70:	2900      	cmp	r1, #0
1a002a72:	d05d      	beq.n	1a002b30 <_free_r+0xc0>
1a002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002a76:	460f      	mov	r7, r1
1a002a78:	4606      	mov	r6, r0
1a002a7a:	f000 fcb9 	bl	1a0033f0 <__malloc_lock>
1a002a7e:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a002a82:	4c73      	ldr	r4, [pc, #460]	; (1a002c50 <_free_r+0x1e0>)
1a002a84:	f02c 0301 	bic.w	r3, ip, #1
1a002a88:	f1a7 0008 	sub.w	r0, r7, #8
1a002a8c:	18c2      	adds	r2, r0, r3
1a002a8e:	68a1      	ldr	r1, [r4, #8]
1a002a90:	6855      	ldr	r5, [r2, #4]
1a002a92:	4291      	cmp	r1, r2
1a002a94:	f025 0503 	bic.w	r5, r5, #3
1a002a98:	d07f      	beq.n	1a002b9a <_free_r+0x12a>
1a002a9a:	f01c 0f01 	tst.w	ip, #1
1a002a9e:	6055      	str	r5, [r2, #4]
1a002aa0:	eb02 0105 	add.w	r1, r2, r5
1a002aa4:	d133      	bne.n	1a002b0e <_free_r+0x9e>
1a002aa6:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a002aaa:	6849      	ldr	r1, [r1, #4]
1a002aac:	eba0 000e 	sub.w	r0, r0, lr
1a002ab0:	f104 0c08 	add.w	ip, r4, #8
1a002ab4:	6887      	ldr	r7, [r0, #8]
1a002ab6:	4567      	cmp	r7, ip
1a002ab8:	4473      	add	r3, lr
1a002aba:	f001 0101 	and.w	r1, r1, #1
1a002abe:	d060      	beq.n	1a002b82 <_free_r+0x112>
1a002ac0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a002ac4:	f8c7 e00c 	str.w	lr, [r7, #12]
1a002ac8:	f8ce 7008 	str.w	r7, [lr, #8]
1a002acc:	2900      	cmp	r1, #0
1a002ace:	f000 8089 	beq.w	1a002be4 <_free_r+0x174>
1a002ad2:	f043 0101 	orr.w	r1, r3, #1
1a002ad6:	6041      	str	r1, [r0, #4]
1a002ad8:	6013      	str	r3, [r2, #0]
1a002ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002ade:	d230      	bcs.n	1a002b42 <_free_r+0xd2>
1a002ae0:	08db      	lsrs	r3, r3, #3
1a002ae2:	1c59      	adds	r1, r3, #1
1a002ae4:	6865      	ldr	r5, [r4, #4]
1a002ae6:	109a      	asrs	r2, r3, #2
1a002ae8:	2301      	movs	r3, #1
1a002aea:	4093      	lsls	r3, r2
1a002aec:	432b      	orrs	r3, r5
1a002aee:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a002af2:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a002af6:	6063      	str	r3, [r4, #4]
1a002af8:	3a08      	subs	r2, #8
1a002afa:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a002afe:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a002b02:	60e8      	str	r0, [r5, #12]
1a002b04:	4630      	mov	r0, r6
1a002b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002b0a:	f000 bc77 	b.w	1a0033fc <__malloc_unlock>
1a002b0e:	6849      	ldr	r1, [r1, #4]
1a002b10:	07c9      	lsls	r1, r1, #31
1a002b12:	d40e      	bmi.n	1a002b32 <_free_r+0xc2>
1a002b14:	442b      	add	r3, r5
1a002b16:	f104 0c08 	add.w	ip, r4, #8
1a002b1a:	6891      	ldr	r1, [r2, #8]
1a002b1c:	4561      	cmp	r1, ip
1a002b1e:	f043 0501 	orr.w	r5, r3, #1
1a002b22:	d067      	beq.n	1a002bf4 <_free_r+0x184>
1a002b24:	68d2      	ldr	r2, [r2, #12]
1a002b26:	60ca      	str	r2, [r1, #12]
1a002b28:	6091      	str	r1, [r2, #8]
1a002b2a:	6045      	str	r5, [r0, #4]
1a002b2c:	50c3      	str	r3, [r0, r3]
1a002b2e:	e7d4      	b.n	1a002ada <_free_r+0x6a>
1a002b30:	4770      	bx	lr
1a002b32:	f043 0101 	orr.w	r1, r3, #1
1a002b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002b3a:	f847 1c04 	str.w	r1, [r7, #-4]
1a002b3e:	6013      	str	r3, [r2, #0]
1a002b40:	d3ce      	bcc.n	1a002ae0 <_free_r+0x70>
1a002b42:	0a5a      	lsrs	r2, r3, #9
1a002b44:	2a04      	cmp	r2, #4
1a002b46:	d842      	bhi.n	1a002bce <_free_r+0x15e>
1a002b48:	099a      	lsrs	r2, r3, #6
1a002b4a:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a002b4e:	00ff      	lsls	r7, r7, #3
1a002b50:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a002b54:	19e5      	adds	r5, r4, r7
1a002b56:	59e2      	ldr	r2, [r4, r7]
1a002b58:	3d08      	subs	r5, #8
1a002b5a:	4295      	cmp	r5, r2
1a002b5c:	d051      	beq.n	1a002c02 <_free_r+0x192>
1a002b5e:	6851      	ldr	r1, [r2, #4]
1a002b60:	f021 0103 	bic.w	r1, r1, #3
1a002b64:	4299      	cmp	r1, r3
1a002b66:	d902      	bls.n	1a002b6e <_free_r+0xfe>
1a002b68:	6892      	ldr	r2, [r2, #8]
1a002b6a:	4295      	cmp	r5, r2
1a002b6c:	d1f7      	bne.n	1a002b5e <_free_r+0xee>
1a002b6e:	68d5      	ldr	r5, [r2, #12]
1a002b70:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a002b74:	60a8      	str	r0, [r5, #8]
1a002b76:	60d0      	str	r0, [r2, #12]
1a002b78:	4630      	mov	r0, r6
1a002b7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002b7e:	f000 bc3d 	b.w	1a0033fc <__malloc_unlock>
1a002b82:	2900      	cmp	r1, #0
1a002b84:	d15e      	bne.n	1a002c44 <_free_r+0x1d4>
1a002b86:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a002b8a:	442b      	add	r3, r5
1a002b8c:	f043 0401 	orr.w	r4, r3, #1
1a002b90:	60ca      	str	r2, [r1, #12]
1a002b92:	6091      	str	r1, [r2, #8]
1a002b94:	6044      	str	r4, [r0, #4]
1a002b96:	50c3      	str	r3, [r0, r3]
1a002b98:	e7b4      	b.n	1a002b04 <_free_r+0x94>
1a002b9a:	f01c 0f01 	tst.w	ip, #1
1a002b9e:	442b      	add	r3, r5
1a002ba0:	d107      	bne.n	1a002bb2 <_free_r+0x142>
1a002ba2:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a002ba6:	1a80      	subs	r0, r0, r2
1a002ba8:	4413      	add	r3, r2
1a002baa:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a002bae:	60ca      	str	r2, [r1, #12]
1a002bb0:	6091      	str	r1, [r2, #8]
1a002bb2:	4a28      	ldr	r2, [pc, #160]	; (1a002c54 <_free_r+0x1e4>)
1a002bb4:	6812      	ldr	r2, [r2, #0]
1a002bb6:	f043 0101 	orr.w	r1, r3, #1
1a002bba:	429a      	cmp	r2, r3
1a002bbc:	6041      	str	r1, [r0, #4]
1a002bbe:	60a0      	str	r0, [r4, #8]
1a002bc0:	d8a0      	bhi.n	1a002b04 <_free_r+0x94>
1a002bc2:	4b25      	ldr	r3, [pc, #148]	; (1a002c58 <_free_r+0x1e8>)
1a002bc4:	4630      	mov	r0, r6
1a002bc6:	6819      	ldr	r1, [r3, #0]
1a002bc8:	f7ff ff02 	bl	1a0029d0 <_malloc_trim_r>
1a002bcc:	e79a      	b.n	1a002b04 <_free_r+0x94>
1a002bce:	2a14      	cmp	r2, #20
1a002bd0:	d90a      	bls.n	1a002be8 <_free_r+0x178>
1a002bd2:	2a54      	cmp	r2, #84	; 0x54
1a002bd4:	d81d      	bhi.n	1a002c12 <_free_r+0x1a2>
1a002bd6:	0b1a      	lsrs	r2, r3, #12
1a002bd8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a002bdc:	00ff      	lsls	r7, r7, #3
1a002bde:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a002be2:	e7b7      	b.n	1a002b54 <_free_r+0xe4>
1a002be4:	442b      	add	r3, r5
1a002be6:	e798      	b.n	1a002b1a <_free_r+0xaa>
1a002be8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a002bec:	00ff      	lsls	r7, r7, #3
1a002bee:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a002bf2:	e7af      	b.n	1a002b54 <_free_r+0xe4>
1a002bf4:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a002bf8:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a002bfc:	6045      	str	r5, [r0, #4]
1a002bfe:	50c3      	str	r3, [r0, r3]
1a002c00:	e780      	b.n	1a002b04 <_free_r+0x94>
1a002c02:	6863      	ldr	r3, [r4, #4]
1a002c04:	1089      	asrs	r1, r1, #2
1a002c06:	2701      	movs	r7, #1
1a002c08:	fa07 f101 	lsl.w	r1, r7, r1
1a002c0c:	4319      	orrs	r1, r3
1a002c0e:	6061      	str	r1, [r4, #4]
1a002c10:	e7ae      	b.n	1a002b70 <_free_r+0x100>
1a002c12:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a002c16:	d806      	bhi.n	1a002c26 <_free_r+0x1b6>
1a002c18:	0bda      	lsrs	r2, r3, #15
1a002c1a:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a002c1e:	00ff      	lsls	r7, r7, #3
1a002c20:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a002c24:	e796      	b.n	1a002b54 <_free_r+0xe4>
1a002c26:	f240 5154 	movw	r1, #1364	; 0x554
1a002c2a:	428a      	cmp	r2, r1
1a002c2c:	d806      	bhi.n	1a002c3c <_free_r+0x1cc>
1a002c2e:	0c9a      	lsrs	r2, r3, #18
1a002c30:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a002c34:	00ff      	lsls	r7, r7, #3
1a002c36:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a002c3a:	e78b      	b.n	1a002b54 <_free_r+0xe4>
1a002c3c:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a002c40:	217e      	movs	r1, #126	; 0x7e
1a002c42:	e787      	b.n	1a002b54 <_free_r+0xe4>
1a002c44:	f043 0101 	orr.w	r1, r3, #1
1a002c48:	6041      	str	r1, [r0, #4]
1a002c4a:	6013      	str	r3, [r2, #0]
1a002c4c:	e75a      	b.n	1a002b04 <_free_r+0x94>
1a002c4e:	bf00      	nop
1a002c50:	10000478 	.word	0x10000478
1a002c54:	10000884 	.word	0x10000884
1a002c58:	10000af8 	.word	0x10000af8

1a002c5c <__libc_init_array>:
1a002c5c:	b570      	push	{r4, r5, r6, lr}
1a002c5e:	4e0d      	ldr	r6, [pc, #52]	; (1a002c94 <__libc_init_array+0x38>)
1a002c60:	4d0d      	ldr	r5, [pc, #52]	; (1a002c98 <__libc_init_array+0x3c>)
1a002c62:	1b76      	subs	r6, r6, r5
1a002c64:	10b6      	asrs	r6, r6, #2
1a002c66:	d006      	beq.n	1a002c76 <__libc_init_array+0x1a>
1a002c68:	2400      	movs	r4, #0
1a002c6a:	3401      	adds	r4, #1
1a002c6c:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c70:	4798      	blx	r3
1a002c72:	42a6      	cmp	r6, r4
1a002c74:	d1f9      	bne.n	1a002c6a <__libc_init_array+0xe>
1a002c76:	4e09      	ldr	r6, [pc, #36]	; (1a002c9c <__libc_init_array+0x40>)
1a002c78:	4d09      	ldr	r5, [pc, #36]	; (1a002ca0 <__libc_init_array+0x44>)
1a002c7a:	1b76      	subs	r6, r6, r5
1a002c7c:	f7fd fe5d 	bl	1a00093a <_init>
1a002c80:	10b6      	asrs	r6, r6, #2
1a002c82:	d006      	beq.n	1a002c92 <__libc_init_array+0x36>
1a002c84:	2400      	movs	r4, #0
1a002c86:	3401      	adds	r4, #1
1a002c88:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c8c:	4798      	blx	r3
1a002c8e:	42a6      	cmp	r6, r4
1a002c90:	d1f9      	bne.n	1a002c86 <__libc_init_array+0x2a>
1a002c92:	bd70      	pop	{r4, r5, r6, pc}
1a002c94:	1a00721c 	.word	0x1a00721c
1a002c98:	1a00721c 	.word	0x1a00721c
1a002c9c:	1a007220 	.word	0x1a007220
1a002ca0:	1a00721c 	.word	0x1a00721c

1a002ca4 <__retarget_lock_acquire_recursive>:
1a002ca4:	4770      	bx	lr
1a002ca6:	bf00      	nop

1a002ca8 <__retarget_lock_release_recursive>:
1a002ca8:	4770      	bx	lr
1a002caa:	bf00      	nop

1a002cac <_malloc_r>:
1a002cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002cb0:	f101 050b 	add.w	r5, r1, #11
1a002cb4:	2d16      	cmp	r5, #22
1a002cb6:	b083      	sub	sp, #12
1a002cb8:	4606      	mov	r6, r0
1a002cba:	d823      	bhi.n	1a002d04 <_malloc_r+0x58>
1a002cbc:	2910      	cmp	r1, #16
1a002cbe:	f200 80b9 	bhi.w	1a002e34 <_malloc_r+0x188>
1a002cc2:	f000 fb95 	bl	1a0033f0 <__malloc_lock>
1a002cc6:	2510      	movs	r5, #16
1a002cc8:	2318      	movs	r3, #24
1a002cca:	2002      	movs	r0, #2
1a002ccc:	4fba      	ldr	r7, [pc, #744]	; (1a002fb8 <_malloc_r+0x30c>)
1a002cce:	443b      	add	r3, r7
1a002cd0:	f1a3 0208 	sub.w	r2, r3, #8
1a002cd4:	685c      	ldr	r4, [r3, #4]
1a002cd6:	4294      	cmp	r4, r2
1a002cd8:	f000 80b9 	beq.w	1a002e4e <_malloc_r+0x1a2>
1a002cdc:	6863      	ldr	r3, [r4, #4]
1a002cde:	f023 0303 	bic.w	r3, r3, #3
1a002ce2:	4423      	add	r3, r4
1a002ce4:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a002ce8:	685a      	ldr	r2, [r3, #4]
1a002cea:	60e9      	str	r1, [r5, #12]
1a002cec:	f042 0201 	orr.w	r2, r2, #1
1a002cf0:	4630      	mov	r0, r6
1a002cf2:	608d      	str	r5, [r1, #8]
1a002cf4:	605a      	str	r2, [r3, #4]
1a002cf6:	f000 fb81 	bl	1a0033fc <__malloc_unlock>
1a002cfa:	3408      	adds	r4, #8
1a002cfc:	4620      	mov	r0, r4
1a002cfe:	b003      	add	sp, #12
1a002d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002d04:	f035 0507 	bics.w	r5, r5, #7
1a002d08:	f100 8094 	bmi.w	1a002e34 <_malloc_r+0x188>
1a002d0c:	42a9      	cmp	r1, r5
1a002d0e:	f200 8091 	bhi.w	1a002e34 <_malloc_r+0x188>
1a002d12:	f000 fb6d 	bl	1a0033f0 <__malloc_lock>
1a002d16:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a002d1a:	f0c0 81a2 	bcc.w	1a003062 <_malloc_r+0x3b6>
1a002d1e:	0a6b      	lsrs	r3, r5, #9
1a002d20:	f000 808f 	beq.w	1a002e42 <_malloc_r+0x196>
1a002d24:	2b04      	cmp	r3, #4
1a002d26:	f200 8178 	bhi.w	1a00301a <_malloc_r+0x36e>
1a002d2a:	09ab      	lsrs	r3, r5, #6
1a002d2c:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a002d30:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a002d34:	00c3      	lsls	r3, r0, #3
1a002d36:	4fa0      	ldr	r7, [pc, #640]	; (1a002fb8 <_malloc_r+0x30c>)
1a002d38:	443b      	add	r3, r7
1a002d3a:	f1a3 0108 	sub.w	r1, r3, #8
1a002d3e:	685c      	ldr	r4, [r3, #4]
1a002d40:	42a1      	cmp	r1, r4
1a002d42:	d106      	bne.n	1a002d52 <_malloc_r+0xa6>
1a002d44:	e00c      	b.n	1a002d60 <_malloc_r+0xb4>
1a002d46:	2a00      	cmp	r2, #0
1a002d48:	f280 8127 	bge.w	1a002f9a <_malloc_r+0x2ee>
1a002d4c:	68e4      	ldr	r4, [r4, #12]
1a002d4e:	42a1      	cmp	r1, r4
1a002d50:	d006      	beq.n	1a002d60 <_malloc_r+0xb4>
1a002d52:	6863      	ldr	r3, [r4, #4]
1a002d54:	f023 0303 	bic.w	r3, r3, #3
1a002d58:	1b5a      	subs	r2, r3, r5
1a002d5a:	2a0f      	cmp	r2, #15
1a002d5c:	ddf3      	ble.n	1a002d46 <_malloc_r+0x9a>
1a002d5e:	4660      	mov	r0, ip
1a002d60:	693c      	ldr	r4, [r7, #16]
1a002d62:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a002fcc <_malloc_r+0x320>
1a002d66:	4564      	cmp	r4, ip
1a002d68:	d07c      	beq.n	1a002e64 <_malloc_r+0x1b8>
1a002d6a:	6863      	ldr	r3, [r4, #4]
1a002d6c:	f023 0303 	bic.w	r3, r3, #3
1a002d70:	1b5a      	subs	r2, r3, r5
1a002d72:	2a0f      	cmp	r2, #15
1a002d74:	f300 8183 	bgt.w	1a00307e <_malloc_r+0x3d2>
1a002d78:	2a00      	cmp	r2, #0
1a002d7a:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a002d7e:	f280 8174 	bge.w	1a00306a <_malloc_r+0x3be>
1a002d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a002d86:	f080 8125 	bcs.w	1a002fd4 <_malloc_r+0x328>
1a002d8a:	08db      	lsrs	r3, r3, #3
1a002d8c:	1c59      	adds	r1, r3, #1
1a002d8e:	687a      	ldr	r2, [r7, #4]
1a002d90:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a002d94:	f8c4 8008 	str.w	r8, [r4, #8]
1a002d98:	f04f 0e01 	mov.w	lr, #1
1a002d9c:	109b      	asrs	r3, r3, #2
1a002d9e:	fa0e f303 	lsl.w	r3, lr, r3
1a002da2:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a002da6:	4313      	orrs	r3, r2
1a002da8:	f1ae 0208 	sub.w	r2, lr, #8
1a002dac:	60e2      	str	r2, [r4, #12]
1a002dae:	607b      	str	r3, [r7, #4]
1a002db0:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a002db4:	f8c8 400c 	str.w	r4, [r8, #12]
1a002db8:	1082      	asrs	r2, r0, #2
1a002dba:	2401      	movs	r4, #1
1a002dbc:	4094      	lsls	r4, r2
1a002dbe:	429c      	cmp	r4, r3
1a002dc0:	d856      	bhi.n	1a002e70 <_malloc_r+0x1c4>
1a002dc2:	421c      	tst	r4, r3
1a002dc4:	d106      	bne.n	1a002dd4 <_malloc_r+0x128>
1a002dc6:	f020 0003 	bic.w	r0, r0, #3
1a002dca:	0064      	lsls	r4, r4, #1
1a002dcc:	421c      	tst	r4, r3
1a002dce:	f100 0004 	add.w	r0, r0, #4
1a002dd2:	d0fa      	beq.n	1a002dca <_malloc_r+0x11e>
1a002dd4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a002dd8:	46ce      	mov	lr, r9
1a002dda:	4680      	mov	r8, r0
1a002ddc:	f8de 300c 	ldr.w	r3, [lr, #12]
1a002de0:	459e      	cmp	lr, r3
1a002de2:	d107      	bne.n	1a002df4 <_malloc_r+0x148>
1a002de4:	e125      	b.n	1a003032 <_malloc_r+0x386>
1a002de6:	2a00      	cmp	r2, #0
1a002de8:	f280 812c 	bge.w	1a003044 <_malloc_r+0x398>
1a002dec:	68db      	ldr	r3, [r3, #12]
1a002dee:	459e      	cmp	lr, r3
1a002df0:	f000 811f 	beq.w	1a003032 <_malloc_r+0x386>
1a002df4:	6859      	ldr	r1, [r3, #4]
1a002df6:	f021 0103 	bic.w	r1, r1, #3
1a002dfa:	1b4a      	subs	r2, r1, r5
1a002dfc:	2a0f      	cmp	r2, #15
1a002dfe:	ddf2      	ble.n	1a002de6 <_malloc_r+0x13a>
1a002e00:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a002e04:	195c      	adds	r4, r3, r5
1a002e06:	f045 0501 	orr.w	r5, r5, #1
1a002e0a:	605d      	str	r5, [r3, #4]
1a002e0c:	f042 0501 	orr.w	r5, r2, #1
1a002e10:	f8c8 e00c 	str.w	lr, [r8, #12]
1a002e14:	4630      	mov	r0, r6
1a002e16:	f8ce 8008 	str.w	r8, [lr, #8]
1a002e1a:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a002e1e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a002e22:	6065      	str	r5, [r4, #4]
1a002e24:	505a      	str	r2, [r3, r1]
1a002e26:	9300      	str	r3, [sp, #0]
1a002e28:	f000 fae8 	bl	1a0033fc <__malloc_unlock>
1a002e2c:	9b00      	ldr	r3, [sp, #0]
1a002e2e:	f103 0408 	add.w	r4, r3, #8
1a002e32:	e002      	b.n	1a002e3a <_malloc_r+0x18e>
1a002e34:	230c      	movs	r3, #12
1a002e36:	6033      	str	r3, [r6, #0]
1a002e38:	2400      	movs	r4, #0
1a002e3a:	4620      	mov	r0, r4
1a002e3c:	b003      	add	sp, #12
1a002e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002e42:	f44f 7300 	mov.w	r3, #512	; 0x200
1a002e46:	2040      	movs	r0, #64	; 0x40
1a002e48:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a002e4c:	e773      	b.n	1a002d36 <_malloc_r+0x8a>
1a002e4e:	68dc      	ldr	r4, [r3, #12]
1a002e50:	42a3      	cmp	r3, r4
1a002e52:	bf08      	it	eq
1a002e54:	3002      	addeq	r0, #2
1a002e56:	f47f af41 	bne.w	1a002cdc <_malloc_r+0x30>
1a002e5a:	693c      	ldr	r4, [r7, #16]
1a002e5c:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a002fcc <_malloc_r+0x320>
1a002e60:	4564      	cmp	r4, ip
1a002e62:	d182      	bne.n	1a002d6a <_malloc_r+0xbe>
1a002e64:	687b      	ldr	r3, [r7, #4]
1a002e66:	1082      	asrs	r2, r0, #2
1a002e68:	2401      	movs	r4, #1
1a002e6a:	4094      	lsls	r4, r2
1a002e6c:	429c      	cmp	r4, r3
1a002e6e:	d9a8      	bls.n	1a002dc2 <_malloc_r+0x116>
1a002e70:	68bc      	ldr	r4, [r7, #8]
1a002e72:	6863      	ldr	r3, [r4, #4]
1a002e74:	f023 0803 	bic.w	r8, r3, #3
1a002e78:	45a8      	cmp	r8, r5
1a002e7a:	d303      	bcc.n	1a002e84 <_malloc_r+0x1d8>
1a002e7c:	eba8 0305 	sub.w	r3, r8, r5
1a002e80:	2b0f      	cmp	r3, #15
1a002e82:	dc7a      	bgt.n	1a002f7a <_malloc_r+0x2ce>
1a002e84:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a002fd0 <_malloc_r+0x324>
1a002e88:	4b4c      	ldr	r3, [pc, #304]	; (1a002fbc <_malloc_r+0x310>)
1a002e8a:	f8d9 2000 	ldr.w	r2, [r9]
1a002e8e:	681b      	ldr	r3, [r3, #0]
1a002e90:	3201      	adds	r2, #1
1a002e92:	442b      	add	r3, r5
1a002e94:	eb04 0a08 	add.w	sl, r4, r8
1a002e98:	f000 813c 	beq.w	1a003114 <_malloc_r+0x468>
1a002e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002ea0:	330f      	adds	r3, #15
1a002ea2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a002ea6:	f02b 0b0f 	bic.w	fp, fp, #15
1a002eaa:	4659      	mov	r1, fp
1a002eac:	4630      	mov	r0, r6
1a002eae:	f7fd fd45 	bl	1a00093c <_sbrk_r>
1a002eb2:	1c41      	adds	r1, r0, #1
1a002eb4:	4602      	mov	r2, r0
1a002eb6:	f000 80fc 	beq.w	1a0030b2 <_malloc_r+0x406>
1a002eba:	4582      	cmp	sl, r0
1a002ebc:	f200 80f7 	bhi.w	1a0030ae <_malloc_r+0x402>
1a002ec0:	4b3f      	ldr	r3, [pc, #252]	; (1a002fc0 <_malloc_r+0x314>)
1a002ec2:	6818      	ldr	r0, [r3, #0]
1a002ec4:	4458      	add	r0, fp
1a002ec6:	6018      	str	r0, [r3, #0]
1a002ec8:	4601      	mov	r1, r0
1a002eca:	f000 8157 	beq.w	1a00317c <_malloc_r+0x4d0>
1a002ece:	f8d9 0000 	ldr.w	r0, [r9]
1a002ed2:	9301      	str	r3, [sp, #4]
1a002ed4:	3001      	adds	r0, #1
1a002ed6:	bf1b      	ittet	ne
1a002ed8:	eba2 0a0a 	subne.w	sl, r2, sl
1a002edc:	4451      	addne	r1, sl
1a002ede:	f8c9 2000 	streq.w	r2, [r9]
1a002ee2:	6019      	strne	r1, [r3, #0]
1a002ee4:	f012 0a07 	ands.w	sl, r2, #7
1a002ee8:	f000 8120 	beq.w	1a00312c <_malloc_r+0x480>
1a002eec:	f1ca 0108 	rsb	r1, sl, #8
1a002ef0:	440a      	add	r2, r1
1a002ef2:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a002ef6:	4493      	add	fp, r2
1a002ef8:	3108      	adds	r1, #8
1a002efa:	eba1 010b 	sub.w	r1, r1, fp
1a002efe:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a002f02:	4649      	mov	r1, r9
1a002f04:	4630      	mov	r0, r6
1a002f06:	9200      	str	r2, [sp, #0]
1a002f08:	f7fd fd18 	bl	1a00093c <_sbrk_r>
1a002f0c:	1c42      	adds	r2, r0, #1
1a002f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002f12:	f000 8158 	beq.w	1a0031c6 <_malloc_r+0x51a>
1a002f16:	1a80      	subs	r0, r0, r2
1a002f18:	eb00 0b09 	add.w	fp, r0, r9
1a002f1c:	6818      	ldr	r0, [r3, #0]
1a002f1e:	60ba      	str	r2, [r7, #8]
1a002f20:	f04b 0101 	orr.w	r1, fp, #1
1a002f24:	4448      	add	r0, r9
1a002f26:	42bc      	cmp	r4, r7
1a002f28:	6051      	str	r1, [r2, #4]
1a002f2a:	6018      	str	r0, [r3, #0]
1a002f2c:	f000 8132 	beq.w	1a003194 <_malloc_r+0x4e8>
1a002f30:	f1b8 0f0f 	cmp.w	r8, #15
1a002f34:	f240 8130 	bls.w	1a003198 <_malloc_r+0x4ec>
1a002f38:	6861      	ldr	r1, [r4, #4]
1a002f3a:	f1a8 0c0c 	sub.w	ip, r8, #12
1a002f3e:	f02c 0c07 	bic.w	ip, ip, #7
1a002f42:	f001 0101 	and.w	r1, r1, #1
1a002f46:	eb04 0e0c 	add.w	lr, r4, ip
1a002f4a:	ea41 010c 	orr.w	r1, r1, ip
1a002f4e:	f04f 0805 	mov.w	r8, #5
1a002f52:	f1bc 0f0f 	cmp.w	ip, #15
1a002f56:	6061      	str	r1, [r4, #4]
1a002f58:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a002f5c:	f200 813b 	bhi.w	1a0031d6 <_malloc_r+0x52a>
1a002f60:	6851      	ldr	r1, [r2, #4]
1a002f62:	4614      	mov	r4, r2
1a002f64:	4b17      	ldr	r3, [pc, #92]	; (1a002fc4 <_malloc_r+0x318>)
1a002f66:	681a      	ldr	r2, [r3, #0]
1a002f68:	4282      	cmp	r2, r0
1a002f6a:	bf38      	it	cc
1a002f6c:	6018      	strcc	r0, [r3, #0]
1a002f6e:	4b16      	ldr	r3, [pc, #88]	; (1a002fc8 <_malloc_r+0x31c>)
1a002f70:	681a      	ldr	r2, [r3, #0]
1a002f72:	4282      	cmp	r2, r0
1a002f74:	bf38      	it	cc
1a002f76:	6018      	strcc	r0, [r3, #0]
1a002f78:	e09d      	b.n	1a0030b6 <_malloc_r+0x40a>
1a002f7a:	1962      	adds	r2, r4, r5
1a002f7c:	f043 0301 	orr.w	r3, r3, #1
1a002f80:	f045 0501 	orr.w	r5, r5, #1
1a002f84:	6065      	str	r5, [r4, #4]
1a002f86:	4630      	mov	r0, r6
1a002f88:	60ba      	str	r2, [r7, #8]
1a002f8a:	6053      	str	r3, [r2, #4]
1a002f8c:	f000 fa36 	bl	1a0033fc <__malloc_unlock>
1a002f90:	3408      	adds	r4, #8
1a002f92:	4620      	mov	r0, r4
1a002f94:	b003      	add	sp, #12
1a002f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f9a:	4423      	add	r3, r4
1a002f9c:	68e1      	ldr	r1, [r4, #12]
1a002f9e:	685a      	ldr	r2, [r3, #4]
1a002fa0:	68a5      	ldr	r5, [r4, #8]
1a002fa2:	f042 0201 	orr.w	r2, r2, #1
1a002fa6:	60e9      	str	r1, [r5, #12]
1a002fa8:	4630      	mov	r0, r6
1a002faa:	608d      	str	r5, [r1, #8]
1a002fac:	605a      	str	r2, [r3, #4]
1a002fae:	f000 fa25 	bl	1a0033fc <__malloc_unlock>
1a002fb2:	3408      	adds	r4, #8
1a002fb4:	e741      	b.n	1a002e3a <_malloc_r+0x18e>
1a002fb6:	bf00      	nop
1a002fb8:	10000478 	.word	0x10000478
1a002fbc:	10000af8 	.word	0x10000af8
1a002fc0:	10000ac8 	.word	0x10000ac8
1a002fc4:	10000af0 	.word	0x10000af0
1a002fc8:	10000af4 	.word	0x10000af4
1a002fcc:	10000480 	.word	0x10000480
1a002fd0:	10000880 	.word	0x10000880
1a002fd4:	0a5a      	lsrs	r2, r3, #9
1a002fd6:	2a04      	cmp	r2, #4
1a002fd8:	d963      	bls.n	1a0030a2 <_malloc_r+0x3f6>
1a002fda:	2a14      	cmp	r2, #20
1a002fdc:	f200 80b7 	bhi.w	1a00314e <_malloc_r+0x4a2>
1a002fe0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a002fe4:	00c9      	lsls	r1, r1, #3
1a002fe6:	325b      	adds	r2, #91	; 0x5b
1a002fe8:	eb07 0e01 	add.w	lr, r7, r1
1a002fec:	5879      	ldr	r1, [r7, r1]
1a002fee:	f1ae 0e08 	sub.w	lr, lr, #8
1a002ff2:	458e      	cmp	lr, r1
1a002ff4:	f000 8091 	beq.w	1a00311a <_malloc_r+0x46e>
1a002ff8:	684a      	ldr	r2, [r1, #4]
1a002ffa:	f022 0203 	bic.w	r2, r2, #3
1a002ffe:	429a      	cmp	r2, r3
1a003000:	d902      	bls.n	1a003008 <_malloc_r+0x35c>
1a003002:	6889      	ldr	r1, [r1, #8]
1a003004:	458e      	cmp	lr, r1
1a003006:	d1f7      	bne.n	1a002ff8 <_malloc_r+0x34c>
1a003008:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a00300c:	687b      	ldr	r3, [r7, #4]
1a00300e:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a003012:	f8ce 4008 	str.w	r4, [lr, #8]
1a003016:	60cc      	str	r4, [r1, #12]
1a003018:	e6ce      	b.n	1a002db8 <_malloc_r+0x10c>
1a00301a:	2b14      	cmp	r3, #20
1a00301c:	d959      	bls.n	1a0030d2 <_malloc_r+0x426>
1a00301e:	2b54      	cmp	r3, #84	; 0x54
1a003020:	f200 809d 	bhi.w	1a00315e <_malloc_r+0x4b2>
1a003024:	0b2b      	lsrs	r3, r5, #12
1a003026:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00302a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a00302e:	00c3      	lsls	r3, r0, #3
1a003030:	e681      	b.n	1a002d36 <_malloc_r+0x8a>
1a003032:	f108 0801 	add.w	r8, r8, #1
1a003036:	f018 0f03 	tst.w	r8, #3
1a00303a:	f10e 0e08 	add.w	lr, lr, #8
1a00303e:	f47f aecd 	bne.w	1a002ddc <_malloc_r+0x130>
1a003042:	e051      	b.n	1a0030e8 <_malloc_r+0x43c>
1a003044:	4419      	add	r1, r3
1a003046:	461c      	mov	r4, r3
1a003048:	684a      	ldr	r2, [r1, #4]
1a00304a:	68db      	ldr	r3, [r3, #12]
1a00304c:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a003050:	f042 0201 	orr.w	r2, r2, #1
1a003054:	604a      	str	r2, [r1, #4]
1a003056:	4630      	mov	r0, r6
1a003058:	60eb      	str	r3, [r5, #12]
1a00305a:	609d      	str	r5, [r3, #8]
1a00305c:	f000 f9ce 	bl	1a0033fc <__malloc_unlock>
1a003060:	e6eb      	b.n	1a002e3a <_malloc_r+0x18e>
1a003062:	08e8      	lsrs	r0, r5, #3
1a003064:	f105 0308 	add.w	r3, r5, #8
1a003068:	e630      	b.n	1a002ccc <_malloc_r+0x20>
1a00306a:	4423      	add	r3, r4
1a00306c:	4630      	mov	r0, r6
1a00306e:	685a      	ldr	r2, [r3, #4]
1a003070:	f042 0201 	orr.w	r2, r2, #1
1a003074:	605a      	str	r2, [r3, #4]
1a003076:	3408      	adds	r4, #8
1a003078:	f000 f9c0 	bl	1a0033fc <__malloc_unlock>
1a00307c:	e6dd      	b.n	1a002e3a <_malloc_r+0x18e>
1a00307e:	1961      	adds	r1, r4, r5
1a003080:	f045 0e01 	orr.w	lr, r5, #1
1a003084:	f042 0501 	orr.w	r5, r2, #1
1a003088:	f8c4 e004 	str.w	lr, [r4, #4]
1a00308c:	4630      	mov	r0, r6
1a00308e:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a003092:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a003096:	604d      	str	r5, [r1, #4]
1a003098:	50e2      	str	r2, [r4, r3]
1a00309a:	f000 f9af 	bl	1a0033fc <__malloc_unlock>
1a00309e:	3408      	adds	r4, #8
1a0030a0:	e6cb      	b.n	1a002e3a <_malloc_r+0x18e>
1a0030a2:	099a      	lsrs	r2, r3, #6
1a0030a4:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a0030a8:	00c9      	lsls	r1, r1, #3
1a0030aa:	3238      	adds	r2, #56	; 0x38
1a0030ac:	e79c      	b.n	1a002fe8 <_malloc_r+0x33c>
1a0030ae:	42bc      	cmp	r4, r7
1a0030b0:	d05f      	beq.n	1a003172 <_malloc_r+0x4c6>
1a0030b2:	68bc      	ldr	r4, [r7, #8]
1a0030b4:	6861      	ldr	r1, [r4, #4]
1a0030b6:	f021 0b03 	bic.w	fp, r1, #3
1a0030ba:	45ab      	cmp	fp, r5
1a0030bc:	ebab 0305 	sub.w	r3, fp, r5
1a0030c0:	d302      	bcc.n	1a0030c8 <_malloc_r+0x41c>
1a0030c2:	2b0f      	cmp	r3, #15
1a0030c4:	f73f af59 	bgt.w	1a002f7a <_malloc_r+0x2ce>
1a0030c8:	4630      	mov	r0, r6
1a0030ca:	f000 f997 	bl	1a0033fc <__malloc_unlock>
1a0030ce:	2400      	movs	r4, #0
1a0030d0:	e6b3      	b.n	1a002e3a <_malloc_r+0x18e>
1a0030d2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a0030d6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a0030da:	00c3      	lsls	r3, r0, #3
1a0030dc:	e62b      	b.n	1a002d36 <_malloc_r+0x8a>
1a0030de:	f859 3908 	ldr.w	r3, [r9], #-8
1a0030e2:	454b      	cmp	r3, r9
1a0030e4:	f040 8096 	bne.w	1a003214 <_malloc_r+0x568>
1a0030e8:	f010 0f03 	tst.w	r0, #3
1a0030ec:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a0030f0:	d1f5      	bne.n	1a0030de <_malloc_r+0x432>
1a0030f2:	687b      	ldr	r3, [r7, #4]
1a0030f4:	ea23 0304 	bic.w	r3, r3, r4
1a0030f8:	607b      	str	r3, [r7, #4]
1a0030fa:	0064      	lsls	r4, r4, #1
1a0030fc:	429c      	cmp	r4, r3
1a0030fe:	f63f aeb7 	bhi.w	1a002e70 <_malloc_r+0x1c4>
1a003102:	b91c      	cbnz	r4, 1a00310c <_malloc_r+0x460>
1a003104:	e6b4      	b.n	1a002e70 <_malloc_r+0x1c4>
1a003106:	0064      	lsls	r4, r4, #1
1a003108:	f108 0804 	add.w	r8, r8, #4
1a00310c:	421c      	tst	r4, r3
1a00310e:	d0fa      	beq.n	1a003106 <_malloc_r+0x45a>
1a003110:	4640      	mov	r0, r8
1a003112:	e65f      	b.n	1a002dd4 <_malloc_r+0x128>
1a003114:	f103 0b10 	add.w	fp, r3, #16
1a003118:	e6c7      	b.n	1a002eaa <_malloc_r+0x1fe>
1a00311a:	687b      	ldr	r3, [r7, #4]
1a00311c:	1092      	asrs	r2, r2, #2
1a00311e:	f04f 0801 	mov.w	r8, #1
1a003122:	fa08 f202 	lsl.w	r2, r8, r2
1a003126:	4313      	orrs	r3, r2
1a003128:	607b      	str	r3, [r7, #4]
1a00312a:	e770      	b.n	1a00300e <_malloc_r+0x362>
1a00312c:	eb02 000b 	add.w	r0, r2, fp
1a003130:	4240      	negs	r0, r0
1a003132:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a003136:	4649      	mov	r1, r9
1a003138:	4630      	mov	r0, r6
1a00313a:	9200      	str	r2, [sp, #0]
1a00313c:	f7fd fbfe 	bl	1a00093c <_sbrk_r>
1a003140:	1c43      	adds	r3, r0, #1
1a003142:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003146:	f47f aee6 	bne.w	1a002f16 <_malloc_r+0x26a>
1a00314a:	46d1      	mov	r9, sl
1a00314c:	e6e6      	b.n	1a002f1c <_malloc_r+0x270>
1a00314e:	2a54      	cmp	r2, #84	; 0x54
1a003150:	d825      	bhi.n	1a00319e <_malloc_r+0x4f2>
1a003152:	0b1a      	lsrs	r2, r3, #12
1a003154:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a003158:	00c9      	lsls	r1, r1, #3
1a00315a:	326e      	adds	r2, #110	; 0x6e
1a00315c:	e744      	b.n	1a002fe8 <_malloc_r+0x33c>
1a00315e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a003162:	d825      	bhi.n	1a0031b0 <_malloc_r+0x504>
1a003164:	0beb      	lsrs	r3, r5, #15
1a003166:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a00316a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a00316e:	00c3      	lsls	r3, r0, #3
1a003170:	e5e1      	b.n	1a002d36 <_malloc_r+0x8a>
1a003172:	4b29      	ldr	r3, [pc, #164]	; (1a003218 <_malloc_r+0x56c>)
1a003174:	6819      	ldr	r1, [r3, #0]
1a003176:	4459      	add	r1, fp
1a003178:	6019      	str	r1, [r3, #0]
1a00317a:	e6a8      	b.n	1a002ece <_malloc_r+0x222>
1a00317c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a003180:	f1bc 0f00 	cmp.w	ip, #0
1a003184:	f47f aea3 	bne.w	1a002ece <_malloc_r+0x222>
1a003188:	44c3      	add	fp, r8
1a00318a:	68bc      	ldr	r4, [r7, #8]
1a00318c:	f04b 0101 	orr.w	r1, fp, #1
1a003190:	6061      	str	r1, [r4, #4]
1a003192:	e6e7      	b.n	1a002f64 <_malloc_r+0x2b8>
1a003194:	4614      	mov	r4, r2
1a003196:	e6e5      	b.n	1a002f64 <_malloc_r+0x2b8>
1a003198:	2301      	movs	r3, #1
1a00319a:	6053      	str	r3, [r2, #4]
1a00319c:	e794      	b.n	1a0030c8 <_malloc_r+0x41c>
1a00319e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a0031a2:	d823      	bhi.n	1a0031ec <_malloc_r+0x540>
1a0031a4:	0bda      	lsrs	r2, r3, #15
1a0031a6:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a0031aa:	00c9      	lsls	r1, r1, #3
1a0031ac:	3277      	adds	r2, #119	; 0x77
1a0031ae:	e71b      	b.n	1a002fe8 <_malloc_r+0x33c>
1a0031b0:	f240 5254 	movw	r2, #1364	; 0x554
1a0031b4:	4293      	cmp	r3, r2
1a0031b6:	d823      	bhi.n	1a003200 <_malloc_r+0x554>
1a0031b8:	0cab      	lsrs	r3, r5, #18
1a0031ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a0031be:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a0031c2:	00c3      	lsls	r3, r0, #3
1a0031c4:	e5b7      	b.n	1a002d36 <_malloc_r+0x8a>
1a0031c6:	f1aa 0a08 	sub.w	sl, sl, #8
1a0031ca:	44d3      	add	fp, sl
1a0031cc:	ebab 0b02 	sub.w	fp, fp, r2
1a0031d0:	f04f 0900 	mov.w	r9, #0
1a0031d4:	e6a2      	b.n	1a002f1c <_malloc_r+0x270>
1a0031d6:	f104 0108 	add.w	r1, r4, #8
1a0031da:	4630      	mov	r0, r6
1a0031dc:	9300      	str	r3, [sp, #0]
1a0031de:	f7ff fc47 	bl	1a002a70 <_free_r>
1a0031e2:	68bc      	ldr	r4, [r7, #8]
1a0031e4:	9b00      	ldr	r3, [sp, #0]
1a0031e6:	6861      	ldr	r1, [r4, #4]
1a0031e8:	6818      	ldr	r0, [r3, #0]
1a0031ea:	e6bb      	b.n	1a002f64 <_malloc_r+0x2b8>
1a0031ec:	f240 5154 	movw	r1, #1364	; 0x554
1a0031f0:	428a      	cmp	r2, r1
1a0031f2:	d80b      	bhi.n	1a00320c <_malloc_r+0x560>
1a0031f4:	0c9a      	lsrs	r2, r3, #18
1a0031f6:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a0031fa:	00c9      	lsls	r1, r1, #3
1a0031fc:	327c      	adds	r2, #124	; 0x7c
1a0031fe:	e6f3      	b.n	1a002fe8 <_malloc_r+0x33c>
1a003200:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a003204:	207f      	movs	r0, #127	; 0x7f
1a003206:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a00320a:	e594      	b.n	1a002d36 <_malloc_r+0x8a>
1a00320c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a003210:	227e      	movs	r2, #126	; 0x7e
1a003212:	e6e9      	b.n	1a002fe8 <_malloc_r+0x33c>
1a003214:	687b      	ldr	r3, [r7, #4]
1a003216:	e770      	b.n	1a0030fa <_malloc_r+0x44e>
1a003218:	10000ac8 	.word	0x10000ac8

1a00321c <memcpy>:
1a00321c:	4684      	mov	ip, r0
1a00321e:	ea41 0300 	orr.w	r3, r1, r0
1a003222:	f013 0303 	ands.w	r3, r3, #3
1a003226:	d16d      	bne.n	1a003304 <memcpy+0xe8>
1a003228:	3a40      	subs	r2, #64	; 0x40
1a00322a:	d341      	bcc.n	1a0032b0 <memcpy+0x94>
1a00322c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003230:	f840 3b04 	str.w	r3, [r0], #4
1a003234:	f851 3b04 	ldr.w	r3, [r1], #4
1a003238:	f840 3b04 	str.w	r3, [r0], #4
1a00323c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003240:	f840 3b04 	str.w	r3, [r0], #4
1a003244:	f851 3b04 	ldr.w	r3, [r1], #4
1a003248:	f840 3b04 	str.w	r3, [r0], #4
1a00324c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003250:	f840 3b04 	str.w	r3, [r0], #4
1a003254:	f851 3b04 	ldr.w	r3, [r1], #4
1a003258:	f840 3b04 	str.w	r3, [r0], #4
1a00325c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003260:	f840 3b04 	str.w	r3, [r0], #4
1a003264:	f851 3b04 	ldr.w	r3, [r1], #4
1a003268:	f840 3b04 	str.w	r3, [r0], #4
1a00326c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003270:	f840 3b04 	str.w	r3, [r0], #4
1a003274:	f851 3b04 	ldr.w	r3, [r1], #4
1a003278:	f840 3b04 	str.w	r3, [r0], #4
1a00327c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003280:	f840 3b04 	str.w	r3, [r0], #4
1a003284:	f851 3b04 	ldr.w	r3, [r1], #4
1a003288:	f840 3b04 	str.w	r3, [r0], #4
1a00328c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003290:	f840 3b04 	str.w	r3, [r0], #4
1a003294:	f851 3b04 	ldr.w	r3, [r1], #4
1a003298:	f840 3b04 	str.w	r3, [r0], #4
1a00329c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032a0:	f840 3b04 	str.w	r3, [r0], #4
1a0032a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032a8:	f840 3b04 	str.w	r3, [r0], #4
1a0032ac:	3a40      	subs	r2, #64	; 0x40
1a0032ae:	d2bd      	bcs.n	1a00322c <memcpy+0x10>
1a0032b0:	3230      	adds	r2, #48	; 0x30
1a0032b2:	d311      	bcc.n	1a0032d8 <memcpy+0xbc>
1a0032b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032b8:	f840 3b04 	str.w	r3, [r0], #4
1a0032bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032c0:	f840 3b04 	str.w	r3, [r0], #4
1a0032c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032c8:	f840 3b04 	str.w	r3, [r0], #4
1a0032cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032d0:	f840 3b04 	str.w	r3, [r0], #4
1a0032d4:	3a10      	subs	r2, #16
1a0032d6:	d2ed      	bcs.n	1a0032b4 <memcpy+0x98>
1a0032d8:	320c      	adds	r2, #12
1a0032da:	d305      	bcc.n	1a0032e8 <memcpy+0xcc>
1a0032dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0032e0:	f840 3b04 	str.w	r3, [r0], #4
1a0032e4:	3a04      	subs	r2, #4
1a0032e6:	d2f9      	bcs.n	1a0032dc <memcpy+0xc0>
1a0032e8:	3204      	adds	r2, #4
1a0032ea:	d008      	beq.n	1a0032fe <memcpy+0xe2>
1a0032ec:	07d2      	lsls	r2, r2, #31
1a0032ee:	bf1c      	itt	ne
1a0032f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0032f4:	f800 3b01 	strbne.w	r3, [r0], #1
1a0032f8:	d301      	bcc.n	1a0032fe <memcpy+0xe2>
1a0032fa:	880b      	ldrh	r3, [r1, #0]
1a0032fc:	8003      	strh	r3, [r0, #0]
1a0032fe:	4660      	mov	r0, ip
1a003300:	4770      	bx	lr
1a003302:	bf00      	nop
1a003304:	2a08      	cmp	r2, #8
1a003306:	d313      	bcc.n	1a003330 <memcpy+0x114>
1a003308:	078b      	lsls	r3, r1, #30
1a00330a:	d08d      	beq.n	1a003228 <memcpy+0xc>
1a00330c:	f010 0303 	ands.w	r3, r0, #3
1a003310:	d08a      	beq.n	1a003228 <memcpy+0xc>
1a003312:	f1c3 0304 	rsb	r3, r3, #4
1a003316:	1ad2      	subs	r2, r2, r3
1a003318:	07db      	lsls	r3, r3, #31
1a00331a:	bf1c      	itt	ne
1a00331c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003320:	f800 3b01 	strbne.w	r3, [r0], #1
1a003324:	d380      	bcc.n	1a003228 <memcpy+0xc>
1a003326:	f831 3b02 	ldrh.w	r3, [r1], #2
1a00332a:	f820 3b02 	strh.w	r3, [r0], #2
1a00332e:	e77b      	b.n	1a003228 <memcpy+0xc>
1a003330:	3a04      	subs	r2, #4
1a003332:	d3d9      	bcc.n	1a0032e8 <memcpy+0xcc>
1a003334:	3a01      	subs	r2, #1
1a003336:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00333a:	f800 3b01 	strb.w	r3, [r0], #1
1a00333e:	d2f9      	bcs.n	1a003334 <memcpy+0x118>
1a003340:	780b      	ldrb	r3, [r1, #0]
1a003342:	7003      	strb	r3, [r0, #0]
1a003344:	784b      	ldrb	r3, [r1, #1]
1a003346:	7043      	strb	r3, [r0, #1]
1a003348:	788b      	ldrb	r3, [r1, #2]
1a00334a:	7083      	strb	r3, [r0, #2]
1a00334c:	4660      	mov	r0, ip
1a00334e:	4770      	bx	lr

1a003350 <memset>:
1a003350:	b4f0      	push	{r4, r5, r6, r7}
1a003352:	0786      	lsls	r6, r0, #30
1a003354:	d046      	beq.n	1a0033e4 <memset+0x94>
1a003356:	1e54      	subs	r4, r2, #1
1a003358:	2a00      	cmp	r2, #0
1a00335a:	d03c      	beq.n	1a0033d6 <memset+0x86>
1a00335c:	b2ca      	uxtb	r2, r1
1a00335e:	4603      	mov	r3, r0
1a003360:	e002      	b.n	1a003368 <memset+0x18>
1a003362:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003366:	d336      	bcc.n	1a0033d6 <memset+0x86>
1a003368:	f803 2b01 	strb.w	r2, [r3], #1
1a00336c:	079d      	lsls	r5, r3, #30
1a00336e:	d1f8      	bne.n	1a003362 <memset+0x12>
1a003370:	2c03      	cmp	r4, #3
1a003372:	d929      	bls.n	1a0033c8 <memset+0x78>
1a003374:	b2cd      	uxtb	r5, r1
1a003376:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a00337a:	2c0f      	cmp	r4, #15
1a00337c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003380:	d933      	bls.n	1a0033ea <memset+0x9a>
1a003382:	f1a4 0610 	sub.w	r6, r4, #16
1a003386:	0936      	lsrs	r6, r6, #4
1a003388:	f103 0720 	add.w	r7, r3, #32
1a00338c:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003390:	f103 0210 	add.w	r2, r3, #16
1a003394:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003398:	e942 5502 	strd	r5, r5, [r2, #-8]
1a00339c:	3210      	adds	r2, #16
1a00339e:	42ba      	cmp	r2, r7
1a0033a0:	d1f8      	bne.n	1a003394 <memset+0x44>
1a0033a2:	1c72      	adds	r2, r6, #1
1a0033a4:	f014 0f0c 	tst.w	r4, #12
1a0033a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a0033ac:	f004 060f 	and.w	r6, r4, #15
1a0033b0:	d013      	beq.n	1a0033da <memset+0x8a>
1a0033b2:	1f33      	subs	r3, r6, #4
1a0033b4:	f023 0303 	bic.w	r3, r3, #3
1a0033b8:	3304      	adds	r3, #4
1a0033ba:	4413      	add	r3, r2
1a0033bc:	f842 5b04 	str.w	r5, [r2], #4
1a0033c0:	4293      	cmp	r3, r2
1a0033c2:	d1fb      	bne.n	1a0033bc <memset+0x6c>
1a0033c4:	f006 0403 	and.w	r4, r6, #3
1a0033c8:	b12c      	cbz	r4, 1a0033d6 <memset+0x86>
1a0033ca:	b2c9      	uxtb	r1, r1
1a0033cc:	441c      	add	r4, r3
1a0033ce:	f803 1b01 	strb.w	r1, [r3], #1
1a0033d2:	429c      	cmp	r4, r3
1a0033d4:	d1fb      	bne.n	1a0033ce <memset+0x7e>
1a0033d6:	bcf0      	pop	{r4, r5, r6, r7}
1a0033d8:	4770      	bx	lr
1a0033da:	4634      	mov	r4, r6
1a0033dc:	4613      	mov	r3, r2
1a0033de:	2c00      	cmp	r4, #0
1a0033e0:	d1f3      	bne.n	1a0033ca <memset+0x7a>
1a0033e2:	e7f8      	b.n	1a0033d6 <memset+0x86>
1a0033e4:	4614      	mov	r4, r2
1a0033e6:	4603      	mov	r3, r0
1a0033e8:	e7c2      	b.n	1a003370 <memset+0x20>
1a0033ea:	461a      	mov	r2, r3
1a0033ec:	4626      	mov	r6, r4
1a0033ee:	e7e0      	b.n	1a0033b2 <memset+0x62>

1a0033f0 <__malloc_lock>:
1a0033f0:	4801      	ldr	r0, [pc, #4]	; (1a0033f8 <__malloc_lock+0x8>)
1a0033f2:	f7ff bc57 	b.w	1a002ca4 <__retarget_lock_acquire_recursive>
1a0033f6:	bf00      	nop
1a0033f8:	10000b14 	.word	0x10000b14

1a0033fc <__malloc_unlock>:
1a0033fc:	4801      	ldr	r0, [pc, #4]	; (1a003404 <__malloc_unlock+0x8>)
1a0033fe:	f7ff bc53 	b.w	1a002ca8 <__retarget_lock_release_recursive>
1a003402:	bf00      	nop
1a003404:	10000b14 	.word	0x10000b14

1a003408 <sprintf>:
1a003408:	b40e      	push	{r1, r2, r3}
1a00340a:	b530      	push	{r4, r5, lr}
1a00340c:	b09c      	sub	sp, #112	; 0x70
1a00340e:	ab1f      	add	r3, sp, #124	; 0x7c
1a003410:	4c0c      	ldr	r4, [pc, #48]	; (1a003444 <sprintf+0x3c>)
1a003412:	4d0d      	ldr	r5, [pc, #52]	; (1a003448 <sprintf+0x40>)
1a003414:	f853 2b04 	ldr.w	r2, [r3], #4
1a003418:	9301      	str	r3, [sp, #4]
1a00341a:	4601      	mov	r1, r0
1a00341c:	9102      	str	r1, [sp, #8]
1a00341e:	9106      	str	r1, [sp, #24]
1a003420:	6820      	ldr	r0, [r4, #0]
1a003422:	a902      	add	r1, sp, #8
1a003424:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
1a003428:	9407      	str	r4, [sp, #28]
1a00342a:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a00342e:	f000 f897 	bl	1a003560 <_svfprintf_r>
1a003432:	9b02      	ldr	r3, [sp, #8]
1a003434:	2200      	movs	r2, #0
1a003436:	701a      	strb	r2, [r3, #0]
1a003438:	b01c      	add	sp, #112	; 0x70
1a00343a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a00343e:	b003      	add	sp, #12
1a003440:	4770      	bx	lr
1a003442:	bf00      	nop
1a003444:	10000048 	.word	0x10000048
1a003448:	ffff0208 	.word	0xffff0208
1a00344c:	ffffffff 	.word	0xffffffff
1a003450:	ffffffff 	.word	0xffffffff
1a003454:	ffffffff 	.word	0xffffffff
1a003458:	ffffffff 	.word	0xffffffff
1a00345c:	ffffffff 	.word	0xffffffff
1a003460:	ffffffff 	.word	0xffffffff
1a003464:	ffffffff 	.word	0xffffffff
1a003468:	ffffffff 	.word	0xffffffff
1a00346c:	ffffffff 	.word	0xffffffff
1a003470:	ffffffff 	.word	0xffffffff
1a003474:	ffffffff 	.word	0xffffffff
1a003478:	ffffffff 	.word	0xffffffff
1a00347c:	ffffffff 	.word	0xffffffff

1a003480 <strlen>:
1a003480:	f890 f000 	pld	[r0]
1a003484:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003488:	f020 0107 	bic.w	r1, r0, #7
1a00348c:	f06f 0c00 	mvn.w	ip, #0
1a003490:	f010 0407 	ands.w	r4, r0, #7
1a003494:	f891 f020 	pld	[r1, #32]
1a003498:	f040 8049 	bne.w	1a00352e <strlen+0xae>
1a00349c:	f04f 0400 	mov.w	r4, #0
1a0034a0:	f06f 0007 	mvn.w	r0, #7
1a0034a4:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0034a8:	f891 f040 	pld	[r1, #64]	; 0x40
1a0034ac:	f100 0008 	add.w	r0, r0, #8
1a0034b0:	fa82 f24c 	uadd8	r2, r2, ip
1a0034b4:	faa4 f28c 	sel	r2, r4, ip
1a0034b8:	fa83 f34c 	uadd8	r3, r3, ip
1a0034bc:	faa2 f38c 	sel	r3, r2, ip
1a0034c0:	bb4b      	cbnz	r3, 1a003516 <strlen+0x96>
1a0034c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a0034c6:	fa82 f24c 	uadd8	r2, r2, ip
1a0034ca:	f100 0008 	add.w	r0, r0, #8
1a0034ce:	faa4 f28c 	sel	r2, r4, ip
1a0034d2:	fa83 f34c 	uadd8	r3, r3, ip
1a0034d6:	faa2 f38c 	sel	r3, r2, ip
1a0034da:	b9e3      	cbnz	r3, 1a003516 <strlen+0x96>
1a0034dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a0034e0:	fa82 f24c 	uadd8	r2, r2, ip
1a0034e4:	f100 0008 	add.w	r0, r0, #8
1a0034e8:	faa4 f28c 	sel	r2, r4, ip
1a0034ec:	fa83 f34c 	uadd8	r3, r3, ip
1a0034f0:	faa2 f38c 	sel	r3, r2, ip
1a0034f4:	b97b      	cbnz	r3, 1a003516 <strlen+0x96>
1a0034f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a0034fa:	f101 0120 	add.w	r1, r1, #32
1a0034fe:	fa82 f24c 	uadd8	r2, r2, ip
1a003502:	f100 0008 	add.w	r0, r0, #8
1a003506:	faa4 f28c 	sel	r2, r4, ip
1a00350a:	fa83 f34c 	uadd8	r3, r3, ip
1a00350e:	faa2 f38c 	sel	r3, r2, ip
1a003512:	2b00      	cmp	r3, #0
1a003514:	d0c6      	beq.n	1a0034a4 <strlen+0x24>
1a003516:	2a00      	cmp	r2, #0
1a003518:	bf04      	itt	eq
1a00351a:	3004      	addeq	r0, #4
1a00351c:	461a      	moveq	r2, r3
1a00351e:	ba12      	rev	r2, r2
1a003520:	fab2 f282 	clz	r2, r2
1a003524:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a003528:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a00352c:	4770      	bx	lr
1a00352e:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003532:	f004 0503 	and.w	r5, r4, #3
1a003536:	f1c4 0000 	rsb	r0, r4, #0
1a00353a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a00353e:	f014 0f04 	tst.w	r4, #4
1a003542:	f891 f040 	pld	[r1, #64]	; 0x40
1a003546:	fa0c f505 	lsl.w	r5, ip, r5
1a00354a:	ea62 0205 	orn	r2, r2, r5
1a00354e:	bf1c      	itt	ne
1a003550:	ea63 0305 	ornne	r3, r3, r5
1a003554:	4662      	movne	r2, ip
1a003556:	f04f 0400 	mov.w	r4, #0
1a00355a:	e7a9      	b.n	1a0034b0 <strlen+0x30>
1a00355c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a003560 <_svfprintf_r>:
1a003560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003564:	b0d5      	sub	sp, #340	; 0x154
1a003566:	460c      	mov	r4, r1
1a003568:	9107      	str	r1, [sp, #28]
1a00356a:	4693      	mov	fp, r2
1a00356c:	9309      	str	r3, [sp, #36]	; 0x24
1a00356e:	9006      	str	r0, [sp, #24]
1a003570:	f002 fcd0 	bl	1a005f14 <_localeconv_r>
1a003574:	6803      	ldr	r3, [r0, #0]
1a003576:	9315      	str	r3, [sp, #84]	; 0x54
1a003578:	4618      	mov	r0, r3
1a00357a:	f7ff ff81 	bl	1a003480 <strlen>
1a00357e:	89a3      	ldrh	r3, [r4, #12]
1a003580:	9013      	str	r0, [sp, #76]	; 0x4c
1a003582:	061d      	lsls	r5, r3, #24
1a003584:	d503      	bpl.n	1a00358e <_svfprintf_r+0x2e>
1a003586:	6923      	ldr	r3, [r4, #16]
1a003588:	2b00      	cmp	r3, #0
1a00358a:	f001 8018 	beq.w	1a0045be <_svfprintf_r+0x105e>
1a00358e:	2300      	movs	r3, #0
1a003590:	465e      	mov	r6, fp
1a003592:	ed9f 7b91 	vldr	d7, [pc, #580]	; 1a0037d8 <_svfprintf_r+0x278>
1a003596:	9312      	str	r3, [sp, #72]	; 0x48
1a003598:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
1a00359c:	9314      	str	r3, [sp, #80]	; 0x50
1a00359e:	9316      	str	r3, [sp, #88]	; 0x58
1a0035a0:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
1a0035a4:	9317      	str	r3, [sp, #92]	; 0x5c
1a0035a6:	9304      	str	r3, [sp, #16]
1a0035a8:	ab2b      	add	r3, sp, #172	; 0xac
1a0035aa:	9328      	str	r3, [sp, #160]	; 0xa0
1a0035ac:	4699      	mov	r9, r3
1a0035ae:	7833      	ldrb	r3, [r6, #0]
1a0035b0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0035b4:	2b00      	cmp	r3, #0
1a0035b6:	f000 8177 	beq.w	1a0038a8 <_svfprintf_r+0x348>
1a0035ba:	2b25      	cmp	r3, #37	; 0x25
1a0035bc:	f000 86c4 	beq.w	1a004348 <_svfprintf_r+0xde8>
1a0035c0:	4635      	mov	r5, r6
1a0035c2:	e003      	b.n	1a0035cc <_svfprintf_r+0x6c>
1a0035c4:	2b25      	cmp	r3, #37	; 0x25
1a0035c6:	f000 8096 	beq.w	1a0036f6 <_svfprintf_r+0x196>
1a0035ca:	4625      	mov	r5, r4
1a0035cc:	786b      	ldrb	r3, [r5, #1]
1a0035ce:	1c6c      	adds	r4, r5, #1
1a0035d0:	2b00      	cmp	r3, #0
1a0035d2:	d1f7      	bne.n	1a0035c4 <_svfprintf_r+0x64>
1a0035d4:	1ba7      	subs	r7, r4, r6
1a0035d6:	f000 8167 	beq.w	1a0038a8 <_svfprintf_r+0x348>
1a0035da:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
1a0035de:	3301      	adds	r3, #1
1a0035e0:	443a      	add	r2, r7
1a0035e2:	2b07      	cmp	r3, #7
1a0035e4:	f8c9 6000 	str.w	r6, [r9]
1a0035e8:	f8c9 7004 	str.w	r7, [r9, #4]
1a0035ec:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
1a0035f0:	f300 8084 	bgt.w	1a0036fc <_svfprintf_r+0x19c>
1a0035f4:	f109 0908 	add.w	r9, r9, #8
1a0035f8:	9a04      	ldr	r2, [sp, #16]
1a0035fa:	786b      	ldrb	r3, [r5, #1]
1a0035fc:	443a      	add	r2, r7
1a0035fe:	9204      	str	r2, [sp, #16]
1a003600:	2b00      	cmp	r3, #0
1a003602:	f000 8151 	beq.w	1a0038a8 <_svfprintf_r+0x348>
1a003606:	2300      	movs	r3, #0
1a003608:	f894 8001 	ldrb.w	r8, [r4, #1]
1a00360c:	9305      	str	r3, [sp, #20]
1a00360e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003612:	9302      	str	r3, [sp, #8]
1a003614:	f104 0b01 	add.w	fp, r4, #1
1a003618:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
1a00361c:	272b      	movs	r7, #43	; 0x2b
1a00361e:	2120      	movs	r1, #32
1a003620:	f10b 0b01 	add.w	fp, fp, #1
1a003624:	f1a8 0320 	sub.w	r3, r8, #32
1a003628:	2b5a      	cmp	r3, #90	; 0x5a
1a00362a:	f200 836c 	bhi.w	1a003d06 <_svfprintf_r+0x7a6>
1a00362e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a003632:	034b      	.short	0x034b
1a003634:	036a036a 	.word	0x036a036a
1a003638:	036a0344 	.word	0x036a0344
1a00363c:	036a036a 	.word	0x036a036a
1a003640:	036a0321 	.word	0x036a0321
1a003644:	0215036a 	.word	0x0215036a
1a003648:	036a0210 	.word	0x036a0210
1a00364c:	01f600cb 	.word	0x01f600cb
1a003650:	01ef036a 	.word	0x01ef036a
1a003654:	00a800a8 	.word	0x00a800a8
1a003658:	00a800a8 	.word	0x00a800a8
1a00365c:	00a800a8 	.word	0x00a800a8
1a003660:	00a800a8 	.word	0x00a800a8
1a003664:	036a00a8 	.word	0x036a00a8
1a003668:	036a036a 	.word	0x036a036a
1a00366c:	036a036a 	.word	0x036a036a
1a003670:	036a036a 	.word	0x036a036a
1a003674:	036a02df 	.word	0x036a02df
1a003678:	01960223 	.word	0x01960223
1a00367c:	02df02df 	.word	0x02df02df
1a003680:	036a02df 	.word	0x036a02df
1a003684:	036a036a 	.word	0x036a036a
1a003688:	018f036a 	.word	0x018f036a
1a00368c:	036a036a 	.word	0x036a036a
1a003690:	036a017e 	.word	0x036a017e
1a003694:	036a036a 	.word	0x036a036a
1a003698:	036a0152 	.word	0x036a0152
1a00369c:	036a01ca 	.word	0x036a01ca
1a0036a0:	00b7036a 	.word	0x00b7036a
1a0036a4:	036a036a 	.word	0x036a036a
1a0036a8:	036a036a 	.word	0x036a036a
1a0036ac:	036a036a 	.word	0x036a036a
1a0036b0:	036a036a 	.word	0x036a036a
1a0036b4:	036a02df 	.word	0x036a02df
1a0036b8:	01d90223 	.word	0x01d90223
1a0036bc:	02df02df 	.word	0x02df02df
1a0036c0:	01bf02df 	.word	0x01bf02df
1a0036c4:	005b01d9 	.word	0x005b01d9
1a0036c8:	0147036a 	.word	0x0147036a
1a0036cc:	011e036a 	.word	0x011e036a
1a0036d0:	00db010c 	.word	0x00db010c
1a0036d4:	036a005b 	.word	0x036a005b
1a0036d8:	005f0152 	.word	0x005f0152
1a0036dc:	036a0355 	.word	0x036a0355
1a0036e0:	0089036a 	.word	0x0089036a
1a0036e4:	005f036a 	.word	0x005f036a
1a0036e8:	9b02      	ldr	r3, [sp, #8]
1a0036ea:	f043 0320 	orr.w	r3, r3, #32
1a0036ee:	9302      	str	r3, [sp, #8]
1a0036f0:	f89b 8000 	ldrb.w	r8, [fp]
1a0036f4:	e794      	b.n	1a003620 <_svfprintf_r+0xc0>
1a0036f6:	1ba7      	subs	r7, r4, r6
1a0036f8:	d085      	beq.n	1a003606 <_svfprintf_r+0xa6>
1a0036fa:	e76e      	b.n	1a0035da <_svfprintf_r+0x7a>
1a0036fc:	aa28      	add	r2, sp, #160	; 0xa0
1a0036fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a003702:	f003 f9f5 	bl	1a006af0 <__ssprint_r>
1a003706:	b980      	cbnz	r0, 1a00372a <_svfprintf_r+0x1ca>
1a003708:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00370c:	e774      	b.n	1a0035f8 <_svfprintf_r+0x98>
1a00370e:	aa28      	add	r2, sp, #160	; 0xa0
1a003710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a003714:	f003 f9ec 	bl	1a006af0 <__ssprint_r>
1a003718:	2800      	cmp	r0, #0
1a00371a:	f000 8221 	beq.w	1a003b60 <_svfprintf_r+0x600>
1a00371e:	9b08      	ldr	r3, [sp, #32]
1a003720:	b11b      	cbz	r3, 1a00372a <_svfprintf_r+0x1ca>
1a003722:	9908      	ldr	r1, [sp, #32]
1a003724:	9806      	ldr	r0, [sp, #24]
1a003726:	f7ff f9a3 	bl	1a002a70 <_free_r>
1a00372a:	9b07      	ldr	r3, [sp, #28]
1a00372c:	899b      	ldrh	r3, [r3, #12]
1a00372e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003732:	9b04      	ldr	r3, [sp, #16]
1a003734:	bf18      	it	ne
1a003736:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
1a00373a:	9304      	str	r3, [sp, #16]
1a00373c:	9804      	ldr	r0, [sp, #16]
1a00373e:	b055      	add	sp, #340	; 0x154
1a003740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003744:	4b26      	ldr	r3, [pc, #152]	; (1a0037e0 <_svfprintf_r+0x280>)
1a003746:	9314      	str	r3, [sp, #80]	; 0x50
1a003748:	9b02      	ldr	r3, [sp, #8]
1a00374a:	0699      	lsls	r1, r3, #26
1a00374c:	d52d      	bpl.n	1a0037aa <_svfprintf_r+0x24a>
1a00374e:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003750:	3407      	adds	r4, #7
1a003752:	f024 0307 	bic.w	r3, r4, #7
1a003756:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a00375a:	9309      	str	r3, [sp, #36]	; 0x24
1a00375c:	9a02      	ldr	r2, [sp, #8]
1a00375e:	07d6      	lsls	r6, r2, #31
1a003760:	d50a      	bpl.n	1a003778 <_svfprintf_r+0x218>
1a003762:	ea54 0305 	orrs.w	r3, r4, r5
1a003766:	d007      	beq.n	1a003778 <_svfprintf_r+0x218>
1a003768:	2330      	movs	r3, #48	; 0x30
1a00376a:	f042 0202 	orr.w	r2, r2, #2
1a00376e:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
1a003772:	9202      	str	r2, [sp, #8]
1a003774:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a003778:	9b02      	ldr	r3, [sp, #8]
1a00377a:	f423 6780 	bic.w	r7, r3, #1024	; 0x400
1a00377e:	2302      	movs	r3, #2
1a003780:	e044      	b.n	1a00380c <_svfprintf_r+0x2ac>
1a003782:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003786:	2200      	movs	r2, #0
1a003788:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a00378c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a003790:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a003794:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003798:	2b09      	cmp	r3, #9
1a00379a:	d9f5      	bls.n	1a003788 <_svfprintf_r+0x228>
1a00379c:	9205      	str	r2, [sp, #20]
1a00379e:	e741      	b.n	1a003624 <_svfprintf_r+0xc4>
1a0037a0:	4b10      	ldr	r3, [pc, #64]	; (1a0037e4 <_svfprintf_r+0x284>)
1a0037a2:	9314      	str	r3, [sp, #80]	; 0x50
1a0037a4:	9b02      	ldr	r3, [sp, #8]
1a0037a6:	0699      	lsls	r1, r3, #26
1a0037a8:	d4d1      	bmi.n	1a00374e <_svfprintf_r+0x1ee>
1a0037aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0037ac:	f853 4b04 	ldr.w	r4, [r3], #4
1a0037b0:	9309      	str	r3, [sp, #36]	; 0x24
1a0037b2:	9b02      	ldr	r3, [sp, #8]
1a0037b4:	06da      	lsls	r2, r3, #27
1a0037b6:	f100 85ef 	bmi.w	1a004398 <_svfprintf_r+0xe38>
1a0037ba:	9b02      	ldr	r3, [sp, #8]
1a0037bc:	065b      	lsls	r3, r3, #25
1a0037be:	f140 85e7 	bpl.w	1a004390 <_svfprintf_r+0xe30>
1a0037c2:	b2a4      	uxth	r4, r4
1a0037c4:	2500      	movs	r5, #0
1a0037c6:	e7c9      	b.n	1a00375c <_svfprintf_r+0x1fc>
1a0037c8:	f89b 8000 	ldrb.w	r8, [fp]
1a0037cc:	9b02      	ldr	r3, [sp, #8]
1a0037ce:	f043 0304 	orr.w	r3, r3, #4
1a0037d2:	9302      	str	r3, [sp, #8]
1a0037d4:	e724      	b.n	1a003620 <_svfprintf_r+0xc0>
1a0037d6:	bf00      	nop
	...
1a0037e0:	1a0070a8 	.word	0x1a0070a8
1a0037e4:	1a0070bc 	.word	0x1a0070bc
1a0037e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0037ea:	f647 0230 	movw	r2, #30768	; 0x7830
1a0037ee:	f854 3b04 	ldr.w	r3, [r4], #4
1a0037f2:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
1a0037f6:	9a02      	ldr	r2, [sp, #8]
1a0037f8:	9409      	str	r4, [sp, #36]	; 0x24
1a0037fa:	461c      	mov	r4, r3
1a0037fc:	4b9d      	ldr	r3, [pc, #628]	; (1a003a74 <_svfprintf_r+0x514>)
1a0037fe:	9314      	str	r3, [sp, #80]	; 0x50
1a003800:	f042 0702 	orr.w	r7, r2, #2
1a003804:	2500      	movs	r5, #0
1a003806:	2302      	movs	r3, #2
1a003808:	f04f 0878 	mov.w	r8, #120	; 0x78
1a00380c:	2200      	movs	r2, #0
1a00380e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a003812:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a003816:	f000 829b 	beq.w	1a003d50 <_svfprintf_r+0x7f0>
1a00381a:	f027 0280 	bic.w	r2, r7, #128	; 0x80
1a00381e:	9202      	str	r2, [sp, #8]
1a003820:	ea54 0205 	orrs.w	r2, r4, r5
1a003824:	f040 8293 	bne.w	1a003d4e <_svfprintf_r+0x7ee>
1a003828:	f1ba 0f00 	cmp.w	sl, #0
1a00382c:	f040 8490 	bne.w	1a004150 <_svfprintf_r+0xbf0>
1a003830:	2b00      	cmp	r3, #0
1a003832:	f040 80b8 	bne.w	1a0039a6 <_svfprintf_r+0x446>
1a003836:	f017 0701 	ands.w	r7, r7, #1
1a00383a:	f000 85a7 	beq.w	1a00438c <_svfprintf_r+0xe2c>
1a00383e:	2330      	movs	r3, #48	; 0x30
1a003840:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
1a003844:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a003848:	e274      	b.n	1a003d34 <_svfprintf_r+0x7d4>
1a00384a:	9f02      	ldr	r7, [sp, #8]
1a00384c:	06be      	lsls	r6, r7, #26
1a00384e:	d474      	bmi.n	1a00393a <_svfprintf_r+0x3da>
1a003850:	9b02      	ldr	r3, [sp, #8]
1a003852:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003854:	06dd      	lsls	r5, r3, #27
1a003856:	f852 4b04 	ldr.w	r4, [r2], #4
1a00385a:	f101 8399 	bmi.w	1a004f90 <_svfprintf_r+0x1a30>
1a00385e:	9f02      	ldr	r7, [sp, #8]
1a003860:	0678      	lsls	r0, r7, #25
1a003862:	f141 8070 	bpl.w	1a004946 <_svfprintf_r+0x13e6>
1a003866:	9209      	str	r2, [sp, #36]	; 0x24
1a003868:	b2a4      	uxth	r4, r4
1a00386a:	2500      	movs	r5, #0
1a00386c:	e06c      	b.n	1a003948 <_svfprintf_r+0x3e8>
1a00386e:	9902      	ldr	r1, [sp, #8]
1a003870:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003872:	068c      	lsls	r4, r1, #26
1a003874:	f102 0304 	add.w	r3, r2, #4
1a003878:	f100 8591 	bmi.w	1a00439e <_svfprintf_r+0xe3e>
1a00387c:	9a02      	ldr	r2, [sp, #8]
1a00387e:	06d0      	lsls	r0, r2, #27
1a003880:	f100 87ee 	bmi.w	1a004860 <_svfprintf_r+0x1300>
1a003884:	9a02      	ldr	r2, [sp, #8]
1a003886:	0651      	lsls	r1, r2, #25
1a003888:	f101 80a6 	bmi.w	1a0049d8 <_svfprintf_r+0x1478>
1a00388c:	9a02      	ldr	r2, [sp, #8]
1a00388e:	0592      	lsls	r2, r2, #22
1a003890:	f140 87e6 	bpl.w	1a004860 <_svfprintf_r+0x1300>
1a003894:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003896:	9309      	str	r3, [sp, #36]	; 0x24
1a003898:	6812      	ldr	r2, [r2, #0]
1a00389a:	9b04      	ldr	r3, [sp, #16]
1a00389c:	7013      	strb	r3, [r2, #0]
1a00389e:	465e      	mov	r6, fp
1a0038a0:	7833      	ldrb	r3, [r6, #0]
1a0038a2:	2b00      	cmp	r3, #0
1a0038a4:	f47f ae89 	bne.w	1a0035ba <_svfprintf_r+0x5a>
1a0038a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
1a0038aa:	2b00      	cmp	r3, #0
1a0038ac:	f43f af3d 	beq.w	1a00372a <_svfprintf_r+0x1ca>
1a0038b0:	9c07      	ldr	r4, [sp, #28]
1a0038b2:	9806      	ldr	r0, [sp, #24]
1a0038b4:	aa28      	add	r2, sp, #160	; 0xa0
1a0038b6:	4621      	mov	r1, r4
1a0038b8:	f003 f91a 	bl	1a006af0 <__ssprint_r>
1a0038bc:	89a3      	ldrh	r3, [r4, #12]
1a0038be:	e736      	b.n	1a00372e <_svfprintf_r+0x1ce>
1a0038c0:	f89b 8000 	ldrb.w	r8, [fp]
1a0038c4:	9b02      	ldr	r3, [sp, #8]
1a0038c6:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
1a0038ca:	f000 8663 	beq.w	1a004594 <_svfprintf_r+0x1034>
1a0038ce:	f043 0310 	orr.w	r3, r3, #16
1a0038d2:	9302      	str	r3, [sp, #8]
1a0038d4:	e6a4      	b.n	1a003620 <_svfprintf_r+0xc0>
1a0038d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0038d8:	f854 6b04 	ldr.w	r6, [r4], #4
1a0038dc:	2500      	movs	r5, #0
1a0038de:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
1a0038e2:	2e00      	cmp	r6, #0
1a0038e4:	f000 867a 	beq.w	1a0045dc <_svfprintf_r+0x107c>
1a0038e8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0038ec:	f000 87f9 	beq.w	1a0048e2 <_svfprintf_r+0x1382>
1a0038f0:	4652      	mov	r2, sl
1a0038f2:	4629      	mov	r1, r5
1a0038f4:	4630      	mov	r0, r6
1a0038f6:	f002 fb13 	bl	1a005f20 <memchr>
1a0038fa:	9008      	str	r0, [sp, #32]
1a0038fc:	2800      	cmp	r0, #0
1a0038fe:	f001 8150 	beq.w	1a004ba2 <_svfprintf_r+0x1642>
1a003902:	9b08      	ldr	r3, [sp, #32]
1a003904:	46aa      	mov	sl, r5
1a003906:	1b9f      	subs	r7, r3, r6
1a003908:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
1a00390c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a003910:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003914:	9409      	str	r4, [sp, #36]	; 0x24
1a003916:	9303      	str	r3, [sp, #12]
1a003918:	f8cd a020 	str.w	sl, [sp, #32]
1a00391c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
1a003920:	2a00      	cmp	r2, #0
1a003922:	f000 80bb 	beq.w	1a003a9c <_svfprintf_r+0x53c>
1a003926:	9b03      	ldr	r3, [sp, #12]
1a003928:	3301      	adds	r3, #1
1a00392a:	9303      	str	r3, [sp, #12]
1a00392c:	e0b6      	b.n	1a003a9c <_svfprintf_r+0x53c>
1a00392e:	9b02      	ldr	r3, [sp, #8]
1a003930:	f043 0710 	orr.w	r7, r3, #16
1a003934:	069b      	lsls	r3, r3, #26
1a003936:	f140 8617 	bpl.w	1a004568 <_svfprintf_r+0x1008>
1a00393a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00393c:	3407      	adds	r4, #7
1a00393e:	f024 0307 	bic.w	r3, r4, #7
1a003942:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a003946:	9309      	str	r3, [sp, #36]	; 0x24
1a003948:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
1a00394c:	2300      	movs	r3, #0
1a00394e:	e75d      	b.n	1a00380c <_svfprintf_r+0x2ac>
1a003950:	9b02      	ldr	r3, [sp, #8]
1a003952:	f89b 8000 	ldrb.w	r8, [fp]
1a003956:	f043 0308 	orr.w	r3, r3, #8
1a00395a:	9302      	str	r3, [sp, #8]
1a00395c:	e660      	b.n	1a003620 <_svfprintf_r+0xc0>
1a00395e:	9b02      	ldr	r3, [sp, #8]
1a003960:	069c      	lsls	r4, r3, #26
1a003962:	f043 0710 	orr.w	r7, r3, #16
1a003966:	f140 85f1 	bpl.w	1a00454c <_svfprintf_r+0xfec>
1a00396a:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a00396c:	3407      	adds	r4, #7
1a00396e:	f024 0307 	bic.w	r3, r4, #7
1a003972:	4619      	mov	r1, r3
1a003974:	e8f1 2302 	ldrd	r2, r3, [r1], #8
1a003978:	9109      	str	r1, [sp, #36]	; 0x24
1a00397a:	4614      	mov	r4, r2
1a00397c:	461d      	mov	r5, r3
1a00397e:	2a00      	cmp	r2, #0
1a003980:	f173 0300 	sbcs.w	r3, r3, #0
1a003984:	f2c0 84d7 	blt.w	1a004336 <_svfprintf_r+0xdd6>
1a003988:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a00398c:	f000 81c7 	beq.w	1a003d1e <_svfprintf_r+0x7be>
1a003990:	f027 0380 	bic.w	r3, r7, #128	; 0x80
1a003994:	9302      	str	r3, [sp, #8]
1a003996:	ea54 0305 	orrs.w	r3, r4, r5
1a00399a:	f040 81bf 	bne.w	1a003d1c <_svfprintf_r+0x7bc>
1a00399e:	f1ba 0f00 	cmp.w	sl, #0
1a0039a2:	f041 803f 	bne.w	1a004a24 <_svfprintf_r+0x14c4>
1a0039a6:	f04f 0a00 	mov.w	sl, #0
1a0039aa:	4657      	mov	r7, sl
1a0039ac:	ae54      	add	r6, sp, #336	; 0x150
1a0039ae:	e1c1      	b.n	1a003d34 <_svfprintf_r+0x7d4>
1a0039b0:	f89b 8000 	ldrb.w	r8, [fp]
1a0039b4:	9b02      	ldr	r3, [sp, #8]
1a0039b6:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
1a0039ba:	f000 85e2 	beq.w	1a004582 <_svfprintf_r+0x1022>
1a0039be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0039c2:	9302      	str	r3, [sp, #8]
1a0039c4:	e62c      	b.n	1a003620 <_svfprintf_r+0xc0>
1a0039c6:	9b02      	ldr	r3, [sp, #8]
1a0039c8:	069a      	lsls	r2, r3, #26
1a0039ca:	f043 0710 	orr.w	r7, r3, #16
1a0039ce:	f140 84f1 	bpl.w	1a0043b4 <_svfprintf_r+0xe54>
1a0039d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a0039d4:	3407      	adds	r4, #7
1a0039d6:	f024 0307 	bic.w	r3, r4, #7
1a0039da:	e8f3 4502 	ldrd	r4, r5, [r3], #8
1a0039de:	9309      	str	r3, [sp, #36]	; 0x24
1a0039e0:	2301      	movs	r3, #1
1a0039e2:	e713      	b.n	1a00380c <_svfprintf_r+0x2ac>
1a0039e4:	9f02      	ldr	r7, [sp, #8]
1a0039e6:	06b8      	lsls	r0, r7, #26
1a0039e8:	d4bf      	bmi.n	1a00396a <_svfprintf_r+0x40a>
1a0039ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0039ec:	1d1a      	adds	r2, r3, #4
1a0039ee:	9b02      	ldr	r3, [sp, #8]
1a0039f0:	06d9      	lsls	r1, r3, #27
1a0039f2:	f101 82d0 	bmi.w	1a004f96 <_svfprintf_r+0x1a36>
1a0039f6:	9f02      	ldr	r7, [sp, #8]
1a0039f8:	463b      	mov	r3, r7
1a0039fa:	065b      	lsls	r3, r3, #25
1a0039fc:	f140 8796 	bpl.w	1a00492c <_svfprintf_r+0x13cc>
1a003a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a02:	9209      	str	r2, [sp, #36]	; 0x24
1a003a04:	f9b3 4000 	ldrsh.w	r4, [r3]
1a003a08:	17e5      	asrs	r5, r4, #31
1a003a0a:	4622      	mov	r2, r4
1a003a0c:	462b      	mov	r3, r5
1a003a0e:	e7b6      	b.n	1a00397e <_svfprintf_r+0x41e>
1a003a10:	9b02      	ldr	r3, [sp, #8]
1a003a12:	f89b 8000 	ldrb.w	r8, [fp]
1a003a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003a1a:	9302      	str	r3, [sp, #8]
1a003a1c:	e600      	b.n	1a003620 <_svfprintf_r+0xc0>
1a003a1e:	465a      	mov	r2, fp
1a003a20:	f812 8b01 	ldrb.w	r8, [r2], #1
1a003a24:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
1a003a28:	f001 828e 	beq.w	1a004f48 <_svfprintf_r+0x19e8>
1a003a2c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003a30:	2b09      	cmp	r3, #9
1a003a32:	4693      	mov	fp, r2
1a003a34:	f04f 0a00 	mov.w	sl, #0
1a003a38:	f63f adf4 	bhi.w	1a003624 <_svfprintf_r+0xc4>
1a003a3c:	f81b 8b01 	ldrb.w	r8, [fp], #1
1a003a40:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a003a44:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
1a003a48:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
1a003a4c:	2b09      	cmp	r3, #9
1a003a4e:	d9f5      	bls.n	1a003a3c <_svfprintf_r+0x4dc>
1a003a50:	e5e8      	b.n	1a003624 <_svfprintf_r+0xc4>
1a003a52:	f88d 7083 	strb.w	r7, [sp, #131]	; 0x83
1a003a56:	f89b 8000 	ldrb.w	r8, [fp]
1a003a5a:	e5e1      	b.n	1a003620 <_svfprintf_r+0xc0>
1a003a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a5e:	f89b 8000 	ldrb.w	r8, [fp]
1a003a62:	f853 2b04 	ldr.w	r2, [r3], #4
1a003a66:	9205      	str	r2, [sp, #20]
1a003a68:	2a00      	cmp	r2, #0
1a003a6a:	f2c0 8585 	blt.w	1a004578 <_svfprintf_r+0x1018>
1a003a6e:	9309      	str	r3, [sp, #36]	; 0x24
1a003a70:	e5d6      	b.n	1a003620 <_svfprintf_r+0xc0>
1a003a72:	bf00      	nop
1a003a74:	1a0070a8 	.word	0x1a0070a8
1a003a78:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003a7a:	2300      	movs	r3, #0
1a003a7c:	f854 2b04 	ldr.w	r2, [r4], #4
1a003a80:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
1a003a84:	2701      	movs	r7, #1
1a003a86:	461a      	mov	r2, r3
1a003a88:	9703      	str	r7, [sp, #12]
1a003a8a:	9409      	str	r4, [sp, #36]	; 0x24
1a003a8c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a003a90:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a003a94:	9208      	str	r2, [sp, #32]
1a003a96:	4692      	mov	sl, r2
1a003a98:	920c      	str	r2, [sp, #48]	; 0x30
1a003a9a:	ae3b      	add	r6, sp, #236	; 0xec
1a003a9c:	9b02      	ldr	r3, [sp, #8]
1a003a9e:	f013 0302 	ands.w	r3, r3, #2
1a003aa2:	930a      	str	r3, [sp, #40]	; 0x28
1a003aa4:	d002      	beq.n	1a003aac <_svfprintf_r+0x54c>
1a003aa6:	9b03      	ldr	r3, [sp, #12]
1a003aa8:	3302      	adds	r3, #2
1a003aaa:	9303      	str	r3, [sp, #12]
1a003aac:	9b02      	ldr	r3, [sp, #8]
1a003aae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a003ab0:	f013 0384 	ands.w	r3, r3, #132	; 0x84
1a003ab4:	930b      	str	r3, [sp, #44]	; 0x2c
1a003ab6:	d104      	bne.n	1a003ac2 <_svfprintf_r+0x562>
1a003ab8:	9b05      	ldr	r3, [sp, #20]
1a003aba:	9903      	ldr	r1, [sp, #12]
1a003abc:	1a5d      	subs	r5, r3, r1
1a003abe:	2d00      	cmp	r5, #0
1a003ac0:	dc5a      	bgt.n	1a003b78 <_svfprintf_r+0x618>
1a003ac2:	b172      	cbz	r2, 1a003ae2 <_svfprintf_r+0x582>
1a003ac4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003ac6:	3201      	adds	r2, #1
1a003ac8:	3401      	adds	r4, #1
1a003aca:	f10d 0083 	add.w	r0, sp, #131	; 0x83
1a003ace:	2101      	movs	r1, #1
1a003ad0:	2a07      	cmp	r2, #7
1a003ad2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003ad6:	e9c9 0100 	strd	r0, r1, [r9]
1a003ada:	f300 82e9 	bgt.w	1a0040b0 <_svfprintf_r+0xb50>
1a003ade:	f109 0908 	add.w	r9, r9, #8
1a003ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003ae4:	b16b      	cbz	r3, 1a003b02 <_svfprintf_r+0x5a2>
1a003ae6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003ae8:	3301      	adds	r3, #1
1a003aea:	3402      	adds	r4, #2
1a003aec:	a921      	add	r1, sp, #132	; 0x84
1a003aee:	2202      	movs	r2, #2
1a003af0:	2b07      	cmp	r3, #7
1a003af2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003af6:	e9c9 1200 	strd	r1, r2, [r9]
1a003afa:	f300 82e5 	bgt.w	1a0040c8 <_svfprintf_r+0xb68>
1a003afe:	f109 0908 	add.w	r9, r9, #8
1a003b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003b04:	2b80      	cmp	r3, #128	; 0x80
1a003b06:	f000 81f8 	beq.w	1a003efa <_svfprintf_r+0x99a>
1a003b0a:	ebaa 0507 	sub.w	r5, sl, r7
1a003b0e:	2d00      	cmp	r5, #0
1a003b10:	f300 8236 	bgt.w	1a003f80 <_svfprintf_r+0xa20>
1a003b14:	9b02      	ldr	r3, [sp, #8]
1a003b16:	05da      	lsls	r2, r3, #23
1a003b18:	f100 8185 	bmi.w	1a003e26 <_svfprintf_r+0x8c6>
1a003b1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003b1e:	f8c9 6000 	str.w	r6, [r9]
1a003b22:	3301      	adds	r3, #1
1a003b24:	443c      	add	r4, r7
1a003b26:	2b07      	cmp	r3, #7
1a003b28:	942a      	str	r4, [sp, #168]	; 0xa8
1a003b2a:	f8c9 7004 	str.w	r7, [r9, #4]
1a003b2e:	9329      	str	r3, [sp, #164]	; 0xa4
1a003b30:	f300 82b2 	bgt.w	1a004098 <_svfprintf_r+0xb38>
1a003b34:	f109 0908 	add.w	r9, r9, #8
1a003b38:	9b02      	ldr	r3, [sp, #8]
1a003b3a:	0759      	lsls	r1, r3, #29
1a003b3c:	d505      	bpl.n	1a003b4a <_svfprintf_r+0x5ea>
1a003b3e:	9b05      	ldr	r3, [sp, #20]
1a003b40:	9a03      	ldr	r2, [sp, #12]
1a003b42:	1a9d      	subs	r5, r3, r2
1a003b44:	2d00      	cmp	r5, #0
1a003b46:	f300 82cb 	bgt.w	1a0040e0 <_svfprintf_r+0xb80>
1a003b4a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
1a003b4e:	9903      	ldr	r1, [sp, #12]
1a003b50:	428a      	cmp	r2, r1
1a003b52:	bfac      	ite	ge
1a003b54:	189b      	addge	r3, r3, r2
1a003b56:	185b      	addlt	r3, r3, r1
1a003b58:	9304      	str	r3, [sp, #16]
1a003b5a:	2c00      	cmp	r4, #0
1a003b5c:	f47f add7 	bne.w	1a00370e <_svfprintf_r+0x1ae>
1a003b60:	2300      	movs	r3, #0
1a003b62:	9329      	str	r3, [sp, #164]	; 0xa4
1a003b64:	9b08      	ldr	r3, [sp, #32]
1a003b66:	b11b      	cbz	r3, 1a003b70 <_svfprintf_r+0x610>
1a003b68:	9908      	ldr	r1, [sp, #32]
1a003b6a:	9806      	ldr	r0, [sp, #24]
1a003b6c:	f7fe ff80 	bl	1a002a70 <_free_r>
1a003b70:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a003b74:	465e      	mov	r6, fp
1a003b76:	e693      	b.n	1a0038a0 <_svfprintf_r+0x340>
1a003b78:	2d10      	cmp	r5, #16
1a003b7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003b7c:	dd29      	ble.n	1a003bd2 <_svfprintf_r+0x672>
1a003b7e:	4620      	mov	r0, r4
1a003b80:	4649      	mov	r1, r9
1a003b82:	2310      	movs	r3, #16
1a003b84:	46b1      	mov	r9, r6
1a003b86:	971e      	str	r7, [sp, #120]	; 0x78
1a003b88:	9c06      	ldr	r4, [sp, #24]
1a003b8a:	9e07      	ldr	r6, [sp, #28]
1a003b8c:	e004      	b.n	1a003b98 <_svfprintf_r+0x638>
1a003b8e:	3d10      	subs	r5, #16
1a003b90:	2d10      	cmp	r5, #16
1a003b92:	f101 0108 	add.w	r1, r1, #8
1a003b96:	dd18      	ble.n	1a003bca <_svfprintf_r+0x66a>
1a003b98:	3201      	adds	r2, #1
1a003b9a:	4fc4      	ldr	r7, [pc, #784]	; (1a003eac <_svfprintf_r+0x94c>)
1a003b9c:	3010      	adds	r0, #16
1a003b9e:	2a07      	cmp	r2, #7
1a003ba0:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a003ba4:	e9c1 7300 	strd	r7, r3, [r1]
1a003ba8:	ddf1      	ble.n	1a003b8e <_svfprintf_r+0x62e>
1a003baa:	aa28      	add	r2, sp, #160	; 0xa0
1a003bac:	4631      	mov	r1, r6
1a003bae:	4620      	mov	r0, r4
1a003bb0:	f002 ff9e 	bl	1a006af0 <__ssprint_r>
1a003bb4:	2800      	cmp	r0, #0
1a003bb6:	f47f adb2 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a003bba:	3d10      	subs	r5, #16
1a003bbc:	2d10      	cmp	r5, #16
1a003bbe:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a003bc2:	a92b      	add	r1, sp, #172	; 0xac
1a003bc4:	f04f 0310 	mov.w	r3, #16
1a003bc8:	dce6      	bgt.n	1a003b98 <_svfprintf_r+0x638>
1a003bca:	9f1e      	ldr	r7, [sp, #120]	; 0x78
1a003bcc:	464e      	mov	r6, r9
1a003bce:	4604      	mov	r4, r0
1a003bd0:	4689      	mov	r9, r1
1a003bd2:	3201      	adds	r2, #1
1a003bd4:	4bb5      	ldr	r3, [pc, #724]	; (1a003eac <_svfprintf_r+0x94c>)
1a003bd6:	442c      	add	r4, r5
1a003bd8:	2a07      	cmp	r2, #7
1a003bda:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003bde:	e9c9 3500 	strd	r3, r5, [r9]
1a003be2:	f300 85c9 	bgt.w	1a004778 <_svfprintf_r+0x1218>
1a003be6:	f109 0908 	add.w	r9, r9, #8
1a003bea:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003bee:	e768      	b.n	1a003ac2 <_svfprintf_r+0x562>
1a003bf0:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a003bf2:	3407      	adds	r4, #7
1a003bf4:	f024 0307 	bic.w	r3, r4, #7
1a003bf8:	ecb3 7b02 	vldmia	r3!, {d7}
1a003bfc:	ec55 4b17 	vmov	r4, r5, d7
1a003c00:	9309      	str	r3, [sp, #36]	; 0x24
1a003c02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
1a003c06:	931b      	str	r3, [sp, #108]	; 0x6c
1a003c08:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
1a003c0c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a003c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003c14:	4ba6      	ldr	r3, [pc, #664]	; (1a003eb0 <_svfprintf_r+0x950>)
1a003c16:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003c1a:	f7fe fd19 	bl	1a002650 <__aeabi_dcmpun>
1a003c1e:	2800      	cmp	r0, #0
1a003c20:	f040 83d1 	bne.w	1a0043c6 <_svfprintf_r+0xe66>
1a003c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003c28:	4ba1      	ldr	r3, [pc, #644]	; (1a003eb0 <_svfprintf_r+0x950>)
1a003c2a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
1a003c2e:	f7fe fcf1 	bl	1a002614 <__aeabi_dcmple>
1a003c32:	2800      	cmp	r0, #0
1a003c34:	f040 83c7 	bne.w	1a0043c6 <_svfprintf_r+0xe66>
1a003c38:	2200      	movs	r2, #0
1a003c3a:	2300      	movs	r3, #0
1a003c3c:	4620      	mov	r0, r4
1a003c3e:	4629      	mov	r1, r5
1a003c40:	f7fe fcde 	bl	1a002600 <__aeabi_dcmplt>
1a003c44:	2800      	cmp	r0, #0
1a003c46:	f040 86a0 	bne.w	1a00498a <_svfprintf_r+0x142a>
1a003c4a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003c4e:	4e99      	ldr	r6, [pc, #612]	; (1a003eb4 <_svfprintf_r+0x954>)
1a003c50:	4b99      	ldr	r3, [pc, #612]	; (1a003eb8 <_svfprintf_r+0x958>)
1a003c52:	9802      	ldr	r0, [sp, #8]
1a003c54:	2100      	movs	r1, #0
1a003c56:	2703      	movs	r7, #3
1a003c58:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a003c5c:	9703      	str	r7, [sp, #12]
1a003c5e:	9108      	str	r1, [sp, #32]
1a003c60:	9002      	str	r0, [sp, #8]
1a003c62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
1a003c66:	bfc8      	it	gt
1a003c68:	461e      	movgt	r6, r3
1a003c6a:	468a      	mov	sl, r1
1a003c6c:	910c      	str	r1, [sp, #48]	; 0x30
1a003c6e:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
1a003c72:	e655      	b.n	1a003920 <_svfprintf_r+0x3c0>
1a003c74:	9d06      	ldr	r5, [sp, #24]
1a003c76:	4628      	mov	r0, r5
1a003c78:	f002 f94c 	bl	1a005f14 <_localeconv_r>
1a003c7c:	6843      	ldr	r3, [r0, #4]
1a003c7e:	9317      	str	r3, [sp, #92]	; 0x5c
1a003c80:	4618      	mov	r0, r3
1a003c82:	f7ff fbfd 	bl	1a003480 <strlen>
1a003c86:	9019      	str	r0, [sp, #100]	; 0x64
1a003c88:	4604      	mov	r4, r0
1a003c8a:	4628      	mov	r0, r5
1a003c8c:	f002 f942 	bl	1a005f14 <_localeconv_r>
1a003c90:	6883      	ldr	r3, [r0, #8]
1a003c92:	9318      	str	r3, [sp, #96]	; 0x60
1a003c94:	2120      	movs	r1, #32
1a003c96:	2c00      	cmp	r4, #0
1a003c98:	f43f ad2a 	beq.w	1a0036f0 <_svfprintf_r+0x190>
1a003c9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a003c9e:	f89b 8000 	ldrb.w	r8, [fp]
1a003ca2:	2b00      	cmp	r3, #0
1a003ca4:	f43f acbc 	beq.w	1a003620 <_svfprintf_r+0xc0>
1a003ca8:	781b      	ldrb	r3, [r3, #0]
1a003caa:	2b00      	cmp	r3, #0
1a003cac:	f43f acb8 	beq.w	1a003620 <_svfprintf_r+0xc0>
1a003cb0:	9b02      	ldr	r3, [sp, #8]
1a003cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1a003cb6:	9302      	str	r3, [sp, #8]
1a003cb8:	e4b2      	b.n	1a003620 <_svfprintf_r+0xc0>
1a003cba:	9b02      	ldr	r3, [sp, #8]
1a003cbc:	f89b 8000 	ldrb.w	r8, [fp]
1a003cc0:	f043 0301 	orr.w	r3, r3, #1
1a003cc4:	9302      	str	r3, [sp, #8]
1a003cc6:	e4ab      	b.n	1a003620 <_svfprintf_r+0xc0>
1a003cc8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
1a003ccc:	f89b 8000 	ldrb.w	r8, [fp]
1a003cd0:	2b00      	cmp	r3, #0
1a003cd2:	f47f aca5 	bne.w	1a003620 <_svfprintf_r+0xc0>
1a003cd6:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
1a003cda:	e4a1      	b.n	1a003620 <_svfprintf_r+0xc0>
1a003cdc:	9f02      	ldr	r7, [sp, #8]
1a003cde:	463b      	mov	r3, r7
1a003ce0:	069b      	lsls	r3, r3, #26
1a003ce2:	f53f ae76 	bmi.w	1a0039d2 <_svfprintf_r+0x472>
1a003ce6:	9b02      	ldr	r3, [sp, #8]
1a003ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003cea:	06de      	lsls	r6, r3, #27
1a003cec:	f852 4b04 	ldr.w	r4, [r2], #4
1a003cf0:	f101 814b 	bmi.w	1a004f8a <_svfprintf_r+0x1a2a>
1a003cf4:	9f02      	ldr	r7, [sp, #8]
1a003cf6:	067d      	lsls	r5, r7, #25
1a003cf8:	f140 862f 	bpl.w	1a00495a <_svfprintf_r+0x13fa>
1a003cfc:	9209      	str	r2, [sp, #36]	; 0x24
1a003cfe:	b2a4      	uxth	r4, r4
1a003d00:	2500      	movs	r5, #0
1a003d02:	2301      	movs	r3, #1
1a003d04:	e582      	b.n	1a00380c <_svfprintf_r+0x2ac>
1a003d06:	f1b8 0f00 	cmp.w	r8, #0
1a003d0a:	f43f adcd 	beq.w	1a0038a8 <_svfprintf_r+0x348>
1a003d0e:	2300      	movs	r3, #0
1a003d10:	2701      	movs	r7, #1
1a003d12:	461a      	mov	r2, r3
1a003d14:	9703      	str	r7, [sp, #12]
1a003d16:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
1a003d1a:	e6b7      	b.n	1a003a8c <_svfprintf_r+0x52c>
1a003d1c:	9f02      	ldr	r7, [sp, #8]
1a003d1e:	2d00      	cmp	r5, #0
1a003d20:	bf08      	it	eq
1a003d22:	2c0a      	cmpeq	r4, #10
1a003d24:	d239      	bcs.n	1a003d9a <_svfprintf_r+0x83a>
1a003d26:	3430      	adds	r4, #48	; 0x30
1a003d28:	9702      	str	r7, [sp, #8]
1a003d2a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
1a003d2e:	2701      	movs	r7, #1
1a003d30:	f20d 164f 	addw	r6, sp, #335	; 0x14f
1a003d34:	2300      	movs	r3, #0
1a003d36:	4557      	cmp	r7, sl
1a003d38:	9308      	str	r3, [sp, #32]
1a003d3a:	930c      	str	r3, [sp, #48]	; 0x30
1a003d3c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
1a003d40:	463b      	mov	r3, r7
1a003d42:	bfb8      	it	lt
1a003d44:	4653      	movlt	r3, sl
1a003d46:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a003d4a:	9303      	str	r3, [sp, #12]
1a003d4c:	e5e8      	b.n	1a003920 <_svfprintf_r+0x3c0>
1a003d4e:	9f02      	ldr	r7, [sp, #8]
1a003d50:	2b01      	cmp	r3, #1
1a003d52:	d0e4      	beq.n	1a003d1e <_svfprintf_r+0x7be>
1a003d54:	2b02      	cmp	r3, #2
1a003d56:	f000 8202 	beq.w	1a00415e <_svfprintf_r+0xbfe>
1a003d5a:	a954      	add	r1, sp, #336	; 0x150
1a003d5c:	e000      	b.n	1a003d60 <_svfprintf_r+0x800>
1a003d5e:	4631      	mov	r1, r6
1a003d60:	08e2      	lsrs	r2, r4, #3
1a003d62:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a003d66:	08e8      	lsrs	r0, r5, #3
1a003d68:	f004 0307 	and.w	r3, r4, #7
1a003d6c:	4605      	mov	r5, r0
1a003d6e:	4614      	mov	r4, r2
1a003d70:	3330      	adds	r3, #48	; 0x30
1a003d72:	ea54 0205 	orrs.w	r2, r4, r5
1a003d76:	f801 3c01 	strb.w	r3, [r1, #-1]
1a003d7a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a003d7e:	d1ee      	bne.n	1a003d5e <_svfprintf_r+0x7fe>
1a003d80:	07f8      	lsls	r0, r7, #31
1a003d82:	d54c      	bpl.n	1a003e1e <_svfprintf_r+0x8be>
1a003d84:	2b30      	cmp	r3, #48	; 0x30
1a003d86:	d04a      	beq.n	1a003e1e <_svfprintf_r+0x8be>
1a003d88:	2330      	movs	r3, #48	; 0x30
1a003d8a:	3902      	subs	r1, #2
1a003d8c:	f806 3c01 	strb.w	r3, [r6, #-1]
1a003d90:	ab54      	add	r3, sp, #336	; 0x150
1a003d92:	9702      	str	r7, [sp, #8]
1a003d94:	460e      	mov	r6, r1
1a003d96:	1a5f      	subs	r7, r3, r1
1a003d98:	e7cc      	b.n	1a003d34 <_svfprintf_r+0x7d4>
1a003d9a:	f407 6380 	and.w	r3, r7, #1024	; 0x400
1a003d9e:	2200      	movs	r2, #0
1a003da0:	f8cd b008 	str.w	fp, [sp, #8]
1a003da4:	f8cd 800c 	str.w	r8, [sp, #12]
1a003da8:	f8cd 9020 	str.w	r9, [sp, #32]
1a003dac:	ae54      	add	r6, sp, #336	; 0x150
1a003dae:	46b9      	mov	r9, r7
1a003db0:	4693      	mov	fp, r2
1a003db2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a003db6:	461f      	mov	r7, r3
1a003db8:	e007      	b.n	1a003dca <_svfprintf_r+0x86a>
1a003dba:	f7fe fc87 	bl	1a0026cc <__aeabi_uldivmod>
1a003dbe:	2d00      	cmp	r5, #0
1a003dc0:	bf08      	it	eq
1a003dc2:	2c0a      	cmpeq	r4, #10
1a003dc4:	d320      	bcc.n	1a003e08 <_svfprintf_r+0x8a8>
1a003dc6:	4604      	mov	r4, r0
1a003dc8:	460d      	mov	r5, r1
1a003dca:	220a      	movs	r2, #10
1a003dcc:	2300      	movs	r3, #0
1a003dce:	4620      	mov	r0, r4
1a003dd0:	4629      	mov	r1, r5
1a003dd2:	f7fe fc7b 	bl	1a0026cc <__aeabi_uldivmod>
1a003dd6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
1a003dda:	f806 cc01 	strb.w	ip, [r6, #-1]
1a003dde:	4620      	mov	r0, r4
1a003de0:	4629      	mov	r1, r5
1a003de2:	220a      	movs	r2, #10
1a003de4:	2300      	movs	r3, #0
1a003de6:	f10b 0b01 	add.w	fp, fp, #1
1a003dea:	3e01      	subs	r6, #1
1a003dec:	2f00      	cmp	r7, #0
1a003dee:	d0e4      	beq.n	1a003dba <_svfprintf_r+0x85a>
1a003df0:	f898 c000 	ldrb.w	ip, [r8]
1a003df4:	45e3      	cmp	fp, ip
1a003df6:	d1e0      	bne.n	1a003dba <_svfprintf_r+0x85a>
1a003df8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
1a003dfc:	d0dd      	beq.n	1a003dba <_svfprintf_r+0x85a>
1a003dfe:	429d      	cmp	r5, r3
1a003e00:	bf08      	it	eq
1a003e02:	4294      	cmpeq	r4, r2
1a003e04:	f080 8669 	bcs.w	1a004ada <_svfprintf_r+0x157a>
1a003e08:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
1a003e0c:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a003e10:	464f      	mov	r7, r9
1a003e12:	f8dd b008 	ldr.w	fp, [sp, #8]
1a003e16:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a003e1a:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a003e1e:	9702      	str	r7, [sp, #8]
1a003e20:	ab54      	add	r3, sp, #336	; 0x150
1a003e22:	1b9f      	subs	r7, r3, r6
1a003e24:	e786      	b.n	1a003d34 <_svfprintf_r+0x7d4>
1a003e26:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
1a003e2a:	f340 80e3 	ble.w	1a003ff4 <_svfprintf_r+0xa94>
1a003e2e:	2200      	movs	r2, #0
1a003e30:	2300      	movs	r3, #0
1a003e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a003e36:	f7fe fbd9 	bl	1a0025ec <__aeabi_dcmpeq>
1a003e3a:	2800      	cmp	r0, #0
1a003e3c:	f000 81a8 	beq.w	1a004190 <_svfprintf_r+0xc30>
1a003e40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003e42:	4a1e      	ldr	r2, [pc, #120]	; (1a003ebc <_svfprintf_r+0x95c>)
1a003e44:	f8c9 2000 	str.w	r2, [r9]
1a003e48:	3301      	adds	r3, #1
1a003e4a:	3401      	adds	r4, #1
1a003e4c:	2201      	movs	r2, #1
1a003e4e:	2b07      	cmp	r3, #7
1a003e50:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003e54:	f8c9 2004 	str.w	r2, [r9, #4]
1a003e58:	f300 84d1 	bgt.w	1a0047fe <_svfprintf_r+0x129e>
1a003e5c:	f109 0908 	add.w	r9, r9, #8
1a003e60:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003e62:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a003e64:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a003e66:	4293      	cmp	r3, r2
1a003e68:	f280 828a 	bge.w	1a004380 <_svfprintf_r+0xe20>
1a003e6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003e6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a003e70:	f8c9 2000 	str.w	r2, [r9]
1a003e74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a003e76:	f8c9 2004 	str.w	r2, [r9, #4]
1a003e7a:	3301      	adds	r3, #1
1a003e7c:	4414      	add	r4, r2
1a003e7e:	2b07      	cmp	r3, #7
1a003e80:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a003e84:	f300 838f 	bgt.w	1a0045a6 <_svfprintf_r+0x1046>
1a003e88:	f109 0908 	add.w	r9, r9, #8
1a003e8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a003e8e:	1e5d      	subs	r5, r3, #1
1a003e90:	2d00      	cmp	r5, #0
1a003e92:	f77f ae51 	ble.w	1a003b38 <_svfprintf_r+0x5d8>
1a003e96:	2d10      	cmp	r5, #16
1a003e98:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003e9a:	4b09      	ldr	r3, [pc, #36]	; (1a003ec0 <_svfprintf_r+0x960>)
1a003e9c:	f340 84bc 	ble.w	1a004818 <_svfprintf_r+0x12b8>
1a003ea0:	2610      	movs	r6, #16
1a003ea2:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a003ea6:	469a      	mov	sl, r3
1a003ea8:	e012      	b.n	1a003ed0 <_svfprintf_r+0x970>
1a003eaa:	bf00      	nop
1a003eac:	1a0070dc 	.word	0x1a0070dc
1a003eb0:	7fefffff 	.word	0x7fefffff
1a003eb4:	1a007098 	.word	0x1a007098
1a003eb8:	1a00709c 	.word	0x1a00709c
1a003ebc:	1a0070d8 	.word	0x1a0070d8
1a003ec0:	1a0070ec 	.word	0x1a0070ec
1a003ec4:	f109 0908 	add.w	r9, r9, #8
1a003ec8:	3d10      	subs	r5, #16
1a003eca:	2d10      	cmp	r5, #16
1a003ecc:	f340 84a3 	ble.w	1a004816 <_svfprintf_r+0x12b6>
1a003ed0:	3201      	adds	r2, #1
1a003ed2:	3410      	adds	r4, #16
1a003ed4:	2a07      	cmp	r2, #7
1a003ed6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003eda:	e9c9 a600 	strd	sl, r6, [r9]
1a003ede:	ddf1      	ble.n	1a003ec4 <_svfprintf_r+0x964>
1a003ee0:	aa28      	add	r2, sp, #160	; 0xa0
1a003ee2:	4641      	mov	r1, r8
1a003ee4:	4638      	mov	r0, r7
1a003ee6:	f002 fe03 	bl	1a006af0 <__ssprint_r>
1a003eea:	2800      	cmp	r0, #0
1a003eec:	f47f ac17 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a003ef0:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a003ef4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a003ef8:	e7e6      	b.n	1a003ec8 <_svfprintf_r+0x968>
1a003efa:	9b05      	ldr	r3, [sp, #20]
1a003efc:	9a03      	ldr	r2, [sp, #12]
1a003efe:	1a9d      	subs	r5, r3, r2
1a003f00:	2d00      	cmp	r5, #0
1a003f02:	f77f ae02 	ble.w	1a003b0a <_svfprintf_r+0x5aa>
1a003f06:	2d10      	cmp	r5, #16
1a003f08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003f0a:	4b9f      	ldr	r3, [pc, #636]	; (1a004188 <_svfprintf_r+0xc28>)
1a003f0c:	dd28      	ble.n	1a003f60 <_svfprintf_r+0xa00>
1a003f0e:	4620      	mov	r0, r4
1a003f10:	970a      	str	r7, [sp, #40]	; 0x28
1a003f12:	4649      	mov	r1, r9
1a003f14:	9c06      	ldr	r4, [sp, #24]
1a003f16:	46b1      	mov	r9, r6
1a003f18:	461f      	mov	r7, r3
1a003f1a:	9e07      	ldr	r6, [sp, #28]
1a003f1c:	e004      	b.n	1a003f28 <_svfprintf_r+0x9c8>
1a003f1e:	3d10      	subs	r5, #16
1a003f20:	2d10      	cmp	r5, #16
1a003f22:	f101 0108 	add.w	r1, r1, #8
1a003f26:	dd16      	ble.n	1a003f56 <_svfprintf_r+0x9f6>
1a003f28:	3201      	adds	r2, #1
1a003f2a:	3010      	adds	r0, #16
1a003f2c:	2310      	movs	r3, #16
1a003f2e:	2a07      	cmp	r2, #7
1a003f30:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a003f34:	600f      	str	r7, [r1, #0]
1a003f36:	604b      	str	r3, [r1, #4]
1a003f38:	ddf1      	ble.n	1a003f1e <_svfprintf_r+0x9be>
1a003f3a:	aa28      	add	r2, sp, #160	; 0xa0
1a003f3c:	4631      	mov	r1, r6
1a003f3e:	4620      	mov	r0, r4
1a003f40:	f002 fdd6 	bl	1a006af0 <__ssprint_r>
1a003f44:	2800      	cmp	r0, #0
1a003f46:	f47f abea 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a003f4a:	3d10      	subs	r5, #16
1a003f4c:	2d10      	cmp	r5, #16
1a003f4e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a003f52:	a92b      	add	r1, sp, #172	; 0xac
1a003f54:	dce8      	bgt.n	1a003f28 <_svfprintf_r+0x9c8>
1a003f56:	463b      	mov	r3, r7
1a003f58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a003f5a:	464e      	mov	r6, r9
1a003f5c:	4604      	mov	r4, r0
1a003f5e:	4689      	mov	r9, r1
1a003f60:	3201      	adds	r2, #1
1a003f62:	442c      	add	r4, r5
1a003f64:	2a07      	cmp	r2, #7
1a003f66:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003f6a:	e9c9 3500 	strd	r3, r5, [r9]
1a003f6e:	f300 846a 	bgt.w	1a004846 <_svfprintf_r+0x12e6>
1a003f72:	ebaa 0507 	sub.w	r5, sl, r7
1a003f76:	2d00      	cmp	r5, #0
1a003f78:	f109 0908 	add.w	r9, r9, #8
1a003f7c:	f77f adca 	ble.w	1a003b14 <_svfprintf_r+0x5b4>
1a003f80:	2d10      	cmp	r5, #16
1a003f82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a003f84:	4b80      	ldr	r3, [pc, #512]	; (1a004188 <_svfprintf_r+0xc28>)
1a003f86:	dd29      	ble.n	1a003fdc <_svfprintf_r+0xa7c>
1a003f88:	4620      	mov	r0, r4
1a003f8a:	970a      	str	r7, [sp, #40]	; 0x28
1a003f8c:	4649      	mov	r1, r9
1a003f8e:	f04f 0a10 	mov.w	sl, #16
1a003f92:	46b1      	mov	r9, r6
1a003f94:	9c06      	ldr	r4, [sp, #24]
1a003f96:	9e07      	ldr	r6, [sp, #28]
1a003f98:	461f      	mov	r7, r3
1a003f9a:	e004      	b.n	1a003fa6 <_svfprintf_r+0xa46>
1a003f9c:	3d10      	subs	r5, #16
1a003f9e:	2d10      	cmp	r5, #16
1a003fa0:	f101 0108 	add.w	r1, r1, #8
1a003fa4:	dd15      	ble.n	1a003fd2 <_svfprintf_r+0xa72>
1a003fa6:	3201      	adds	r2, #1
1a003fa8:	3010      	adds	r0, #16
1a003faa:	2a07      	cmp	r2, #7
1a003fac:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
1a003fb0:	e9c1 7a00 	strd	r7, sl, [r1]
1a003fb4:	ddf2      	ble.n	1a003f9c <_svfprintf_r+0xa3c>
1a003fb6:	aa28      	add	r2, sp, #160	; 0xa0
1a003fb8:	4631      	mov	r1, r6
1a003fba:	4620      	mov	r0, r4
1a003fbc:	f002 fd98 	bl	1a006af0 <__ssprint_r>
1a003fc0:	2800      	cmp	r0, #0
1a003fc2:	f47f abac 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a003fc6:	3d10      	subs	r5, #16
1a003fc8:	2d10      	cmp	r5, #16
1a003fca:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
1a003fce:	a92b      	add	r1, sp, #172	; 0xac
1a003fd0:	dce9      	bgt.n	1a003fa6 <_svfprintf_r+0xa46>
1a003fd2:	463b      	mov	r3, r7
1a003fd4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a003fd6:	464e      	mov	r6, r9
1a003fd8:	4604      	mov	r4, r0
1a003fda:	4689      	mov	r9, r1
1a003fdc:	3201      	adds	r2, #1
1a003fde:	442c      	add	r4, r5
1a003fe0:	2a07      	cmp	r2, #7
1a003fe2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a003fe6:	e9c9 3500 	strd	r3, r5, [r9]
1a003fea:	f300 8197 	bgt.w	1a00431c <_svfprintf_r+0xdbc>
1a003fee:	f109 0908 	add.w	r9, r9, #8
1a003ff2:	e58f      	b.n	1a003b14 <_svfprintf_r+0x5b4>
1a003ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a003ff6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a003ff8:	2a01      	cmp	r2, #1
1a003ffa:	f104 0401 	add.w	r4, r4, #1
1a003ffe:	f103 0501 	add.w	r5, r3, #1
1a004002:	f109 0708 	add.w	r7, r9, #8
1a004006:	f340 8148 	ble.w	1a00429a <_svfprintf_r+0xd3a>
1a00400a:	2301      	movs	r3, #1
1a00400c:	2d07      	cmp	r5, #7
1a00400e:	f8c9 6000 	str.w	r6, [r9]
1a004012:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a004016:	f8c9 3004 	str.w	r3, [r9, #4]
1a00401a:	f300 8198 	bgt.w	1a00434e <_svfprintf_r+0xdee>
1a00401e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004020:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004022:	1c69      	adds	r1, r5, #1
1a004024:	441c      	add	r4, r3
1a004026:	2907      	cmp	r1, #7
1a004028:	910b      	str	r1, [sp, #44]	; 0x2c
1a00402a:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
1a00402e:	e9c7 2300 	strd	r2, r3, [r7]
1a004032:	f300 8198 	bgt.w	1a004366 <_svfprintf_r+0xe06>
1a004036:	3708      	adds	r7, #8
1a004038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00403a:	9d12      	ldr	r5, [sp, #72]	; 0x48
1a00403c:	f102 0a01 	add.w	sl, r2, #1
1a004040:	2300      	movs	r3, #0
1a004042:	2200      	movs	r2, #0
1a004044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004048:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
1a00404c:	f107 0908 	add.w	r9, r7, #8
1a004050:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a004054:	f7fe faca 	bl	1a0025ec <__aeabi_dcmpeq>
1a004058:	2800      	cmp	r0, #0
1a00405a:	f040 8131 	bne.w	1a0042c0 <_svfprintf_r+0xd60>
1a00405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004060:	f8c7 8004 	str.w	r8, [r7, #4]
1a004064:	3601      	adds	r6, #1
1a004066:	4444      	add	r4, r8
1a004068:	2b07      	cmp	r3, #7
1a00406a:	603e      	str	r6, [r7, #0]
1a00406c:	942a      	str	r4, [sp, #168]	; 0xa8
1a00406e:	9329      	str	r3, [sp, #164]	; 0xa4
1a004070:	f300 8367 	bgt.w	1a004742 <_svfprintf_r+0x11e2>
1a004074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a004076:	f107 0310 	add.w	r3, r7, #16
1a00407a:	3202      	adds	r2, #2
1a00407c:	464f      	mov	r7, r9
1a00407e:	920a      	str	r2, [sp, #40]	; 0x28
1a004080:	4699      	mov	r9, r3
1a004082:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004084:	607a      	str	r2, [r7, #4]
1a004086:	4414      	add	r4, r2
1a004088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00408a:	942a      	str	r4, [sp, #168]	; 0xa8
1a00408c:	ab24      	add	r3, sp, #144	; 0x90
1a00408e:	2a07      	cmp	r2, #7
1a004090:	9229      	str	r2, [sp, #164]	; 0xa4
1a004092:	603b      	str	r3, [r7, #0]
1a004094:	f77f ad50 	ble.w	1a003b38 <_svfprintf_r+0x5d8>
1a004098:	aa28      	add	r2, sp, #160	; 0xa0
1a00409a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00409e:	f002 fd27 	bl	1a006af0 <__ssprint_r>
1a0040a2:	2800      	cmp	r0, #0
1a0040a4:	f47f ab3b 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0040a8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0040aa:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0040ae:	e543      	b.n	1a003b38 <_svfprintf_r+0x5d8>
1a0040b0:	aa28      	add	r2, sp, #160	; 0xa0
1a0040b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0040b6:	f002 fd1b 	bl	1a006af0 <__ssprint_r>
1a0040ba:	2800      	cmp	r0, #0
1a0040bc:	f47f ab2f 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0040c0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0040c2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0040c6:	e50c      	b.n	1a003ae2 <_svfprintf_r+0x582>
1a0040c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0040ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0040ce:	f002 fd0f 	bl	1a006af0 <__ssprint_r>
1a0040d2:	2800      	cmp	r0, #0
1a0040d4:	f47f ab23 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0040d8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0040da:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0040de:	e510      	b.n	1a003b02 <_svfprintf_r+0x5a2>
1a0040e0:	2d10      	cmp	r5, #16
1a0040e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0040e4:	dd20      	ble.n	1a004128 <_svfprintf_r+0xbc8>
1a0040e6:	2610      	movs	r6, #16
1a0040e8:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a0040ec:	e004      	b.n	1a0040f8 <_svfprintf_r+0xb98>
1a0040ee:	3d10      	subs	r5, #16
1a0040f0:	2d10      	cmp	r5, #16
1a0040f2:	f109 0908 	add.w	r9, r9, #8
1a0040f6:	dd17      	ble.n	1a004128 <_svfprintf_r+0xbc8>
1a0040f8:	3301      	adds	r3, #1
1a0040fa:	4a24      	ldr	r2, [pc, #144]	; (1a00418c <_svfprintf_r+0xc2c>)
1a0040fc:	3410      	adds	r4, #16
1a0040fe:	2b07      	cmp	r3, #7
1a004100:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004104:	e9c9 2600 	strd	r2, r6, [r9]
1a004108:	ddf1      	ble.n	1a0040ee <_svfprintf_r+0xb8e>
1a00410a:	aa28      	add	r2, sp, #160	; 0xa0
1a00410c:	4641      	mov	r1, r8
1a00410e:	4638      	mov	r0, r7
1a004110:	f002 fcee 	bl	1a006af0 <__ssprint_r>
1a004114:	2800      	cmp	r0, #0
1a004116:	f47f ab02 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00411a:	3d10      	subs	r5, #16
1a00411c:	2d10      	cmp	r5, #16
1a00411e:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004122:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004126:	dce7      	bgt.n	1a0040f8 <_svfprintf_r+0xb98>
1a004128:	3301      	adds	r3, #1
1a00412a:	4a18      	ldr	r2, [pc, #96]	; (1a00418c <_svfprintf_r+0xc2c>)
1a00412c:	442c      	add	r4, r5
1a00412e:	2b07      	cmp	r3, #7
1a004130:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
1a004134:	e9c9 2500 	strd	r2, r5, [r9]
1a004138:	f77f ad07 	ble.w	1a003b4a <_svfprintf_r+0x5ea>
1a00413c:	aa28      	add	r2, sp, #160	; 0xa0
1a00413e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004142:	f002 fcd5 	bl	1a006af0 <__ssprint_r>
1a004146:	2800      	cmp	r0, #0
1a004148:	f47f aae9 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00414c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00414e:	e4fc      	b.n	1a003b4a <_svfprintf_r+0x5ea>
1a004150:	2b01      	cmp	r3, #1
1a004152:	f000 8467 	beq.w	1a004a24 <_svfprintf_r+0x14c4>
1a004156:	2b02      	cmp	r3, #2
1a004158:	9f02      	ldr	r7, [sp, #8]
1a00415a:	f47f adfe 	bne.w	1a003d5a <_svfprintf_r+0x7fa>
1a00415e:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004160:	ae54      	add	r6, sp, #336	; 0x150
1a004162:	0923      	lsrs	r3, r4, #4
1a004164:	f004 010f 	and.w	r1, r4, #15
1a004168:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a00416c:	092a      	lsrs	r2, r5, #4
1a00416e:	461c      	mov	r4, r3
1a004170:	4615      	mov	r5, r2
1a004172:	5c43      	ldrb	r3, [r0, r1]
1a004174:	f806 3d01 	strb.w	r3, [r6, #-1]!
1a004178:	ea54 0305 	orrs.w	r3, r4, r5
1a00417c:	d1f1      	bne.n	1a004162 <_svfprintf_r+0xc02>
1a00417e:	ab54      	add	r3, sp, #336	; 0x150
1a004180:	9702      	str	r7, [sp, #8]
1a004182:	1b9f      	subs	r7, r3, r6
1a004184:	e5d6      	b.n	1a003d34 <_svfprintf_r+0x7d4>
1a004186:	bf00      	nop
1a004188:	1a0070ec 	.word	0x1a0070ec
1a00418c:	1a0070dc 	.word	0x1a0070dc
1a004190:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004192:	2b00      	cmp	r3, #0
1a004194:	f340 82ff 	ble.w	1a004796 <_svfprintf_r+0x1236>
1a004198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00419a:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a00419c:	4293      	cmp	r3, r2
1a00419e:	bfa8      	it	ge
1a0041a0:	4613      	movge	r3, r2
1a0041a2:	2b00      	cmp	r3, #0
1a0041a4:	461d      	mov	r5, r3
1a0041a6:	dd0d      	ble.n	1a0041c4 <_svfprintf_r+0xc64>
1a0041a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0041aa:	f8c9 6000 	str.w	r6, [r9]
1a0041ae:	3301      	adds	r3, #1
1a0041b0:	442c      	add	r4, r5
1a0041b2:	2b07      	cmp	r3, #7
1a0041b4:	942a      	str	r4, [sp, #168]	; 0xa8
1a0041b6:	f8c9 5004 	str.w	r5, [r9, #4]
1a0041ba:	9329      	str	r3, [sp, #164]	; 0xa4
1a0041bc:	f300 8480 	bgt.w	1a004ac0 <_svfprintf_r+0x1560>
1a0041c0:	f109 0908 	add.w	r9, r9, #8
1a0041c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0041c6:	2d00      	cmp	r5, #0
1a0041c8:	bfa8      	it	ge
1a0041ca:	1b5b      	subge	r3, r3, r5
1a0041cc:	2b00      	cmp	r3, #0
1a0041ce:	461d      	mov	r5, r3
1a0041d0:	f300 8213 	bgt.w	1a0045fa <_svfprintf_r+0x109a>
1a0041d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0041d6:	4433      	add	r3, r6
1a0041d8:	469a      	mov	sl, r3
1a0041da:	9b02      	ldr	r3, [sp, #8]
1a0041dc:	055f      	lsls	r7, r3, #21
1a0041de:	f100 8233 	bmi.w	1a004648 <_svfprintf_r+0x10e8>
1a0041e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0041e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0041e6:	4293      	cmp	r3, r2
1a0041e8:	db03      	blt.n	1a0041f2 <_svfprintf_r+0xc92>
1a0041ea:	9a02      	ldr	r2, [sp, #8]
1a0041ec:	07d5      	lsls	r5, r2, #31
1a0041ee:	f140 83de 	bpl.w	1a0049ae <_svfprintf_r+0x144e>
1a0041f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0041f4:	9915      	ldr	r1, [sp, #84]	; 0x54
1a0041f6:	f8c9 1000 	str.w	r1, [r9]
1a0041fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0041fc:	f8c9 1004 	str.w	r1, [r9, #4]
1a004200:	3201      	adds	r2, #1
1a004202:	440c      	add	r4, r1
1a004204:	2a07      	cmp	r2, #7
1a004206:	942a      	str	r4, [sp, #168]	; 0xa8
1a004208:	9229      	str	r2, [sp, #164]	; 0xa4
1a00420a:	f300 847c 	bgt.w	1a004b06 <_svfprintf_r+0x15a6>
1a00420e:	f109 0908 	add.w	r9, r9, #8
1a004212:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004214:	18b5      	adds	r5, r6, r2
1a004216:	eba5 050a 	sub.w	r5, r5, sl
1a00421a:	1ad3      	subs	r3, r2, r3
1a00421c:	429d      	cmp	r5, r3
1a00421e:	bfa8      	it	ge
1a004220:	461d      	movge	r5, r3
1a004222:	2d00      	cmp	r5, #0
1a004224:	dd0d      	ble.n	1a004242 <_svfprintf_r+0xce2>
1a004226:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004228:	f8c9 a000 	str.w	sl, [r9]
1a00422c:	3201      	adds	r2, #1
1a00422e:	442c      	add	r4, r5
1a004230:	2a07      	cmp	r2, #7
1a004232:	942a      	str	r4, [sp, #168]	; 0xa8
1a004234:	f8c9 5004 	str.w	r5, [r9, #4]
1a004238:	9229      	str	r2, [sp, #164]	; 0xa4
1a00423a:	f300 8579 	bgt.w	1a004d30 <_svfprintf_r+0x17d0>
1a00423e:	f109 0908 	add.w	r9, r9, #8
1a004242:	2d00      	cmp	r5, #0
1a004244:	bfac      	ite	ge
1a004246:	1b5d      	subge	r5, r3, r5
1a004248:	461d      	movlt	r5, r3
1a00424a:	2d00      	cmp	r5, #0
1a00424c:	f77f ac74 	ble.w	1a003b38 <_svfprintf_r+0x5d8>
1a004250:	2d10      	cmp	r5, #16
1a004252:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004254:	4bc2      	ldr	r3, [pc, #776]	; (1a004560 <_svfprintf_r+0x1000>)
1a004256:	f340 82df 	ble.w	1a004818 <_svfprintf_r+0x12b8>
1a00425a:	2610      	movs	r6, #16
1a00425c:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
1a004260:	469a      	mov	sl, r3
1a004262:	e005      	b.n	1a004270 <_svfprintf_r+0xd10>
1a004264:	f109 0908 	add.w	r9, r9, #8
1a004268:	3d10      	subs	r5, #16
1a00426a:	2d10      	cmp	r5, #16
1a00426c:	f340 82d3 	ble.w	1a004816 <_svfprintf_r+0x12b6>
1a004270:	3201      	adds	r2, #1
1a004272:	3410      	adds	r4, #16
1a004274:	2a07      	cmp	r2, #7
1a004276:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00427a:	e9c9 a600 	strd	sl, r6, [r9]
1a00427e:	ddf1      	ble.n	1a004264 <_svfprintf_r+0xd04>
1a004280:	aa28      	add	r2, sp, #160	; 0xa0
1a004282:	4641      	mov	r1, r8
1a004284:	4638      	mov	r0, r7
1a004286:	f002 fc33 	bl	1a006af0 <__ssprint_r>
1a00428a:	2800      	cmp	r0, #0
1a00428c:	f47f aa47 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004290:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004294:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004298:	e7e6      	b.n	1a004268 <_svfprintf_r+0xd08>
1a00429a:	9a02      	ldr	r2, [sp, #8]
1a00429c:	07d0      	lsls	r0, r2, #31
1a00429e:	f53f aeb4 	bmi.w	1a00400a <_svfprintf_r+0xaaa>
1a0042a2:	2201      	movs	r2, #1
1a0042a4:	2d07      	cmp	r5, #7
1a0042a6:	f8c9 6000 	str.w	r6, [r9]
1a0042aa:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
1a0042ae:	f8c9 2004 	str.w	r2, [r9, #4]
1a0042b2:	f300 8246 	bgt.w	1a004742 <_svfprintf_r+0x11e2>
1a0042b6:	3302      	adds	r3, #2
1a0042b8:	930a      	str	r3, [sp, #40]	; 0x28
1a0042ba:	f109 0910 	add.w	r9, r9, #16
1a0042be:	e6e0      	b.n	1a004082 <_svfprintf_r+0xb22>
1a0042c0:	f1b8 0f00 	cmp.w	r8, #0
1a0042c4:	f77f aedd 	ble.w	1a004082 <_svfprintf_r+0xb22>
1a0042c8:	f1b8 0f10 	cmp.w	r8, #16
1a0042cc:	4ba4      	ldr	r3, [pc, #656]	; (1a004560 <_svfprintf_r+0x1000>)
1a0042ce:	f340 8639 	ble.w	1a004f44 <_svfprintf_r+0x19e4>
1a0042d2:	461a      	mov	r2, r3
1a0042d4:	4655      	mov	r5, sl
1a0042d6:	4623      	mov	r3, r4
1a0042d8:	2610      	movs	r6, #16
1a0042da:	f8dd 9018 	ldr.w	r9, [sp, #24]
1a0042de:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a0042e2:	4614      	mov	r4, r2
1a0042e4:	e007      	b.n	1a0042f6 <_svfprintf_r+0xd96>
1a0042e6:	3708      	adds	r7, #8
1a0042e8:	f1a8 0810 	sub.w	r8, r8, #16
1a0042ec:	f1b8 0f10 	cmp.w	r8, #16
1a0042f0:	f340 8304 	ble.w	1a0048fc <_svfprintf_r+0x139c>
1a0042f4:	3501      	adds	r5, #1
1a0042f6:	3310      	adds	r3, #16
1a0042f8:	2d07      	cmp	r5, #7
1a0042fa:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
1a0042fe:	e9c7 4600 	strd	r4, r6, [r7]
1a004302:	ddf0      	ble.n	1a0042e6 <_svfprintf_r+0xd86>
1a004304:	aa28      	add	r2, sp, #160	; 0xa0
1a004306:	4651      	mov	r1, sl
1a004308:	4648      	mov	r0, r9
1a00430a:	f002 fbf1 	bl	1a006af0 <__ssprint_r>
1a00430e:	2800      	cmp	r0, #0
1a004310:	f47f aa05 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004314:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
1a004318:	af2b      	add	r7, sp, #172	; 0xac
1a00431a:	e7e5      	b.n	1a0042e8 <_svfprintf_r+0xd88>
1a00431c:	aa28      	add	r2, sp, #160	; 0xa0
1a00431e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004322:	f002 fbe5 	bl	1a006af0 <__ssprint_r>
1a004326:	2800      	cmp	r0, #0
1a004328:	f47f a9f9 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00432c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00432e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004332:	f7ff bbef 	b.w	1a003b14 <_svfprintf_r+0x5b4>
1a004336:	232d      	movs	r3, #45	; 0x2d
1a004338:	4264      	negs	r4, r4
1a00433a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
1a00433e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a004342:	2301      	movs	r3, #1
1a004344:	f7ff ba65 	b.w	1a003812 <_svfprintf_r+0x2b2>
1a004348:	4634      	mov	r4, r6
1a00434a:	f7ff b95c 	b.w	1a003606 <_svfprintf_r+0xa6>
1a00434e:	aa28      	add	r2, sp, #160	; 0xa0
1a004350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004354:	f002 fbcc 	bl	1a006af0 <__ssprint_r>
1a004358:	2800      	cmp	r0, #0
1a00435a:	f47f a9e0 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00435e:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
1a004362:	af2b      	add	r7, sp, #172	; 0xac
1a004364:	e65b      	b.n	1a00401e <_svfprintf_r+0xabe>
1a004366:	aa28      	add	r2, sp, #160	; 0xa0
1a004368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00436c:	f002 fbc0 	bl	1a006af0 <__ssprint_r>
1a004370:	2800      	cmp	r0, #0
1a004372:	f47f a9d4 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004376:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a00437a:	af2b      	add	r7, sp, #172	; 0xac
1a00437c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00437e:	e65b      	b.n	1a004038 <_svfprintf_r+0xad8>
1a004380:	9b02      	ldr	r3, [sp, #8]
1a004382:	07db      	lsls	r3, r3, #31
1a004384:	f53f ad72 	bmi.w	1a003e6c <_svfprintf_r+0x90c>
1a004388:	f7ff bbd6 	b.w	1a003b38 <_svfprintf_r+0x5d8>
1a00438c:	ae54      	add	r6, sp, #336	; 0x150
1a00438e:	e4d1      	b.n	1a003d34 <_svfprintf_r+0x7d4>
1a004390:	9b02      	ldr	r3, [sp, #8]
1a004392:	059f      	lsls	r7, r3, #22
1a004394:	f100 831c 	bmi.w	1a0049d0 <_svfprintf_r+0x1470>
1a004398:	2500      	movs	r5, #0
1a00439a:	f7ff b9df 	b.w	1a00375c <_svfprintf_r+0x1fc>
1a00439e:	9904      	ldr	r1, [sp, #16]
1a0043a0:	6812      	ldr	r2, [r2, #0]
1a0043a2:	9309      	str	r3, [sp, #36]	; 0x24
1a0043a4:	17cd      	asrs	r5, r1, #31
1a0043a6:	4608      	mov	r0, r1
1a0043a8:	4629      	mov	r1, r5
1a0043aa:	e9c2 0100 	strd	r0, r1, [r2]
1a0043ae:	465e      	mov	r6, fp
1a0043b0:	f7ff ba76 	b.w	1a0038a0 <_svfprintf_r+0x340>
1a0043b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0043b6:	1d1a      	adds	r2, r3, #4
1a0043b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0043ba:	9209      	str	r2, [sp, #36]	; 0x24
1a0043bc:	681c      	ldr	r4, [r3, #0]
1a0043be:	2500      	movs	r5, #0
1a0043c0:	2301      	movs	r3, #1
1a0043c2:	f7ff ba23 	b.w	1a00380c <_svfprintf_r+0x2ac>
1a0043c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0043ca:	4602      	mov	r2, r0
1a0043cc:	460b      	mov	r3, r1
1a0043ce:	f7fe f93f 	bl	1a002650 <__aeabi_dcmpun>
1a0043d2:	2800      	cmp	r0, #0
1a0043d4:	f040 8528 	bne.w	1a004e28 <_svfprintf_r+0x18c8>
1a0043d8:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a0043dc:	f000 850d 	beq.w	1a004dfa <_svfprintf_r+0x189a>
1a0043e0:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a0043e4:	f000 83e9 	beq.w	1a004bba <_svfprintf_r+0x165a>
1a0043e8:	f028 0320 	bic.w	r3, r8, #32
1a0043ec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
1a0043f0:	9303      	str	r3, [sp, #12]
1a0043f2:	f000 8307 	beq.w	1a004a04 <_svfprintf_r+0x14a4>
1a0043f6:	2b47      	cmp	r3, #71	; 0x47
1a0043f8:	d104      	bne.n	1a004404 <_svfprintf_r+0xea4>
1a0043fa:	f1ba 0f00 	cmp.w	sl, #0
1a0043fe:	bf08      	it	eq
1a004400:	f04f 0a01 	moveq.w	sl, #1
1a004404:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
1a004408:	9902      	ldr	r1, [sp, #8]
1a00440a:	2d00      	cmp	r5, #0
1a00440c:	f441 7280 	orr.w	r2, r1, #256	; 0x100
1a004410:	f2c0 8476 	blt.w	1a004d00 <_svfprintf_r+0x17a0>
1a004414:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
1a004418:	2300      	movs	r3, #0
1a00441a:	931e      	str	r3, [sp, #120]	; 0x78
1a00441c:	910a      	str	r1, [sp, #40]	; 0x28
1a00441e:	9308      	str	r3, [sp, #32]
1a004420:	9202      	str	r2, [sp, #8]
1a004422:	9b03      	ldr	r3, [sp, #12]
1a004424:	2b46      	cmp	r3, #70	; 0x46
1a004426:	f000 837c 	beq.w	1a004b22 <_svfprintf_r+0x15c2>
1a00442a:	2b45      	cmp	r3, #69	; 0x45
1a00442c:	f000 84d4 	beq.w	1a004dd8 <_svfprintf_r+0x1878>
1a004430:	aa26      	add	r2, sp, #152	; 0x98
1a004432:	ab23      	add	r3, sp, #140	; 0x8c
1a004434:	e9cd 3200 	strd	r3, r2, [sp]
1a004438:	2102      	movs	r1, #2
1a00443a:	ab22      	add	r3, sp, #136	; 0x88
1a00443c:	4652      	mov	r2, sl
1a00443e:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004442:	9806      	ldr	r0, [sp, #24]
1a004444:	f000 fe3c 	bl	1a0050c0 <_dtoa_r>
1a004448:	9b03      	ldr	r3, [sp, #12]
1a00444a:	2b47      	cmp	r3, #71	; 0x47
1a00444c:	4606      	mov	r6, r0
1a00444e:	f040 858e 	bne.w	1a004f6e <_svfprintf_r+0x1a0e>
1a004452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004454:	07db      	lsls	r3, r3, #31
1a004456:	f100 847b 	bmi.w	1a004d50 <_svfprintf_r+0x17f0>
1a00445a:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a00445c:	1bbb      	subs	r3, r7, r6
1a00445e:	9312      	str	r3, [sp, #72]	; 0x48
1a004460:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004462:	930e      	str	r3, [sp, #56]	; 0x38
1a004464:	9b03      	ldr	r3, [sp, #12]
1a004466:	2b47      	cmp	r3, #71	; 0x47
1a004468:	f000 82ee 	beq.w	1a004a48 <_svfprintf_r+0x14e8>
1a00446c:	9b03      	ldr	r3, [sp, #12]
1a00446e:	2b46      	cmp	r3, #70	; 0x46
1a004470:	f000 8380 	beq.w	1a004b74 <_svfprintf_r+0x1614>
1a004474:	9903      	ldr	r1, [sp, #12]
1a004476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004478:	2941      	cmp	r1, #65	; 0x41
1a00447a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00447e:	fa5f f388 	uxtb.w	r3, r8
1a004482:	bf03      	ittte	eq
1a004484:	330f      	addeq	r3, #15
1a004486:	b2db      	uxtbeq	r3, r3
1a004488:	2101      	moveq	r1, #1
1a00448a:	2100      	movne	r1, #0
1a00448c:	2a00      	cmp	r2, #0
1a00448e:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
1a004492:	bfb8      	it	lt
1a004494:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
1a004496:	9222      	str	r2, [sp, #136]	; 0x88
1a004498:	bfb6      	itet	lt
1a00449a:	f1c3 0201 	rsblt	r2, r3, #1
1a00449e:	232b      	movge	r3, #43	; 0x2b
1a0044a0:	232d      	movlt	r3, #45	; 0x2d
1a0044a2:	2a09      	cmp	r2, #9
1a0044a4:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
1a0044a8:	f340 84ae 	ble.w	1a004e08 <_svfprintf_r+0x18a8>
1a0044ac:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
1a0044b0:	4620      	mov	r0, r4
1a0044b2:	4d2c      	ldr	r5, [pc, #176]	; (1a004564 <_svfprintf_r+0x1004>)
1a0044b4:	e001      	b.n	1a0044ba <_svfprintf_r+0xf5a>
1a0044b6:	4608      	mov	r0, r1
1a0044b8:	461a      	mov	r2, r3
1a0044ba:	fb85 3102 	smull	r3, r1, r5, r2
1a0044be:	17d3      	asrs	r3, r2, #31
1a0044c0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
1a0044c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0044c8:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
1a0044cc:	3130      	adds	r1, #48	; 0x30
1a0044ce:	2a63      	cmp	r2, #99	; 0x63
1a0044d0:	f800 1c01 	strb.w	r1, [r0, #-1]
1a0044d4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a0044d8:	dced      	bgt.n	1a0044b6 <_svfprintf_r+0xf56>
1a0044da:	3330      	adds	r3, #48	; 0x30
1a0044dc:	1e82      	subs	r2, r0, #2
1a0044de:	b2db      	uxtb	r3, r3
1a0044e0:	4294      	cmp	r4, r2
1a0044e2:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0044e6:	f240 8545 	bls.w	1a004f74 <_svfprintf_r+0x1a14>
1a0044ea:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a0044ee:	e001      	b.n	1a0044f4 <_svfprintf_r+0xf94>
1a0044f0:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0044f4:	f802 3b01 	strb.w	r3, [r2], #1
1a0044f8:	428c      	cmp	r4, r1
1a0044fa:	d1f9      	bne.n	1a0044f0 <_svfprintf_r+0xf90>
1a0044fc:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
1a004500:	f10d 0292 	add.w	r2, sp, #146	; 0x92
1a004504:	1a1b      	subs	r3, r3, r0
1a004506:	4413      	add	r3, r2
1a004508:	aa24      	add	r2, sp, #144	; 0x90
1a00450a:	1a9b      	subs	r3, r3, r2
1a00450c:	9316      	str	r3, [sp, #88]	; 0x58
1a00450e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004510:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a004512:	2b01      	cmp	r3, #1
1a004514:	eb03 0702 	add.w	r7, r3, r2
1a004518:	f340 84ee 	ble.w	1a004ef8 <_svfprintf_r+0x1998>
1a00451c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00451e:	441f      	add	r7, r3
1a004520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004522:	2200      	movs	r2, #0
1a004524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
1a004528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1a00452c:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
1a004530:	9302      	str	r3, [sp, #8]
1a004532:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004536:	920c      	str	r2, [sp, #48]	; 0x30
1a004538:	9303      	str	r3, [sp, #12]
1a00453a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
1a00453c:	2b00      	cmp	r3, #0
1a00453e:	f040 82aa 	bne.w	1a004a96 <_svfprintf_r+0x1536>
1a004542:	469a      	mov	sl, r3
1a004544:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004548:	f7ff b9ea 	b.w	1a003920 <_svfprintf_r+0x3c0>
1a00454c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00454e:	1d1a      	adds	r2, r3, #4
1a004550:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004552:	9209      	str	r2, [sp, #36]	; 0x24
1a004554:	681c      	ldr	r4, [r3, #0]
1a004556:	17e5      	asrs	r5, r4, #31
1a004558:	4622      	mov	r2, r4
1a00455a:	462b      	mov	r3, r5
1a00455c:	f7ff ba0f 	b.w	1a00397e <_svfprintf_r+0x41e>
1a004560:	1a0070ec 	.word	0x1a0070ec
1a004564:	66666667 	.word	0x66666667
1a004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00456a:	1d1a      	adds	r2, r3, #4
1a00456c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00456e:	9209      	str	r2, [sp, #36]	; 0x24
1a004570:	681c      	ldr	r4, [r3, #0]
1a004572:	2500      	movs	r5, #0
1a004574:	f7ff b9e8 	b.w	1a003948 <_svfprintf_r+0x3e8>
1a004578:	4252      	negs	r2, r2
1a00457a:	9205      	str	r2, [sp, #20]
1a00457c:	9309      	str	r3, [sp, #36]	; 0x24
1a00457e:	f7ff b925 	b.w	1a0037cc <_svfprintf_r+0x26c>
1a004582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
1a004586:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00458a:	9302      	str	r3, [sp, #8]
1a00458c:	f10b 0b01 	add.w	fp, fp, #1
1a004590:	f7ff b846 	b.w	1a003620 <_svfprintf_r+0xc0>
1a004594:	f043 0320 	orr.w	r3, r3, #32
1a004598:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a00459c:	9302      	str	r3, [sp, #8]
1a00459e:	f10b 0b01 	add.w	fp, fp, #1
1a0045a2:	f7ff b83d 	b.w	1a003620 <_svfprintf_r+0xc0>
1a0045a6:	aa28      	add	r2, sp, #160	; 0xa0
1a0045a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0045ac:	f002 faa0 	bl	1a006af0 <__ssprint_r>
1a0045b0:	2800      	cmp	r0, #0
1a0045b2:	f47f a8b4 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0045b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0045b8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0045bc:	e466      	b.n	1a003e8c <_svfprintf_r+0x92c>
1a0045be:	2140      	movs	r1, #64	; 0x40
1a0045c0:	9806      	ldr	r0, [sp, #24]
1a0045c2:	f7fe fb73 	bl	1a002cac <_malloc_r>
1a0045c6:	9b07      	ldr	r3, [sp, #28]
1a0045c8:	6018      	str	r0, [r3, #0]
1a0045ca:	6118      	str	r0, [r3, #16]
1a0045cc:	2800      	cmp	r0, #0
1a0045ce:	f000 84c6 	beq.w	1a004f5e <_svfprintf_r+0x19fe>
1a0045d2:	9a07      	ldr	r2, [sp, #28]
1a0045d4:	2340      	movs	r3, #64	; 0x40
1a0045d6:	6153      	str	r3, [r2, #20]
1a0045d8:	f7fe bfd9 	b.w	1a00358e <_svfprintf_r+0x2e>
1a0045dc:	4657      	mov	r7, sl
1a0045de:	2f06      	cmp	r7, #6
1a0045e0:	bf28      	it	cs
1a0045e2:	2706      	movcs	r7, #6
1a0045e4:	46b2      	mov	sl, r6
1a0045e6:	960c      	str	r6, [sp, #48]	; 0x30
1a0045e8:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
1a0045ec:	9608      	str	r6, [sp, #32]
1a0045ee:	4632      	mov	r2, r6
1a0045f0:	9703      	str	r7, [sp, #12]
1a0045f2:	9409      	str	r4, [sp, #36]	; 0x24
1a0045f4:	4ebe      	ldr	r6, [pc, #760]	; (1a0048f0 <_svfprintf_r+0x1390>)
1a0045f6:	f7ff b993 	b.w	1a003920 <_svfprintf_r+0x3c0>
1a0045fa:	2d10      	cmp	r5, #16
1a0045fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0045fe:	4bbd      	ldr	r3, [pc, #756]	; (1a0048f4 <_svfprintf_r+0x1394>)
1a004600:	f340 81b8 	ble.w	1a004974 <_svfprintf_r+0x1414>
1a004604:	4619      	mov	r1, r3
1a004606:	2710      	movs	r7, #16
1a004608:	4623      	mov	r3, r4
1a00460a:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a00460e:	460c      	mov	r4, r1
1a004610:	e005      	b.n	1a00461e <_svfprintf_r+0x10be>
1a004612:	f109 0908 	add.w	r9, r9, #8
1a004616:	3d10      	subs	r5, #16
1a004618:	2d10      	cmp	r5, #16
1a00461a:	f340 81a8 	ble.w	1a00496e <_svfprintf_r+0x140e>
1a00461e:	3201      	adds	r2, #1
1a004620:	3310      	adds	r3, #16
1a004622:	2a07      	cmp	r2, #7
1a004624:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a004628:	e9c9 4700 	strd	r4, r7, [r9]
1a00462c:	ddf1      	ble.n	1a004612 <_svfprintf_r+0x10b2>
1a00462e:	aa28      	add	r2, sp, #160	; 0xa0
1a004630:	4651      	mov	r1, sl
1a004632:	4640      	mov	r0, r8
1a004634:	f002 fa5c 	bl	1a006af0 <__ssprint_r>
1a004638:	2800      	cmp	r0, #0
1a00463a:	f47f a870 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00463e:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a004642:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004646:	e7e6      	b.n	1a004616 <_svfprintf_r+0x10b6>
1a004648:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a00464a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a00464e:	18f3      	adds	r3, r6, r3
1a004650:	930a      	str	r3, [sp, #40]	; 0x28
1a004652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004654:	960e      	str	r6, [sp, #56]	; 0x38
1a004656:	464a      	mov	r2, r9
1a004658:	4656      	mov	r6, sl
1a00465a:	4fa6      	ldr	r7, [pc, #664]	; (1a0048f4 <_svfprintf_r+0x1394>)
1a00465c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
1a004660:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
1a004664:	4621      	mov	r1, r4
1a004666:	e9dd b906 	ldrd	fp, r9, [sp, #24]
1a00466a:	2b00      	cmp	r3, #0
1a00466c:	d033      	beq.n	1a0046d6 <_svfprintf_r+0x1176>
1a00466e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004670:	2b00      	cmp	r3, #0
1a004672:	d134      	bne.n	1a0046de <_svfprintf_r+0x117e>
1a004674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004676:	3b01      	subs	r3, #1
1a004678:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a00467c:	930f      	str	r3, [sp, #60]	; 0x3c
1a00467e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a004680:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a004682:	6010      	str	r0, [r2, #0]
1a004684:	3301      	adds	r3, #1
1a004686:	4451      	add	r1, sl
1a004688:	2b07      	cmp	r3, #7
1a00468a:	912a      	str	r1, [sp, #168]	; 0xa8
1a00468c:	f8c2 a004 	str.w	sl, [r2, #4]
1a004690:	9329      	str	r3, [sp, #164]	; 0xa4
1a004692:	dc66      	bgt.n	1a004762 <_svfprintf_r+0x1202>
1a004694:	3208      	adds	r2, #8
1a004696:	980a      	ldr	r0, [sp, #40]	; 0x28
1a004698:	f898 3000 	ldrb.w	r3, [r8]
1a00469c:	1b85      	subs	r5, r0, r6
1a00469e:	429d      	cmp	r5, r3
1a0046a0:	bfa8      	it	ge
1a0046a2:	461d      	movge	r5, r3
1a0046a4:	2d00      	cmp	r5, #0
1a0046a6:	dd0c      	ble.n	1a0046c2 <_svfprintf_r+0x1162>
1a0046a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
1a0046aa:	6016      	str	r6, [r2, #0]
1a0046ac:	3301      	adds	r3, #1
1a0046ae:	4429      	add	r1, r5
1a0046b0:	2b07      	cmp	r3, #7
1a0046b2:	912a      	str	r1, [sp, #168]	; 0xa8
1a0046b4:	6055      	str	r5, [r2, #4]
1a0046b6:	9329      	str	r3, [sp, #164]	; 0xa4
1a0046b8:	f300 80b8 	bgt.w	1a00482c <_svfprintf_r+0x12cc>
1a0046bc:	f898 3000 	ldrb.w	r3, [r8]
1a0046c0:	3208      	adds	r2, #8
1a0046c2:	2d00      	cmp	r5, #0
1a0046c4:	bfac      	ite	ge
1a0046c6:	1b5d      	subge	r5, r3, r5
1a0046c8:	461d      	movlt	r5, r3
1a0046ca:	2d00      	cmp	r5, #0
1a0046cc:	dc0b      	bgt.n	1a0046e6 <_svfprintf_r+0x1186>
1a0046ce:	441e      	add	r6, r3
1a0046d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0046d2:	2b00      	cmp	r3, #0
1a0046d4:	d1cb      	bne.n	1a00466e <_svfprintf_r+0x110e>
1a0046d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0046d8:	2b00      	cmp	r3, #0
1a0046da:	f000 81a6 	beq.w	1a004a2a <_svfprintf_r+0x14ca>
1a0046de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0046e0:	3b01      	subs	r3, #1
1a0046e2:	930c      	str	r3, [sp, #48]	; 0x30
1a0046e4:	e7cb      	b.n	1a00467e <_svfprintf_r+0x111e>
1a0046e6:	2d10      	cmp	r5, #16
1a0046e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
1a0046ea:	dd1c      	ble.n	1a004726 <_svfprintf_r+0x11c6>
1a0046ec:	2410      	movs	r4, #16
1a0046ee:	e004      	b.n	1a0046fa <_svfprintf_r+0x119a>
1a0046f0:	3d10      	subs	r5, #16
1a0046f2:	2d10      	cmp	r5, #16
1a0046f4:	f102 0208 	add.w	r2, r2, #8
1a0046f8:	dd15      	ble.n	1a004726 <_svfprintf_r+0x11c6>
1a0046fa:	3001      	adds	r0, #1
1a0046fc:	3110      	adds	r1, #16
1a0046fe:	2807      	cmp	r0, #7
1a004700:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a004704:	e9c2 7400 	strd	r7, r4, [r2]
1a004708:	ddf2      	ble.n	1a0046f0 <_svfprintf_r+0x1190>
1a00470a:	aa28      	add	r2, sp, #160	; 0xa0
1a00470c:	4649      	mov	r1, r9
1a00470e:	4658      	mov	r0, fp
1a004710:	f002 f9ee 	bl	1a006af0 <__ssprint_r>
1a004714:	2800      	cmp	r0, #0
1a004716:	f47f a802 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00471a:	3d10      	subs	r5, #16
1a00471c:	2d10      	cmp	r5, #16
1a00471e:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
1a004722:	aa2b      	add	r2, sp, #172	; 0xac
1a004724:	dce9      	bgt.n	1a0046fa <_svfprintf_r+0x119a>
1a004726:	3001      	adds	r0, #1
1a004728:	4429      	add	r1, r5
1a00472a:	2807      	cmp	r0, #7
1a00472c:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
1a004730:	e9c2 7500 	strd	r7, r5, [r2]
1a004734:	f300 81b6 	bgt.w	1a004aa4 <_svfprintf_r+0x1544>
1a004738:	f898 3000 	ldrb.w	r3, [r8]
1a00473c:	3208      	adds	r2, #8
1a00473e:	441e      	add	r6, r3
1a004740:	e7c6      	b.n	1a0046d0 <_svfprintf_r+0x1170>
1a004742:	aa28      	add	r2, sp, #160	; 0xa0
1a004744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004748:	f002 f9d2 	bl	1a006af0 <__ssprint_r>
1a00474c:	2800      	cmp	r0, #0
1a00474e:	f47e afe6 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004752:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
1a004756:	3301      	adds	r3, #1
1a004758:	930a      	str	r3, [sp, #40]	; 0x28
1a00475a:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
1a00475e:	af2b      	add	r7, sp, #172	; 0xac
1a004760:	e48f      	b.n	1a004082 <_svfprintf_r+0xb22>
1a004762:	aa28      	add	r2, sp, #160	; 0xa0
1a004764:	4649      	mov	r1, r9
1a004766:	4658      	mov	r0, fp
1a004768:	f002 f9c2 	bl	1a006af0 <__ssprint_r>
1a00476c:	2800      	cmp	r0, #0
1a00476e:	f47e afd6 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004772:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a004774:	aa2b      	add	r2, sp, #172	; 0xac
1a004776:	e78e      	b.n	1a004696 <_svfprintf_r+0x1136>
1a004778:	aa28      	add	r2, sp, #160	; 0xa0
1a00477a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00477e:	f002 f9b7 	bl	1a006af0 <__ssprint_r>
1a004782:	2800      	cmp	r0, #0
1a004784:	f47e afcb 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004788:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a00478c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a00478e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004792:	f7ff b996 	b.w	1a003ac2 <_svfprintf_r+0x562>
1a004796:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004798:	4957      	ldr	r1, [pc, #348]	; (1a0048f8 <_svfprintf_r+0x1398>)
1a00479a:	f8c9 1000 	str.w	r1, [r9]
1a00479e:	3201      	adds	r2, #1
1a0047a0:	3401      	adds	r4, #1
1a0047a2:	2101      	movs	r1, #1
1a0047a4:	2a07      	cmp	r2, #7
1a0047a6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0047aa:	f8c9 1004 	str.w	r1, [r9, #4]
1a0047ae:	f300 80f1 	bgt.w	1a004994 <_svfprintf_r+0x1434>
1a0047b2:	f109 0908 	add.w	r9, r9, #8
1a0047b6:	2b00      	cmp	r3, #0
1a0047b8:	d15a      	bne.n	1a004870 <_svfprintf_r+0x1310>
1a0047ba:	9b02      	ldr	r3, [sp, #8]
1a0047bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0047be:	f003 0301 	and.w	r3, r3, #1
1a0047c2:	4313      	orrs	r3, r2
1a0047c4:	f43f a9b8 	beq.w	1a003b38 <_svfprintf_r+0x5d8>
1a0047c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a0047ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a0047cc:	f8c9 3000 	str.w	r3, [r9]
1a0047d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0047d2:	f8c9 3004 	str.w	r3, [r9, #4]
1a0047d6:	3201      	adds	r2, #1
1a0047d8:	441c      	add	r4, r3
1a0047da:	2a07      	cmp	r2, #7
1a0047dc:	942a      	str	r4, [sp, #168]	; 0xa8
1a0047de:	9229      	str	r2, [sp, #164]	; 0xa4
1a0047e0:	f300 8102 	bgt.w	1a0049e8 <_svfprintf_r+0x1488>
1a0047e4:	f109 0908 	add.w	r9, r9, #8
1a0047e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a0047ea:	3201      	adds	r2, #1
1a0047ec:	441c      	add	r4, r3
1a0047ee:	2a07      	cmp	r2, #7
1a0047f0:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a0047f4:	e9c9 6300 	strd	r6, r3, [r9]
1a0047f8:	f77f a99c 	ble.w	1a003b34 <_svfprintf_r+0x5d4>
1a0047fc:	e44c      	b.n	1a004098 <_svfprintf_r+0xb38>
1a0047fe:	aa28      	add	r2, sp, #160	; 0xa0
1a004800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004804:	f002 f974 	bl	1a006af0 <__ssprint_r>
1a004808:	2800      	cmp	r0, #0
1a00480a:	f47e af88 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00480e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004812:	f7ff bb25 	b.w	1a003e60 <_svfprintf_r+0x900>
1a004816:	4653      	mov	r3, sl
1a004818:	3201      	adds	r2, #1
1a00481a:	442c      	add	r4, r5
1a00481c:	2a07      	cmp	r2, #7
1a00481e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004822:	e9c9 3500 	strd	r3, r5, [r9]
1a004826:	f77f a985 	ble.w	1a003b34 <_svfprintf_r+0x5d4>
1a00482a:	e435      	b.n	1a004098 <_svfprintf_r+0xb38>
1a00482c:	aa28      	add	r2, sp, #160	; 0xa0
1a00482e:	4649      	mov	r1, r9
1a004830:	4658      	mov	r0, fp
1a004832:	f002 f95d 	bl	1a006af0 <__ssprint_r>
1a004836:	2800      	cmp	r0, #0
1a004838:	f47e af71 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a00483c:	f898 3000 	ldrb.w	r3, [r8]
1a004840:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a004842:	aa2b      	add	r2, sp, #172	; 0xac
1a004844:	e73d      	b.n	1a0046c2 <_svfprintf_r+0x1162>
1a004846:	aa28      	add	r2, sp, #160	; 0xa0
1a004848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00484c:	f002 f950 	bl	1a006af0 <__ssprint_r>
1a004850:	2800      	cmp	r0, #0
1a004852:	f47e af64 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004856:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004858:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a00485c:	f7ff b955 	b.w	1a003b0a <_svfprintf_r+0x5aa>
1a004860:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004862:	6812      	ldr	r2, [r2, #0]
1a004864:	9309      	str	r3, [sp, #36]	; 0x24
1a004866:	9b04      	ldr	r3, [sp, #16]
1a004868:	6013      	str	r3, [r2, #0]
1a00486a:	465e      	mov	r6, fp
1a00486c:	f7ff b818 	b.w	1a0038a0 <_svfprintf_r+0x340>
1a004870:	9a29      	ldr	r2, [sp, #164]	; 0xa4
1a004872:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004874:	f8c9 1000 	str.w	r1, [r9]
1a004878:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a00487a:	f8c9 1004 	str.w	r1, [r9, #4]
1a00487e:	3201      	adds	r2, #1
1a004880:	440c      	add	r4, r1
1a004882:	2a07      	cmp	r2, #7
1a004884:	942a      	str	r4, [sp, #168]	; 0xa8
1a004886:	9229      	str	r2, [sp, #164]	; 0xa4
1a004888:	f300 80ae 	bgt.w	1a0049e8 <_svfprintf_r+0x1488>
1a00488c:	f109 0908 	add.w	r9, r9, #8
1a004890:	2b00      	cmp	r3, #0
1a004892:	daa9      	bge.n	1a0047e8 <_svfprintf_r+0x1288>
1a004894:	425d      	negs	r5, r3
1a004896:	3310      	adds	r3, #16
1a004898:	4b16      	ldr	r3, [pc, #88]	; (1a0048f4 <_svfprintf_r+0x1394>)
1a00489a:	f280 8287 	bge.w	1a004dac <_svfprintf_r+0x184c>
1a00489e:	4619      	mov	r1, r3
1a0048a0:	2710      	movs	r7, #16
1a0048a2:	4623      	mov	r3, r4
1a0048a4:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
1a0048a8:	460c      	mov	r4, r1
1a0048aa:	e005      	b.n	1a0048b8 <_svfprintf_r+0x1358>
1a0048ac:	f109 0908 	add.w	r9, r9, #8
1a0048b0:	3d10      	subs	r5, #16
1a0048b2:	2d10      	cmp	r5, #16
1a0048b4:	f340 8277 	ble.w	1a004da6 <_svfprintf_r+0x1846>
1a0048b8:	3201      	adds	r2, #1
1a0048ba:	3310      	adds	r3, #16
1a0048bc:	2a07      	cmp	r2, #7
1a0048be:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
1a0048c2:	e9c9 4700 	strd	r4, r7, [r9]
1a0048c6:	ddf1      	ble.n	1a0048ac <_svfprintf_r+0x134c>
1a0048c8:	aa28      	add	r2, sp, #160	; 0xa0
1a0048ca:	4651      	mov	r1, sl
1a0048cc:	4640      	mov	r0, r8
1a0048ce:	f002 f90f 	bl	1a006af0 <__ssprint_r>
1a0048d2:	2800      	cmp	r0, #0
1a0048d4:	f47e af23 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0048d8:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
1a0048dc:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0048e0:	e7e6      	b.n	1a0048b0 <_svfprintf_r+0x1350>
1a0048e2:	4630      	mov	r0, r6
1a0048e4:	f7fe fdcc 	bl	1a003480 <strlen>
1a0048e8:	46aa      	mov	sl, r5
1a0048ea:	4607      	mov	r7, r0
1a0048ec:	f7ff b80c 	b.w	1a003908 <_svfprintf_r+0x3a8>
1a0048f0:	1a0070d0 	.word	0x1a0070d0
1a0048f4:	1a0070ec 	.word	0x1a0070ec
1a0048f8:	1a0070d8 	.word	0x1a0070d8
1a0048fc:	4622      	mov	r2, r4
1a0048fe:	461c      	mov	r4, r3
1a004900:	4613      	mov	r3, r2
1a004902:	462a      	mov	r2, r5
1a004904:	3201      	adds	r2, #1
1a004906:	920a      	str	r2, [sp, #40]	; 0x28
1a004908:	f107 0208 	add.w	r2, r7, #8
1a00490c:	e9c7 3800 	strd	r3, r8, [r7]
1a004910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004912:	9329      	str	r3, [sp, #164]	; 0xa4
1a004914:	4444      	add	r4, r8
1a004916:	2b07      	cmp	r3, #7
1a004918:	942a      	str	r4, [sp, #168]	; 0xa8
1a00491a:	f73f af12 	bgt.w	1a004742 <_svfprintf_r+0x11e2>
1a00491e:	3301      	adds	r3, #1
1a004920:	930a      	str	r3, [sp, #40]	; 0x28
1a004922:	f102 0908 	add.w	r9, r2, #8
1a004926:	4617      	mov	r7, r2
1a004928:	f7ff bbab 	b.w	1a004082 <_svfprintf_r+0xb22>
1a00492c:	9f02      	ldr	r7, [sp, #8]
1a00492e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004930:	f417 7f00 	tst.w	r7, #512	; 0x200
1a004934:	d044      	beq.n	1a0049c0 <_svfprintf_r+0x1460>
1a004936:	f993 4000 	ldrsb.w	r4, [r3]
1a00493a:	9209      	str	r2, [sp, #36]	; 0x24
1a00493c:	17e5      	asrs	r5, r4, #31
1a00493e:	4622      	mov	r2, r4
1a004940:	462b      	mov	r3, r5
1a004942:	f7ff b81c 	b.w	1a00397e <_svfprintf_r+0x41e>
1a004946:	9f02      	ldr	r7, [sp, #8]
1a004948:	05b9      	lsls	r1, r7, #22
1a00494a:	bf47      	ittee	mi
1a00494c:	9209      	strmi	r2, [sp, #36]	; 0x24
1a00494e:	b2e4      	uxtbmi	r4, r4
1a004950:	9f02      	ldrpl	r7, [sp, #8]
1a004952:	9209      	strpl	r2, [sp, #36]	; 0x24
1a004954:	2500      	movs	r5, #0
1a004956:	f7fe bff7 	b.w	1a003948 <_svfprintf_r+0x3e8>
1a00495a:	9f02      	ldr	r7, [sp, #8]
1a00495c:	9209      	str	r2, [sp, #36]	; 0x24
1a00495e:	05b8      	lsls	r0, r7, #22
1a004960:	bf4c      	ite	mi
1a004962:	b2e4      	uxtbmi	r4, r4
1a004964:	9f02      	ldrpl	r7, [sp, #8]
1a004966:	2500      	movs	r5, #0
1a004968:	2301      	movs	r3, #1
1a00496a:	f7fe bf4f 	b.w	1a00380c <_svfprintf_r+0x2ac>
1a00496e:	4621      	mov	r1, r4
1a004970:	461c      	mov	r4, r3
1a004972:	460b      	mov	r3, r1
1a004974:	3201      	adds	r2, #1
1a004976:	442c      	add	r4, r5
1a004978:	2a07      	cmp	r2, #7
1a00497a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a00497e:	e9c9 3500 	strd	r3, r5, [r9]
1a004982:	dc42      	bgt.n	1a004a0a <_svfprintf_r+0x14aa>
1a004984:	f109 0908 	add.w	r9, r9, #8
1a004988:	e424      	b.n	1a0041d4 <_svfprintf_r+0xc74>
1a00498a:	222d      	movs	r2, #45	; 0x2d
1a00498c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a004990:	f7ff b95d 	b.w	1a003c4e <_svfprintf_r+0x6ee>
1a004994:	aa28      	add	r2, sp, #160	; 0xa0
1a004996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a00499a:	f002 f8a9 	bl	1a006af0 <__ssprint_r>
1a00499e:	2800      	cmp	r0, #0
1a0049a0:	f47e aebd 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0049a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0049a6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a0049a8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a0049ac:	e703      	b.n	1a0047b6 <_svfprintf_r+0x1256>
1a0049ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0049b0:	18b5      	adds	r5, r6, r2
1a0049b2:	eba5 050a 	sub.w	r5, r5, sl
1a0049b6:	1ad3      	subs	r3, r2, r3
1a0049b8:	429d      	cmp	r5, r3
1a0049ba:	bfa8      	it	ge
1a0049bc:	461d      	movge	r5, r3
1a0049be:	e440      	b.n	1a004242 <_svfprintf_r+0xce2>
1a0049c0:	681c      	ldr	r4, [r3, #0]
1a0049c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0049c4:	17e5      	asrs	r5, r4, #31
1a0049c6:	9f02      	ldr	r7, [sp, #8]
1a0049c8:	4622      	mov	r2, r4
1a0049ca:	462b      	mov	r3, r5
1a0049cc:	f7fe bfd7 	b.w	1a00397e <_svfprintf_r+0x41e>
1a0049d0:	b2e4      	uxtb	r4, r4
1a0049d2:	2500      	movs	r5, #0
1a0049d4:	f7fe bec2 	b.w	1a00375c <_svfprintf_r+0x1fc>
1a0049d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0049da:	9309      	str	r3, [sp, #36]	; 0x24
1a0049dc:	6812      	ldr	r2, [r2, #0]
1a0049de:	9b04      	ldr	r3, [sp, #16]
1a0049e0:	8013      	strh	r3, [r2, #0]
1a0049e2:	465e      	mov	r6, fp
1a0049e4:	f7fe bf5c 	b.w	1a0038a0 <_svfprintf_r+0x340>
1a0049e8:	aa28      	add	r2, sp, #160	; 0xa0
1a0049ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0049ee:	f002 f87f 	bl	1a006af0 <__ssprint_r>
1a0049f2:	2800      	cmp	r0, #0
1a0049f4:	f47e ae93 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a0049f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0049fa:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a0049fe:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004a02:	e745      	b.n	1a004890 <_svfprintf_r+0x1330>
1a004a04:	f04f 0a06 	mov.w	sl, #6
1a004a08:	e4fc      	b.n	1a004404 <_svfprintf_r+0xea4>
1a004a0a:	aa28      	add	r2, sp, #160	; 0xa0
1a004a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004a10:	f002 f86e 	bl	1a006af0 <__ssprint_r>
1a004a14:	2800      	cmp	r0, #0
1a004a16:	f47e ae82 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004a1a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004a1c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004a20:	f7ff bbd8 	b.w	1a0041d4 <_svfprintf_r+0xc74>
1a004a24:	9f02      	ldr	r7, [sp, #8]
1a004a26:	f7ff b97e 	b.w	1a003d26 <_svfprintf_r+0x7c6>
1a004a2a:	46b2      	mov	sl, r6
1a004a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004a2e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
1a004a30:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a004a34:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
1a004a38:	18f3      	adds	r3, r6, r3
1a004a3a:	459a      	cmp	sl, r3
1a004a3c:	460c      	mov	r4, r1
1a004a3e:	4691      	mov	r9, r2
1a004a40:	bf28      	it	cs
1a004a42:	469a      	movcs	sl, r3
1a004a44:	f7ff bbcd 	b.w	1a0041e2 <_svfprintf_r+0xc82>
1a004a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004a4a:	1cda      	adds	r2, r3, #3
1a004a4c:	db01      	blt.n	1a004a52 <_svfprintf_r+0x14f2>
1a004a4e:	459a      	cmp	sl, r3
1a004a50:	da05      	bge.n	1a004a5e <_svfprintf_r+0x14fe>
1a004a52:	f1a8 0802 	sub.w	r8, r8, #2
1a004a56:	f028 0320 	bic.w	r3, r8, #32
1a004a5a:	9303      	str	r3, [sp, #12]
1a004a5c:	e50a      	b.n	1a004474 <_svfprintf_r+0xf14>
1a004a5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a004a60:	4619      	mov	r1, r3
1a004a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004a64:	4299      	cmp	r1, r3
1a004a66:	f300 8159 	bgt.w	1a004d1c <_svfprintf_r+0x17bc>
1a004a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004a6c:	07d7      	lsls	r7, r2, #31
1a004a6e:	f140 81c9 	bpl.w	1a004e04 <_svfprintf_r+0x18a4>
1a004a72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a004a74:	189f      	adds	r7, r3, r2
1a004a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004a78:	055d      	lsls	r5, r3, #21
1a004a7a:	d503      	bpl.n	1a004a84 <_svfprintf_r+0x1524>
1a004a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004a7e:	2b00      	cmp	r3, #0
1a004a80:	f300 81f6 	bgt.w	1a004e70 <_svfprintf_r+0x1910>
1a004a84:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004a88:	9303      	str	r3, [sp, #12]
1a004a8a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004a8e:	2300      	movs	r3, #0
1a004a90:	930c      	str	r3, [sp, #48]	; 0x30
1a004a92:	930f      	str	r3, [sp, #60]	; 0x3c
1a004a94:	e551      	b.n	1a00453a <_svfprintf_r+0xfda>
1a004a96:	222d      	movs	r2, #45	; 0x2d
1a004a98:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
1a004a9c:	f04f 0a00 	mov.w	sl, #0
1a004aa0:	f7fe bf41 	b.w	1a003926 <_svfprintf_r+0x3c6>
1a004aa4:	aa28      	add	r2, sp, #160	; 0xa0
1a004aa6:	4649      	mov	r1, r9
1a004aa8:	4658      	mov	r0, fp
1a004aaa:	f002 f821 	bl	1a006af0 <__ssprint_r>
1a004aae:	2800      	cmp	r0, #0
1a004ab0:	f47e ae35 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004ab4:	f898 3000 	ldrb.w	r3, [r8]
1a004ab8:	992a      	ldr	r1, [sp, #168]	; 0xa8
1a004aba:	aa2b      	add	r2, sp, #172	; 0xac
1a004abc:	441e      	add	r6, r3
1a004abe:	e607      	b.n	1a0046d0 <_svfprintf_r+0x1170>
1a004ac0:	aa28      	add	r2, sp, #160	; 0xa0
1a004ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004ac6:	f002 f813 	bl	1a006af0 <__ssprint_r>
1a004aca:	2800      	cmp	r0, #0
1a004acc:	f47e ae27 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004ad0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004ad2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004ad6:	f7ff bb75 	b.w	1a0041c4 <_svfprintf_r+0xc64>
1a004ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004adc:	9917      	ldr	r1, [sp, #92]	; 0x5c
1a004ade:	1af6      	subs	r6, r6, r3
1a004ae0:	461a      	mov	r2, r3
1a004ae2:	4630      	mov	r0, r6
1a004ae4:	f001 ffca 	bl	1a006a7c <strncpy>
1a004ae8:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004aec:	b10b      	cbz	r3, 1a004af2 <_svfprintf_r+0x1592>
1a004aee:	f108 0801 	add.w	r8, r8, #1
1a004af2:	220a      	movs	r2, #10
1a004af4:	2300      	movs	r3, #0
1a004af6:	4620      	mov	r0, r4
1a004af8:	4629      	mov	r1, r5
1a004afa:	f04f 0b00 	mov.w	fp, #0
1a004afe:	f7fd fde5 	bl	1a0026cc <__aeabi_uldivmod>
1a004b02:	f7ff b960 	b.w	1a003dc6 <_svfprintf_r+0x866>
1a004b06:	aa28      	add	r2, sp, #160	; 0xa0
1a004b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004b0c:	f001 fff0 	bl	1a006af0 <__ssprint_r>
1a004b10:	2800      	cmp	r0, #0
1a004b12:	f47e ae04 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004b16:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b18:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004b1a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004b1e:	f7ff bb78 	b.w	1a004212 <_svfprintf_r+0xcb2>
1a004b22:	aa26      	add	r2, sp, #152	; 0x98
1a004b24:	ab23      	add	r3, sp, #140	; 0x8c
1a004b26:	e9cd 3200 	strd	r3, r2, [sp]
1a004b2a:	2103      	movs	r1, #3
1a004b2c:	ab22      	add	r3, sp, #136	; 0x88
1a004b2e:	4652      	mov	r2, sl
1a004b30:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004b34:	9806      	ldr	r0, [sp, #24]
1a004b36:	f000 fac3 	bl	1a0050c0 <_dtoa_r>
1a004b3a:	7803      	ldrb	r3, [r0, #0]
1a004b3c:	2b30      	cmp	r3, #48	; 0x30
1a004b3e:	4606      	mov	r6, r0
1a004b40:	f000 81cd 	beq.w	1a004ede <_svfprintf_r+0x197e>
1a004b44:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b46:	4453      	add	r3, sl
1a004b48:	18f4      	adds	r4, r6, r3
1a004b4a:	2200      	movs	r2, #0
1a004b4c:	2300      	movs	r3, #0
1a004b4e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a004b52:	f7fd fd4b 	bl	1a0025ec <__aeabi_dcmpeq>
1a004b56:	b108      	cbz	r0, 1a004b5c <_svfprintf_r+0x15fc>
1a004b58:	4627      	mov	r7, r4
1a004b5a:	e47f      	b.n	1a00445c <_svfprintf_r+0xefc>
1a004b5c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a004b5e:	42a7      	cmp	r7, r4
1a004b60:	f4bf ac7c 	bcs.w	1a00445c <_svfprintf_r+0xefc>
1a004b64:	2230      	movs	r2, #48	; 0x30
1a004b66:	1c7b      	adds	r3, r7, #1
1a004b68:	9326      	str	r3, [sp, #152]	; 0x98
1a004b6a:	703a      	strb	r2, [r7, #0]
1a004b6c:	9f26      	ldr	r7, [sp, #152]	; 0x98
1a004b6e:	42bc      	cmp	r4, r7
1a004b70:	d8f9      	bhi.n	1a004b66 <_svfprintf_r+0x1606>
1a004b72:	e473      	b.n	1a00445c <_svfprintf_r+0xefc>
1a004b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004b78:	f003 0301 	and.w	r3, r3, #1
1a004b7c:	2a00      	cmp	r2, #0
1a004b7e:	ea43 030a 	orr.w	r3, r3, sl
1a004b82:	f340 81bf 	ble.w	1a004f04 <_svfprintf_r+0x19a4>
1a004b86:	2b00      	cmp	r3, #0
1a004b88:	f040 819a 	bne.w	1a004ec0 <_svfprintf_r+0x1960>
1a004b8c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a004b8e:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004b94:	055a      	lsls	r2, r3, #21
1a004b96:	f100 816d 	bmi.w	1a004e74 <_svfprintf_r+0x1914>
1a004b9a:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004b9e:	9303      	str	r3, [sp, #12]
1a004ba0:	e775      	b.n	1a004a8e <_svfprintf_r+0x152e>
1a004ba2:	4657      	mov	r7, sl
1a004ba4:	f8cd a00c 	str.w	sl, [sp, #12]
1a004ba8:	9409      	str	r4, [sp, #36]	; 0x24
1a004baa:	4682      	mov	sl, r0
1a004bac:	900c      	str	r0, [sp, #48]	; 0x30
1a004bae:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
1a004bb2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
1a004bb6:	f7fe beb3 	b.w	1a003920 <_svfprintf_r+0x3c0>
1a004bba:	2330      	movs	r3, #48	; 0x30
1a004bbc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004bc0:	2358      	movs	r3, #88	; 0x58
1a004bc2:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
1a004bc6:	9b02      	ldr	r3, [sp, #8]
1a004bc8:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
1a004bcc:	f043 0302 	orr.w	r3, r3, #2
1a004bd0:	930a      	str	r3, [sp, #40]	; 0x28
1a004bd2:	f300 80dd 	bgt.w	1a004d90 <_svfprintf_r+0x1830>
1a004bd6:	2300      	movs	r3, #0
1a004bd8:	9308      	str	r3, [sp, #32]
1a004bda:	ae3b      	add	r6, sp, #236	; 0xec
1a004bdc:	9a02      	ldr	r2, [sp, #8]
1a004bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004be0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
1a004be4:	9202      	str	r2, [sp, #8]
1a004be6:	2b00      	cmp	r3, #0
1a004be8:	f028 0220 	bic.w	r2, r8, #32
1a004bec:	9203      	str	r2, [sp, #12]
1a004bee:	f2c0 808c 	blt.w	1a004d0a <_svfprintf_r+0x17aa>
1a004bf2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004bf6:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
1a004bfa:	2300      	movs	r3, #0
1a004bfc:	931e      	str	r3, [sp, #120]	; 0x78
1a004bfe:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
1a004c02:	f000 811d 	beq.w	1a004e40 <_svfprintf_r+0x18e0>
1a004c06:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
1a004c0a:	f47f ac0a 	bne.w	1a004422 <_svfprintf_r+0xec2>
1a004c0e:	a822      	add	r0, sp, #136	; 0x88
1a004c10:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004c14:	f001 fefc 	bl	1a006a10 <frexp>
1a004c18:	2200      	movs	r2, #0
1a004c1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004c1e:	ec51 0b10 	vmov	r0, r1, d0
1a004c22:	f7fd fa7b 	bl	1a00211c <__aeabi_dmul>
1a004c26:	2200      	movs	r2, #0
1a004c28:	2300      	movs	r3, #0
1a004c2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004c2e:	f7fd fcdd 	bl	1a0025ec <__aeabi_dcmpeq>
1a004c32:	b108      	cbz	r0, 1a004c38 <_svfprintf_r+0x16d8>
1a004c34:	2301      	movs	r3, #1
1a004c36:	9322      	str	r3, [sp, #136]	; 0x88
1a004c38:	4bb6      	ldr	r3, [pc, #728]	; (1a004f14 <_svfprintf_r+0x19b4>)
1a004c3a:	930b      	str	r3, [sp, #44]	; 0x2c
1a004c3c:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
1a004c40:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
1a004c44:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a004c48:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
1a004c4c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a004c50:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
1a004c54:	46b2      	mov	sl, r6
1a004c56:	960c      	str	r6, [sp, #48]	; 0x30
1a004c58:	e003      	b.n	1a004c62 <_svfprintf_r+0x1702>
1a004c5a:	f7fd fcc7 	bl	1a0025ec <__aeabi_dcmpeq>
1a004c5e:	bb20      	cbnz	r0, 1a004caa <_svfprintf_r+0x174a>
1a004c60:	46ba      	mov	sl, r7
1a004c62:	2200      	movs	r2, #0
1a004c64:	4bac      	ldr	r3, [pc, #688]	; (1a004f18 <_svfprintf_r+0x19b8>)
1a004c66:	4640      	mov	r0, r8
1a004c68:	4649      	mov	r1, r9
1a004c6a:	f7fd fa57 	bl	1a00211c <__aeabi_dmul>
1a004c6e:	4689      	mov	r9, r1
1a004c70:	4680      	mov	r8, r0
1a004c72:	f7fd fd03 	bl	1a00267c <__aeabi_d2iz>
1a004c76:	4606      	mov	r6, r0
1a004c78:	f7fd f9e6 	bl	1a002048 <__aeabi_i2d>
1a004c7c:	4602      	mov	r2, r0
1a004c7e:	460b      	mov	r3, r1
1a004c80:	4640      	mov	r0, r8
1a004c82:	4649      	mov	r1, r9
1a004c84:	f7fd f892 	bl	1a001dac <__aeabi_dsub>
1a004c88:	4657      	mov	r7, sl
1a004c8a:	f81b 4006 	ldrb.w	r4, [fp, r6]
1a004c8e:	f807 4b01 	strb.w	r4, [r7], #1
1a004c92:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a004c96:	462c      	mov	r4, r5
1a004c98:	4680      	mov	r8, r0
1a004c9a:	4689      	mov	r9, r1
1a004c9c:	f04f 0200 	mov.w	r2, #0
1a004ca0:	f04f 0300 	mov.w	r3, #0
1a004ca4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a004ca8:	d1d7      	bne.n	1a004c5a <_svfprintf_r+0x16fa>
1a004caa:	4640      	mov	r0, r8
1a004cac:	4649      	mov	r1, r9
1a004cae:	2200      	movs	r2, #0
1a004cb0:	4b9a      	ldr	r3, [pc, #616]	; (1a004f1c <_svfprintf_r+0x19bc>)
1a004cb2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
1a004cb6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
1a004cba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a004cbe:	4635      	mov	r5, r6
1a004cc0:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
1a004cc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a004cc6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a004cca:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004cce:	f7fd fcb5 	bl	1a00263c <__aeabi_dcmpgt>
1a004cd2:	2800      	cmp	r0, #0
1a004cd4:	d13f      	bne.n	1a004d56 <_svfprintf_r+0x17f6>
1a004cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a004cda:	2200      	movs	r2, #0
1a004cdc:	4b8f      	ldr	r3, [pc, #572]	; (1a004f1c <_svfprintf_r+0x19bc>)
1a004cde:	f7fd fc85 	bl	1a0025ec <__aeabi_dcmpeq>
1a004ce2:	b108      	cbz	r0, 1a004ce8 <_svfprintf_r+0x1788>
1a004ce4:	07e9      	lsls	r1, r5, #31
1a004ce6:	d436      	bmi.n	1a004d56 <_svfprintf_r+0x17f6>
1a004ce8:	2c00      	cmp	r4, #0
1a004cea:	f6ff abb7 	blt.w	1a00445c <_svfprintf_r+0xefc>
1a004cee:	1c63      	adds	r3, r4, #1
1a004cf0:	443b      	add	r3, r7
1a004cf2:	2230      	movs	r2, #48	; 0x30
1a004cf4:	f807 2b01 	strb.w	r2, [r7], #1
1a004cf8:	42bb      	cmp	r3, r7
1a004cfa:	d1fb      	bne.n	1a004cf4 <_svfprintf_r+0x1794>
1a004cfc:	f7ff bbae 	b.w	1a00445c <_svfprintf_r+0xefc>
1a004d00:	9b02      	ldr	r3, [sp, #8]
1a004d02:	930a      	str	r3, [sp, #40]	; 0x28
1a004d04:	2300      	movs	r3, #0
1a004d06:	9308      	str	r3, [sp, #32]
1a004d08:	9202      	str	r2, [sp, #8]
1a004d0a:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
1a004d0e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a004d12:	931d      	str	r3, [sp, #116]	; 0x74
1a004d14:	232d      	movs	r3, #45	; 0x2d
1a004d16:	911c      	str	r1, [sp, #112]	; 0x70
1a004d18:	931e      	str	r3, [sp, #120]	; 0x78
1a004d1a:	e770      	b.n	1a004bfe <_svfprintf_r+0x169e>
1a004d1c:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
1a004d20:	189f      	adds	r7, r3, r2
1a004d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d24:	2b00      	cmp	r3, #0
1a004d26:	f340 80d1 	ble.w	1a004ecc <_svfprintf_r+0x196c>
1a004d2a:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004d2e:	e730      	b.n	1a004b92 <_svfprintf_r+0x1632>
1a004d30:	aa28      	add	r2, sp, #160	; 0xa0
1a004d32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004d36:	f001 fedb 	bl	1a006af0 <__ssprint_r>
1a004d3a:	2800      	cmp	r0, #0
1a004d3c:	f47e acef 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004d42:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004d44:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
1a004d46:	1ad3      	subs	r3, r2, r3
1a004d48:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004d4c:	f7ff ba79 	b.w	1a004242 <_svfprintf_r+0xce2>
1a004d50:	eb06 040a 	add.w	r4, r6, sl
1a004d54:	e6f9      	b.n	1a004b4a <_svfprintf_r+0x15ea>
1a004d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d58:	9326      	str	r3, [sp, #152]	; 0x98
1a004d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004d5c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
1a004d60:	7bd9      	ldrb	r1, [r3, #15]
1a004d62:	4291      	cmp	r1, r2
1a004d64:	463b      	mov	r3, r7
1a004d66:	d109      	bne.n	1a004d7c <_svfprintf_r+0x181c>
1a004d68:	2030      	movs	r0, #48	; 0x30
1a004d6a:	f803 0c01 	strb.w	r0, [r3, #-1]
1a004d6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
1a004d70:	1e5a      	subs	r2, r3, #1
1a004d72:	9226      	str	r2, [sp, #152]	; 0x98
1a004d74:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a004d78:	4291      	cmp	r1, r2
1a004d7a:	d0f6      	beq.n	1a004d6a <_svfprintf_r+0x180a>
1a004d7c:	2a39      	cmp	r2, #57	; 0x39
1a004d7e:	bf0b      	itete	eq
1a004d80:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
1a004d82:	3201      	addne	r2, #1
1a004d84:	7a92      	ldrbeq	r2, [r2, #10]
1a004d86:	b2d2      	uxtbne	r2, r2
1a004d88:	f803 2c01 	strb.w	r2, [r3, #-1]
1a004d8c:	f7ff bb66 	b.w	1a00445c <_svfprintf_r+0xefc>
1a004d90:	f10a 0101 	add.w	r1, sl, #1
1a004d94:	9806      	ldr	r0, [sp, #24]
1a004d96:	f7fd ff89 	bl	1a002cac <_malloc_r>
1a004d9a:	4606      	mov	r6, r0
1a004d9c:	2800      	cmp	r0, #0
1a004d9e:	f000 80ed 	beq.w	1a004f7c <_svfprintf_r+0x1a1c>
1a004da2:	9008      	str	r0, [sp, #32]
1a004da4:	e71a      	b.n	1a004bdc <_svfprintf_r+0x167c>
1a004da6:	4621      	mov	r1, r4
1a004da8:	461c      	mov	r4, r3
1a004daa:	460b      	mov	r3, r1
1a004dac:	3201      	adds	r2, #1
1a004dae:	442c      	add	r4, r5
1a004db0:	2a07      	cmp	r2, #7
1a004db2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
1a004db6:	e9c9 3500 	strd	r3, r5, [r9]
1a004dba:	f77f ad13 	ble.w	1a0047e4 <_svfprintf_r+0x1284>
1a004dbe:	aa28      	add	r2, sp, #160	; 0xa0
1a004dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a004dc4:	f001 fe94 	bl	1a006af0 <__ssprint_r>
1a004dc8:	2800      	cmp	r0, #0
1a004dca:	f47e aca8 	bne.w	1a00371e <_svfprintf_r+0x1be>
1a004dce:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
1a004dd2:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
1a004dd6:	e507      	b.n	1a0047e8 <_svfprintf_r+0x1288>
1a004dd8:	f10a 0401 	add.w	r4, sl, #1
1a004ddc:	a926      	add	r1, sp, #152	; 0x98
1a004dde:	ab23      	add	r3, sp, #140	; 0x8c
1a004de0:	e9cd 3100 	strd	r3, r1, [sp]
1a004de4:	4622      	mov	r2, r4
1a004de6:	ab22      	add	r3, sp, #136	; 0x88
1a004de8:	2102      	movs	r1, #2
1a004dea:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004dee:	9806      	ldr	r0, [sp, #24]
1a004df0:	f000 f966 	bl	1a0050c0 <_dtoa_r>
1a004df4:	4606      	mov	r6, r0
1a004df6:	4434      	add	r4, r6
1a004df8:	e6a7      	b.n	1a004b4a <_svfprintf_r+0x15ea>
1a004dfa:	2330      	movs	r3, #48	; 0x30
1a004dfc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
1a004e00:	2378      	movs	r3, #120	; 0x78
1a004e02:	e6de      	b.n	1a004bc2 <_svfprintf_r+0x1662>
1a004e04:	9f0e      	ldr	r7, [sp, #56]	; 0x38
1a004e06:	e636      	b.n	1a004a76 <_svfprintf_r+0x1516>
1a004e08:	2900      	cmp	r1, #0
1a004e0a:	f040 8098 	bne.w	1a004f3e <_svfprintf_r+0x19de>
1a004e0e:	2330      	movs	r3, #48	; 0x30
1a004e10:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
1a004e14:	f10d 0393 	add.w	r3, sp, #147	; 0x93
1a004e18:	3230      	adds	r2, #48	; 0x30
1a004e1a:	f803 2b01 	strb.w	r2, [r3], #1
1a004e1e:	aa24      	add	r2, sp, #144	; 0x90
1a004e20:	1a9b      	subs	r3, r3, r2
1a004e22:	9316      	str	r3, [sp, #88]	; 0x58
1a004e24:	f7ff bb73 	b.w	1a00450e <_svfprintf_r+0xfae>
1a004e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004e2a:	4e3d      	ldr	r6, [pc, #244]	; (1a004f20 <_svfprintf_r+0x19c0>)
1a004e2c:	2b00      	cmp	r3, #0
1a004e2e:	bfb6      	itet	lt
1a004e30:	222d      	movlt	r2, #45	; 0x2d
1a004e32:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
1a004e36:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
1a004e3a:	4b3a      	ldr	r3, [pc, #232]	; (1a004f24 <_svfprintf_r+0x19c4>)
1a004e3c:	f7fe bf09 	b.w	1a003c52 <_svfprintf_r+0x6f2>
1a004e40:	a822      	add	r0, sp, #136	; 0x88
1a004e42:	ed9d 0b1c 	vldr	d0, [sp, #112]	; 0x70
1a004e46:	f001 fde3 	bl	1a006a10 <frexp>
1a004e4a:	2200      	movs	r2, #0
1a004e4c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004e50:	ec51 0b10 	vmov	r0, r1, d0
1a004e54:	f7fd f962 	bl	1a00211c <__aeabi_dmul>
1a004e58:	2200      	movs	r2, #0
1a004e5a:	2300      	movs	r3, #0
1a004e5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004e60:	f7fd fbc4 	bl	1a0025ec <__aeabi_dcmpeq>
1a004e64:	b108      	cbz	r0, 1a004e6a <_svfprintf_r+0x190a>
1a004e66:	2301      	movs	r3, #1
1a004e68:	9322      	str	r3, [sp, #136]	; 0x88
1a004e6a:	4b2f      	ldr	r3, [pc, #188]	; (1a004f28 <_svfprintf_r+0x19c8>)
1a004e6c:	930b      	str	r3, [sp, #44]	; 0x2c
1a004e6e:	e6e5      	b.n	1a004c3c <_svfprintf_r+0x16dc>
1a004e70:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004e74:	9818      	ldr	r0, [sp, #96]	; 0x60
1a004e76:	2200      	movs	r2, #0
1a004e78:	920c      	str	r2, [sp, #48]	; 0x30
1a004e7a:	920f      	str	r2, [sp, #60]	; 0x3c
1a004e7c:	7803      	ldrb	r3, [r0, #0]
1a004e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004e80:	2bff      	cmp	r3, #255	; 0xff
1a004e82:	d00c      	beq.n	1a004e9e <_svfprintf_r+0x193e>
1a004e84:	4293      	cmp	r3, r2
1a004e86:	da0a      	bge.n	1a004e9e <_svfprintf_r+0x193e>
1a004e88:	7841      	ldrb	r1, [r0, #1]
1a004e8a:	1ad2      	subs	r2, r2, r3
1a004e8c:	b1a1      	cbz	r1, 1a004eb8 <_svfprintf_r+0x1958>
1a004e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004e90:	3301      	adds	r3, #1
1a004e92:	930f      	str	r3, [sp, #60]	; 0x3c
1a004e94:	460b      	mov	r3, r1
1a004e96:	2bff      	cmp	r3, #255	; 0xff
1a004e98:	f100 0001 	add.w	r0, r0, #1
1a004e9c:	d1f2      	bne.n	1a004e84 <_svfprintf_r+0x1924>
1a004e9e:	920e      	str	r2, [sp, #56]	; 0x38
1a004ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004ea2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004ea4:	9018      	str	r0, [sp, #96]	; 0x60
1a004ea6:	4413      	add	r3, r2
1a004ea8:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a004eaa:	fb02 7703 	mla	r7, r2, r3, r7
1a004eae:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004eb2:	9303      	str	r3, [sp, #12]
1a004eb4:	f7ff bb41 	b.w	1a00453a <_svfprintf_r+0xfda>
1a004eb8:	990c      	ldr	r1, [sp, #48]	; 0x30
1a004eba:	3101      	adds	r1, #1
1a004ebc:	910c      	str	r1, [sp, #48]	; 0x30
1a004ebe:	e7df      	b.n	1a004e80 <_svfprintf_r+0x1920>
1a004ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004ec2:	18d7      	adds	r7, r2, r3
1a004ec4:	4457      	add	r7, sl
1a004ec6:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004eca:	e662      	b.n	1a004b92 <_svfprintf_r+0x1632>
1a004ecc:	f1c3 0301 	rsb	r3, r3, #1
1a004ed0:	441f      	add	r7, r3
1a004ed2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004ed6:	9303      	str	r3, [sp, #12]
1a004ed8:	f04f 0867 	mov.w	r8, #103	; 0x67
1a004edc:	e5d7      	b.n	1a004a8e <_svfprintf_r+0x152e>
1a004ede:	2200      	movs	r2, #0
1a004ee0:	2300      	movs	r3, #0
1a004ee2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a004ee6:	f7fd fb81 	bl	1a0025ec <__aeabi_dcmpeq>
1a004eea:	2800      	cmp	r0, #0
1a004eec:	f47f ae2a 	bne.w	1a004b44 <_svfprintf_r+0x15e4>
1a004ef0:	f1ca 0301 	rsb	r3, sl, #1
1a004ef4:	9322      	str	r3, [sp, #136]	; 0x88
1a004ef6:	e626      	b.n	1a004b46 <_svfprintf_r+0x15e6>
1a004ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004efa:	07db      	lsls	r3, r3, #31
1a004efc:	f57f ab10 	bpl.w	1a004520 <_svfprintf_r+0xfc0>
1a004f00:	f7ff bb0c 	b.w	1a00451c <_svfprintf_r+0xfbc>
1a004f04:	b993      	cbnz	r3, 1a004f2c <_svfprintf_r+0x19cc>
1a004f06:	2301      	movs	r3, #1
1a004f08:	9303      	str	r3, [sp, #12]
1a004f0a:	461f      	mov	r7, r3
1a004f0c:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004f10:	e5bd      	b.n	1a004a8e <_svfprintf_r+0x152e>
1a004f12:	bf00      	nop
1a004f14:	1a0070bc 	.word	0x1a0070bc
1a004f18:	40300000 	.word	0x40300000
1a004f1c:	3fe00000 	.word	0x3fe00000
1a004f20:	1a0070a0 	.word	0x1a0070a0
1a004f24:	1a0070a4 	.word	0x1a0070a4
1a004f28:	1a0070a8 	.word	0x1a0070a8
1a004f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004f2e:	1c5f      	adds	r7, r3, #1
1a004f30:	4457      	add	r7, sl
1a004f32:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
1a004f36:	9303      	str	r3, [sp, #12]
1a004f38:	f04f 0866 	mov.w	r8, #102	; 0x66
1a004f3c:	e5a7      	b.n	1a004a8e <_svfprintf_r+0x152e>
1a004f3e:	f10d 0392 	add.w	r3, sp, #146	; 0x92
1a004f42:	e769      	b.n	1a004e18 <_svfprintf_r+0x18b8>
1a004f44:	464a      	mov	r2, r9
1a004f46:	e4e1      	b.n	1a00490c <_svfprintf_r+0x13ac>
1a004f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004f4a:	f89b 8001 	ldrb.w	r8, [fp, #1]
1a004f4e:	f853 0b04 	ldr.w	r0, [r3], #4
1a004f52:	9309      	str	r3, [sp, #36]	; 0x24
1a004f54:	4693      	mov	fp, r2
1a004f56:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
1a004f5a:	f7fe bb61 	b.w	1a003620 <_svfprintf_r+0xc0>
1a004f5e:	9a06      	ldr	r2, [sp, #24]
1a004f60:	230c      	movs	r3, #12
1a004f62:	6013      	str	r3, [r2, #0]
1a004f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a004f68:	9304      	str	r3, [sp, #16]
1a004f6a:	f7fe bbe7 	b.w	1a00373c <_svfprintf_r+0x1dc>
1a004f6e:	4654      	mov	r4, sl
1a004f70:	4434      	add	r4, r6
1a004f72:	e5ea      	b.n	1a004b4a <_svfprintf_r+0x15ea>
1a004f74:	2302      	movs	r3, #2
1a004f76:	9316      	str	r3, [sp, #88]	; 0x58
1a004f78:	f7ff bac9 	b.w	1a00450e <_svfprintf_r+0xfae>
1a004f7c:	9a07      	ldr	r2, [sp, #28]
1a004f7e:	8993      	ldrh	r3, [r2, #12]
1a004f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004f84:	8193      	strh	r3, [r2, #12]
1a004f86:	f7fe bbd2 	b.w	1a00372e <_svfprintf_r+0x1ce>
1a004f8a:	461f      	mov	r7, r3
1a004f8c:	f7ff ba14 	b.w	1a0043b8 <_svfprintf_r+0xe58>
1a004f90:	461f      	mov	r7, r3
1a004f92:	f7ff baeb 	b.w	1a00456c <_svfprintf_r+0x100c>
1a004f96:	461f      	mov	r7, r3
1a004f98:	f7ff bada 	b.w	1a004550 <_svfprintf_r+0xff0>

1a004f9c <quorem>:
1a004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004fa0:	6903      	ldr	r3, [r0, #16]
1a004fa2:	690f      	ldr	r7, [r1, #16]
1a004fa4:	42bb      	cmp	r3, r7
1a004fa6:	b083      	sub	sp, #12
1a004fa8:	f2c0 8086 	blt.w	1a0050b8 <quorem+0x11c>
1a004fac:	3f01      	subs	r7, #1
1a004fae:	f101 0614 	add.w	r6, r1, #20
1a004fb2:	f100 0a14 	add.w	sl, r0, #20
1a004fb6:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
1a004fba:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a004fbe:	00bc      	lsls	r4, r7, #2
1a004fc0:	3301      	adds	r3, #1
1a004fc2:	9400      	str	r4, [sp, #0]
1a004fc4:	eb06 0904 	add.w	r9, r6, r4
1a004fc8:	429a      	cmp	r2, r3
1a004fca:	4454      	add	r4, sl
1a004fcc:	fbb2 f8f3 	udiv	r8, r2, r3
1a004fd0:	9401      	str	r4, [sp, #4]
1a004fd2:	d33a      	bcc.n	1a00504a <quorem+0xae>
1a004fd4:	2500      	movs	r5, #0
1a004fd6:	462a      	mov	r2, r5
1a004fd8:	46b6      	mov	lr, r6
1a004fda:	46d4      	mov	ip, sl
1a004fdc:	f85e 4b04 	ldr.w	r4, [lr], #4
1a004fe0:	f8dc 3000 	ldr.w	r3, [ip]
1a004fe4:	fa1f fb84 	uxth.w	fp, r4
1a004fe8:	fb08 550b 	mla	r5, r8, fp, r5
1a004fec:	ea4f 4b15 	mov.w	fp, r5, lsr #16
1a004ff0:	0c24      	lsrs	r4, r4, #16
1a004ff2:	fb08 b404 	mla	r4, r8, r4, fp
1a004ff6:	b2ad      	uxth	r5, r5
1a004ff8:	1b55      	subs	r5, r2, r5
1a004ffa:	b2a2      	uxth	r2, r4
1a004ffc:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
1a005000:	fa15 f383 	uxtah	r3, r5, r3
1a005004:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a005008:	b29b      	uxth	r3, r3
1a00500a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00500e:	45f1      	cmp	r9, lr
1a005010:	ea4f 4514 	mov.w	r5, r4, lsr #16
1a005014:	f84c 3b04 	str.w	r3, [ip], #4
1a005018:	ea4f 4222 	mov.w	r2, r2, asr #16
1a00501c:	d2de      	bcs.n	1a004fdc <quorem+0x40>
1a00501e:	9b00      	ldr	r3, [sp, #0]
1a005020:	f85a 3003 	ldr.w	r3, [sl, r3]
1a005024:	b98b      	cbnz	r3, 1a00504a <quorem+0xae>
1a005026:	9a01      	ldr	r2, [sp, #4]
1a005028:	1f13      	subs	r3, r2, #4
1a00502a:	459a      	cmp	sl, r3
1a00502c:	d20c      	bcs.n	1a005048 <quorem+0xac>
1a00502e:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a005032:	b94b      	cbnz	r3, 1a005048 <quorem+0xac>
1a005034:	f1a2 0308 	sub.w	r3, r2, #8
1a005038:	e002      	b.n	1a005040 <quorem+0xa4>
1a00503a:	681a      	ldr	r2, [r3, #0]
1a00503c:	3b04      	subs	r3, #4
1a00503e:	b91a      	cbnz	r2, 1a005048 <quorem+0xac>
1a005040:	459a      	cmp	sl, r3
1a005042:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005046:	d3f8      	bcc.n	1a00503a <quorem+0x9e>
1a005048:	6107      	str	r7, [r0, #16]
1a00504a:	4604      	mov	r4, r0
1a00504c:	f001 fa32 	bl	1a0064b4 <__mcmp>
1a005050:	2800      	cmp	r0, #0
1a005052:	db2d      	blt.n	1a0050b0 <quorem+0x114>
1a005054:	f108 0801 	add.w	r8, r8, #1
1a005058:	4650      	mov	r0, sl
1a00505a:	2300      	movs	r3, #0
1a00505c:	f856 1b04 	ldr.w	r1, [r6], #4
1a005060:	6805      	ldr	r5, [r0, #0]
1a005062:	b28a      	uxth	r2, r1
1a005064:	1a9a      	subs	r2, r3, r2
1a005066:	0c0b      	lsrs	r3, r1, #16
1a005068:	fa12 f285 	uxtah	r2, r2, r5
1a00506c:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
1a005070:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a005074:	b292      	uxth	r2, r2
1a005076:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00507a:	45b1      	cmp	r9, r6
1a00507c:	f840 2b04 	str.w	r2, [r0], #4
1a005080:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005084:	d2ea      	bcs.n	1a00505c <quorem+0xc0>
1a005086:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00508a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00508e:	b97a      	cbnz	r2, 1a0050b0 <quorem+0x114>
1a005090:	1f1a      	subs	r2, r3, #4
1a005092:	4592      	cmp	sl, r2
1a005094:	d20b      	bcs.n	1a0050ae <quorem+0x112>
1a005096:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a00509a:	b942      	cbnz	r2, 1a0050ae <quorem+0x112>
1a00509c:	3b08      	subs	r3, #8
1a00509e:	e002      	b.n	1a0050a6 <quorem+0x10a>
1a0050a0:	681a      	ldr	r2, [r3, #0]
1a0050a2:	3b04      	subs	r3, #4
1a0050a4:	b91a      	cbnz	r2, 1a0050ae <quorem+0x112>
1a0050a6:	459a      	cmp	sl, r3
1a0050a8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0050ac:	d3f8      	bcc.n	1a0050a0 <quorem+0x104>
1a0050ae:	6127      	str	r7, [r4, #16]
1a0050b0:	4640      	mov	r0, r8
1a0050b2:	b003      	add	sp, #12
1a0050b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0050b8:	2000      	movs	r0, #0
1a0050ba:	b003      	add	sp, #12
1a0050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0050c0 <_dtoa_r>:
1a0050c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0050c4:	ec57 6b10 	vmov	r6, r7, d0
1a0050c8:	b097      	sub	sp, #92	; 0x5c
1a0050ca:	6c05      	ldr	r5, [r0, #64]	; 0x40
1a0050cc:	9c20      	ldr	r4, [sp, #128]	; 0x80
1a0050ce:	9102      	str	r1, [sp, #8]
1a0050d0:	4682      	mov	sl, r0
1a0050d2:	920a      	str	r2, [sp, #40]	; 0x28
1a0050d4:	9307      	str	r3, [sp, #28]
1a0050d6:	e9cd 6700 	strd	r6, r7, [sp]
1a0050da:	b155      	cbz	r5, 1a0050f2 <_dtoa_r+0x32>
1a0050dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a0050de:	606a      	str	r2, [r5, #4]
1a0050e0:	2301      	movs	r3, #1
1a0050e2:	4093      	lsls	r3, r2
1a0050e4:	60ab      	str	r3, [r5, #8]
1a0050e6:	4629      	mov	r1, r5
1a0050e8:	f000 fff8 	bl	1a0060dc <_Bfree>
1a0050ec:	2300      	movs	r3, #0
1a0050ee:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
1a0050f2:	1e3e      	subs	r6, r7, #0
1a0050f4:	bfb4      	ite	lt
1a0050f6:	2301      	movlt	r3, #1
1a0050f8:	2300      	movge	r3, #0
1a0050fa:	6023      	str	r3, [r4, #0]
1a0050fc:	4b76      	ldr	r3, [pc, #472]	; (1a0052d8 <_dtoa_r+0x218>)
1a0050fe:	bfbc      	itt	lt
1a005100:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
1a005104:	9601      	strlt	r6, [sp, #4]
1a005106:	43b3      	bics	r3, r6
1a005108:	f000 80ae 	beq.w	1a005268 <_dtoa_r+0x1a8>
1a00510c:	ed9d 7b00 	vldr	d7, [sp]
1a005110:	2200      	movs	r2, #0
1a005112:	2300      	movs	r3, #0
1a005114:	ec51 0b17 	vmov	r0, r1, d7
1a005118:	ed8d 7b04 	vstr	d7, [sp, #16]
1a00511c:	f7fd fa66 	bl	1a0025ec <__aeabi_dcmpeq>
1a005120:	4605      	mov	r5, r0
1a005122:	b178      	cbz	r0, 1a005144 <_dtoa_r+0x84>
1a005124:	9a07      	ldr	r2, [sp, #28]
1a005126:	2301      	movs	r3, #1
1a005128:	6013      	str	r3, [r2, #0]
1a00512a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00512c:	2b00      	cmp	r3, #0
1a00512e:	f000 8313 	beq.w	1a005758 <_dtoa_r+0x698>
1a005132:	4b6a      	ldr	r3, [pc, #424]	; (1a0052dc <_dtoa_r+0x21c>)
1a005134:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a005136:	6013      	str	r3, [r2, #0]
1a005138:	3b01      	subs	r3, #1
1a00513a:	9303      	str	r3, [sp, #12]
1a00513c:	9803      	ldr	r0, [sp, #12]
1a00513e:	b017      	add	sp, #92	; 0x5c
1a005140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005144:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
1a005148:	aa14      	add	r2, sp, #80	; 0x50
1a00514a:	a915      	add	r1, sp, #84	; 0x54
1a00514c:	ec48 7b10 	vmov	d0, r7, r8
1a005150:	4650      	mov	r0, sl
1a005152:	f001 fa47 	bl	1a0065e4 <__d2b>
1a005156:	0d34      	lsrs	r4, r6, #20
1a005158:	4683      	mov	fp, r0
1a00515a:	f040 809b 	bne.w	1a005294 <_dtoa_r+0x1d4>
1a00515e:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
1a005162:	442c      	add	r4, r5
1a005164:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a005168:	2b20      	cmp	r3, #32
1a00516a:	f340 83bb 	ble.w	1a0058e4 <_dtoa_r+0x824>
1a00516e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a005172:	409e      	lsls	r6, r3
1a005174:	9b00      	ldr	r3, [sp, #0]
1a005176:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00517a:	fa23 f000 	lsr.w	r0, r3, r0
1a00517e:	4330      	orrs	r0, r6
1a005180:	f7fc ff52 	bl	1a002028 <__aeabi_ui2d>
1a005184:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
1a005188:	2101      	movs	r1, #1
1a00518a:	4602      	mov	r2, r0
1a00518c:	3c01      	subs	r4, #1
1a00518e:	910e      	str	r1, [sp, #56]	; 0x38
1a005190:	4610      	mov	r0, r2
1a005192:	4619      	mov	r1, r3
1a005194:	2200      	movs	r2, #0
1a005196:	4b52      	ldr	r3, [pc, #328]	; (1a0052e0 <_dtoa_r+0x220>)
1a005198:	f7fc fe08 	bl	1a001dac <__aeabi_dsub>
1a00519c:	a348      	add	r3, pc, #288	; (adr r3, 1a0052c0 <_dtoa_r+0x200>)
1a00519e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051a2:	f7fc ffbb 	bl	1a00211c <__aeabi_dmul>
1a0051a6:	a348      	add	r3, pc, #288	; (adr r3, 1a0052c8 <_dtoa_r+0x208>)
1a0051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051ac:	f7fc fe00 	bl	1a001db0 <__adddf3>
1a0051b0:	4606      	mov	r6, r0
1a0051b2:	4620      	mov	r0, r4
1a0051b4:	460f      	mov	r7, r1
1a0051b6:	f7fc ff47 	bl	1a002048 <__aeabi_i2d>
1a0051ba:	a345      	add	r3, pc, #276	; (adr r3, 1a0052d0 <_dtoa_r+0x210>)
1a0051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051c0:	f7fc ffac 	bl	1a00211c <__aeabi_dmul>
1a0051c4:	4602      	mov	r2, r0
1a0051c6:	460b      	mov	r3, r1
1a0051c8:	4630      	mov	r0, r6
1a0051ca:	4639      	mov	r1, r7
1a0051cc:	f7fc fdf0 	bl	1a001db0 <__adddf3>
1a0051d0:	4606      	mov	r6, r0
1a0051d2:	460f      	mov	r7, r1
1a0051d4:	f7fd fa52 	bl	1a00267c <__aeabi_d2iz>
1a0051d8:	2200      	movs	r2, #0
1a0051da:	4681      	mov	r9, r0
1a0051dc:	2300      	movs	r3, #0
1a0051de:	4630      	mov	r0, r6
1a0051e0:	4639      	mov	r1, r7
1a0051e2:	f7fd fa0d 	bl	1a002600 <__aeabi_dcmplt>
1a0051e6:	2800      	cmp	r0, #0
1a0051e8:	f040 82a9 	bne.w	1a00573e <_dtoa_r+0x67e>
1a0051ec:	1b2c      	subs	r4, r5, r4
1a0051ee:	f1b9 0f16 	cmp.w	r9, #22
1a0051f2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
1a0051f6:	f200 8296 	bhi.w	1a005726 <_dtoa_r+0x666>
1a0051fa:	4b3a      	ldr	r3, [pc, #232]	; (1a0052e4 <_dtoa_r+0x224>)
1a0051fc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005200:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005208:	f7fd f9fa 	bl	1a002600 <__aeabi_dcmplt>
1a00520c:	2800      	cmp	r0, #0
1a00520e:	d06f      	beq.n	1a0052f0 <_dtoa_r+0x230>
1a005210:	2300      	movs	r3, #0
1a005212:	f1b8 0f00 	cmp.w	r8, #0
1a005216:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a00521a:	930d      	str	r3, [sp, #52]	; 0x34
1a00521c:	f2c0 8289 	blt.w	1a005732 <_dtoa_r+0x672>
1a005220:	2300      	movs	r3, #0
1a005222:	9308      	str	r3, [sp, #32]
1a005224:	f1b9 0f00 	cmp.w	r9, #0
1a005228:	da68      	bge.n	1a0052fc <_dtoa_r+0x23c>
1a00522a:	9b08      	ldr	r3, [sp, #32]
1a00522c:	f8cd 9018 	str.w	r9, [sp, #24]
1a005230:	eba3 0309 	sub.w	r3, r3, r9
1a005234:	9308      	str	r3, [sp, #32]
1a005236:	f1c9 0300 	rsb	r3, r9, #0
1a00523a:	930c      	str	r3, [sp, #48]	; 0x30
1a00523c:	9b02      	ldr	r3, [sp, #8]
1a00523e:	2b09      	cmp	r3, #9
1a005240:	f04f 0900 	mov.w	r9, #0
1a005244:	d862      	bhi.n	1a00530c <_dtoa_r+0x24c>
1a005246:	2b05      	cmp	r3, #5
1a005248:	f340 834a 	ble.w	1a0058e0 <_dtoa_r+0x820>
1a00524c:	3b04      	subs	r3, #4
1a00524e:	9302      	str	r3, [sp, #8]
1a005250:	2400      	movs	r4, #0
1a005252:	9b02      	ldr	r3, [sp, #8]
1a005254:	3b02      	subs	r3, #2
1a005256:	2b03      	cmp	r3, #3
1a005258:	f200 8641 	bhi.w	1a005ede <_dtoa_r+0xe1e>
1a00525c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005260:	04630466 	.word	0x04630466
1a005264:	0456043b 	.word	0x0456043b
1a005268:	9a07      	ldr	r2, [sp, #28]
1a00526a:	f242 730f 	movw	r3, #9999	; 0x270f
1a00526e:	6013      	str	r3, [r2, #0]
1a005270:	9b00      	ldr	r3, [sp, #0]
1a005272:	f3c6 0613 	ubfx	r6, r6, #0, #20
1a005276:	4333      	orrs	r3, r6
1a005278:	d118      	bne.n	1a0052ac <_dtoa_r+0x1ec>
1a00527a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a00527c:	2b00      	cmp	r3, #0
1a00527e:	f000 8625 	beq.w	1a005ecc <_dtoa_r+0xe0c>
1a005282:	4b19      	ldr	r3, [pc, #100]	; (1a0052e8 <_dtoa_r+0x228>)
1a005284:	9303      	str	r3, [sp, #12]
1a005286:	3308      	adds	r3, #8
1a005288:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a00528a:	9803      	ldr	r0, [sp, #12]
1a00528c:	6013      	str	r3, [r2, #0]
1a00528e:	b017      	add	sp, #92	; 0x5c
1a005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005294:	f3c8 0113 	ubfx	r1, r8, #0, #20
1a005298:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
1a00529c:	950e      	str	r5, [sp, #56]	; 0x38
1a00529e:	463a      	mov	r2, r7
1a0052a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a0052a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1a0052a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a0052aa:	e771      	b.n	1a005190 <_dtoa_r+0xd0>
1a0052ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a0052ae:	2b00      	cmp	r3, #0
1a0052b0:	f040 8400 	bne.w	1a005ab4 <_dtoa_r+0x9f4>
1a0052b4:	4b0d      	ldr	r3, [pc, #52]	; (1a0052ec <_dtoa_r+0x22c>)
1a0052b6:	9303      	str	r3, [sp, #12]
1a0052b8:	e740      	b.n	1a00513c <_dtoa_r+0x7c>
1a0052ba:	bf00      	nop
1a0052bc:	f3af 8000 	nop.w
1a0052c0:	636f4361 	.word	0x636f4361
1a0052c4:	3fd287a7 	.word	0x3fd287a7
1a0052c8:	8b60c8b3 	.word	0x8b60c8b3
1a0052cc:	3fc68a28 	.word	0x3fc68a28
1a0052d0:	509f79fb 	.word	0x509f79fb
1a0052d4:	3fd34413 	.word	0x3fd34413
1a0052d8:	7ff00000 	.word	0x7ff00000
1a0052dc:	1a0070d9 	.word	0x1a0070d9
1a0052e0:	3ff80000 	.word	0x3ff80000
1a0052e4:	1a007138 	.word	0x1a007138
1a0052e8:	1a007100 	.word	0x1a007100
1a0052ec:	1a0070fc 	.word	0x1a0070fc
1a0052f0:	f1b8 0f00 	cmp.w	r8, #0
1a0052f4:	f2c0 84b6 	blt.w	1a005c64 <_dtoa_r+0xba4>
1a0052f8:	900d      	str	r0, [sp, #52]	; 0x34
1a0052fa:	9008      	str	r0, [sp, #32]
1a0052fc:	2300      	movs	r3, #0
1a0052fe:	930c      	str	r3, [sp, #48]	; 0x30
1a005300:	9b02      	ldr	r3, [sp, #8]
1a005302:	f8cd 9018 	str.w	r9, [sp, #24]
1a005306:	2b09      	cmp	r3, #9
1a005308:	44c8      	add	r8, r9
1a00530a:	d99c      	bls.n	1a005246 <_dtoa_r+0x186>
1a00530c:	2300      	movs	r3, #0
1a00530e:	2401      	movs	r4, #1
1a005310:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
1a005314:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a005318:	9302      	str	r3, [sp, #8]
1a00531a:	9509      	str	r5, [sp, #36]	; 0x24
1a00531c:	2100      	movs	r1, #0
1a00531e:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005322:	950f      	str	r5, [sp, #60]	; 0x3c
1a005324:	4650      	mov	r0, sl
1a005326:	f000 feb3 	bl	1a006090 <_Balloc>
1a00532a:	2d0e      	cmp	r5, #14
1a00532c:	9003      	str	r0, [sp, #12]
1a00532e:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005332:	f200 810a 	bhi.w	1a00554a <_dtoa_r+0x48a>
1a005336:	2c00      	cmp	r4, #0
1a005338:	f000 8107 	beq.w	1a00554a <_dtoa_r+0x48a>
1a00533c:	9906      	ldr	r1, [sp, #24]
1a00533e:	2900      	cmp	r1, #0
1a005340:	f340 8466 	ble.w	1a005c10 <_dtoa_r+0xb50>
1a005344:	4bb1      	ldr	r3, [pc, #708]	; (1a00560c <_dtoa_r+0x54c>)
1a005346:	f001 020f 	and.w	r2, r1, #15
1a00534a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00534e:	ed93 7b00 	vldr	d7, [r3]
1a005352:	110c      	asrs	r4, r1, #4
1a005354:	06e3      	lsls	r3, r4, #27
1a005356:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a00535a:	f140 8406 	bpl.w	1a005b6a <_dtoa_r+0xaaa>
1a00535e:	4bac      	ldr	r3, [pc, #688]	; (1a005610 <_dtoa_r+0x550>)
1a005360:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005368:	f7fd f802 	bl	1a002370 <__aeabi_ddiv>
1a00536c:	e9cd 0100 	strd	r0, r1, [sp]
1a005370:	f004 040f 	and.w	r4, r4, #15
1a005374:	2603      	movs	r6, #3
1a005376:	b17c      	cbz	r4, 1a005398 <_dtoa_r+0x2d8>
1a005378:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00537c:	4da4      	ldr	r5, [pc, #656]	; (1a005610 <_dtoa_r+0x550>)
1a00537e:	07e7      	lsls	r7, r4, #31
1a005380:	d504      	bpl.n	1a00538c <_dtoa_r+0x2cc>
1a005382:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005386:	f7fc fec9 	bl	1a00211c <__aeabi_dmul>
1a00538a:	3601      	adds	r6, #1
1a00538c:	1064      	asrs	r4, r4, #1
1a00538e:	f105 0508 	add.w	r5, r5, #8
1a005392:	d1f4      	bne.n	1a00537e <_dtoa_r+0x2be>
1a005394:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
1a005398:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00539c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a0053a0:	f7fc ffe6 	bl	1a002370 <__aeabi_ddiv>
1a0053a4:	e9cd 0100 	strd	r0, r1, [sp]
1a0053a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0053aa:	b153      	cbz	r3, 1a0053c2 <_dtoa_r+0x302>
1a0053ac:	e9dd 4500 	ldrd	r4, r5, [sp]
1a0053b0:	2200      	movs	r2, #0
1a0053b2:	4b98      	ldr	r3, [pc, #608]	; (1a005614 <_dtoa_r+0x554>)
1a0053b4:	4620      	mov	r0, r4
1a0053b6:	4629      	mov	r1, r5
1a0053b8:	f7fd f922 	bl	1a002600 <__aeabi_dcmplt>
1a0053bc:	2800      	cmp	r0, #0
1a0053be:	f040 8521 	bne.w	1a005e04 <_dtoa_r+0xd44>
1a0053c2:	4630      	mov	r0, r6
1a0053c4:	f7fc fe40 	bl	1a002048 <__aeabi_i2d>
1a0053c8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0053cc:	f7fc fea6 	bl	1a00211c <__aeabi_dmul>
1a0053d0:	4b91      	ldr	r3, [pc, #580]	; (1a005618 <_dtoa_r+0x558>)
1a0053d2:	2200      	movs	r2, #0
1a0053d4:	f7fc fcec 	bl	1a001db0 <__adddf3>
1a0053d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053da:	4604      	mov	r4, r0
1a0053dc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a0053e0:	2b00      	cmp	r3, #0
1a0053e2:	f000 83f9 	beq.w	1a005bd8 <_dtoa_r+0xb18>
1a0053e6:	9b06      	ldr	r3, [sp, #24]
1a0053e8:	9312      	str	r3, [sp, #72]	; 0x48
1a0053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053ec:	9310      	str	r3, [sp, #64]	; 0x40
1a0053ee:	e9dd 6700 	ldrd	r6, r7, [sp]
1a0053f2:	4639      	mov	r1, r7
1a0053f4:	4630      	mov	r0, r6
1a0053f6:	f7fd f941 	bl	1a00267c <__aeabi_d2iz>
1a0053fa:	9000      	str	r0, [sp, #0]
1a0053fc:	f7fc fe24 	bl	1a002048 <__aeabi_i2d>
1a005400:	4602      	mov	r2, r0
1a005402:	460b      	mov	r3, r1
1a005404:	4630      	mov	r0, r6
1a005406:	4639      	mov	r1, r7
1a005408:	f7fc fcd0 	bl	1a001dac <__aeabi_dsub>
1a00540c:	4b7f      	ldr	r3, [pc, #508]	; (1a00560c <_dtoa_r+0x54c>)
1a00540e:	9a00      	ldr	r2, [sp, #0]
1a005410:	460f      	mov	r7, r1
1a005412:	9910      	ldr	r1, [sp, #64]	; 0x40
1a005414:	4606      	mov	r6, r0
1a005416:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
1a00541a:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a00541c:	9903      	ldr	r1, [sp, #12]
1a00541e:	3230      	adds	r2, #48	; 0x30
1a005420:	e9cd 4500 	strd	r4, r5, [sp]
1a005424:	b2d5      	uxtb	r5, r2
1a005426:	1c4c      	adds	r4, r1, #1
1a005428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a00542c:	2800      	cmp	r0, #0
1a00542e:	f000 848d 	beq.w	1a005d4c <_dtoa_r+0xc8c>
1a005432:	2000      	movs	r0, #0
1a005434:	4979      	ldr	r1, [pc, #484]	; (1a00561c <_dtoa_r+0x55c>)
1a005436:	f7fc ff9b 	bl	1a002370 <__aeabi_ddiv>
1a00543a:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00543e:	f7fc fcb5 	bl	1a001dac <__aeabi_dsub>
1a005442:	9b03      	ldr	r3, [sp, #12]
1a005444:	4632      	mov	r2, r6
1a005446:	701d      	strb	r5, [r3, #0]
1a005448:	463b      	mov	r3, r7
1a00544a:	e9cd 0100 	strd	r0, r1, [sp]
1a00544e:	f7fd f8f5 	bl	1a00263c <__aeabi_dcmpgt>
1a005452:	2800      	cmp	r0, #0
1a005454:	f040 84ca 	bne.w	1a005dec <_dtoa_r+0xd2c>
1a005458:	4632      	mov	r2, r6
1a00545a:	463b      	mov	r3, r7
1a00545c:	2000      	movs	r0, #0
1a00545e:	496d      	ldr	r1, [pc, #436]	; (1a005614 <_dtoa_r+0x554>)
1a005460:	f7fc fca4 	bl	1a001dac <__aeabi_dsub>
1a005464:	4602      	mov	r2, r0
1a005466:	460b      	mov	r3, r1
1a005468:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00546c:	f7fd f8e6 	bl	1a00263c <__aeabi_dcmpgt>
1a005470:	2800      	cmp	r0, #0
1a005472:	f040 8526 	bne.w	1a005ec2 <_dtoa_r+0xe02>
1a005476:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005478:	2b01      	cmp	r3, #1
1a00547a:	d062      	beq.n	1a005542 <_dtoa_r+0x482>
1a00547c:	9a03      	ldr	r2, [sp, #12]
1a00547e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005482:	4413      	add	r3, r2
1a005484:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
1a005488:	e9dd 8900 	ldrd	r8, r9, [sp]
1a00548c:	f8cd b000 	str.w	fp, [sp]
1a005490:	46d3      	mov	fp, sl
1a005492:	469a      	mov	sl, r3
1a005494:	e00c      	b.n	1a0054b0 <_dtoa_r+0x3f0>
1a005496:	2000      	movs	r0, #0
1a005498:	495e      	ldr	r1, [pc, #376]	; (1a005614 <_dtoa_r+0x554>)
1a00549a:	f7fc fc87 	bl	1a001dac <__aeabi_dsub>
1a00549e:	4642      	mov	r2, r8
1a0054a0:	464b      	mov	r3, r9
1a0054a2:	f7fd f8ad 	bl	1a002600 <__aeabi_dcmplt>
1a0054a6:	2800      	cmp	r0, #0
1a0054a8:	f040 84eb 	bne.w	1a005e82 <_dtoa_r+0xdc2>
1a0054ac:	45a2      	cmp	sl, r4
1a0054ae:	d041      	beq.n	1a005534 <_dtoa_r+0x474>
1a0054b0:	4640      	mov	r0, r8
1a0054b2:	4649      	mov	r1, r9
1a0054b4:	2200      	movs	r2, #0
1a0054b6:	4b5a      	ldr	r3, [pc, #360]	; (1a005620 <_dtoa_r+0x560>)
1a0054b8:	f7fc fe30 	bl	1a00211c <__aeabi_dmul>
1a0054bc:	2200      	movs	r2, #0
1a0054be:	4b58      	ldr	r3, [pc, #352]	; (1a005620 <_dtoa_r+0x560>)
1a0054c0:	4680      	mov	r8, r0
1a0054c2:	4689      	mov	r9, r1
1a0054c4:	4630      	mov	r0, r6
1a0054c6:	4639      	mov	r1, r7
1a0054c8:	f7fc fe28 	bl	1a00211c <__aeabi_dmul>
1a0054cc:	460f      	mov	r7, r1
1a0054ce:	4606      	mov	r6, r0
1a0054d0:	f7fd f8d4 	bl	1a00267c <__aeabi_d2iz>
1a0054d4:	4605      	mov	r5, r0
1a0054d6:	f7fc fdb7 	bl	1a002048 <__aeabi_i2d>
1a0054da:	4602      	mov	r2, r0
1a0054dc:	460b      	mov	r3, r1
1a0054de:	4630      	mov	r0, r6
1a0054e0:	4639      	mov	r1, r7
1a0054e2:	f7fc fc63 	bl	1a001dac <__aeabi_dsub>
1a0054e6:	3530      	adds	r5, #48	; 0x30
1a0054e8:	b2ed      	uxtb	r5, r5
1a0054ea:	4642      	mov	r2, r8
1a0054ec:	464b      	mov	r3, r9
1a0054ee:	f804 5b01 	strb.w	r5, [r4], #1
1a0054f2:	4606      	mov	r6, r0
1a0054f4:	460f      	mov	r7, r1
1a0054f6:	f7fd f883 	bl	1a002600 <__aeabi_dcmplt>
1a0054fa:	4632      	mov	r2, r6
1a0054fc:	463b      	mov	r3, r7
1a0054fe:	2800      	cmp	r0, #0
1a005500:	d0c9      	beq.n	1a005496 <_dtoa_r+0x3d6>
1a005502:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005504:	46da      	mov	sl, fp
1a005506:	3301      	adds	r3, #1
1a005508:	f8dd b000 	ldr.w	fp, [sp]
1a00550c:	9306      	str	r3, [sp, #24]
1a00550e:	4659      	mov	r1, fp
1a005510:	4650      	mov	r0, sl
1a005512:	f000 fde3 	bl	1a0060dc <_Bfree>
1a005516:	2300      	movs	r3, #0
1a005518:	7023      	strb	r3, [r4, #0]
1a00551a:	9b07      	ldr	r3, [sp, #28]
1a00551c:	461a      	mov	r2, r3
1a00551e:	9b06      	ldr	r3, [sp, #24]
1a005520:	6013      	str	r3, [r2, #0]
1a005522:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a005524:	2b00      	cmp	r3, #0
1a005526:	f43f ae09 	beq.w	1a00513c <_dtoa_r+0x7c>
1a00552a:	9803      	ldr	r0, [sp, #12]
1a00552c:	601c      	str	r4, [r3, #0]
1a00552e:	b017      	add	sp, #92	; 0x5c
1a005530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005534:	46da      	mov	sl, fp
1a005536:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a00553a:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
1a00553e:	f8dd b000 	ldr.w	fp, [sp]
1a005542:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
1a005546:	e9cd 3400 	strd	r3, r4, [sp]
1a00554a:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00554c:	2b00      	cmp	r3, #0
1a00554e:	f2c0 80c9 	blt.w	1a0056e4 <_dtoa_r+0x624>
1a005552:	9a06      	ldr	r2, [sp, #24]
1a005554:	2a0e      	cmp	r2, #14
1a005556:	f300 80c5 	bgt.w	1a0056e4 <_dtoa_r+0x624>
1a00555a:	4b2c      	ldr	r3, [pc, #176]	; (1a00560c <_dtoa_r+0x54c>)
1a00555c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005560:	e9d3 8900 	ldrd	r8, r9, [r3]
1a005564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005566:	2b00      	cmp	r3, #0
1a005568:	da17      	bge.n	1a00559a <_dtoa_r+0x4da>
1a00556a:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a00556c:	2f00      	cmp	r7, #0
1a00556e:	dc14      	bgt.n	1a00559a <_dtoa_r+0x4da>
1a005570:	f040 834b 	bne.w	1a005c0a <_dtoa_r+0xb4a>
1a005574:	2200      	movs	r2, #0
1a005576:	4b2b      	ldr	r3, [pc, #172]	; (1a005624 <_dtoa_r+0x564>)
1a005578:	4640      	mov	r0, r8
1a00557a:	4649      	mov	r1, r9
1a00557c:	f7fc fdce 	bl	1a00211c <__aeabi_dmul>
1a005580:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005584:	f7fd f850 	bl	1a002628 <__aeabi_dcmpge>
1a005588:	2800      	cmp	r0, #0
1a00558a:	f000 83be 	beq.w	1a005d0a <_dtoa_r+0xc4a>
1a00558e:	9f09      	ldr	r7, [sp, #36]	; 0x24
1a005590:	463d      	mov	r5, r7
1a005592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005594:	9c03      	ldr	r4, [sp, #12]
1a005596:	43db      	mvns	r3, r3
1a005598:	e260      	b.n	1a005a5c <_dtoa_r+0x99c>
1a00559a:	e9dd 4500 	ldrd	r4, r5, [sp]
1a00559e:	4642      	mov	r2, r8
1a0055a0:	464b      	mov	r3, r9
1a0055a2:	4620      	mov	r0, r4
1a0055a4:	4629      	mov	r1, r5
1a0055a6:	f7fc fee3 	bl	1a002370 <__aeabi_ddiv>
1a0055aa:	f7fd f867 	bl	1a00267c <__aeabi_d2iz>
1a0055ae:	9000      	str	r0, [sp, #0]
1a0055b0:	f7fc fd4a 	bl	1a002048 <__aeabi_i2d>
1a0055b4:	4642      	mov	r2, r8
1a0055b6:	464b      	mov	r3, r9
1a0055b8:	f7fc fdb0 	bl	1a00211c <__aeabi_dmul>
1a0055bc:	4602      	mov	r2, r0
1a0055be:	460b      	mov	r3, r1
1a0055c0:	4620      	mov	r0, r4
1a0055c2:	4629      	mov	r1, r5
1a0055c4:	f7fc fbf2 	bl	1a001dac <__aeabi_dsub>
1a0055c8:	9b00      	ldr	r3, [sp, #0]
1a0055ca:	9c03      	ldr	r4, [sp, #12]
1a0055cc:	9a06      	ldr	r2, [sp, #24]
1a0055ce:	3330      	adds	r3, #48	; 0x30
1a0055d0:	f804 3b01 	strb.w	r3, [r4], #1
1a0055d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0055d6:	3201      	adds	r2, #1
1a0055d8:	2b01      	cmp	r3, #1
1a0055da:	4606      	mov	r6, r0
1a0055dc:	460f      	mov	r7, r1
1a0055de:	9206      	str	r2, [sp, #24]
1a0055e0:	d054      	beq.n	1a00568c <_dtoa_r+0x5cc>
1a0055e2:	2200      	movs	r2, #0
1a0055e4:	4b0e      	ldr	r3, [pc, #56]	; (1a005620 <_dtoa_r+0x560>)
1a0055e6:	f7fc fd99 	bl	1a00211c <__aeabi_dmul>
1a0055ea:	2200      	movs	r2, #0
1a0055ec:	2300      	movs	r3, #0
1a0055ee:	4606      	mov	r6, r0
1a0055f0:	460f      	mov	r7, r1
1a0055f2:	f7fc fffb 	bl	1a0025ec <__aeabi_dcmpeq>
1a0055f6:	2800      	cmp	r0, #0
1a0055f8:	d189      	bne.n	1a00550e <_dtoa_r+0x44e>
1a0055fa:	f8cd b000 	str.w	fp, [sp]
1a0055fe:	2501      	movs	r5, #1
1a005600:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005604:	f8cd a008 	str.w	sl, [sp, #8]
1a005608:	e019      	b.n	1a00563e <_dtoa_r+0x57e>
1a00560a:	bf00      	nop
1a00560c:	1a007138 	.word	0x1a007138
1a005610:	1a007110 	.word	0x1a007110
1a005614:	3ff00000 	.word	0x3ff00000
1a005618:	401c0000 	.word	0x401c0000
1a00561c:	3fe00000 	.word	0x3fe00000
1a005620:	40240000 	.word	0x40240000
1a005624:	40140000 	.word	0x40140000
1a005628:	f7fc fd78 	bl	1a00211c <__aeabi_dmul>
1a00562c:	2200      	movs	r2, #0
1a00562e:	2300      	movs	r3, #0
1a005630:	4606      	mov	r6, r0
1a005632:	460f      	mov	r7, r1
1a005634:	f7fc ffda 	bl	1a0025ec <__aeabi_dcmpeq>
1a005638:	2800      	cmp	r0, #0
1a00563a:	f040 835c 	bne.w	1a005cf6 <_dtoa_r+0xc36>
1a00563e:	4642      	mov	r2, r8
1a005640:	464b      	mov	r3, r9
1a005642:	4630      	mov	r0, r6
1a005644:	4639      	mov	r1, r7
1a005646:	f7fc fe93 	bl	1a002370 <__aeabi_ddiv>
1a00564a:	f7fd f817 	bl	1a00267c <__aeabi_d2iz>
1a00564e:	4682      	mov	sl, r0
1a005650:	f7fc fcfa 	bl	1a002048 <__aeabi_i2d>
1a005654:	4642      	mov	r2, r8
1a005656:	464b      	mov	r3, r9
1a005658:	f7fc fd60 	bl	1a00211c <__aeabi_dmul>
1a00565c:	4602      	mov	r2, r0
1a00565e:	460b      	mov	r3, r1
1a005660:	4630      	mov	r0, r6
1a005662:	4639      	mov	r1, r7
1a005664:	f7fc fba2 	bl	1a001dac <__aeabi_dsub>
1a005668:	3501      	adds	r5, #1
1a00566a:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
1a00566e:	45ab      	cmp	fp, r5
1a005670:	4606      	mov	r6, r0
1a005672:	460f      	mov	r7, r1
1a005674:	f04f 0200 	mov.w	r2, #0
1a005678:	4ba7      	ldr	r3, [pc, #668]	; (1a005918 <_dtoa_r+0x858>)
1a00567a:	f804 cb01 	strb.w	ip, [r4], #1
1a00567e:	d1d3      	bne.n	1a005628 <_dtoa_r+0x568>
1a005680:	f8dd b000 	ldr.w	fp, [sp]
1a005684:	f8cd a000 	str.w	sl, [sp]
1a005688:	f8dd a008 	ldr.w	sl, [sp, #8]
1a00568c:	4632      	mov	r2, r6
1a00568e:	463b      	mov	r3, r7
1a005690:	4630      	mov	r0, r6
1a005692:	4639      	mov	r1, r7
1a005694:	f7fc fb8c 	bl	1a001db0 <__adddf3>
1a005698:	4642      	mov	r2, r8
1a00569a:	464b      	mov	r3, r9
1a00569c:	4606      	mov	r6, r0
1a00569e:	460f      	mov	r7, r1
1a0056a0:	f7fc ffcc 	bl	1a00263c <__aeabi_dcmpgt>
1a0056a4:	b960      	cbnz	r0, 1a0056c0 <_dtoa_r+0x600>
1a0056a6:	4642      	mov	r2, r8
1a0056a8:	464b      	mov	r3, r9
1a0056aa:	4630      	mov	r0, r6
1a0056ac:	4639      	mov	r1, r7
1a0056ae:	f7fc ff9d 	bl	1a0025ec <__aeabi_dcmpeq>
1a0056b2:	2800      	cmp	r0, #0
1a0056b4:	f43f af2b 	beq.w	1a00550e <_dtoa_r+0x44e>
1a0056b8:	9b00      	ldr	r3, [sp, #0]
1a0056ba:	07db      	lsls	r3, r3, #31
1a0056bc:	f57f af27 	bpl.w	1a00550e <_dtoa_r+0x44e>
1a0056c0:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a0056c4:	9a03      	ldr	r2, [sp, #12]
1a0056c6:	1e63      	subs	r3, r4, #1
1a0056c8:	e004      	b.n	1a0056d4 <_dtoa_r+0x614>
1a0056ca:	429a      	cmp	r2, r3
1a0056cc:	f000 83c0 	beq.w	1a005e50 <_dtoa_r+0xd90>
1a0056d0:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
1a0056d4:	2d39      	cmp	r5, #57	; 0x39
1a0056d6:	f103 0401 	add.w	r4, r3, #1
1a0056da:	d0f6      	beq.n	1a0056ca <_dtoa_r+0x60a>
1a0056dc:	1c6a      	adds	r2, r5, #1
1a0056de:	b2d2      	uxtb	r2, r2
1a0056e0:	701a      	strb	r2, [r3, #0]
1a0056e2:	e714      	b.n	1a00550e <_dtoa_r+0x44e>
1a0056e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0056e6:	2a00      	cmp	r2, #0
1a0056e8:	d03c      	beq.n	1a005764 <_dtoa_r+0x6a4>
1a0056ea:	9a02      	ldr	r2, [sp, #8]
1a0056ec:	2a01      	cmp	r2, #1
1a0056ee:	f340 8258 	ble.w	1a005ba2 <_dtoa_r+0xae2>
1a0056f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056f4:	1e5e      	subs	r6, r3, #1
1a0056f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0056f8:	42b3      	cmp	r3, r6
1a0056fa:	f280 8234 	bge.w	1a005b66 <_dtoa_r+0xaa6>
1a0056fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a005700:	960c      	str	r6, [sp, #48]	; 0x30
1a005702:	1af3      	subs	r3, r6, r3
1a005704:	4499      	add	r9, r3
1a005706:	2600      	movs	r6, #0
1a005708:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00570a:	2b00      	cmp	r3, #0
1a00570c:	f2c0 82f8 	blt.w	1a005d00 <_dtoa_r+0xc40>
1a005710:	9a08      	ldr	r2, [sp, #32]
1a005712:	4614      	mov	r4, r2
1a005714:	441a      	add	r2, r3
1a005716:	4498      	add	r8, r3
1a005718:	9208      	str	r2, [sp, #32]
1a00571a:	2101      	movs	r1, #1
1a00571c:	4650      	mov	r0, sl
1a00571e:	f000 fd7d 	bl	1a00621c <__i2b>
1a005722:	4605      	mov	r5, r0
1a005724:	e021      	b.n	1a00576a <_dtoa_r+0x6aa>
1a005726:	2301      	movs	r3, #1
1a005728:	f1b8 0f00 	cmp.w	r8, #0
1a00572c:	930d      	str	r3, [sp, #52]	; 0x34
1a00572e:	f6bf ad77 	bge.w	1a005220 <_dtoa_r+0x160>
1a005732:	f1c4 0301 	rsb	r3, r4, #1
1a005736:	9308      	str	r3, [sp, #32]
1a005738:	f04f 0800 	mov.w	r8, #0
1a00573c:	e572      	b.n	1a005224 <_dtoa_r+0x164>
1a00573e:	4648      	mov	r0, r9
1a005740:	f7fc fc82 	bl	1a002048 <__aeabi_i2d>
1a005744:	4632      	mov	r2, r6
1a005746:	463b      	mov	r3, r7
1a005748:	f7fc ff50 	bl	1a0025ec <__aeabi_dcmpeq>
1a00574c:	2800      	cmp	r0, #0
1a00574e:	f47f ad4d 	bne.w	1a0051ec <_dtoa_r+0x12c>
1a005752:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
1a005756:	e549      	b.n	1a0051ec <_dtoa_r+0x12c>
1a005758:	4b70      	ldr	r3, [pc, #448]	; (1a00591c <_dtoa_r+0x85c>)
1a00575a:	9303      	str	r3, [sp, #12]
1a00575c:	9803      	ldr	r0, [sp, #12]
1a00575e:	b017      	add	sp, #92	; 0x5c
1a005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005764:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a005766:	9c08      	ldr	r4, [sp, #32]
1a005768:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00576a:	2c00      	cmp	r4, #0
1a00576c:	dd0c      	ble.n	1a005788 <_dtoa_r+0x6c8>
1a00576e:	f1b8 0f00 	cmp.w	r8, #0
1a005772:	dd09      	ble.n	1a005788 <_dtoa_r+0x6c8>
1a005774:	4544      	cmp	r4, r8
1a005776:	9a08      	ldr	r2, [sp, #32]
1a005778:	4623      	mov	r3, r4
1a00577a:	bfa8      	it	ge
1a00577c:	4643      	movge	r3, r8
1a00577e:	1ad2      	subs	r2, r2, r3
1a005780:	9208      	str	r2, [sp, #32]
1a005782:	1ae4      	subs	r4, r4, r3
1a005784:	eba8 0803 	sub.w	r8, r8, r3
1a005788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00578a:	b1d3      	cbz	r3, 1a0057c2 <_dtoa_r+0x702>
1a00578c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00578e:	2b00      	cmp	r3, #0
1a005790:	f000 8189 	beq.w	1a005aa6 <_dtoa_r+0x9e6>
1a005794:	2e00      	cmp	r6, #0
1a005796:	dd10      	ble.n	1a0057ba <_dtoa_r+0x6fa>
1a005798:	4629      	mov	r1, r5
1a00579a:	4632      	mov	r2, r6
1a00579c:	4650      	mov	r0, sl
1a00579e:	f000 fddf 	bl	1a006360 <__pow5mult>
1a0057a2:	465a      	mov	r2, fp
1a0057a4:	4601      	mov	r1, r0
1a0057a6:	4605      	mov	r5, r0
1a0057a8:	4650      	mov	r0, sl
1a0057aa:	f000 fd41 	bl	1a006230 <__multiply>
1a0057ae:	4659      	mov	r1, fp
1a0057b0:	4607      	mov	r7, r0
1a0057b2:	4650      	mov	r0, sl
1a0057b4:	f000 fc92 	bl	1a0060dc <_Bfree>
1a0057b8:	46bb      	mov	fp, r7
1a0057ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0057bc:	1b9a      	subs	r2, r3, r6
1a0057be:	f040 8173 	bne.w	1a005aa8 <_dtoa_r+0x9e8>
1a0057c2:	2101      	movs	r1, #1
1a0057c4:	4650      	mov	r0, sl
1a0057c6:	f000 fd29 	bl	1a00621c <__i2b>
1a0057ca:	f1b9 0f00 	cmp.w	r9, #0
1a0057ce:	4607      	mov	r7, r0
1a0057d0:	f300 808e 	bgt.w	1a0058f0 <_dtoa_r+0x830>
1a0057d4:	9b02      	ldr	r3, [sp, #8]
1a0057d6:	2b01      	cmp	r3, #1
1a0057d8:	f340 8171 	ble.w	1a005abe <_dtoa_r+0x9fe>
1a0057dc:	2600      	movs	r6, #0
1a0057de:	2001      	movs	r0, #1
1a0057e0:	f1b9 0f00 	cmp.w	r9, #0
1a0057e4:	f040 808f 	bne.w	1a005906 <_dtoa_r+0x846>
1a0057e8:	4440      	add	r0, r8
1a0057ea:	f010 001f 	ands.w	r0, r0, #31
1a0057ee:	d075      	beq.n	1a0058dc <_dtoa_r+0x81c>
1a0057f0:	f1c0 0320 	rsb	r3, r0, #32
1a0057f4:	2b04      	cmp	r3, #4
1a0057f6:	f340 836d 	ble.w	1a005ed4 <_dtoa_r+0xe14>
1a0057fa:	f1c0 001c 	rsb	r0, r0, #28
1a0057fe:	9b08      	ldr	r3, [sp, #32]
1a005800:	4403      	add	r3, r0
1a005802:	9308      	str	r3, [sp, #32]
1a005804:	4404      	add	r4, r0
1a005806:	4480      	add	r8, r0
1a005808:	9b08      	ldr	r3, [sp, #32]
1a00580a:	2b00      	cmp	r3, #0
1a00580c:	dd05      	ble.n	1a00581a <_dtoa_r+0x75a>
1a00580e:	4659      	mov	r1, fp
1a005810:	461a      	mov	r2, r3
1a005812:	4650      	mov	r0, sl
1a005814:	f000 fdf4 	bl	1a006400 <__lshift>
1a005818:	4683      	mov	fp, r0
1a00581a:	f1b8 0f00 	cmp.w	r8, #0
1a00581e:	dd05      	ble.n	1a00582c <_dtoa_r+0x76c>
1a005820:	4639      	mov	r1, r7
1a005822:	4642      	mov	r2, r8
1a005824:	4650      	mov	r0, sl
1a005826:	f000 fdeb 	bl	1a006400 <__lshift>
1a00582a:	4607      	mov	r7, r0
1a00582c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00582e:	2b00      	cmp	r3, #0
1a005830:	f040 811e 	bne.w	1a005a70 <_dtoa_r+0x9b0>
1a005834:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005836:	2b00      	cmp	r3, #0
1a005838:	f340 80f5 	ble.w	1a005a26 <_dtoa_r+0x966>
1a00583c:	9b06      	ldr	r3, [sp, #24]
1a00583e:	3301      	adds	r3, #1
1a005840:	9306      	str	r3, [sp, #24]
1a005842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005844:	2b00      	cmp	r3, #0
1a005846:	d177      	bne.n	1a005938 <_dtoa_r+0x878>
1a005848:	9c03      	ldr	r4, [sp, #12]
1a00584a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00584e:	2601      	movs	r6, #1
1a005850:	e003      	b.n	1a00585a <_dtoa_r+0x79a>
1a005852:	f000 fc4d 	bl	1a0060f0 <__multadd>
1a005856:	3601      	adds	r6, #1
1a005858:	4683      	mov	fp, r0
1a00585a:	4639      	mov	r1, r7
1a00585c:	4658      	mov	r0, fp
1a00585e:	f7ff fb9d 	bl	1a004f9c <quorem>
1a005862:	4546      	cmp	r6, r8
1a005864:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a005868:	f804 9b01 	strb.w	r9, [r4], #1
1a00586c:	f04f 0300 	mov.w	r3, #0
1a005870:	f04f 020a 	mov.w	r2, #10
1a005874:	4659      	mov	r1, fp
1a005876:	4650      	mov	r0, sl
1a005878:	dbeb      	blt.n	1a005852 <_dtoa_r+0x792>
1a00587a:	2300      	movs	r3, #0
1a00587c:	9300      	str	r3, [sp, #0]
1a00587e:	4659      	mov	r1, fp
1a005880:	2201      	movs	r2, #1
1a005882:	4650      	mov	r0, sl
1a005884:	f000 fdbc 	bl	1a006400 <__lshift>
1a005888:	4639      	mov	r1, r7
1a00588a:	4683      	mov	fp, r0
1a00588c:	f000 fe12 	bl	1a0064b4 <__mcmp>
1a005890:	2800      	cmp	r0, #0
1a005892:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a005896:	f340 816f 	ble.w	1a005b78 <_dtoa_r+0xab8>
1a00589a:	1e63      	subs	r3, r4, #1
1a00589c:	9903      	ldr	r1, [sp, #12]
1a00589e:	e004      	b.n	1a0058aa <_dtoa_r+0x7ea>
1a0058a0:	4299      	cmp	r1, r3
1a0058a2:	f000 8177 	beq.w	1a005b94 <_dtoa_r+0xad4>
1a0058a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0058aa:	2a39      	cmp	r2, #57	; 0x39
1a0058ac:	f103 0401 	add.w	r4, r3, #1
1a0058b0:	d0f6      	beq.n	1a0058a0 <_dtoa_r+0x7e0>
1a0058b2:	3201      	adds	r2, #1
1a0058b4:	701a      	strb	r2, [r3, #0]
1a0058b6:	4639      	mov	r1, r7
1a0058b8:	4650      	mov	r0, sl
1a0058ba:	f000 fc0f 	bl	1a0060dc <_Bfree>
1a0058be:	2d00      	cmp	r5, #0
1a0058c0:	f43f ae25 	beq.w	1a00550e <_dtoa_r+0x44e>
1a0058c4:	9900      	ldr	r1, [sp, #0]
1a0058c6:	b121      	cbz	r1, 1a0058d2 <_dtoa_r+0x812>
1a0058c8:	42a9      	cmp	r1, r5
1a0058ca:	d002      	beq.n	1a0058d2 <_dtoa_r+0x812>
1a0058cc:	4650      	mov	r0, sl
1a0058ce:	f000 fc05 	bl	1a0060dc <_Bfree>
1a0058d2:	4629      	mov	r1, r5
1a0058d4:	4650      	mov	r0, sl
1a0058d6:	f000 fc01 	bl	1a0060dc <_Bfree>
1a0058da:	e618      	b.n	1a00550e <_dtoa_r+0x44e>
1a0058dc:	201c      	movs	r0, #28
1a0058de:	e78e      	b.n	1a0057fe <_dtoa_r+0x73e>
1a0058e0:	2401      	movs	r4, #1
1a0058e2:	e4b6      	b.n	1a005252 <_dtoa_r+0x192>
1a0058e4:	f1c3 0620 	rsb	r6, r3, #32
1a0058e8:	9b00      	ldr	r3, [sp, #0]
1a0058ea:	fa03 f006 	lsl.w	r0, r3, r6
1a0058ee:	e447      	b.n	1a005180 <_dtoa_r+0xc0>
1a0058f0:	4601      	mov	r1, r0
1a0058f2:	464a      	mov	r2, r9
1a0058f4:	4650      	mov	r0, sl
1a0058f6:	f000 fd33 	bl	1a006360 <__pow5mult>
1a0058fa:	9b02      	ldr	r3, [sp, #8]
1a0058fc:	2b01      	cmp	r3, #1
1a0058fe:	4607      	mov	r7, r0
1a005900:	f340 81b2 	ble.w	1a005c68 <_dtoa_r+0xba8>
1a005904:	2600      	movs	r6, #0
1a005906:	693b      	ldr	r3, [r7, #16]
1a005908:	eb07 0383 	add.w	r3, r7, r3, lsl #2
1a00590c:	6918      	ldr	r0, [r3, #16]
1a00590e:	f000 fc35 	bl	1a00617c <__hi0bits>
1a005912:	f1c0 0020 	rsb	r0, r0, #32
1a005916:	e767      	b.n	1a0057e8 <_dtoa_r+0x728>
1a005918:	40240000 	.word	0x40240000
1a00591c:	1a0070d8 	.word	0x1a0070d8
1a005920:	4629      	mov	r1, r5
1a005922:	2300      	movs	r3, #0
1a005924:	220a      	movs	r2, #10
1a005926:	4650      	mov	r0, sl
1a005928:	f000 fbe2 	bl	1a0060f0 <__multadd>
1a00592c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00592e:	2b00      	cmp	r3, #0
1a005930:	4605      	mov	r5, r0
1a005932:	f340 82c1 	ble.w	1a005eb8 <_dtoa_r+0xdf8>
1a005936:	9309      	str	r3, [sp, #36]	; 0x24
1a005938:	2c00      	cmp	r4, #0
1a00593a:	f300 810d 	bgt.w	1a005b58 <_dtoa_r+0xa98>
1a00593e:	2e00      	cmp	r6, #0
1a005940:	f040 81c5 	bne.w	1a005cce <_dtoa_r+0xc0e>
1a005944:	46a8      	mov	r8, r5
1a005946:	9b00      	ldr	r3, [sp, #0]
1a005948:	9902      	ldr	r1, [sp, #8]
1a00594a:	9e03      	ldr	r6, [sp, #12]
1a00594c:	f003 0201 	and.w	r2, r3, #1
1a005950:	920b      	str	r2, [sp, #44]	; 0x2c
1a005952:	430a      	orrs	r2, r1
1a005954:	920a      	str	r2, [sp, #40]	; 0x28
1a005956:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005958:	1e73      	subs	r3, r6, #1
1a00595a:	441a      	add	r2, r3
1a00595c:	9209      	str	r2, [sp, #36]	; 0x24
1a00595e:	463c      	mov	r4, r7
1a005960:	4621      	mov	r1, r4
1a005962:	4658      	mov	r0, fp
1a005964:	f7ff fb1a 	bl	1a004f9c <quorem>
1a005968:	4629      	mov	r1, r5
1a00596a:	9000      	str	r0, [sp, #0]
1a00596c:	4658      	mov	r0, fp
1a00596e:	f000 fda1 	bl	1a0064b4 <__mcmp>
1a005972:	4642      	mov	r2, r8
1a005974:	4607      	mov	r7, r0
1a005976:	4621      	mov	r1, r4
1a005978:	4650      	mov	r0, sl
1a00597a:	f000 fdb7 	bl	1a0064ec <__mdiff>
1a00597e:	9b00      	ldr	r3, [sp, #0]
1a005980:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a005984:	68c3      	ldr	r3, [r0, #12]
1a005986:	4681      	mov	r9, r0
1a005988:	2b00      	cmp	r3, #0
1a00598a:	d13e      	bne.n	1a005a0a <_dtoa_r+0x94a>
1a00598c:	4601      	mov	r1, r0
1a00598e:	4658      	mov	r0, fp
1a005990:	9208      	str	r2, [sp, #32]
1a005992:	f000 fd8f 	bl	1a0064b4 <__mcmp>
1a005996:	4649      	mov	r1, r9
1a005998:	9004      	str	r0, [sp, #16]
1a00599a:	4650      	mov	r0, sl
1a00599c:	f000 fb9e 	bl	1a0060dc <_Bfree>
1a0059a0:	9b04      	ldr	r3, [sp, #16]
1a0059a2:	9a08      	ldr	r2, [sp, #32]
1a0059a4:	b91b      	cbnz	r3, 1a0059ae <_dtoa_r+0x8ee>
1a0059a6:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0059a8:	2900      	cmp	r1, #0
1a0059aa:	f000 8271 	beq.w	1a005e90 <_dtoa_r+0xdd0>
1a0059ae:	2f00      	cmp	r7, #0
1a0059b0:	f106 0901 	add.w	r9, r6, #1
1a0059b4:	f2c0 816e 	blt.w	1a005c94 <_dtoa_r+0xbd4>
1a0059b8:	9902      	ldr	r1, [sp, #8]
1a0059ba:	430f      	orrs	r7, r1
1a0059bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
1a0059be:	4339      	orrs	r1, r7
1a0059c0:	f000 8168 	beq.w	1a005c94 <_dtoa_r+0xbd4>
1a0059c4:	2b00      	cmp	r3, #0
1a0059c6:	f300 81a2 	bgt.w	1a005d0e <_dtoa_r+0xc4e>
1a0059ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0059cc:	7032      	strb	r2, [r6, #0]
1a0059ce:	42b3      	cmp	r3, r6
1a0059d0:	f000 81a9 	beq.w	1a005d26 <_dtoa_r+0xc66>
1a0059d4:	4659      	mov	r1, fp
1a0059d6:	2300      	movs	r3, #0
1a0059d8:	220a      	movs	r2, #10
1a0059da:	4650      	mov	r0, sl
1a0059dc:	f000 fb88 	bl	1a0060f0 <__multadd>
1a0059e0:	4545      	cmp	r5, r8
1a0059e2:	4683      	mov	fp, r0
1a0059e4:	4629      	mov	r1, r5
1a0059e6:	f04f 0300 	mov.w	r3, #0
1a0059ea:	f04f 020a 	mov.w	r2, #10
1a0059ee:	4650      	mov	r0, sl
1a0059f0:	d013      	beq.n	1a005a1a <_dtoa_r+0x95a>
1a0059f2:	f000 fb7d 	bl	1a0060f0 <__multadd>
1a0059f6:	4641      	mov	r1, r8
1a0059f8:	4605      	mov	r5, r0
1a0059fa:	2300      	movs	r3, #0
1a0059fc:	220a      	movs	r2, #10
1a0059fe:	4650      	mov	r0, sl
1a005a00:	f000 fb76 	bl	1a0060f0 <__multadd>
1a005a04:	464e      	mov	r6, r9
1a005a06:	4680      	mov	r8, r0
1a005a08:	e7aa      	b.n	1a005960 <_dtoa_r+0x8a0>
1a005a0a:	4601      	mov	r1, r0
1a005a0c:	4650      	mov	r0, sl
1a005a0e:	9204      	str	r2, [sp, #16]
1a005a10:	f000 fb64 	bl	1a0060dc <_Bfree>
1a005a14:	2301      	movs	r3, #1
1a005a16:	9a04      	ldr	r2, [sp, #16]
1a005a18:	e7c9      	b.n	1a0059ae <_dtoa_r+0x8ee>
1a005a1a:	f000 fb69 	bl	1a0060f0 <__multadd>
1a005a1e:	464e      	mov	r6, r9
1a005a20:	4605      	mov	r5, r0
1a005a22:	4680      	mov	r8, r0
1a005a24:	e79c      	b.n	1a005960 <_dtoa_r+0x8a0>
1a005a26:	9b02      	ldr	r3, [sp, #8]
1a005a28:	2b02      	cmp	r3, #2
1a005a2a:	f340 8082 	ble.w	1a005b32 <_dtoa_r+0xa72>
1a005a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005a30:	2b00      	cmp	r3, #0
1a005a32:	f47f adae 	bne.w	1a005592 <_dtoa_r+0x4d2>
1a005a36:	4639      	mov	r1, r7
1a005a38:	2205      	movs	r2, #5
1a005a3a:	4650      	mov	r0, sl
1a005a3c:	f000 fb58 	bl	1a0060f0 <__multadd>
1a005a40:	4601      	mov	r1, r0
1a005a42:	4607      	mov	r7, r0
1a005a44:	4658      	mov	r0, fp
1a005a46:	f000 fd35 	bl	1a0064b4 <__mcmp>
1a005a4a:	2800      	cmp	r0, #0
1a005a4c:	f77f ada1 	ble.w	1a005592 <_dtoa_r+0x4d2>
1a005a50:	9c03      	ldr	r4, [sp, #12]
1a005a52:	9b06      	ldr	r3, [sp, #24]
1a005a54:	2231      	movs	r2, #49	; 0x31
1a005a56:	f804 2b01 	strb.w	r2, [r4], #1
1a005a5a:	3301      	adds	r3, #1
1a005a5c:	3301      	adds	r3, #1
1a005a5e:	4639      	mov	r1, r7
1a005a60:	4650      	mov	r0, sl
1a005a62:	9306      	str	r3, [sp, #24]
1a005a64:	f000 fb3a 	bl	1a0060dc <_Bfree>
1a005a68:	2d00      	cmp	r5, #0
1a005a6a:	f47f af32 	bne.w	1a0058d2 <_dtoa_r+0x812>
1a005a6e:	e54e      	b.n	1a00550e <_dtoa_r+0x44e>
1a005a70:	4639      	mov	r1, r7
1a005a72:	4658      	mov	r0, fp
1a005a74:	f000 fd1e 	bl	1a0064b4 <__mcmp>
1a005a78:	2800      	cmp	r0, #0
1a005a7a:	f6bf aedb 	bge.w	1a005834 <_dtoa_r+0x774>
1a005a7e:	4659      	mov	r1, fp
1a005a80:	2300      	movs	r3, #0
1a005a82:	220a      	movs	r2, #10
1a005a84:	4650      	mov	r0, sl
1a005a86:	f000 fb33 	bl	1a0060f0 <__multadd>
1a005a8a:	9b06      	ldr	r3, [sp, #24]
1a005a8c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
1a005a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005a92:	4683      	mov	fp, r0
1a005a94:	2b00      	cmp	r3, #0
1a005a96:	f47f af43 	bne.w	1a005920 <_dtoa_r+0x860>
1a005a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005a9c:	2b00      	cmp	r3, #0
1a005a9e:	f340 8202 	ble.w	1a005ea6 <_dtoa_r+0xde6>
1a005aa2:	9309      	str	r3, [sp, #36]	; 0x24
1a005aa4:	e6d0      	b.n	1a005848 <_dtoa_r+0x788>
1a005aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005aa8:	4659      	mov	r1, fp
1a005aaa:	4650      	mov	r0, sl
1a005aac:	f000 fc58 	bl	1a006360 <__pow5mult>
1a005ab0:	4683      	mov	fp, r0
1a005ab2:	e686      	b.n	1a0057c2 <_dtoa_r+0x702>
1a005ab4:	4b9f      	ldr	r3, [pc, #636]	; (1a005d34 <_dtoa_r+0xc74>)
1a005ab6:	9303      	str	r3, [sp, #12]
1a005ab8:	3303      	adds	r3, #3
1a005aba:	f7ff bbe5 	b.w	1a005288 <_dtoa_r+0x1c8>
1a005abe:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005ac2:	2900      	cmp	r1, #0
1a005ac4:	f47f ae8a 	bne.w	1a0057dc <_dtoa_r+0x71c>
1a005ac8:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a005acc:	2b00      	cmp	r3, #0
1a005ace:	f000 80d5 	beq.w	1a005c7c <_dtoa_r+0xbbc>
1a005ad2:	9e00      	ldr	r6, [sp, #0]
1a005ad4:	e683      	b.n	1a0057de <_dtoa_r+0x71e>
1a005ad6:	2301      	movs	r3, #1
1a005ad8:	930b      	str	r3, [sp, #44]	; 0x2c
1a005ada:	980a      	ldr	r0, [sp, #40]	; 0x28
1a005adc:	2800      	cmp	r0, #0
1a005ade:	dd46      	ble.n	1a005b6e <_dtoa_r+0xaae>
1a005ae0:	900f      	str	r0, [sp, #60]	; 0x3c
1a005ae2:	9009      	str	r0, [sp, #36]	; 0x24
1a005ae4:	2100      	movs	r1, #0
1a005ae6:	2817      	cmp	r0, #23
1a005ae8:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005aec:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005aee:	f77f ac19 	ble.w	1a005324 <_dtoa_r+0x264>
1a005af2:	2201      	movs	r2, #1
1a005af4:	2304      	movs	r3, #4
1a005af6:	005b      	lsls	r3, r3, #1
1a005af8:	f103 0614 	add.w	r6, r3, #20
1a005afc:	42b0      	cmp	r0, r6
1a005afe:	4611      	mov	r1, r2
1a005b00:	f102 0201 	add.w	r2, r2, #1
1a005b04:	d2f7      	bcs.n	1a005af6 <_dtoa_r+0xa36>
1a005b06:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
1a005b0a:	e40b      	b.n	1a005324 <_dtoa_r+0x264>
1a005b0c:	2301      	movs	r3, #1
1a005b0e:	930b      	str	r3, [sp, #44]	; 0x2c
1a005b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005b12:	9a06      	ldr	r2, [sp, #24]
1a005b14:	4413      	add	r3, r2
1a005b16:	930f      	str	r3, [sp, #60]	; 0x3c
1a005b18:	3301      	adds	r3, #1
1a005b1a:	2b01      	cmp	r3, #1
1a005b1c:	4618      	mov	r0, r3
1a005b1e:	9309      	str	r3, [sp, #36]	; 0x24
1a005b20:	bfb8      	it	lt
1a005b22:	2001      	movlt	r0, #1
1a005b24:	e7de      	b.n	1a005ae4 <_dtoa_r+0xa24>
1a005b26:	2300      	movs	r3, #0
1a005b28:	930b      	str	r3, [sp, #44]	; 0x2c
1a005b2a:	e7f1      	b.n	1a005b10 <_dtoa_r+0xa50>
1a005b2c:	2300      	movs	r3, #0
1a005b2e:	930b      	str	r3, [sp, #44]	; 0x2c
1a005b30:	e7d3      	b.n	1a005ada <_dtoa_r+0xa1a>
1a005b32:	9b06      	ldr	r3, [sp, #24]
1a005b34:	3301      	adds	r3, #1
1a005b36:	9306      	str	r3, [sp, #24]
1a005b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005b3a:	2b00      	cmp	r3, #0
1a005b3c:	f47f aefc 	bne.w	1a005938 <_dtoa_r+0x878>
1a005b40:	4639      	mov	r1, r7
1a005b42:	4658      	mov	r0, fp
1a005b44:	f7ff fa2a 	bl	1a004f9c <quorem>
1a005b48:	9c03      	ldr	r4, [sp, #12]
1a005b4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
1a005b4e:	2300      	movs	r3, #0
1a005b50:	f804 9b01 	strb.w	r9, [r4], #1
1a005b54:	9300      	str	r3, [sp, #0]
1a005b56:	e692      	b.n	1a00587e <_dtoa_r+0x7be>
1a005b58:	4629      	mov	r1, r5
1a005b5a:	4622      	mov	r2, r4
1a005b5c:	4650      	mov	r0, sl
1a005b5e:	f000 fc4f 	bl	1a006400 <__lshift>
1a005b62:	4605      	mov	r5, r0
1a005b64:	e6eb      	b.n	1a00593e <_dtoa_r+0x87e>
1a005b66:	1b9e      	subs	r6, r3, r6
1a005b68:	e5ce      	b.n	1a005708 <_dtoa_r+0x648>
1a005b6a:	2602      	movs	r6, #2
1a005b6c:	e403      	b.n	1a005376 <_dtoa_r+0x2b6>
1a005b6e:	2501      	movs	r5, #1
1a005b70:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
1a005b74:	f7ff bbd2 	b.w	1a00531c <_dtoa_r+0x25c>
1a005b78:	d103      	bne.n	1a005b82 <_dtoa_r+0xac2>
1a005b7a:	f019 0f01 	tst.w	r9, #1
1a005b7e:	f47f ae8c 	bne.w	1a00589a <_dtoa_r+0x7da>
1a005b82:	1e63      	subs	r3, r4, #1
1a005b84:	e001      	b.n	1a005b8a <_dtoa_r+0xaca>
1a005b86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a005b8a:	2a30      	cmp	r2, #48	; 0x30
1a005b8c:	f103 0401 	add.w	r4, r3, #1
1a005b90:	d0f9      	beq.n	1a005b86 <_dtoa_r+0xac6>
1a005b92:	e690      	b.n	1a0058b6 <_dtoa_r+0x7f6>
1a005b94:	9a06      	ldr	r2, [sp, #24]
1a005b96:	3201      	adds	r2, #1
1a005b98:	9206      	str	r2, [sp, #24]
1a005b9a:	9a03      	ldr	r2, [sp, #12]
1a005b9c:	2331      	movs	r3, #49	; 0x31
1a005b9e:	7013      	strb	r3, [r2, #0]
1a005ba0:	e689      	b.n	1a0058b6 <_dtoa_r+0x7f6>
1a005ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a005ba4:	2a00      	cmp	r2, #0
1a005ba6:	f000 8126 	beq.w	1a005df6 <_dtoa_r+0xd36>
1a005baa:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a005bae:	9a08      	ldr	r2, [sp, #32]
1a005bb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
1a005bb2:	4614      	mov	r4, r2
1a005bb4:	441a      	add	r2, r3
1a005bb6:	4498      	add	r8, r3
1a005bb8:	9208      	str	r2, [sp, #32]
1a005bba:	e5ae      	b.n	1a00571a <_dtoa_r+0x65a>
1a005bbc:	4630      	mov	r0, r6
1a005bbe:	f7fc fa43 	bl	1a002048 <__aeabi_i2d>
1a005bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005bc6:	f7fc faa9 	bl	1a00211c <__aeabi_dmul>
1a005bca:	2200      	movs	r2, #0
1a005bcc:	4b5a      	ldr	r3, [pc, #360]	; (1a005d38 <_dtoa_r+0xc78>)
1a005bce:	f7fc f8ef 	bl	1a001db0 <__adddf3>
1a005bd2:	4604      	mov	r4, r0
1a005bd4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005bd8:	2200      	movs	r2, #0
1a005bda:	4b58      	ldr	r3, [pc, #352]	; (1a005d3c <_dtoa_r+0xc7c>)
1a005bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005be0:	f7fc f8e4 	bl	1a001dac <__aeabi_dsub>
1a005be4:	4622      	mov	r2, r4
1a005be6:	462b      	mov	r3, r5
1a005be8:	4606      	mov	r6, r0
1a005bea:	460f      	mov	r7, r1
1a005bec:	f7fc fd26 	bl	1a00263c <__aeabi_dcmpgt>
1a005bf0:	2800      	cmp	r0, #0
1a005bf2:	f040 8089 	bne.w	1a005d08 <_dtoa_r+0xc48>
1a005bf6:	4622      	mov	r2, r4
1a005bf8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
1a005bfc:	4630      	mov	r0, r6
1a005bfe:	4639      	mov	r1, r7
1a005c00:	f7fc fcfe 	bl	1a002600 <__aeabi_dcmplt>
1a005c04:	2800      	cmp	r0, #0
1a005c06:	f43f ac9c 	beq.w	1a005542 <_dtoa_r+0x482>
1a005c0a:	2700      	movs	r7, #0
1a005c0c:	463d      	mov	r5, r7
1a005c0e:	e4c0      	b.n	1a005592 <_dtoa_r+0x4d2>
1a005c10:	f000 80f5 	beq.w	1a005dfe <_dtoa_r+0xd3e>
1a005c14:	9b06      	ldr	r3, [sp, #24]
1a005c16:	425c      	negs	r4, r3
1a005c18:	4b49      	ldr	r3, [pc, #292]	; (1a005d40 <_dtoa_r+0xc80>)
1a005c1a:	f004 020f 	and.w	r2, r4, #15
1a005c1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005c2a:	f7fc fa77 	bl	1a00211c <__aeabi_dmul>
1a005c2e:	1124      	asrs	r4, r4, #4
1a005c30:	e9cd 0100 	strd	r0, r1, [sp]
1a005c34:	f000 80e3 	beq.w	1a005dfe <_dtoa_r+0xd3e>
1a005c38:	4d42      	ldr	r5, [pc, #264]	; (1a005d44 <_dtoa_r+0xc84>)
1a005c3a:	2300      	movs	r3, #0
1a005c3c:	2602      	movs	r6, #2
1a005c3e:	07e2      	lsls	r2, r4, #31
1a005c40:	d505      	bpl.n	1a005c4e <_dtoa_r+0xb8e>
1a005c42:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005c46:	f7fc fa69 	bl	1a00211c <__aeabi_dmul>
1a005c4a:	3601      	adds	r6, #1
1a005c4c:	2301      	movs	r3, #1
1a005c4e:	1064      	asrs	r4, r4, #1
1a005c50:	f105 0508 	add.w	r5, r5, #8
1a005c54:	d1f3      	bne.n	1a005c3e <_dtoa_r+0xb7e>
1a005c56:	2b00      	cmp	r3, #0
1a005c58:	f43f aba6 	beq.w	1a0053a8 <_dtoa_r+0x2e8>
1a005c5c:	e9cd 0100 	strd	r0, r1, [sp]
1a005c60:	f7ff bba2 	b.w	1a0053a8 <_dtoa_r+0x2e8>
1a005c64:	900d      	str	r0, [sp, #52]	; 0x34
1a005c66:	e564      	b.n	1a005732 <_dtoa_r+0x672>
1a005c68:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005c6c:	2900      	cmp	r1, #0
1a005c6e:	f47f ae49 	bne.w	1a005904 <_dtoa_r+0x844>
1a005c72:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a005c76:	2b00      	cmp	r3, #0
1a005c78:	f47f ae44 	bne.w	1a005904 <_dtoa_r+0x844>
1a005c7c:	4e32      	ldr	r6, [pc, #200]	; (1a005d48 <_dtoa_r+0xc88>)
1a005c7e:	4016      	ands	r6, r2
1a005c80:	2e00      	cmp	r6, #0
1a005c82:	f43f adac 	beq.w	1a0057de <_dtoa_r+0x71e>
1a005c86:	9b08      	ldr	r3, [sp, #32]
1a005c88:	3301      	adds	r3, #1
1a005c8a:	9308      	str	r3, [sp, #32]
1a005c8c:	f108 0801 	add.w	r8, r8, #1
1a005c90:	2601      	movs	r6, #1
1a005c92:	e5a4      	b.n	1a0057de <_dtoa_r+0x71e>
1a005c94:	2b00      	cmp	r3, #0
1a005c96:	4627      	mov	r7, r4
1a005c98:	464c      	mov	r4, r9
1a005c9a:	4691      	mov	r9, r2
1a005c9c:	dd12      	ble.n	1a005cc4 <_dtoa_r+0xc04>
1a005c9e:	4659      	mov	r1, fp
1a005ca0:	2201      	movs	r2, #1
1a005ca2:	4650      	mov	r0, sl
1a005ca4:	f000 fbac 	bl	1a006400 <__lshift>
1a005ca8:	4639      	mov	r1, r7
1a005caa:	4683      	mov	fp, r0
1a005cac:	f000 fc02 	bl	1a0064b4 <__mcmp>
1a005cb0:	2800      	cmp	r0, #0
1a005cb2:	f340 80df 	ble.w	1a005e74 <_dtoa_r+0xdb4>
1a005cb6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
1a005cba:	f000 80d0 	beq.w	1a005e5e <_dtoa_r+0xd9e>
1a005cbe:	9b00      	ldr	r3, [sp, #0]
1a005cc0:	f103 0931 	add.w	r9, r3, #49	; 0x31
1a005cc4:	9500      	str	r5, [sp, #0]
1a005cc6:	f886 9000 	strb.w	r9, [r6]
1a005cca:	4645      	mov	r5, r8
1a005ccc:	e5f3      	b.n	1a0058b6 <_dtoa_r+0x7f6>
1a005cce:	6869      	ldr	r1, [r5, #4]
1a005cd0:	4650      	mov	r0, sl
1a005cd2:	f000 f9dd 	bl	1a006090 <_Balloc>
1a005cd6:	692b      	ldr	r3, [r5, #16]
1a005cd8:	3302      	adds	r3, #2
1a005cda:	009a      	lsls	r2, r3, #2
1a005cdc:	4604      	mov	r4, r0
1a005cde:	f105 010c 	add.w	r1, r5, #12
1a005ce2:	300c      	adds	r0, #12
1a005ce4:	f7fd fa9a 	bl	1a00321c <memcpy>
1a005ce8:	4621      	mov	r1, r4
1a005cea:	2201      	movs	r2, #1
1a005cec:	4650      	mov	r0, sl
1a005cee:	f000 fb87 	bl	1a006400 <__lshift>
1a005cf2:	4680      	mov	r8, r0
1a005cf4:	e627      	b.n	1a005946 <_dtoa_r+0x886>
1a005cf6:	f8dd b000 	ldr.w	fp, [sp]
1a005cfa:	f8dd a008 	ldr.w	sl, [sp, #8]
1a005cfe:	e406      	b.n	1a00550e <_dtoa_r+0x44e>
1a005d00:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a005d04:	1a9c      	subs	r4, r3, r2
1a005d06:	e508      	b.n	1a00571a <_dtoa_r+0x65a>
1a005d08:	2700      	movs	r7, #0
1a005d0a:	463d      	mov	r5, r7
1a005d0c:	e6a0      	b.n	1a005a50 <_dtoa_r+0x990>
1a005d0e:	2a39      	cmp	r2, #57	; 0x39
1a005d10:	4627      	mov	r7, r4
1a005d12:	464c      	mov	r4, r9
1a005d14:	f000 80a3 	beq.w	1a005e5e <_dtoa_r+0xd9e>
1a005d18:	f102 0901 	add.w	r9, r2, #1
1a005d1c:	9500      	str	r5, [sp, #0]
1a005d1e:	f886 9000 	strb.w	r9, [r6]
1a005d22:	4645      	mov	r5, r8
1a005d24:	e5c7      	b.n	1a0058b6 <_dtoa_r+0x7f6>
1a005d26:	4627      	mov	r7, r4
1a005d28:	9500      	str	r5, [sp, #0]
1a005d2a:	464c      	mov	r4, r9
1a005d2c:	4645      	mov	r5, r8
1a005d2e:	4691      	mov	r9, r2
1a005d30:	e5a5      	b.n	1a00587e <_dtoa_r+0x7be>
1a005d32:	bf00      	nop
1a005d34:	1a0070fc 	.word	0x1a0070fc
1a005d38:	401c0000 	.word	0x401c0000
1a005d3c:	40140000 	.word	0x40140000
1a005d40:	1a007138 	.word	0x1a007138
1a005d44:	1a007110 	.word	0x1a007110
1a005d48:	7ff00000 	.word	0x7ff00000
1a005d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005d50:	f7fc f9e4 	bl	1a00211c <__aeabi_dmul>
1a005d54:	9b03      	ldr	r3, [sp, #12]
1a005d56:	701d      	strb	r5, [r3, #0]
1a005d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005d5a:	2b01      	cmp	r3, #1
1a005d5c:	e9cd 0100 	strd	r0, r1, [sp]
1a005d60:	d023      	beq.n	1a005daa <_dtoa_r+0xcea>
1a005d62:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005d64:	9a03      	ldr	r2, [sp, #12]
1a005d66:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a005d6a:	4413      	add	r3, r2
1a005d6c:	46c1      	mov	r9, r8
1a005d6e:	4698      	mov	r8, r3
1a005d70:	2200      	movs	r2, #0
1a005d72:	4b64      	ldr	r3, [pc, #400]	; (1a005f04 <_dtoa_r+0xe44>)
1a005d74:	4630      	mov	r0, r6
1a005d76:	4639      	mov	r1, r7
1a005d78:	f7fc f9d0 	bl	1a00211c <__aeabi_dmul>
1a005d7c:	460f      	mov	r7, r1
1a005d7e:	4606      	mov	r6, r0
1a005d80:	f7fc fc7c 	bl	1a00267c <__aeabi_d2iz>
1a005d84:	4605      	mov	r5, r0
1a005d86:	f7fc f95f 	bl	1a002048 <__aeabi_i2d>
1a005d8a:	3530      	adds	r5, #48	; 0x30
1a005d8c:	4602      	mov	r2, r0
1a005d8e:	460b      	mov	r3, r1
1a005d90:	4630      	mov	r0, r6
1a005d92:	4639      	mov	r1, r7
1a005d94:	f7fc f80a 	bl	1a001dac <__aeabi_dsub>
1a005d98:	f804 5b01 	strb.w	r5, [r4], #1
1a005d9c:	45a0      	cmp	r8, r4
1a005d9e:	4606      	mov	r6, r0
1a005da0:	460f      	mov	r7, r1
1a005da2:	d1e5      	bne.n	1a005d70 <_dtoa_r+0xcb0>
1a005da4:	46c8      	mov	r8, r9
1a005da6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
1a005daa:	4b57      	ldr	r3, [pc, #348]	; (1a005f08 <_dtoa_r+0xe48>)
1a005dac:	2200      	movs	r2, #0
1a005dae:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005db2:	f7fb fffd 	bl	1a001db0 <__adddf3>
1a005db6:	4632      	mov	r2, r6
1a005db8:	463b      	mov	r3, r7
1a005dba:	f7fc fc21 	bl	1a002600 <__aeabi_dcmplt>
1a005dbe:	2800      	cmp	r0, #0
1a005dc0:	d152      	bne.n	1a005e68 <_dtoa_r+0xda8>
1a005dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005dc6:	2000      	movs	r0, #0
1a005dc8:	494f      	ldr	r1, [pc, #316]	; (1a005f08 <_dtoa_r+0xe48>)
1a005dca:	f7fb ffef 	bl	1a001dac <__aeabi_dsub>
1a005dce:	4632      	mov	r2, r6
1a005dd0:	463b      	mov	r3, r7
1a005dd2:	f7fc fc33 	bl	1a00263c <__aeabi_dcmpgt>
1a005dd6:	2800      	cmp	r0, #0
1a005dd8:	f43f abb3 	beq.w	1a005542 <_dtoa_r+0x482>
1a005ddc:	e000      	b.n	1a005de0 <_dtoa_r+0xd20>
1a005dde:	4614      	mov	r4, r2
1a005de0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a005de4:	2b30      	cmp	r3, #48	; 0x30
1a005de6:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a005dea:	d0f8      	beq.n	1a005dde <_dtoa_r+0xd1e>
1a005dec:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005dee:	3301      	adds	r3, #1
1a005df0:	9306      	str	r3, [sp, #24]
1a005df2:	f7ff bb8c 	b.w	1a00550e <_dtoa_r+0x44e>
1a005df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005df8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005dfc:	e6d7      	b.n	1a005bae <_dtoa_r+0xaee>
1a005dfe:	2602      	movs	r6, #2
1a005e00:	f7ff bad2 	b.w	1a0053a8 <_dtoa_r+0x2e8>
1a005e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e06:	2b00      	cmp	r3, #0
1a005e08:	f43f aed8 	beq.w	1a005bbc <_dtoa_r+0xafc>
1a005e0c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
1a005e0e:	2f00      	cmp	r7, #0
1a005e10:	f77f ab97 	ble.w	1a005542 <_dtoa_r+0x482>
1a005e14:	2200      	movs	r2, #0
1a005e16:	4b3b      	ldr	r3, [pc, #236]	; (1a005f04 <_dtoa_r+0xe44>)
1a005e18:	4620      	mov	r0, r4
1a005e1a:	4629      	mov	r1, r5
1a005e1c:	f7fc f97e 	bl	1a00211c <__aeabi_dmul>
1a005e20:	4604      	mov	r4, r0
1a005e22:	460d      	mov	r5, r1
1a005e24:	1c70      	adds	r0, r6, #1
1a005e26:	e9cd 4500 	strd	r4, r5, [sp]
1a005e2a:	f7fc f90d 	bl	1a002048 <__aeabi_i2d>
1a005e2e:	4622      	mov	r2, r4
1a005e30:	462b      	mov	r3, r5
1a005e32:	f7fc f973 	bl	1a00211c <__aeabi_dmul>
1a005e36:	4b35      	ldr	r3, [pc, #212]	; (1a005f0c <_dtoa_r+0xe4c>)
1a005e38:	2200      	movs	r2, #0
1a005e3a:	f7fb ffb9 	bl	1a001db0 <__adddf3>
1a005e3e:	9b06      	ldr	r3, [sp, #24]
1a005e40:	9710      	str	r7, [sp, #64]	; 0x40
1a005e42:	3b01      	subs	r3, #1
1a005e44:	4604      	mov	r4, r0
1a005e46:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
1a005e4a:	9312      	str	r3, [sp, #72]	; 0x48
1a005e4c:	f7ff bacf 	b.w	1a0053ee <_dtoa_r+0x32e>
1a005e50:	9a06      	ldr	r2, [sp, #24]
1a005e52:	3201      	adds	r2, #1
1a005e54:	9206      	str	r2, [sp, #24]
1a005e56:	2231      	movs	r2, #49	; 0x31
1a005e58:	701a      	strb	r2, [r3, #0]
1a005e5a:	f7ff bb58 	b.w	1a00550e <_dtoa_r+0x44e>
1a005e5e:	2239      	movs	r2, #57	; 0x39
1a005e60:	9500      	str	r5, [sp, #0]
1a005e62:	7032      	strb	r2, [r6, #0]
1a005e64:	4645      	mov	r5, r8
1a005e66:	e518      	b.n	1a00589a <_dtoa_r+0x7da>
1a005e68:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e6a:	3301      	adds	r3, #1
1a005e6c:	9306      	str	r3, [sp, #24]
1a005e6e:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005e72:	e427      	b.n	1a0056c4 <_dtoa_r+0x604>
1a005e74:	f47f af26 	bne.w	1a005cc4 <_dtoa_r+0xc04>
1a005e78:	f019 0f01 	tst.w	r9, #1
1a005e7c:	f47f af1b 	bne.w	1a005cb6 <_dtoa_r+0xbf6>
1a005e80:	e720      	b.n	1a005cc4 <_dtoa_r+0xc04>
1a005e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005e84:	3301      	adds	r3, #1
1a005e86:	46da      	mov	sl, fp
1a005e88:	9306      	str	r3, [sp, #24]
1a005e8a:	f8dd b000 	ldr.w	fp, [sp]
1a005e8e:	e419      	b.n	1a0056c4 <_dtoa_r+0x604>
1a005e90:	2a39      	cmp	r2, #57	; 0x39
1a005e92:	463b      	mov	r3, r7
1a005e94:	4691      	mov	r9, r2
1a005e96:	4627      	mov	r7, r4
1a005e98:	f106 0401 	add.w	r4, r6, #1
1a005e9c:	d0df      	beq.n	1a005e5e <_dtoa_r+0xd9e>
1a005e9e:	2b00      	cmp	r3, #0
1a005ea0:	f73f af0d 	bgt.w	1a005cbe <_dtoa_r+0xbfe>
1a005ea4:	e70e      	b.n	1a005cc4 <_dtoa_r+0xc04>
1a005ea6:	9b02      	ldr	r3, [sp, #8]
1a005ea8:	2b02      	cmp	r3, #2
1a005eaa:	f77f ae49 	ble.w	1a005b40 <_dtoa_r+0xa80>
1a005eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005eb0:	9309      	str	r3, [sp, #36]	; 0x24
1a005eb2:	f8cd 8018 	str.w	r8, [sp, #24]
1a005eb6:	e5ba      	b.n	1a005a2e <_dtoa_r+0x96e>
1a005eb8:	9b02      	ldr	r3, [sp, #8]
1a005eba:	2b02      	cmp	r3, #2
1a005ebc:	dcf7      	bgt.n	1a005eae <_dtoa_r+0xdee>
1a005ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a005ec0:	e539      	b.n	1a005936 <_dtoa_r+0x876>
1a005ec2:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005ec4:	3301      	adds	r3, #1
1a005ec6:	9306      	str	r3, [sp, #24]
1a005ec8:	f7ff bbfc 	b.w	1a0056c4 <_dtoa_r+0x604>
1a005ecc:	4b10      	ldr	r3, [pc, #64]	; (1a005f10 <_dtoa_r+0xe50>)
1a005ece:	9303      	str	r3, [sp, #12]
1a005ed0:	f7ff b934 	b.w	1a00513c <_dtoa_r+0x7c>
1a005ed4:	f43f ac98 	beq.w	1a005808 <_dtoa_r+0x748>
1a005ed8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a005edc:	e48f      	b.n	1a0057fe <_dtoa_r+0x73e>
1a005ede:	2400      	movs	r4, #0
1a005ee0:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
1a005ee4:	4621      	mov	r1, r4
1a005ee6:	4650      	mov	r0, sl
1a005ee8:	f000 f8d2 	bl	1a006090 <_Balloc>
1a005eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a005ef0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
1a005ef4:	930f      	str	r3, [sp, #60]	; 0x3c
1a005ef6:	2301      	movs	r3, #1
1a005ef8:	9003      	str	r0, [sp, #12]
1a005efa:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
1a005efe:	930b      	str	r3, [sp, #44]	; 0x2c
1a005f00:	f7ff bb23 	b.w	1a00554a <_dtoa_r+0x48a>
1a005f04:	40240000 	.word	0x40240000
1a005f08:	3fe00000 	.word	0x3fe00000
1a005f0c:	401c0000 	.word	0x401c0000
1a005f10:	1a007100 	.word	0x1a007100

1a005f14 <_localeconv_r>:
1a005f14:	4800      	ldr	r0, [pc, #0]	; (1a005f18 <_localeconv_r+0x4>)
1a005f16:	4770      	bx	lr
1a005f18:	10000978 	.word	0x10000978
1a005f1c:	ffffffff 	.word	0xffffffff

1a005f20 <memchr>:
1a005f20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005f24:	2a10      	cmp	r2, #16
1a005f26:	db2b      	blt.n	1a005f80 <memchr+0x60>
1a005f28:	f010 0f07 	tst.w	r0, #7
1a005f2c:	d008      	beq.n	1a005f40 <memchr+0x20>
1a005f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005f32:	3a01      	subs	r2, #1
1a005f34:	428b      	cmp	r3, r1
1a005f36:	d02d      	beq.n	1a005f94 <memchr+0x74>
1a005f38:	f010 0f07 	tst.w	r0, #7
1a005f3c:	b342      	cbz	r2, 1a005f90 <memchr+0x70>
1a005f3e:	d1f6      	bne.n	1a005f2e <memchr+0xe>
1a005f40:	b4f0      	push	{r4, r5, r6, r7}
1a005f42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005f46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005f4a:	f022 0407 	bic.w	r4, r2, #7
1a005f4e:	f07f 0700 	mvns.w	r7, #0
1a005f52:	2300      	movs	r3, #0
1a005f54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005f58:	3c08      	subs	r4, #8
1a005f5a:	ea85 0501 	eor.w	r5, r5, r1
1a005f5e:	ea86 0601 	eor.w	r6, r6, r1
1a005f62:	fa85 f547 	uadd8	r5, r5, r7
1a005f66:	faa3 f587 	sel	r5, r3, r7
1a005f6a:	fa86 f647 	uadd8	r6, r6, r7
1a005f6e:	faa5 f687 	sel	r6, r5, r7
1a005f72:	b98e      	cbnz	r6, 1a005f98 <memchr+0x78>
1a005f74:	d1ee      	bne.n	1a005f54 <memchr+0x34>
1a005f76:	bcf0      	pop	{r4, r5, r6, r7}
1a005f78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005f7c:	f002 0207 	and.w	r2, r2, #7
1a005f80:	b132      	cbz	r2, 1a005f90 <memchr+0x70>
1a005f82:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005f86:	3a01      	subs	r2, #1
1a005f88:	ea83 0301 	eor.w	r3, r3, r1
1a005f8c:	b113      	cbz	r3, 1a005f94 <memchr+0x74>
1a005f8e:	d1f8      	bne.n	1a005f82 <memchr+0x62>
1a005f90:	2000      	movs	r0, #0
1a005f92:	4770      	bx	lr
1a005f94:	3801      	subs	r0, #1
1a005f96:	4770      	bx	lr
1a005f98:	2d00      	cmp	r5, #0
1a005f9a:	bf06      	itte	eq
1a005f9c:	4635      	moveq	r5, r6
1a005f9e:	3803      	subeq	r0, #3
1a005fa0:	3807      	subne	r0, #7
1a005fa2:	f015 0f01 	tst.w	r5, #1
1a005fa6:	d107      	bne.n	1a005fb8 <memchr+0x98>
1a005fa8:	3001      	adds	r0, #1
1a005faa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005fae:	bf02      	ittt	eq
1a005fb0:	3001      	addeq	r0, #1
1a005fb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005fb6:	3001      	addeq	r0, #1
1a005fb8:	bcf0      	pop	{r4, r5, r6, r7}
1a005fba:	3801      	subs	r0, #1
1a005fbc:	4770      	bx	lr
1a005fbe:	bf00      	nop

1a005fc0 <memmove>:
1a005fc0:	4288      	cmp	r0, r1
1a005fc2:	b4f0      	push	{r4, r5, r6, r7}
1a005fc4:	d90d      	bls.n	1a005fe2 <memmove+0x22>
1a005fc6:	188b      	adds	r3, r1, r2
1a005fc8:	4283      	cmp	r3, r0
1a005fca:	d90a      	bls.n	1a005fe2 <memmove+0x22>
1a005fcc:	1884      	adds	r4, r0, r2
1a005fce:	b132      	cbz	r2, 1a005fde <memmove+0x1e>
1a005fd0:	4622      	mov	r2, r4
1a005fd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a005fd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a005fda:	4299      	cmp	r1, r3
1a005fdc:	d1f9      	bne.n	1a005fd2 <memmove+0x12>
1a005fde:	bcf0      	pop	{r4, r5, r6, r7}
1a005fe0:	4770      	bx	lr
1a005fe2:	2a0f      	cmp	r2, #15
1a005fe4:	d80e      	bhi.n	1a006004 <memmove+0x44>
1a005fe6:	4603      	mov	r3, r0
1a005fe8:	1e54      	subs	r4, r2, #1
1a005fea:	2a00      	cmp	r2, #0
1a005fec:	d0f7      	beq.n	1a005fde <memmove+0x1e>
1a005fee:	3401      	adds	r4, #1
1a005ff0:	440c      	add	r4, r1
1a005ff2:	3b01      	subs	r3, #1
1a005ff4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005ff8:	f803 2f01 	strb.w	r2, [r3, #1]!
1a005ffc:	42a1      	cmp	r1, r4
1a005ffe:	d1f9      	bne.n	1a005ff4 <memmove+0x34>
1a006000:	bcf0      	pop	{r4, r5, r6, r7}
1a006002:	4770      	bx	lr
1a006004:	ea40 0301 	orr.w	r3, r0, r1
1a006008:	079b      	lsls	r3, r3, #30
1a00600a:	d13b      	bne.n	1a006084 <memmove+0xc4>
1a00600c:	f1a2 0710 	sub.w	r7, r2, #16
1a006010:	093f      	lsrs	r7, r7, #4
1a006012:	f101 0620 	add.w	r6, r1, #32
1a006016:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00601a:	f101 0310 	add.w	r3, r1, #16
1a00601e:	f100 0410 	add.w	r4, r0, #16
1a006022:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a006026:	f844 5c10 	str.w	r5, [r4, #-16]
1a00602a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a00602e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a006032:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a006036:	f844 5c08 	str.w	r5, [r4, #-8]
1a00603a:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a00603e:	f844 5c04 	str.w	r5, [r4, #-4]
1a006042:	3310      	adds	r3, #16
1a006044:	42b3      	cmp	r3, r6
1a006046:	f104 0410 	add.w	r4, r4, #16
1a00604a:	d1ea      	bne.n	1a006022 <memmove+0x62>
1a00604c:	1c7b      	adds	r3, r7, #1
1a00604e:	011b      	lsls	r3, r3, #4
1a006050:	f012 0f0c 	tst.w	r2, #12
1a006054:	4419      	add	r1, r3
1a006056:	f002 050f 	and.w	r5, r2, #15
1a00605a:	4403      	add	r3, r0
1a00605c:	d015      	beq.n	1a00608a <memmove+0xca>
1a00605e:	3d04      	subs	r5, #4
1a006060:	08ad      	lsrs	r5, r5, #2
1a006062:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a006066:	1f1c      	subs	r4, r3, #4
1a006068:	460e      	mov	r6, r1
1a00606a:	f856 7b04 	ldr.w	r7, [r6], #4
1a00606e:	f844 7f04 	str.w	r7, [r4, #4]!
1a006072:	4564      	cmp	r4, ip
1a006074:	d1f9      	bne.n	1a00606a <memmove+0xaa>
1a006076:	3501      	adds	r5, #1
1a006078:	00ad      	lsls	r5, r5, #2
1a00607a:	442b      	add	r3, r5
1a00607c:	4429      	add	r1, r5
1a00607e:	f002 0203 	and.w	r2, r2, #3
1a006082:	e7b1      	b.n	1a005fe8 <memmove+0x28>
1a006084:	1e54      	subs	r4, r2, #1
1a006086:	4603      	mov	r3, r0
1a006088:	e7b1      	b.n	1a005fee <memmove+0x2e>
1a00608a:	462a      	mov	r2, r5
1a00608c:	e7ac      	b.n	1a005fe8 <memmove+0x28>
1a00608e:	bf00      	nop

1a006090 <_Balloc>:
1a006090:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006092:	b570      	push	{r4, r5, r6, lr}
1a006094:	4605      	mov	r5, r0
1a006096:	460c      	mov	r4, r1
1a006098:	b14b      	cbz	r3, 1a0060ae <_Balloc+0x1e>
1a00609a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00609e:	b180      	cbz	r0, 1a0060c2 <_Balloc+0x32>
1a0060a0:	6802      	ldr	r2, [r0, #0]
1a0060a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a0060a6:	2300      	movs	r3, #0
1a0060a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a0060ac:	bd70      	pop	{r4, r5, r6, pc}
1a0060ae:	2221      	movs	r2, #33	; 0x21
1a0060b0:	2104      	movs	r1, #4
1a0060b2:	f000 fd99 	bl	1a006be8 <_calloc_r>
1a0060b6:	4603      	mov	r3, r0
1a0060b8:	64e8      	str	r0, [r5, #76]	; 0x4c
1a0060ba:	2800      	cmp	r0, #0
1a0060bc:	d1ed      	bne.n	1a00609a <_Balloc+0xa>
1a0060be:	2000      	movs	r0, #0
1a0060c0:	bd70      	pop	{r4, r5, r6, pc}
1a0060c2:	2101      	movs	r1, #1
1a0060c4:	fa01 f604 	lsl.w	r6, r1, r4
1a0060c8:	1d72      	adds	r2, r6, #5
1a0060ca:	4628      	mov	r0, r5
1a0060cc:	0092      	lsls	r2, r2, #2
1a0060ce:	f000 fd8b 	bl	1a006be8 <_calloc_r>
1a0060d2:	2800      	cmp	r0, #0
1a0060d4:	d0f3      	beq.n	1a0060be <_Balloc+0x2e>
1a0060d6:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a0060da:	e7e4      	b.n	1a0060a6 <_Balloc+0x16>

1a0060dc <_Bfree>:
1a0060dc:	b131      	cbz	r1, 1a0060ec <_Bfree+0x10>
1a0060de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a0060e0:	684a      	ldr	r2, [r1, #4]
1a0060e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a0060e6:	6008      	str	r0, [r1, #0]
1a0060e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a0060ec:	4770      	bx	lr
1a0060ee:	bf00      	nop

1a0060f0 <__multadd>:
1a0060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0060f2:	690c      	ldr	r4, [r1, #16]
1a0060f4:	b083      	sub	sp, #12
1a0060f6:	460d      	mov	r5, r1
1a0060f8:	4606      	mov	r6, r0
1a0060fa:	f101 0c14 	add.w	ip, r1, #20
1a0060fe:	2700      	movs	r7, #0
1a006100:	f8dc 0000 	ldr.w	r0, [ip]
1a006104:	b281      	uxth	r1, r0
1a006106:	fb02 3301 	mla	r3, r2, r1, r3
1a00610a:	0c19      	lsrs	r1, r3, #16
1a00610c:	0c00      	lsrs	r0, r0, #16
1a00610e:	fb02 1000 	mla	r0, r2, r0, r1
1a006112:	b29b      	uxth	r3, r3
1a006114:	3701      	adds	r7, #1
1a006116:	eb03 4300 	add.w	r3, r3, r0, lsl #16
1a00611a:	42bc      	cmp	r4, r7
1a00611c:	f84c 3b04 	str.w	r3, [ip], #4
1a006120:	ea4f 4310 	mov.w	r3, r0, lsr #16
1a006124:	dcec      	bgt.n	1a006100 <__multadd+0x10>
1a006126:	b13b      	cbz	r3, 1a006138 <__multadd+0x48>
1a006128:	68aa      	ldr	r2, [r5, #8]
1a00612a:	42a2      	cmp	r2, r4
1a00612c:	dd07      	ble.n	1a00613e <__multadd+0x4e>
1a00612e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006132:	3401      	adds	r4, #1
1a006134:	6153      	str	r3, [r2, #20]
1a006136:	612c      	str	r4, [r5, #16]
1a006138:	4628      	mov	r0, r5
1a00613a:	b003      	add	sp, #12
1a00613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00613e:	6869      	ldr	r1, [r5, #4]
1a006140:	9301      	str	r3, [sp, #4]
1a006142:	3101      	adds	r1, #1
1a006144:	4630      	mov	r0, r6
1a006146:	f7ff ffa3 	bl	1a006090 <_Balloc>
1a00614a:	692a      	ldr	r2, [r5, #16]
1a00614c:	3202      	adds	r2, #2
1a00614e:	f105 010c 	add.w	r1, r5, #12
1a006152:	4607      	mov	r7, r0
1a006154:	0092      	lsls	r2, r2, #2
1a006156:	300c      	adds	r0, #12
1a006158:	f7fd f860 	bl	1a00321c <memcpy>
1a00615c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a00615e:	6869      	ldr	r1, [r5, #4]
1a006160:	9b01      	ldr	r3, [sp, #4]
1a006162:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006166:	6028      	str	r0, [r5, #0]
1a006168:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00616c:	463d      	mov	r5, r7
1a00616e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006172:	3401      	adds	r4, #1
1a006174:	6153      	str	r3, [r2, #20]
1a006176:	612c      	str	r4, [r5, #16]
1a006178:	e7de      	b.n	1a006138 <__multadd+0x48>
1a00617a:	bf00      	nop

1a00617c <__hi0bits>:
1a00617c:	0c02      	lsrs	r2, r0, #16
1a00617e:	0412      	lsls	r2, r2, #16
1a006180:	4603      	mov	r3, r0
1a006182:	b9ca      	cbnz	r2, 1a0061b8 <__hi0bits+0x3c>
1a006184:	0403      	lsls	r3, r0, #16
1a006186:	2010      	movs	r0, #16
1a006188:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a00618c:	bf04      	itt	eq
1a00618e:	021b      	lsleq	r3, r3, #8
1a006190:	3008      	addeq	r0, #8
1a006192:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a006196:	bf04      	itt	eq
1a006198:	011b      	lsleq	r3, r3, #4
1a00619a:	3004      	addeq	r0, #4
1a00619c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a0061a0:	bf04      	itt	eq
1a0061a2:	009b      	lsleq	r3, r3, #2
1a0061a4:	3002      	addeq	r0, #2
1a0061a6:	2b00      	cmp	r3, #0
1a0061a8:	db05      	blt.n	1a0061b6 <__hi0bits+0x3a>
1a0061aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
1a0061ae:	f100 0001 	add.w	r0, r0, #1
1a0061b2:	bf08      	it	eq
1a0061b4:	2020      	moveq	r0, #32
1a0061b6:	4770      	bx	lr
1a0061b8:	2000      	movs	r0, #0
1a0061ba:	e7e5      	b.n	1a006188 <__hi0bits+0xc>

1a0061bc <__lo0bits>:
1a0061bc:	6803      	ldr	r3, [r0, #0]
1a0061be:	f013 0207 	ands.w	r2, r3, #7
1a0061c2:	4601      	mov	r1, r0
1a0061c4:	d007      	beq.n	1a0061d6 <__lo0bits+0x1a>
1a0061c6:	07da      	lsls	r2, r3, #31
1a0061c8:	d420      	bmi.n	1a00620c <__lo0bits+0x50>
1a0061ca:	0798      	lsls	r0, r3, #30
1a0061cc:	d522      	bpl.n	1a006214 <__lo0bits+0x58>
1a0061ce:	085b      	lsrs	r3, r3, #1
1a0061d0:	600b      	str	r3, [r1, #0]
1a0061d2:	2001      	movs	r0, #1
1a0061d4:	4770      	bx	lr
1a0061d6:	b298      	uxth	r0, r3
1a0061d8:	b9b0      	cbnz	r0, 1a006208 <__lo0bits+0x4c>
1a0061da:	0c1b      	lsrs	r3, r3, #16
1a0061dc:	2010      	movs	r0, #16
1a0061de:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0061e2:	bf04      	itt	eq
1a0061e4:	0a1b      	lsreq	r3, r3, #8
1a0061e6:	3008      	addeq	r0, #8
1a0061e8:	071a      	lsls	r2, r3, #28
1a0061ea:	bf04      	itt	eq
1a0061ec:	091b      	lsreq	r3, r3, #4
1a0061ee:	3004      	addeq	r0, #4
1a0061f0:	079a      	lsls	r2, r3, #30
1a0061f2:	bf04      	itt	eq
1a0061f4:	089b      	lsreq	r3, r3, #2
1a0061f6:	3002      	addeq	r0, #2
1a0061f8:	07da      	lsls	r2, r3, #31
1a0061fa:	d403      	bmi.n	1a006204 <__lo0bits+0x48>
1a0061fc:	085b      	lsrs	r3, r3, #1
1a0061fe:	f100 0001 	add.w	r0, r0, #1
1a006202:	d005      	beq.n	1a006210 <__lo0bits+0x54>
1a006204:	600b      	str	r3, [r1, #0]
1a006206:	4770      	bx	lr
1a006208:	4610      	mov	r0, r2
1a00620a:	e7e8      	b.n	1a0061de <__lo0bits+0x22>
1a00620c:	2000      	movs	r0, #0
1a00620e:	4770      	bx	lr
1a006210:	2020      	movs	r0, #32
1a006212:	4770      	bx	lr
1a006214:	089b      	lsrs	r3, r3, #2
1a006216:	600b      	str	r3, [r1, #0]
1a006218:	2002      	movs	r0, #2
1a00621a:	4770      	bx	lr

1a00621c <__i2b>:
1a00621c:	b510      	push	{r4, lr}
1a00621e:	460c      	mov	r4, r1
1a006220:	2101      	movs	r1, #1
1a006222:	f7ff ff35 	bl	1a006090 <_Balloc>
1a006226:	2201      	movs	r2, #1
1a006228:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a00622c:	bd10      	pop	{r4, pc}
1a00622e:	bf00      	nop

1a006230 <__multiply>:
1a006230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006234:	690e      	ldr	r6, [r1, #16]
1a006236:	6917      	ldr	r7, [r2, #16]
1a006238:	42be      	cmp	r6, r7
1a00623a:	b083      	sub	sp, #12
1a00623c:	460c      	mov	r4, r1
1a00623e:	4615      	mov	r5, r2
1a006240:	db05      	blt.n	1a00624e <__multiply+0x1e>
1a006242:	463a      	mov	r2, r7
1a006244:	462b      	mov	r3, r5
1a006246:	4637      	mov	r7, r6
1a006248:	460d      	mov	r5, r1
1a00624a:	4616      	mov	r6, r2
1a00624c:	461c      	mov	r4, r3
1a00624e:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
1a006252:	eb07 0806 	add.w	r8, r7, r6
1a006256:	4543      	cmp	r3, r8
1a006258:	bfb8      	it	lt
1a00625a:	3101      	addlt	r1, #1
1a00625c:	f7ff ff18 	bl	1a006090 <_Balloc>
1a006260:	f100 0a14 	add.w	sl, r0, #20
1a006264:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
1a006268:	45ca      	cmp	sl, r9
1a00626a:	9000      	str	r0, [sp, #0]
1a00626c:	d205      	bcs.n	1a00627a <__multiply+0x4a>
1a00626e:	4653      	mov	r3, sl
1a006270:	2100      	movs	r1, #0
1a006272:	f843 1b04 	str.w	r1, [r3], #4
1a006276:	4599      	cmp	r9, r3
1a006278:	d8fb      	bhi.n	1a006272 <__multiply+0x42>
1a00627a:	f104 0e14 	add.w	lr, r4, #20
1a00627e:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
1a006282:	f105 0314 	add.w	r3, r5, #20
1a006286:	45de      	cmp	lr, fp
1a006288:	eb03 0787 	add.w	r7, r3, r7, lsl #2
1a00628c:	d253      	bcs.n	1a006336 <__multiply+0x106>
1a00628e:	f8cd 8004 	str.w	r8, [sp, #4]
1a006292:	4698      	mov	r8, r3
1a006294:	e005      	b.n	1a0062a2 <__multiply+0x72>
1a006296:	0c09      	lsrs	r1, r1, #16
1a006298:	d128      	bne.n	1a0062ec <__multiply+0xbc>
1a00629a:	45f3      	cmp	fp, lr
1a00629c:	f10a 0a04 	add.w	sl, sl, #4
1a0062a0:	d947      	bls.n	1a006332 <__multiply+0x102>
1a0062a2:	f85e 1b04 	ldr.w	r1, [lr], #4
1a0062a6:	b28e      	uxth	r6, r1
1a0062a8:	2e00      	cmp	r6, #0
1a0062aa:	d0f4      	beq.n	1a006296 <__multiply+0x66>
1a0062ac:	4645      	mov	r5, r8
1a0062ae:	4654      	mov	r4, sl
1a0062b0:	2300      	movs	r3, #0
1a0062b2:	f855 1b04 	ldr.w	r1, [r5], #4
1a0062b6:	6820      	ldr	r0, [r4, #0]
1a0062b8:	b28a      	uxth	r2, r1
1a0062ba:	fa1f fc80 	uxth.w	ip, r0
1a0062be:	fb06 c202 	mla	r2, r6, r2, ip
1a0062c2:	0c09      	lsrs	r1, r1, #16
1a0062c4:	0c00      	lsrs	r0, r0, #16
1a0062c6:	4413      	add	r3, r2
1a0062c8:	fb06 0201 	mla	r2, r6, r1, r0
1a0062cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
1a0062d0:	b29b      	uxth	r3, r3
1a0062d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0062d6:	42af      	cmp	r7, r5
1a0062d8:	f844 3b04 	str.w	r3, [r4], #4
1a0062dc:	ea4f 4312 	mov.w	r3, r2, lsr #16
1a0062e0:	d8e7      	bhi.n	1a0062b2 <__multiply+0x82>
1a0062e2:	6023      	str	r3, [r4, #0]
1a0062e4:	f85e 1c04 	ldr.w	r1, [lr, #-4]
1a0062e8:	0c09      	lsrs	r1, r1, #16
1a0062ea:	d0d6      	beq.n	1a00629a <__multiply+0x6a>
1a0062ec:	f8da 3000 	ldr.w	r3, [sl]
1a0062f0:	4640      	mov	r0, r8
1a0062f2:	461a      	mov	r2, r3
1a0062f4:	4654      	mov	r4, sl
1a0062f6:	f04f 0c00 	mov.w	ip, #0
1a0062fa:	8805      	ldrh	r5, [r0, #0]
1a0062fc:	0c12      	lsrs	r2, r2, #16
1a0062fe:	fb01 2205 	mla	r2, r1, r5, r2
1a006302:	4494      	add	ip, r2
1a006304:	b29b      	uxth	r3, r3
1a006306:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a00630a:	f844 3b04 	str.w	r3, [r4], #4
1a00630e:	f850 3b04 	ldr.w	r3, [r0], #4
1a006312:	6822      	ldr	r2, [r4, #0]
1a006314:	0c1b      	lsrs	r3, r3, #16
1a006316:	b295      	uxth	r5, r2
1a006318:	fb01 5303 	mla	r3, r1, r3, r5
1a00631c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
1a006320:	4287      	cmp	r7, r0
1a006322:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a006326:	d8e8      	bhi.n	1a0062fa <__multiply+0xca>
1a006328:	45f3      	cmp	fp, lr
1a00632a:	6023      	str	r3, [r4, #0]
1a00632c:	f10a 0a04 	add.w	sl, sl, #4
1a006330:	d8b7      	bhi.n	1a0062a2 <__multiply+0x72>
1a006332:	f8dd 8004 	ldr.w	r8, [sp, #4]
1a006336:	f1b8 0f00 	cmp.w	r8, #0
1a00633a:	dd0b      	ble.n	1a006354 <__multiply+0x124>
1a00633c:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a006340:	f1a9 0904 	sub.w	r9, r9, #4
1a006344:	b11b      	cbz	r3, 1a00634e <__multiply+0x11e>
1a006346:	e005      	b.n	1a006354 <__multiply+0x124>
1a006348:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a00634c:	b913      	cbnz	r3, 1a006354 <__multiply+0x124>
1a00634e:	f1b8 0801 	subs.w	r8, r8, #1
1a006352:	d1f9      	bne.n	1a006348 <__multiply+0x118>
1a006354:	9800      	ldr	r0, [sp, #0]
1a006356:	f8c0 8010 	str.w	r8, [r0, #16]
1a00635a:	b003      	add	sp, #12
1a00635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a006360 <__pow5mult>:
1a006360:	f012 0303 	ands.w	r3, r2, #3
1a006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006368:	4614      	mov	r4, r2
1a00636a:	4607      	mov	r7, r0
1a00636c:	d12e      	bne.n	1a0063cc <__pow5mult+0x6c>
1a00636e:	460d      	mov	r5, r1
1a006370:	10a4      	asrs	r4, r4, #2
1a006372:	d01c      	beq.n	1a0063ae <__pow5mult+0x4e>
1a006374:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a006376:	b396      	cbz	r6, 1a0063de <__pow5mult+0x7e>
1a006378:	07e3      	lsls	r3, r4, #31
1a00637a:	f04f 0800 	mov.w	r8, #0
1a00637e:	d406      	bmi.n	1a00638e <__pow5mult+0x2e>
1a006380:	1064      	asrs	r4, r4, #1
1a006382:	d014      	beq.n	1a0063ae <__pow5mult+0x4e>
1a006384:	6830      	ldr	r0, [r6, #0]
1a006386:	b1a8      	cbz	r0, 1a0063b4 <__pow5mult+0x54>
1a006388:	4606      	mov	r6, r0
1a00638a:	07e3      	lsls	r3, r4, #31
1a00638c:	d5f8      	bpl.n	1a006380 <__pow5mult+0x20>
1a00638e:	4632      	mov	r2, r6
1a006390:	4629      	mov	r1, r5
1a006392:	4638      	mov	r0, r7
1a006394:	f7ff ff4c 	bl	1a006230 <__multiply>
1a006398:	b1b5      	cbz	r5, 1a0063c8 <__pow5mult+0x68>
1a00639a:	686a      	ldr	r2, [r5, #4]
1a00639c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00639e:	1064      	asrs	r4, r4, #1
1a0063a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a0063a4:	6029      	str	r1, [r5, #0]
1a0063a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a0063aa:	4605      	mov	r5, r0
1a0063ac:	d1ea      	bne.n	1a006384 <__pow5mult+0x24>
1a0063ae:	4628      	mov	r0, r5
1a0063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0063b4:	4632      	mov	r2, r6
1a0063b6:	4631      	mov	r1, r6
1a0063b8:	4638      	mov	r0, r7
1a0063ba:	f7ff ff39 	bl	1a006230 <__multiply>
1a0063be:	6030      	str	r0, [r6, #0]
1a0063c0:	f8c0 8000 	str.w	r8, [r0]
1a0063c4:	4606      	mov	r6, r0
1a0063c6:	e7e0      	b.n	1a00638a <__pow5mult+0x2a>
1a0063c8:	4605      	mov	r5, r0
1a0063ca:	e7d9      	b.n	1a006380 <__pow5mult+0x20>
1a0063cc:	3b01      	subs	r3, #1
1a0063ce:	4a0b      	ldr	r2, [pc, #44]	; (1a0063fc <__pow5mult+0x9c>)
1a0063d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0063d4:	2300      	movs	r3, #0
1a0063d6:	f7ff fe8b 	bl	1a0060f0 <__multadd>
1a0063da:	4605      	mov	r5, r0
1a0063dc:	e7c8      	b.n	1a006370 <__pow5mult+0x10>
1a0063de:	2101      	movs	r1, #1
1a0063e0:	4638      	mov	r0, r7
1a0063e2:	f7ff fe55 	bl	1a006090 <_Balloc>
1a0063e6:	f240 2371 	movw	r3, #625	; 0x271
1a0063ea:	6143      	str	r3, [r0, #20]
1a0063ec:	2201      	movs	r2, #1
1a0063ee:	2300      	movs	r3, #0
1a0063f0:	6102      	str	r2, [r0, #16]
1a0063f2:	4606      	mov	r6, r0
1a0063f4:	64b8      	str	r0, [r7, #72]	; 0x48
1a0063f6:	6003      	str	r3, [r0, #0]
1a0063f8:	e7be      	b.n	1a006378 <__pow5mult+0x18>
1a0063fa:	bf00      	nop
1a0063fc:	1a007200 	.word	0x1a007200

1a006400 <__lshift>:
1a006400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006404:	690e      	ldr	r6, [r1, #16]
1a006406:	460d      	mov	r5, r1
1a006408:	ea4f 1962 	mov.w	r9, r2, asr #5
1a00640c:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a006410:	444e      	add	r6, r9
1a006412:	1c74      	adds	r4, r6, #1
1a006414:	429c      	cmp	r4, r3
1a006416:	4690      	mov	r8, r2
1a006418:	4607      	mov	r7, r0
1a00641a:	dd04      	ble.n	1a006426 <__lshift+0x26>
1a00641c:	005b      	lsls	r3, r3, #1
1a00641e:	429c      	cmp	r4, r3
1a006420:	f101 0101 	add.w	r1, r1, #1
1a006424:	dcfa      	bgt.n	1a00641c <__lshift+0x1c>
1a006426:	4638      	mov	r0, r7
1a006428:	f7ff fe32 	bl	1a006090 <_Balloc>
1a00642c:	f1b9 0f00 	cmp.w	r9, #0
1a006430:	f100 0c14 	add.w	ip, r0, #20
1a006434:	dd0e      	ble.n	1a006454 <__lshift+0x54>
1a006436:	f109 0905 	add.w	r9, r9, #5
1a00643a:	ea4f 0989 	mov.w	r9, r9, lsl #2
1a00643e:	eb00 0109 	add.w	r1, r0, r9
1a006442:	4663      	mov	r3, ip
1a006444:	2200      	movs	r2, #0
1a006446:	f843 2b04 	str.w	r2, [r3], #4
1a00644a:	428b      	cmp	r3, r1
1a00644c:	d1fb      	bne.n	1a006446 <__lshift+0x46>
1a00644e:	f1a9 0914 	sub.w	r9, r9, #20
1a006452:	44cc      	add	ip, r9
1a006454:	6929      	ldr	r1, [r5, #16]
1a006456:	f105 0314 	add.w	r3, r5, #20
1a00645a:	f018 081f 	ands.w	r8, r8, #31
1a00645e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
1a006462:	d01d      	beq.n	1a0064a0 <__lshift+0xa0>
1a006464:	f1c8 0920 	rsb	r9, r8, #32
1a006468:	2200      	movs	r2, #0
1a00646a:	6819      	ldr	r1, [r3, #0]
1a00646c:	fa01 f108 	lsl.w	r1, r1, r8
1a006470:	4311      	orrs	r1, r2
1a006472:	f84c 1b04 	str.w	r1, [ip], #4
1a006476:	f853 2b04 	ldr.w	r2, [r3], #4
1a00647a:	4573      	cmp	r3, lr
1a00647c:	fa22 f209 	lsr.w	r2, r2, r9
1a006480:	d3f3      	bcc.n	1a00646a <__lshift+0x6a>
1a006482:	f8cc 2000 	str.w	r2, [ip]
1a006486:	2a00      	cmp	r2, #0
1a006488:	bf18      	it	ne
1a00648a:	4626      	movne	r6, r4
1a00648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00648e:	686a      	ldr	r2, [r5, #4]
1a006490:	6106      	str	r6, [r0, #16]
1a006492:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006496:	6029      	str	r1, [r5, #0]
1a006498:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00649c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0064a0:	f1ac 0c04 	sub.w	ip, ip, #4
1a0064a4:	f853 2b04 	ldr.w	r2, [r3], #4
1a0064a8:	f84c 2f04 	str.w	r2, [ip, #4]!
1a0064ac:	459e      	cmp	lr, r3
1a0064ae:	d8f9      	bhi.n	1a0064a4 <__lshift+0xa4>
1a0064b0:	e7ec      	b.n	1a00648c <__lshift+0x8c>
1a0064b2:	bf00      	nop

1a0064b4 <__mcmp>:
1a0064b4:	b430      	push	{r4, r5}
1a0064b6:	690b      	ldr	r3, [r1, #16]
1a0064b8:	4605      	mov	r5, r0
1a0064ba:	6900      	ldr	r0, [r0, #16]
1a0064bc:	1ac0      	subs	r0, r0, r3
1a0064be:	d110      	bne.n	1a0064e2 <__mcmp+0x2e>
1a0064c0:	009b      	lsls	r3, r3, #2
1a0064c2:	3514      	adds	r5, #20
1a0064c4:	3114      	adds	r1, #20
1a0064c6:	4419      	add	r1, r3
1a0064c8:	442b      	add	r3, r5
1a0064ca:	e001      	b.n	1a0064d0 <__mcmp+0x1c>
1a0064cc:	429d      	cmp	r5, r3
1a0064ce:	d208      	bcs.n	1a0064e2 <__mcmp+0x2e>
1a0064d0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a0064d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a0064d8:	4294      	cmp	r4, r2
1a0064da:	d0f7      	beq.n	1a0064cc <__mcmp+0x18>
1a0064dc:	d203      	bcs.n	1a0064e6 <__mcmp+0x32>
1a0064de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0064e2:	bc30      	pop	{r4, r5}
1a0064e4:	4770      	bx	lr
1a0064e6:	2001      	movs	r0, #1
1a0064e8:	bc30      	pop	{r4, r5}
1a0064ea:	4770      	bx	lr

1a0064ec <__mdiff>:
1a0064ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0064f0:	460f      	mov	r7, r1
1a0064f2:	690d      	ldr	r5, [r1, #16]
1a0064f4:	6911      	ldr	r1, [r2, #16]
1a0064f6:	1a6d      	subs	r5, r5, r1
1a0064f8:	2d00      	cmp	r5, #0
1a0064fa:	4690      	mov	r8, r2
1a0064fc:	4684      	mov	ip, r0
1a0064fe:	f107 0414 	add.w	r4, r7, #20
1a006502:	f102 0614 	add.w	r6, r2, #20
1a006506:	d114      	bne.n	1a006532 <__mdiff+0x46>
1a006508:	0089      	lsls	r1, r1, #2
1a00650a:	1863      	adds	r3, r4, r1
1a00650c:	4431      	add	r1, r6
1a00650e:	e001      	b.n	1a006514 <__mdiff+0x28>
1a006510:	42a3      	cmp	r3, r4
1a006512:	d95d      	bls.n	1a0065d0 <__mdiff+0xe4>
1a006514:	f853 0d04 	ldr.w	r0, [r3, #-4]!
1a006518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00651c:	4290      	cmp	r0, r2
1a00651e:	d0f7      	beq.n	1a006510 <__mdiff+0x24>
1a006520:	d209      	bcs.n	1a006536 <__mdiff+0x4a>
1a006522:	4622      	mov	r2, r4
1a006524:	463b      	mov	r3, r7
1a006526:	4634      	mov	r4, r6
1a006528:	4647      	mov	r7, r8
1a00652a:	4616      	mov	r6, r2
1a00652c:	4698      	mov	r8, r3
1a00652e:	2501      	movs	r5, #1
1a006530:	e001      	b.n	1a006536 <__mdiff+0x4a>
1a006532:	dbf6      	blt.n	1a006522 <__mdiff+0x36>
1a006534:	2500      	movs	r5, #0
1a006536:	4660      	mov	r0, ip
1a006538:	6879      	ldr	r1, [r7, #4]
1a00653a:	f7ff fda9 	bl	1a006090 <_Balloc>
1a00653e:	693f      	ldr	r7, [r7, #16]
1a006540:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a006544:	60c5      	str	r5, [r0, #12]
1a006546:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
1a00654a:	eb04 0c87 	add.w	ip, r4, r7, lsl #2
1a00654e:	f100 0514 	add.w	r5, r0, #20
1a006552:	2200      	movs	r2, #0
1a006554:	e000      	b.n	1a006558 <__mdiff+0x6c>
1a006556:	460d      	mov	r5, r1
1a006558:	f856 1b04 	ldr.w	r1, [r6], #4
1a00655c:	f854 8b04 	ldr.w	r8, [r4], #4
1a006560:	fa1f f981 	uxth.w	r9, r1
1a006564:	fa12 f388 	uxtah	r3, r2, r8
1a006568:	0c0a      	lsrs	r2, r1, #16
1a00656a:	eba3 0309 	sub.w	r3, r3, r9
1a00656e:	ebc2 4218 	rsb	r2, r2, r8, lsr #16
1a006572:	eb02 4223 	add.w	r2, r2, r3, asr #16
1a006576:	4629      	mov	r1, r5
1a006578:	b29b      	uxth	r3, r3
1a00657a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00657e:	45b6      	cmp	lr, r6
1a006580:	ea4f 4222 	mov.w	r2, r2, asr #16
1a006584:	f841 3b04 	str.w	r3, [r1], #4
1a006588:	46a0      	mov	r8, r4
1a00658a:	d8e4      	bhi.n	1a006556 <__mdiff+0x6a>
1a00658c:	45a4      	cmp	ip, r4
1a00658e:	d916      	bls.n	1a0065be <__mdiff+0xd2>
1a006590:	460e      	mov	r6, r1
1a006592:	f858 5b04 	ldr.w	r5, [r8], #4
1a006596:	fa12 f385 	uxtah	r3, r2, r5
1a00659a:	141a      	asrs	r2, r3, #16
1a00659c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
1a0065a0:	b29b      	uxth	r3, r3
1a0065a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0065a6:	45c4      	cmp	ip, r8
1a0065a8:	f846 3b04 	str.w	r3, [r6], #4
1a0065ac:	ea4f 4222 	mov.w	r2, r2, asr #16
1a0065b0:	d8ef      	bhi.n	1a006592 <__mdiff+0xa6>
1a0065b2:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
1a0065b6:	1b2d      	subs	r5, r5, r4
1a0065b8:	f025 0503 	bic.w	r5, r5, #3
1a0065bc:	440d      	add	r5, r1
1a0065be:	b923      	cbnz	r3, 1a0065ca <__mdiff+0xde>
1a0065c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a0065c4:	3f01      	subs	r7, #1
1a0065c6:	2b00      	cmp	r3, #0
1a0065c8:	d0fa      	beq.n	1a0065c0 <__mdiff+0xd4>
1a0065ca:	6107      	str	r7, [r0, #16]
1a0065cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0065d0:	4660      	mov	r0, ip
1a0065d2:	2100      	movs	r1, #0
1a0065d4:	f7ff fd5c 	bl	1a006090 <_Balloc>
1a0065d8:	2201      	movs	r2, #1
1a0065da:	2300      	movs	r3, #0
1a0065dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a0065e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0065e4 <__d2b>:
1a0065e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0065e8:	460f      	mov	r7, r1
1a0065ea:	b083      	sub	sp, #12
1a0065ec:	2101      	movs	r1, #1
1a0065ee:	ec55 4b10 	vmov	r4, r5, d0
1a0065f2:	4616      	mov	r6, r2
1a0065f4:	f7ff fd4c 	bl	1a006090 <_Balloc>
1a0065f8:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a0065fc:	4681      	mov	r9, r0
1a0065fe:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a006602:	f1b8 0f00 	cmp.w	r8, #0
1a006606:	d001      	beq.n	1a00660c <__d2b+0x28>
1a006608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a00660c:	2c00      	cmp	r4, #0
1a00660e:	9301      	str	r3, [sp, #4]
1a006610:	d02b      	beq.n	1a00666a <__d2b+0x86>
1a006612:	4668      	mov	r0, sp
1a006614:	9400      	str	r4, [sp, #0]
1a006616:	f7ff fdd1 	bl	1a0061bc <__lo0bits>
1a00661a:	b9d0      	cbnz	r0, 1a006652 <__d2b+0x6e>
1a00661c:	e9dd 2300 	ldrd	r2, r3, [sp]
1a006620:	f8c9 2014 	str.w	r2, [r9, #20]
1a006624:	2b00      	cmp	r3, #0
1a006626:	bf14      	ite	ne
1a006628:	2102      	movne	r1, #2
1a00662a:	2101      	moveq	r1, #1
1a00662c:	f8c9 3018 	str.w	r3, [r9, #24]
1a006630:	f8c9 1010 	str.w	r1, [r9, #16]
1a006634:	f1b8 0f00 	cmp.w	r8, #0
1a006638:	d024      	beq.n	1a006684 <__d2b+0xa0>
1a00663a:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a00663e:	eb08 0300 	add.w	r3, r8, r0
1a006642:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a006646:	603b      	str	r3, [r7, #0]
1a006648:	6030      	str	r0, [r6, #0]
1a00664a:	4648      	mov	r0, r9
1a00664c:	b003      	add	sp, #12
1a00664e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006652:	e9dd 1300 	ldrd	r1, r3, [sp]
1a006656:	f1c0 0220 	rsb	r2, r0, #32
1a00665a:	fa03 f202 	lsl.w	r2, r3, r2
1a00665e:	430a      	orrs	r2, r1
1a006660:	40c3      	lsrs	r3, r0
1a006662:	9301      	str	r3, [sp, #4]
1a006664:	f8c9 2014 	str.w	r2, [r9, #20]
1a006668:	e7dc      	b.n	1a006624 <__d2b+0x40>
1a00666a:	a801      	add	r0, sp, #4
1a00666c:	f7ff fda6 	bl	1a0061bc <__lo0bits>
1a006670:	9b01      	ldr	r3, [sp, #4]
1a006672:	f8c9 3014 	str.w	r3, [r9, #20]
1a006676:	2101      	movs	r1, #1
1a006678:	3020      	adds	r0, #32
1a00667a:	f8c9 1010 	str.w	r1, [r9, #16]
1a00667e:	f1b8 0f00 	cmp.w	r8, #0
1a006682:	d1da      	bne.n	1a00663a <__d2b+0x56>
1a006684:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a006688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a00668c:	6038      	str	r0, [r7, #0]
1a00668e:	6918      	ldr	r0, [r3, #16]
1a006690:	f7ff fd74 	bl	1a00617c <__hi0bits>
1a006694:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a006698:	6030      	str	r0, [r6, #0]
1a00669a:	4648      	mov	r0, r9
1a00669c:	b003      	add	sp, #12
1a00669e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0066a2:	bf00      	nop

1a0066a4 <_realloc_r>:
1a0066a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0066a8:	4617      	mov	r7, r2
1a0066aa:	2900      	cmp	r1, #0
1a0066ac:	f000 80bb 	beq.w	1a006826 <_realloc_r+0x182>
1a0066b0:	f107 040b 	add.w	r4, r7, #11
1a0066b4:	4681      	mov	r9, r0
1a0066b6:	460d      	mov	r5, r1
1a0066b8:	f7fc fe9a 	bl	1a0033f0 <__malloc_lock>
1a0066bc:	2c16      	cmp	r4, #22
1a0066be:	d85e      	bhi.n	1a00677e <_realloc_r+0xda>
1a0066c0:	2410      	movs	r4, #16
1a0066c2:	4622      	mov	r2, r4
1a0066c4:	42a7      	cmp	r7, r4
1a0066c6:	d85f      	bhi.n	1a006788 <_realloc_r+0xe4>
1a0066c8:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a0066cc:	f02e 0603 	bic.w	r6, lr, #3
1a0066d0:	f1a5 0808 	sub.w	r8, r5, #8
1a0066d4:	4296      	cmp	r6, r2
1a0066d6:	eb08 0a06 	add.w	sl, r8, r6
1a0066da:	f280 8081 	bge.w	1a0067e0 <_realloc_r+0x13c>
1a0066de:	4bcb      	ldr	r3, [pc, #812]	; (1a006a0c <_realloc_r+0x368>)
1a0066e0:	f8da 0004 	ldr.w	r0, [sl, #4]
1a0066e4:	6899      	ldr	r1, [r3, #8]
1a0066e6:	4551      	cmp	r1, sl
1a0066e8:	f000 80b5 	beq.w	1a006856 <_realloc_r+0x1b2>
1a0066ec:	f020 0301 	bic.w	r3, r0, #1
1a0066f0:	4453      	add	r3, sl
1a0066f2:	685b      	ldr	r3, [r3, #4]
1a0066f4:	07db      	lsls	r3, r3, #31
1a0066f6:	f100 808a 	bmi.w	1a00680e <_realloc_r+0x16a>
1a0066fa:	f020 0003 	bic.w	r0, r0, #3
1a0066fe:	1833      	adds	r3, r6, r0
1a006700:	4293      	cmp	r3, r2
1a006702:	f280 8112 	bge.w	1a00692a <_realloc_r+0x286>
1a006706:	f01e 0f01 	tst.w	lr, #1
1a00670a:	d10f      	bne.n	1a00672c <_realloc_r+0x88>
1a00670c:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a006710:	eba8 0b03 	sub.w	fp, r8, r3
1a006714:	f8db 1004 	ldr.w	r1, [fp, #4]
1a006718:	f021 0103 	bic.w	r1, r1, #3
1a00671c:	4408      	add	r0, r1
1a00671e:	1983      	adds	r3, r0, r6
1a006720:	4293      	cmp	r3, r2
1a006722:	f280 8116 	bge.w	1a006952 <_realloc_r+0x2ae>
1a006726:	1873      	adds	r3, r6, r1
1a006728:	4293      	cmp	r3, r2
1a00672a:	da34      	bge.n	1a006796 <_realloc_r+0xf2>
1a00672c:	4639      	mov	r1, r7
1a00672e:	4648      	mov	r0, r9
1a006730:	f7fc fabc 	bl	1a002cac <_malloc_r>
1a006734:	4607      	mov	r7, r0
1a006736:	b1e0      	cbz	r0, 1a006772 <_realloc_r+0xce>
1a006738:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a00673c:	f023 0301 	bic.w	r3, r3, #1
1a006740:	4443      	add	r3, r8
1a006742:	f1a0 0208 	sub.w	r2, r0, #8
1a006746:	4293      	cmp	r3, r2
1a006748:	f000 80f7 	beq.w	1a00693a <_realloc_r+0x296>
1a00674c:	1f32      	subs	r2, r6, #4
1a00674e:	2a24      	cmp	r2, #36	; 0x24
1a006750:	f200 80fb 	bhi.w	1a00694a <_realloc_r+0x2a6>
1a006754:	2a13      	cmp	r2, #19
1a006756:	6829      	ldr	r1, [r5, #0]
1a006758:	f200 80c9 	bhi.w	1a0068ee <_realloc_r+0x24a>
1a00675c:	4603      	mov	r3, r0
1a00675e:	462a      	mov	r2, r5
1a006760:	6019      	str	r1, [r3, #0]
1a006762:	6851      	ldr	r1, [r2, #4]
1a006764:	6059      	str	r1, [r3, #4]
1a006766:	6892      	ldr	r2, [r2, #8]
1a006768:	609a      	str	r2, [r3, #8]
1a00676a:	4629      	mov	r1, r5
1a00676c:	4648      	mov	r0, r9
1a00676e:	f7fc f97f 	bl	1a002a70 <_free_r>
1a006772:	4648      	mov	r0, r9
1a006774:	f7fc fe42 	bl	1a0033fc <__malloc_unlock>
1a006778:	4638      	mov	r0, r7
1a00677a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00677e:	f024 0407 	bic.w	r4, r4, #7
1a006782:	2c00      	cmp	r4, #0
1a006784:	4622      	mov	r2, r4
1a006786:	da9d      	bge.n	1a0066c4 <_realloc_r+0x20>
1a006788:	230c      	movs	r3, #12
1a00678a:	f8c9 3000 	str.w	r3, [r9]
1a00678e:	2700      	movs	r7, #0
1a006790:	4638      	mov	r0, r7
1a006792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006796:	465f      	mov	r7, fp
1a006798:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00679c:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a0067a0:	1f32      	subs	r2, r6, #4
1a0067a2:	2a24      	cmp	r2, #36	; 0x24
1a0067a4:	60c1      	str	r1, [r0, #12]
1a0067a6:	eb0b 0a03 	add.w	sl, fp, r3
1a0067aa:	6088      	str	r0, [r1, #8]
1a0067ac:	f200 80d9 	bhi.w	1a006962 <_realloc_r+0x2be>
1a0067b0:	2a13      	cmp	r2, #19
1a0067b2:	6829      	ldr	r1, [r5, #0]
1a0067b4:	f240 80d3 	bls.w	1a00695e <_realloc_r+0x2ba>
1a0067b8:	f8cb 1008 	str.w	r1, [fp, #8]
1a0067bc:	6869      	ldr	r1, [r5, #4]
1a0067be:	f8cb 100c 	str.w	r1, [fp, #12]
1a0067c2:	2a1b      	cmp	r2, #27
1a0067c4:	68a9      	ldr	r1, [r5, #8]
1a0067c6:	f200 80e0 	bhi.w	1a00698a <_realloc_r+0x2e6>
1a0067ca:	f10b 0210 	add.w	r2, fp, #16
1a0067ce:	3508      	adds	r5, #8
1a0067d0:	6011      	str	r1, [r2, #0]
1a0067d2:	6869      	ldr	r1, [r5, #4]
1a0067d4:	6051      	str	r1, [r2, #4]
1a0067d6:	68a9      	ldr	r1, [r5, #8]
1a0067d8:	6091      	str	r1, [r2, #8]
1a0067da:	461e      	mov	r6, r3
1a0067dc:	46d8      	mov	r8, fp
1a0067de:	463d      	mov	r5, r7
1a0067e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a0067e4:	1b32      	subs	r2, r6, r4
1a0067e6:	2a0f      	cmp	r2, #15
1a0067e8:	f003 0301 	and.w	r3, r3, #1
1a0067ec:	d820      	bhi.n	1a006830 <_realloc_r+0x18c>
1a0067ee:	4333      	orrs	r3, r6
1a0067f0:	f8c8 3004 	str.w	r3, [r8, #4]
1a0067f4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0067f8:	f043 0301 	orr.w	r3, r3, #1
1a0067fc:	f8ca 3004 	str.w	r3, [sl, #4]
1a006800:	4648      	mov	r0, r9
1a006802:	462f      	mov	r7, r5
1a006804:	f7fc fdfa 	bl	1a0033fc <__malloc_unlock>
1a006808:	4638      	mov	r0, r7
1a00680a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00680e:	f01e 0f01 	tst.w	lr, #1
1a006812:	d18b      	bne.n	1a00672c <_realloc_r+0x88>
1a006814:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a006818:	eba8 0b03 	sub.w	fp, r8, r3
1a00681c:	f8db 1004 	ldr.w	r1, [fp, #4]
1a006820:	f021 0103 	bic.w	r1, r1, #3
1a006824:	e77f      	b.n	1a006726 <_realloc_r+0x82>
1a006826:	4611      	mov	r1, r2
1a006828:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00682c:	f7fc ba3e 	b.w	1a002cac <_malloc_r>
1a006830:	eb08 0104 	add.w	r1, r8, r4
1a006834:	4323      	orrs	r3, r4
1a006836:	f042 0201 	orr.w	r2, r2, #1
1a00683a:	f8c8 3004 	str.w	r3, [r8, #4]
1a00683e:	604a      	str	r2, [r1, #4]
1a006840:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006844:	f043 0301 	orr.w	r3, r3, #1
1a006848:	3108      	adds	r1, #8
1a00684a:	f8ca 3004 	str.w	r3, [sl, #4]
1a00684e:	4648      	mov	r0, r9
1a006850:	f7fc f90e 	bl	1a002a70 <_free_r>
1a006854:	e7d4      	b.n	1a006800 <_realloc_r+0x15c>
1a006856:	f020 0003 	bic.w	r0, r0, #3
1a00685a:	1831      	adds	r1, r6, r0
1a00685c:	f104 0c10 	add.w	ip, r4, #16
1a006860:	4561      	cmp	r1, ip
1a006862:	da4f      	bge.n	1a006904 <_realloc_r+0x260>
1a006864:	f01e 0f01 	tst.w	lr, #1
1a006868:	f47f af60 	bne.w	1a00672c <_realloc_r+0x88>
1a00686c:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a006870:	eba8 0b01 	sub.w	fp, r8, r1
1a006874:	f8db 1004 	ldr.w	r1, [fp, #4]
1a006878:	f021 0103 	bic.w	r1, r1, #3
1a00687c:	4408      	add	r0, r1
1a00687e:	eb00 0a06 	add.w	sl, r0, r6
1a006882:	45d4      	cmp	ip, sl
1a006884:	f73f af4f 	bgt.w	1a006726 <_realloc_r+0x82>
1a006888:	465f      	mov	r7, fp
1a00688a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00688e:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a006892:	1f32      	subs	r2, r6, #4
1a006894:	2a24      	cmp	r2, #36	; 0x24
1a006896:	60c1      	str	r1, [r0, #12]
1a006898:	6088      	str	r0, [r1, #8]
1a00689a:	f200 8099 	bhi.w	1a0069d0 <_realloc_r+0x32c>
1a00689e:	2a13      	cmp	r2, #19
1a0068a0:	6829      	ldr	r1, [r5, #0]
1a0068a2:	f240 8093 	bls.w	1a0069cc <_realloc_r+0x328>
1a0068a6:	f8cb 1008 	str.w	r1, [fp, #8]
1a0068aa:	6869      	ldr	r1, [r5, #4]
1a0068ac:	f8cb 100c 	str.w	r1, [fp, #12]
1a0068b0:	2a1b      	cmp	r2, #27
1a0068b2:	68a9      	ldr	r1, [r5, #8]
1a0068b4:	f200 8092 	bhi.w	1a0069dc <_realloc_r+0x338>
1a0068b8:	f10b 0210 	add.w	r2, fp, #16
1a0068bc:	3508      	adds	r5, #8
1a0068be:	6011      	str	r1, [r2, #0]
1a0068c0:	6869      	ldr	r1, [r5, #4]
1a0068c2:	6051      	str	r1, [r2, #4]
1a0068c4:	68a9      	ldr	r1, [r5, #8]
1a0068c6:	6091      	str	r1, [r2, #8]
1a0068c8:	eb0b 0104 	add.w	r1, fp, r4
1a0068cc:	ebaa 0204 	sub.w	r2, sl, r4
1a0068d0:	f042 0201 	orr.w	r2, r2, #1
1a0068d4:	6099      	str	r1, [r3, #8]
1a0068d6:	604a      	str	r2, [r1, #4]
1a0068d8:	f8db 3004 	ldr.w	r3, [fp, #4]
1a0068dc:	f003 0301 	and.w	r3, r3, #1
1a0068e0:	431c      	orrs	r4, r3
1a0068e2:	4648      	mov	r0, r9
1a0068e4:	f8cb 4004 	str.w	r4, [fp, #4]
1a0068e8:	f7fc fd88 	bl	1a0033fc <__malloc_unlock>
1a0068ec:	e750      	b.n	1a006790 <_realloc_r+0xec>
1a0068ee:	6001      	str	r1, [r0, #0]
1a0068f0:	686b      	ldr	r3, [r5, #4]
1a0068f2:	6043      	str	r3, [r0, #4]
1a0068f4:	2a1b      	cmp	r2, #27
1a0068f6:	d83c      	bhi.n	1a006972 <_realloc_r+0x2ce>
1a0068f8:	f105 0208 	add.w	r2, r5, #8
1a0068fc:	f100 0308 	add.w	r3, r0, #8
1a006900:	68a9      	ldr	r1, [r5, #8]
1a006902:	e72d      	b.n	1a006760 <_realloc_r+0xbc>
1a006904:	eb08 0004 	add.w	r0, r8, r4
1a006908:	1b0a      	subs	r2, r1, r4
1a00690a:	f042 0201 	orr.w	r2, r2, #1
1a00690e:	6098      	str	r0, [r3, #8]
1a006910:	6042      	str	r2, [r0, #4]
1a006912:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a006916:	f003 0301 	and.w	r3, r3, #1
1a00691a:	431c      	orrs	r4, r3
1a00691c:	4648      	mov	r0, r9
1a00691e:	f845 4c04 	str.w	r4, [r5, #-4]
1a006922:	f7fc fd6b 	bl	1a0033fc <__malloc_unlock>
1a006926:	462f      	mov	r7, r5
1a006928:	e732      	b.n	1a006790 <_realloc_r+0xec>
1a00692a:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a00692e:	461e      	mov	r6, r3
1a006930:	60ca      	str	r2, [r1, #12]
1a006932:	eb08 0a03 	add.w	sl, r8, r3
1a006936:	6091      	str	r1, [r2, #8]
1a006938:	e752      	b.n	1a0067e0 <_realloc_r+0x13c>
1a00693a:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a00693e:	f023 0303 	bic.w	r3, r3, #3
1a006942:	441e      	add	r6, r3
1a006944:	eb08 0a06 	add.w	sl, r8, r6
1a006948:	e74a      	b.n	1a0067e0 <_realloc_r+0x13c>
1a00694a:	4629      	mov	r1, r5
1a00694c:	f7ff fb38 	bl	1a005fc0 <memmove>
1a006950:	e70b      	b.n	1a00676a <_realloc_r+0xc6>
1a006952:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a006956:	465f      	mov	r7, fp
1a006958:	60ca      	str	r2, [r1, #12]
1a00695a:	6091      	str	r1, [r2, #8]
1a00695c:	e71c      	b.n	1a006798 <_realloc_r+0xf4>
1a00695e:	463a      	mov	r2, r7
1a006960:	e736      	b.n	1a0067d0 <_realloc_r+0x12c>
1a006962:	4629      	mov	r1, r5
1a006964:	4638      	mov	r0, r7
1a006966:	461e      	mov	r6, r3
1a006968:	46d8      	mov	r8, fp
1a00696a:	f7ff fb29 	bl	1a005fc0 <memmove>
1a00696e:	463d      	mov	r5, r7
1a006970:	e736      	b.n	1a0067e0 <_realloc_r+0x13c>
1a006972:	68ab      	ldr	r3, [r5, #8]
1a006974:	6083      	str	r3, [r0, #8]
1a006976:	68eb      	ldr	r3, [r5, #12]
1a006978:	60c3      	str	r3, [r0, #12]
1a00697a:	2a24      	cmp	r2, #36	; 0x24
1a00697c:	d011      	beq.n	1a0069a2 <_realloc_r+0x2fe>
1a00697e:	f105 0210 	add.w	r2, r5, #16
1a006982:	f100 0310 	add.w	r3, r0, #16
1a006986:	6929      	ldr	r1, [r5, #16]
1a006988:	e6ea      	b.n	1a006760 <_realloc_r+0xbc>
1a00698a:	f8cb 1010 	str.w	r1, [fp, #16]
1a00698e:	68e9      	ldr	r1, [r5, #12]
1a006990:	f8cb 1014 	str.w	r1, [fp, #20]
1a006994:	2a24      	cmp	r2, #36	; 0x24
1a006996:	d00e      	beq.n	1a0069b6 <_realloc_r+0x312>
1a006998:	6929      	ldr	r1, [r5, #16]
1a00699a:	f10b 0218 	add.w	r2, fp, #24
1a00699e:	3510      	adds	r5, #16
1a0069a0:	e716      	b.n	1a0067d0 <_realloc_r+0x12c>
1a0069a2:	692b      	ldr	r3, [r5, #16]
1a0069a4:	6103      	str	r3, [r0, #16]
1a0069a6:	696b      	ldr	r3, [r5, #20]
1a0069a8:	6143      	str	r3, [r0, #20]
1a0069aa:	69a9      	ldr	r1, [r5, #24]
1a0069ac:	f105 0218 	add.w	r2, r5, #24
1a0069b0:	f100 0318 	add.w	r3, r0, #24
1a0069b4:	e6d4      	b.n	1a006760 <_realloc_r+0xbc>
1a0069b6:	692a      	ldr	r2, [r5, #16]
1a0069b8:	f8cb 2018 	str.w	r2, [fp, #24]
1a0069bc:	696a      	ldr	r2, [r5, #20]
1a0069be:	f8cb 201c 	str.w	r2, [fp, #28]
1a0069c2:	69a9      	ldr	r1, [r5, #24]
1a0069c4:	f10b 0220 	add.w	r2, fp, #32
1a0069c8:	3518      	adds	r5, #24
1a0069ca:	e701      	b.n	1a0067d0 <_realloc_r+0x12c>
1a0069cc:	463a      	mov	r2, r7
1a0069ce:	e776      	b.n	1a0068be <_realloc_r+0x21a>
1a0069d0:	4629      	mov	r1, r5
1a0069d2:	4638      	mov	r0, r7
1a0069d4:	f7ff faf4 	bl	1a005fc0 <memmove>
1a0069d8:	4b0c      	ldr	r3, [pc, #48]	; (1a006a0c <_realloc_r+0x368>)
1a0069da:	e775      	b.n	1a0068c8 <_realloc_r+0x224>
1a0069dc:	f8cb 1010 	str.w	r1, [fp, #16]
1a0069e0:	68e9      	ldr	r1, [r5, #12]
1a0069e2:	f8cb 1014 	str.w	r1, [fp, #20]
1a0069e6:	2a24      	cmp	r2, #36	; 0x24
1a0069e8:	d004      	beq.n	1a0069f4 <_realloc_r+0x350>
1a0069ea:	6929      	ldr	r1, [r5, #16]
1a0069ec:	f10b 0218 	add.w	r2, fp, #24
1a0069f0:	3510      	adds	r5, #16
1a0069f2:	e764      	b.n	1a0068be <_realloc_r+0x21a>
1a0069f4:	692a      	ldr	r2, [r5, #16]
1a0069f6:	f8cb 2018 	str.w	r2, [fp, #24]
1a0069fa:	696a      	ldr	r2, [r5, #20]
1a0069fc:	f8cb 201c 	str.w	r2, [fp, #28]
1a006a00:	69a9      	ldr	r1, [r5, #24]
1a006a02:	f10b 0220 	add.w	r2, fp, #32
1a006a06:	3518      	adds	r5, #24
1a006a08:	e759      	b.n	1a0068be <_realloc_r+0x21a>
1a006a0a:	bf00      	nop
1a006a0c:	10000478 	.word	0x10000478

1a006a10 <frexp>:
1a006a10:	ec53 2b10 	vmov	r2, r3, d0
1a006a14:	b570      	push	{r4, r5, r6, lr}
1a006a16:	4e16      	ldr	r6, [pc, #88]	; (1a006a70 <frexp+0x60>)
1a006a18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a006a1c:	2500      	movs	r5, #0
1a006a1e:	42b1      	cmp	r1, r6
1a006a20:	4604      	mov	r4, r0
1a006a22:	6005      	str	r5, [r0, #0]
1a006a24:	dc21      	bgt.n	1a006a6a <frexp+0x5a>
1a006a26:	ee10 6a10 	vmov	r6, s0
1a006a2a:	430e      	orrs	r6, r1
1a006a2c:	d01d      	beq.n	1a006a6a <frexp+0x5a>
1a006a2e:	4e11      	ldr	r6, [pc, #68]	; (1a006a74 <frexp+0x64>)
1a006a30:	401e      	ands	r6, r3
1a006a32:	4618      	mov	r0, r3
1a006a34:	b966      	cbnz	r6, 1a006a50 <frexp+0x40>
1a006a36:	4619      	mov	r1, r3
1a006a38:	2200      	movs	r2, #0
1a006a3a:	ee10 0a10 	vmov	r0, s0
1a006a3e:	4b0e      	ldr	r3, [pc, #56]	; (1a006a78 <frexp+0x68>)
1a006a40:	f7fb fb6c 	bl	1a00211c <__aeabi_dmul>
1a006a44:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a006a48:	4602      	mov	r2, r0
1a006a4a:	4608      	mov	r0, r1
1a006a4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a006a50:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a006a54:	1509      	asrs	r1, r1, #20
1a006a56:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a006a5a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a006a5e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a006a62:	4429      	add	r1, r5
1a006a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a006a68:	6021      	str	r1, [r4, #0]
1a006a6a:	ec43 2b10 	vmov	d0, r2, r3
1a006a6e:	bd70      	pop	{r4, r5, r6, pc}
1a006a70:	7fefffff 	.word	0x7fefffff
1a006a74:	7ff00000 	.word	0x7ff00000
1a006a78:	43500000 	.word	0x43500000

1a006a7c <strncpy>:
1a006a7c:	b470      	push	{r4, r5, r6}
1a006a7e:	ea40 0401 	orr.w	r4, r0, r1
1a006a82:	07a3      	lsls	r3, r4, #30
1a006a84:	d127      	bne.n	1a006ad6 <strncpy+0x5a>
1a006a86:	2a03      	cmp	r2, #3
1a006a88:	d925      	bls.n	1a006ad6 <strncpy+0x5a>
1a006a8a:	460b      	mov	r3, r1
1a006a8c:	4606      	mov	r6, r0
1a006a8e:	4619      	mov	r1, r3
1a006a90:	f853 5b04 	ldr.w	r5, [r3], #4
1a006a94:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
1a006a98:	ea24 0405 	bic.w	r4, r4, r5
1a006a9c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
1a006aa0:	d106      	bne.n	1a006ab0 <strncpy+0x34>
1a006aa2:	3a04      	subs	r2, #4
1a006aa4:	2a03      	cmp	r2, #3
1a006aa6:	f846 5b04 	str.w	r5, [r6], #4
1a006aaa:	4619      	mov	r1, r3
1a006aac:	d8ef      	bhi.n	1a006a8e <strncpy+0x12>
1a006aae:	b182      	cbz	r2, 1a006ad2 <strncpy+0x56>
1a006ab0:	4633      	mov	r3, r6
1a006ab2:	780c      	ldrb	r4, [r1, #0]
1a006ab4:	f803 4b01 	strb.w	r4, [r3], #1
1a006ab8:	1e55      	subs	r5, r2, #1
1a006aba:	b174      	cbz	r4, 1a006ada <strncpy+0x5e>
1a006abc:	4432      	add	r2, r6
1a006abe:	442e      	add	r6, r5
1a006ac0:	e005      	b.n	1a006ace <strncpy+0x52>
1a006ac2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a006ac6:	1af5      	subs	r5, r6, r3
1a006ac8:	f803 4b01 	strb.w	r4, [r3], #1
1a006acc:	b12c      	cbz	r4, 1a006ada <strncpy+0x5e>
1a006ace:	429a      	cmp	r2, r3
1a006ad0:	d1f7      	bne.n	1a006ac2 <strncpy+0x46>
1a006ad2:	bc70      	pop	{r4, r5, r6}
1a006ad4:	4770      	bx	lr
1a006ad6:	4606      	mov	r6, r0
1a006ad8:	e7e9      	b.n	1a006aae <strncpy+0x32>
1a006ada:	2d00      	cmp	r5, #0
1a006adc:	d0f9      	beq.n	1a006ad2 <strncpy+0x56>
1a006ade:	441d      	add	r5, r3
1a006ae0:	2200      	movs	r2, #0
1a006ae2:	f803 2b01 	strb.w	r2, [r3], #1
1a006ae6:	42ab      	cmp	r3, r5
1a006ae8:	d1fb      	bne.n	1a006ae2 <strncpy+0x66>
1a006aea:	bc70      	pop	{r4, r5, r6}
1a006aec:	4770      	bx	lr
1a006aee:	bf00      	nop

1a006af0 <__ssprint_r>:
1a006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006af4:	6893      	ldr	r3, [r2, #8]
1a006af6:	b083      	sub	sp, #12
1a006af8:	4690      	mov	r8, r2
1a006afa:	2b00      	cmp	r3, #0
1a006afc:	d06d      	beq.n	1a006bda <__ssprint_r+0xea>
1a006afe:	6817      	ldr	r7, [r2, #0]
1a006b00:	688d      	ldr	r5, [r1, #8]
1a006b02:	4682      	mov	sl, r0
1a006b04:	460c      	mov	r4, r1
1a006b06:	6808      	ldr	r0, [r1, #0]
1a006b08:	3708      	adds	r7, #8
1a006b0a:	e043      	b.n	1a006b94 <__ssprint_r+0xa4>
1a006b0c:	89a3      	ldrh	r3, [r4, #12]
1a006b0e:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a006b12:	d02e      	beq.n	1a006b72 <__ssprint_r+0x82>
1a006b14:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
1a006b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a006b1c:	eba0 0b01 	sub.w	fp, r0, r1
1a006b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1a006b24:	eb0b 0006 	add.w	r0, fp, r6
1a006b28:	106d      	asrs	r5, r5, #1
1a006b2a:	3001      	adds	r0, #1
1a006b2c:	42a8      	cmp	r0, r5
1a006b2e:	462a      	mov	r2, r5
1a006b30:	bf84      	itt	hi
1a006b32:	4605      	movhi	r5, r0
1a006b34:	462a      	movhi	r2, r5
1a006b36:	055b      	lsls	r3, r3, #21
1a006b38:	d536      	bpl.n	1a006ba8 <__ssprint_r+0xb8>
1a006b3a:	4611      	mov	r1, r2
1a006b3c:	4650      	mov	r0, sl
1a006b3e:	f7fc f8b5 	bl	1a002cac <_malloc_r>
1a006b42:	2800      	cmp	r0, #0
1a006b44:	d03a      	beq.n	1a006bbc <__ssprint_r+0xcc>
1a006b46:	465a      	mov	r2, fp
1a006b48:	6921      	ldr	r1, [r4, #16]
1a006b4a:	9001      	str	r0, [sp, #4]
1a006b4c:	f7fc fb66 	bl	1a00321c <memcpy>
1a006b50:	89a2      	ldrh	r2, [r4, #12]
1a006b52:	9b01      	ldr	r3, [sp, #4]
1a006b54:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006b58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a006b5c:	81a2      	strh	r2, [r4, #12]
1a006b5e:	eba5 020b 	sub.w	r2, r5, fp
1a006b62:	eb03 000b 	add.w	r0, r3, fp
1a006b66:	6165      	str	r5, [r4, #20]
1a006b68:	6123      	str	r3, [r4, #16]
1a006b6a:	6020      	str	r0, [r4, #0]
1a006b6c:	60a2      	str	r2, [r4, #8]
1a006b6e:	4635      	mov	r5, r6
1a006b70:	46b3      	mov	fp, r6
1a006b72:	465a      	mov	r2, fp
1a006b74:	4649      	mov	r1, r9
1a006b76:	f7ff fa23 	bl	1a005fc0 <memmove>
1a006b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a006b7e:	68a2      	ldr	r2, [r4, #8]
1a006b80:	6820      	ldr	r0, [r4, #0]
1a006b82:	1b55      	subs	r5, r2, r5
1a006b84:	4458      	add	r0, fp
1a006b86:	1b9e      	subs	r6, r3, r6
1a006b88:	60a5      	str	r5, [r4, #8]
1a006b8a:	6020      	str	r0, [r4, #0]
1a006b8c:	f8c8 6008 	str.w	r6, [r8, #8]
1a006b90:	b31e      	cbz	r6, 1a006bda <__ssprint_r+0xea>
1a006b92:	3708      	adds	r7, #8
1a006b94:	e957 9602 	ldrd	r9, r6, [r7, #-8]
1a006b98:	46ab      	mov	fp, r5
1a006b9a:	2e00      	cmp	r6, #0
1a006b9c:	d0f9      	beq.n	1a006b92 <__ssprint_r+0xa2>
1a006b9e:	42ae      	cmp	r6, r5
1a006ba0:	d2b4      	bcs.n	1a006b0c <__ssprint_r+0x1c>
1a006ba2:	4635      	mov	r5, r6
1a006ba4:	46b3      	mov	fp, r6
1a006ba6:	e7e4      	b.n	1a006b72 <__ssprint_r+0x82>
1a006ba8:	4650      	mov	r0, sl
1a006baa:	f7ff fd7b 	bl	1a0066a4 <_realloc_r>
1a006bae:	4603      	mov	r3, r0
1a006bb0:	2800      	cmp	r0, #0
1a006bb2:	d1d4      	bne.n	1a006b5e <__ssprint_r+0x6e>
1a006bb4:	6921      	ldr	r1, [r4, #16]
1a006bb6:	4650      	mov	r0, sl
1a006bb8:	f7fb ff5a 	bl	1a002a70 <_free_r>
1a006bbc:	230c      	movs	r3, #12
1a006bbe:	f8ca 3000 	str.w	r3, [sl]
1a006bc2:	89a3      	ldrh	r3, [r4, #12]
1a006bc4:	2200      	movs	r2, #0
1a006bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006bce:	81a3      	strh	r3, [r4, #12]
1a006bd0:	e9c8 2201 	strd	r2, r2, [r8, #4]
1a006bd4:	b003      	add	sp, #12
1a006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006bda:	2000      	movs	r0, #0
1a006bdc:	f8c8 0004 	str.w	r0, [r8, #4]
1a006be0:	b003      	add	sp, #12
1a006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006be6:	bf00      	nop

1a006be8 <_calloc_r>:
1a006be8:	b510      	push	{r4, lr}
1a006bea:	fb02 f101 	mul.w	r1, r2, r1
1a006bee:	f7fc f85d 	bl	1a002cac <_malloc_r>
1a006bf2:	4604      	mov	r4, r0
1a006bf4:	b168      	cbz	r0, 1a006c12 <_calloc_r+0x2a>
1a006bf6:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a006bfa:	f022 0203 	bic.w	r2, r2, #3
1a006bfe:	3a04      	subs	r2, #4
1a006c00:	2a24      	cmp	r2, #36	; 0x24
1a006c02:	d818      	bhi.n	1a006c36 <_calloc_r+0x4e>
1a006c04:	2a13      	cmp	r2, #19
1a006c06:	d806      	bhi.n	1a006c16 <_calloc_r+0x2e>
1a006c08:	4602      	mov	r2, r0
1a006c0a:	2300      	movs	r3, #0
1a006c0c:	e9c2 3300 	strd	r3, r3, [r2]
1a006c10:	6093      	str	r3, [r2, #8]
1a006c12:	4620      	mov	r0, r4
1a006c14:	bd10      	pop	{r4, pc}
1a006c16:	2300      	movs	r3, #0
1a006c18:	2a1b      	cmp	r2, #27
1a006c1a:	e9c0 3300 	strd	r3, r3, [r0]
1a006c1e:	d90f      	bls.n	1a006c40 <_calloc_r+0x58>
1a006c20:	2a24      	cmp	r2, #36	; 0x24
1a006c22:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a006c26:	bf12      	itee	ne
1a006c28:	f100 0210 	addne.w	r2, r0, #16
1a006c2c:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a006c30:	f100 0218 	addeq.w	r2, r0, #24
1a006c34:	e7e9      	b.n	1a006c0a <_calloc_r+0x22>
1a006c36:	2100      	movs	r1, #0
1a006c38:	f7fc fb8a 	bl	1a003350 <memset>
1a006c3c:	4620      	mov	r0, r4
1a006c3e:	bd10      	pop	{r4, pc}
1a006c40:	f100 0208 	add.w	r2, r0, #8
1a006c44:	e7e1      	b.n	1a006c0a <_calloc_r+0x22>
1a006c46:	bf00      	nop

1a006c48 <__ascii_mbtowc>:
1a006c48:	b082      	sub	sp, #8
1a006c4a:	b149      	cbz	r1, 1a006c60 <__ascii_mbtowc+0x18>
1a006c4c:	b15a      	cbz	r2, 1a006c66 <__ascii_mbtowc+0x1e>
1a006c4e:	b16b      	cbz	r3, 1a006c6c <__ascii_mbtowc+0x24>
1a006c50:	7813      	ldrb	r3, [r2, #0]
1a006c52:	600b      	str	r3, [r1, #0]
1a006c54:	7812      	ldrb	r2, [r2, #0]
1a006c56:	1c10      	adds	r0, r2, #0
1a006c58:	bf18      	it	ne
1a006c5a:	2001      	movne	r0, #1
1a006c5c:	b002      	add	sp, #8
1a006c5e:	4770      	bx	lr
1a006c60:	a901      	add	r1, sp, #4
1a006c62:	2a00      	cmp	r2, #0
1a006c64:	d1f3      	bne.n	1a006c4e <__ascii_mbtowc+0x6>
1a006c66:	4610      	mov	r0, r2
1a006c68:	b002      	add	sp, #8
1a006c6a:	4770      	bx	lr
1a006c6c:	f06f 0001 	mvn.w	r0, #1
1a006c70:	e7f4      	b.n	1a006c5c <__ascii_mbtowc+0x14>
1a006c72:	bf00      	nop

1a006c74 <__ascii_wctomb>:
1a006c74:	b149      	cbz	r1, 1a006c8a <__ascii_wctomb+0x16>
1a006c76:	2aff      	cmp	r2, #255	; 0xff
1a006c78:	d802      	bhi.n	1a006c80 <__ascii_wctomb+0xc>
1a006c7a:	700a      	strb	r2, [r1, #0]
1a006c7c:	2001      	movs	r0, #1
1a006c7e:	4770      	bx	lr
1a006c80:	238a      	movs	r3, #138	; 0x8a
1a006c82:	6003      	str	r3, [r0, #0]
1a006c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006c88:	4770      	bx	lr
1a006c8a:	4608      	mov	r0, r1
1a006c8c:	4770      	bx	lr
1a006c8e:	bf00      	nop

1a006c90 <ads111x_config_bit>:
1a006c90:	0000 0002 0003 0004 0005 0008 0009 000c     ................
1a006ca0:	000f ffff                                   ....

1a006ca4 <ads111x_config_mask>:
1a006ca4:	0003 0004 0008 0010 00e0 0100 0e00 7000     ...............p
1a006cb4:	8000 ffff 6553 5074 696f 746e 203a 6925     ....SetPoint: %i
1a006cc4:	0d2e 000a 6554 706d 7265 7461 7275 3a65     ....Temperature:
1a006cd4:	2520 2e69 0a0d ff00 0803 1a00 07c3 1a00      %i.............
1a006ce4:	07ad 1a00 076d 1a00                         ....m...

1a006cec <ExtRateIn>:
1a006cec:	0000 0000                                   ....

1a006cf0 <GpioButtons>:
1a006cf0:	0400 0800 0900 0901                         ........

1a006cf8 <GpioLeds>:
1a006cf8:	0005 0105 0205 0e00 0b01 0c01               ............

1a006d04 <GpioPorts>:
1a006d04:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a006d14:	0802 ffff                                   ....

1a006d18 <OscRateIn>:
1a006d18:	1b00 00b7                                   ....

1a006d1c <InitClkStates>:
1a006d1c:	0f01 0101                                   ....

1a006d20 <pinmuxing>:
1a006d20:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a006d30:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a006d40:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a006d50:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a006d60:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a006d70:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a006d80:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a006d90:	0206 0057                                   ..W.

1a006d94 <UART_BClock>:
1a006d94:	01c2 01a2 0182 0162                         ......b.

1a006d9c <UART_PClock>:
1a006d9c:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a006dac:	00ff ffff                                   ....

1a006db0 <periph_to_base>:
1a006db0:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a006dc0:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a006dd0:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a006de0:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a006df0:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a006e00:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a006e10:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a006e1c <InitClkStates>:
1a006e1c:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a006e2c:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a006e3c:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a006e4c:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a006e5c:	111a 0001 111b 0001                         ........

1a006e64 <lpcUarts>:
1a006e64:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a006e74:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a006e84:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a006e94:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a006ea4:	0302 0202 0204 001b                         ........

1a006eac <gpioPinsInit>:
1a006eac:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a006ebc:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a006ecc:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a006edc:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a006eec:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a006efc:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a006f0c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a006f1c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a006f2c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a006f3c:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a006f4c:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a006f5c:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a006f6c:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a006f7c:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a006f8c:	020b 000c 0c01 ffff                         ........

1a006f94 <_ctype_>:
1a006f94:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
1a006fa4:	2020 2020 2020 2020 2020 2020 2020 2020                     
1a006fb4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
1a006fc4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
1a006fd4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
1a006fe4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
1a006ff4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
1a007004:	0202 0202 0202 0202 0202 0202 1010 1010     ................
1a007014:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
1a007094:	ff00 ffff 4e49 0046 6e69 0066 414e 004e     ....INF.inf.NAN.
1a0070a4:	616e 006e 3130 3332 3534 3736 3938 6261     nan.0123456789ab
1a0070b4:	6463 6665 0000 0000 3130 3332 3534 3736     cdef....01234567
1a0070c4:	3938 4241 4443 4645 0000 0000 6e28 6c75     89ABCDEF....(nul
1a0070d4:	296c 0000 0030 ffff                         l)..0...

1a0070dc <blanks.8678>:
1a0070dc:	2020 2020 2020 2020 2020 2020 2020 2020                     

1a0070ec <zeroes.8679>:
1a0070ec:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
1a0070fc:	614e 004e 6e49 6966 696e 7974 ff00 ffff     NaN.Infinity....
1a00710c:	ffff ffff                                   ....

1a007110 <__mprec_bigtens>:
1a007110:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
1a007120:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
1a007130:	bf3c 7f73 4fdd 7515                         <.s..O.u

1a007138 <__mprec_tens>:
1a007138:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
1a007148:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
1a007158:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
1a007168:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
1a007178:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
1a007188:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
1a007198:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
1a0071a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
1a0071b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
1a0071c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
1a0071d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
1a0071e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
1a0071f8:	9db4 79d9 7843 44ea                         ...yCx.D

1a007200 <p05.7442>:
1a007200:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
1a007210:	4f50 4953 0058 ffff 002e 0000               POSIX.......
